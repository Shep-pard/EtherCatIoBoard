
EthercatIOBoardSW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011ce4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a44  08011f84  08011f84  00012f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080129c8  080129c8  000139c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080129d0  080129d0  000139d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080129d4  080129d4  000139d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000e8  24000000  080129d8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001784  240000e8  08012ac0  000140e8  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2400186c  08012ac0  0001486c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000140e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024062  00000000  00000000  00014116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004497  00000000  00000000  00038178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e88  00000000  00000000  0003c610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000017c6  00000000  00000000  0003e498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003dedc  00000000  00000000  0003fc5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000273ba  00000000  00000000  0007db3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00188612  00000000  00000000  000a4ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0022d506  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008d58  00000000  00000000  0022d54c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  002362a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000e8 	.word	0x240000e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011f6c 	.word	0x08011f6c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000ec 	.word	0x240000ec
 80002dc:	08011f6c 	.word	0x08011f6c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b088      	sub	sp, #32
 8000384:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000386:	f001 fbfd 	bl	8001b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800038a:	f000 f8ed 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800038e:	f000 fcab 	bl	8000ce8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000392:	f000 fc89 	bl	8000ca8 <MX_DMA_Init>
  MX_FDCAN2_Init();
 8000396:	f000 fa31 	bl	80007fc <MX_FDCAN2_Init>
  MX_SPI1_Init();
 800039a:	f000 fad3 	bl	8000944 <MX_SPI1_Init>
  MX_TIM1_Init();
 800039e:	f000 fb29 	bl	80009f4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80003a2:	f000 fb81 	bl	8000aa8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80003a6:	f000 fbd3 	bl	8000b50 <MX_TIM3_Init>
  MX_TIM4_Init();
 80003aa:	f000 fc27 	bl	8000bfc <MX_TIM4_Init>
  MX_I2C1_Init();
 80003ae:	f000 fa89 	bl	80008c4 <MX_I2C1_Init>
  MX_ADC1_Init();
 80003b2:	f000 f953 	bl	800065c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  ecat_slv_init(&config);
 80003b6:	485e      	ldr	r0, [pc, #376]	@ (8000530 <main+0x1b0>)
 80003b8:	f00c fcf8 	bl	800cdac <ecat_slv_init>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80003bc:	213c      	movs	r1, #60	@ 0x3c
 80003be:	485d      	ldr	r0, [pc, #372]	@ (8000534 <main+0x1b4>)
 80003c0:	f00c f932 	bl	800c628 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80003c4:	213c      	movs	r1, #60	@ 0x3c
 80003c6:	485c      	ldr	r0, [pc, #368]	@ (8000538 <main+0x1b8>)
 80003c8:	f00c f92e 	bl	800c628 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80003cc:	213c      	movs	r1, #60	@ 0x3c
 80003ce:	485b      	ldr	r0, [pc, #364]	@ (800053c <main+0x1bc>)
 80003d0:	f00c f92a 	bl	800c628 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80003d4:	213c      	movs	r1, #60	@ 0x3c
 80003d6:	485a      	ldr	r0, [pc, #360]	@ (8000540 <main+0x1c0>)
 80003d8:	f00c f926 	bl	800c628 <HAL_TIM_Encoder_Start>


  // configure the IO Expanders as in/outputs
  uint8_t allOnes[]  = {0xFF, 0xFF};
 80003dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80003e0:	80bb      	strh	r3, [r7, #4]
  uint8_t allZeros[] = {0x00, 0x00};
 80003e2:	2300      	movs	r3, #0
 80003e4:	803b      	strh	r3, [r7, #0]
  for(uint8_t i = 0; i < 3; i++)
 80003e6:	2300      	movs	r3, #0
 80003e8:	73fb      	strb	r3, [r7, #15]
 80003ea:	e03e      	b.n	800046a <main+0xea>
  {
	  // can't write 4 regs at once.
	  HAL_I2C_Mem_Write(&hi2c1, inputExpanders[i], DIRECTION_REG, 1, allOnes, 2, 100);
 80003ec:	7bfb      	ldrb	r3, [r7, #15]
 80003ee:	4a55      	ldr	r2, [pc, #340]	@ (8000544 <main+0x1c4>)
 80003f0:	5cd3      	ldrb	r3, [r2, r3]
 80003f2:	4619      	mov	r1, r3
 80003f4:	2364      	movs	r3, #100	@ 0x64
 80003f6:	9302      	str	r3, [sp, #8]
 80003f8:	2302      	movs	r3, #2
 80003fa:	9301      	str	r3, [sp, #4]
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	9300      	str	r3, [sp, #0]
 8000400:	2301      	movs	r3, #1
 8000402:	2206      	movs	r2, #6
 8000404:	4850      	ldr	r0, [pc, #320]	@ (8000548 <main+0x1c8>)
 8000406:	f005 ffdb 	bl	80063c0 <HAL_I2C_Mem_Write>
	  HAL_I2C_Mem_Write(&hi2c1, inputExpanders[i], POLARITY_REG, 1, allZeros, 2, 100);
 800040a:	7bfb      	ldrb	r3, [r7, #15]
 800040c:	4a4d      	ldr	r2, [pc, #308]	@ (8000544 <main+0x1c4>)
 800040e:	5cd3      	ldrb	r3, [r2, r3]
 8000410:	4619      	mov	r1, r3
 8000412:	2364      	movs	r3, #100	@ 0x64
 8000414:	9302      	str	r3, [sp, #8]
 8000416:	2302      	movs	r3, #2
 8000418:	9301      	str	r3, [sp, #4]
 800041a:	463b      	mov	r3, r7
 800041c:	9300      	str	r3, [sp, #0]
 800041e:	2301      	movs	r3, #1
 8000420:	2204      	movs	r2, #4
 8000422:	4849      	ldr	r0, [pc, #292]	@ (8000548 <main+0x1c8>)
 8000424:	f005 ffcc 	bl	80063c0 <HAL_I2C_Mem_Write>

	  HAL_I2C_Mem_Write(&hi2c1, outputExpanders[i], POLARITY_REG, 1, allZeros, 2, 100);
 8000428:	7bfb      	ldrb	r3, [r7, #15]
 800042a:	4a48      	ldr	r2, [pc, #288]	@ (800054c <main+0x1cc>)
 800042c:	5cd3      	ldrb	r3, [r2, r3]
 800042e:	4619      	mov	r1, r3
 8000430:	2364      	movs	r3, #100	@ 0x64
 8000432:	9302      	str	r3, [sp, #8]
 8000434:	2302      	movs	r3, #2
 8000436:	9301      	str	r3, [sp, #4]
 8000438:	463b      	mov	r3, r7
 800043a:	9300      	str	r3, [sp, #0]
 800043c:	2301      	movs	r3, #1
 800043e:	2204      	movs	r2, #4
 8000440:	4841      	ldr	r0, [pc, #260]	@ (8000548 <main+0x1c8>)
 8000442:	f005 ffbd 	bl	80063c0 <HAL_I2C_Mem_Write>
	  HAL_I2C_Mem_Write(&hi2c1, outputExpanders[i], DIRECTION_REG, 1, allZeros, 2, 100);
 8000446:	7bfb      	ldrb	r3, [r7, #15]
 8000448:	4a40      	ldr	r2, [pc, #256]	@ (800054c <main+0x1cc>)
 800044a:	5cd3      	ldrb	r3, [r2, r3]
 800044c:	4619      	mov	r1, r3
 800044e:	2364      	movs	r3, #100	@ 0x64
 8000450:	9302      	str	r3, [sp, #8]
 8000452:	2302      	movs	r3, #2
 8000454:	9301      	str	r3, [sp, #4]
 8000456:	463b      	mov	r3, r7
 8000458:	9300      	str	r3, [sp, #0]
 800045a:	2301      	movs	r3, #1
 800045c:	2206      	movs	r2, #6
 800045e:	483a      	ldr	r0, [pc, #232]	@ (8000548 <main+0x1c8>)
 8000460:	f005 ffae 	bl	80063c0 <HAL_I2C_Mem_Write>
  for(uint8_t i = 0; i < 3; i++)
 8000464:	7bfb      	ldrb	r3, [r7, #15]
 8000466:	3301      	adds	r3, #1
 8000468:	73fb      	strb	r3, [r7, #15]
 800046a:	7bfb      	ldrb	r3, [r7, #15]
 800046c:	2b02      	cmp	r3, #2
 800046e:	d9bd      	bls.n	80003ec <main+0x6c>
  }


//  HAL_ADC_Start_DMA(&hadc1, adcVal, 6);
  HAL_ADC_Start_IT(&hadc1);
 8000470:	4837      	ldr	r0, [pc, #220]	@ (8000550 <main+0x1d0>)
 8000472:	f002 f83b 	bl	80024ec <HAL_ADC_Start_IT>

  uint32_t lastI2CTime = HAL_GetTick();
 8000476:	f001 fc0b 	bl	8001c90 <HAL_GetTick>
 800047a:	60b8      	str	r0, [r7, #8]
//		serveIRQ = 0;
//		ESCvar.PrevTime = ESCvar.Time;
//		ecat_slv_poll();
//	 }

	ecat_slv();
 800047c:	f00c fc8c 	bl	800cd98 <ecat_slv>

	 if(gotNewData && (HAL_GetTick() - lastI2CTime > timeout))
 8000480:	4b34      	ldr	r3, [pc, #208]	@ (8000554 <main+0x1d4>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	b2db      	uxtb	r3, r3
 8000486:	2b00      	cmp	r3, #0
 8000488:	d0f8      	beq.n	800047c <main+0xfc>
 800048a:	f001 fc01 	bl	8001c90 <HAL_GetTick>
 800048e:	4602      	mov	r2, r0
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	1ad3      	subs	r3, r2, r3
 8000494:	22c8      	movs	r2, #200	@ 0xc8
 8000496:	4293      	cmp	r3, r2
 8000498:	d9f0      	bls.n	800047c <main+0xfc>
	 {
		 gotNewData = false;
 800049a:	4b2e      	ldr	r3, [pc, #184]	@ (8000554 <main+0x1d4>)
 800049c:	2200      	movs	r2, #0
 800049e:	701a      	strb	r2, [r3, #0]
		 lastI2CTime = HAL_GetTick();
 80004a0:	f001 fbf6 	bl	8001c90 <HAL_GetTick>
 80004a4:	60b8      	str	r0, [r7, #8]
		 for(uint8_t i = 0; i < 3; i++)
 80004a6:	2300      	movs	r3, #0
 80004a8:	71fb      	strb	r3, [r7, #7]
 80004aa:	e03d      	b.n	8000528 <main+0x1a8>
		 {
			 HAL_I2C_Mem_Read(&hi2c1, inputExpanders[i], INPUT_REG, 1, (uint8_t*)&inputData[i], 2, 100);
 80004ac:	79fb      	ldrb	r3, [r7, #7]
 80004ae:	4a25      	ldr	r2, [pc, #148]	@ (8000544 <main+0x1c4>)
 80004b0:	5cd3      	ldrb	r3, [r2, r3]
 80004b2:	4619      	mov	r1, r3
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	005b      	lsls	r3, r3, #1
 80004b8:	4a27      	ldr	r2, [pc, #156]	@ (8000558 <main+0x1d8>)
 80004ba:	4413      	add	r3, r2
 80004bc:	2264      	movs	r2, #100	@ 0x64
 80004be:	9202      	str	r2, [sp, #8]
 80004c0:	2202      	movs	r2, #2
 80004c2:	9201      	str	r2, [sp, #4]
 80004c4:	9300      	str	r3, [sp, #0]
 80004c6:	2301      	movs	r3, #1
 80004c8:	2200      	movs	r2, #0
 80004ca:	481f      	ldr	r0, [pc, #124]	@ (8000548 <main+0x1c8>)
 80004cc:	f006 f88c 	bl	80065e8 <HAL_I2C_Mem_Read>
			 if(newOutputData[i] != outputData[i] && isInOp)
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	4a22      	ldr	r2, [pc, #136]	@ (800055c <main+0x1dc>)
 80004d4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	4921      	ldr	r1, [pc, #132]	@ (8000560 <main+0x1e0>)
 80004dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d01e      	beq.n	8000522 <main+0x1a2>
 80004e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000564 <main+0x1e4>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d019      	beq.n	8000522 <main+0x1a2>
			 {
				 HAL_I2C_Mem_Write(&hi2c1, outputExpanders[i], OUTPUT_REG, 1, (uint8_t*)&newOutputData[i], 2, 100);
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	4a16      	ldr	r2, [pc, #88]	@ (800054c <main+0x1cc>)
 80004f2:	5cd3      	ldrb	r3, [r2, r3]
 80004f4:	4619      	mov	r1, r3
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	4a18      	ldr	r2, [pc, #96]	@ (800055c <main+0x1dc>)
 80004fc:	4413      	add	r3, r2
 80004fe:	2264      	movs	r2, #100	@ 0x64
 8000500:	9202      	str	r2, [sp, #8]
 8000502:	2202      	movs	r2, #2
 8000504:	9201      	str	r2, [sp, #4]
 8000506:	9300      	str	r3, [sp, #0]
 8000508:	2301      	movs	r3, #1
 800050a:	2202      	movs	r2, #2
 800050c:	480e      	ldr	r0, [pc, #56]	@ (8000548 <main+0x1c8>)
 800050e:	f005 ff57 	bl	80063c0 <HAL_I2C_Mem_Write>
				 outputData[i] = newOutputData[i];
 8000512:	79fa      	ldrb	r2, [r7, #7]
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	4911      	ldr	r1, [pc, #68]	@ (800055c <main+0x1dc>)
 8000518:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800051c:	4a10      	ldr	r2, [pc, #64]	@ (8000560 <main+0x1e0>)
 800051e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		 for(uint8_t i = 0; i < 3; i++)
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	3301      	adds	r3, #1
 8000526:	71fb      	strb	r3, [r7, #7]
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	2b02      	cmp	r3, #2
 800052c:	d9be      	bls.n	80004ac <main+0x12c>
	ecat_slv();
 800052e:	e7a5      	b.n	800047c <main+0xfc>
 8000530:	24000000 	.word	0x24000000
 8000534:	2400035c 	.word	0x2400035c
 8000538:	240003a8 	.word	0x240003a8
 800053c:	240003f4 	.word	0x240003f4
 8000540:	24000440 	.word	0x24000440
 8000544:	24000050 	.word	0x24000050
 8000548:	24000280 	.word	0x24000280
 800054c:	24000054 	.word	0x24000054
 8000550:	24000104 	.word	0x24000104
 8000554:	240004e0 	.word	0x240004e0
 8000558:	240004bc 	.word	0x240004bc
 800055c:	240004cc 	.word	0x240004cc
 8000560:	240004c4 	.word	0x240004c4
 8000564:	240004e1 	.word	0x240004e1

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b09c      	sub	sp, #112	@ 0x70
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000572:	224c      	movs	r2, #76	@ 0x4c
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f010 fe87 	bl	801128a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2220      	movs	r2, #32
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f010 fe81 	bl	801128a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000588:	2002      	movs	r0, #2
 800058a:	f007 fb69 	bl	8007c60 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800058e:	2300      	movs	r3, #0
 8000590:	603b      	str	r3, [r7, #0]
 8000592:	4b30      	ldr	r3, [pc, #192]	@ (8000654 <SystemClock_Config+0xec>)
 8000594:	699b      	ldr	r3, [r3, #24]
 8000596:	4a2f      	ldr	r2, [pc, #188]	@ (8000654 <SystemClock_Config+0xec>)
 8000598:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800059c:	6193      	str	r3, [r2, #24]
 800059e:	4b2d      	ldr	r3, [pc, #180]	@ (8000654 <SystemClock_Config+0xec>)
 80005a0:	699b      	ldr	r3, [r3, #24]
 80005a2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005a6:	603b      	str	r3, [r7, #0]
 80005a8:	4b2b      	ldr	r3, [pc, #172]	@ (8000658 <SystemClock_Config+0xf0>)
 80005aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005ac:	4a2a      	ldr	r2, [pc, #168]	@ (8000658 <SystemClock_Config+0xf0>)
 80005ae:	f043 0301 	orr.w	r3, r3, #1
 80005b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80005b4:	4b28      	ldr	r3, [pc, #160]	@ (8000658 <SystemClock_Config+0xf0>)
 80005b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005b8:	f003 0301 	and.w	r3, r3, #1
 80005bc:	603b      	str	r3, [r7, #0]
 80005be:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005c0:	bf00      	nop
 80005c2:	4b24      	ldr	r3, [pc, #144]	@ (8000654 <SystemClock_Config+0xec>)
 80005c4:	699b      	ldr	r3, [r3, #24]
 80005c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80005ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80005ce:	d1f8      	bne.n	80005c2 <SystemClock_Config+0x5a>


  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d0:	2301      	movs	r3, #1
 80005d2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005da:	2302      	movs	r3, #2
 80005dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005de:	2302      	movs	r3, #2
 80005e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80005e2:	2305      	movs	r3, #5
 80005e4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 80005e6:	23c0      	movs	r3, #192	@ 0xc0
 80005e8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80005ea:	2302      	movs	r3, #2
 80005ec:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80005ee:	2306      	movs	r3, #6
 80005f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80005f6:	2308      	movs	r3, #8
 80005f8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005fa:	2300      	movs	r3, #0
 80005fc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000602:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000606:	4618      	mov	r0, r3
 8000608:	f007 fb64 	bl	8007cd4 <HAL_RCC_OscConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000612:	f000 fd19 	bl	8001048 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000616:	233f      	movs	r3, #63	@ 0x3f
 8000618:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061a:	2303      	movs	r3, #3
 800061c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000622:	2308      	movs	r3, #8
 8000624:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000626:	2340      	movs	r3, #64	@ 0x40
 8000628:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800062a:	2340      	movs	r3, #64	@ 0x40
 800062c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800062e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000632:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000634:	2340      	movs	r3, #64	@ 0x40
 8000636:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2104      	movs	r1, #4
 800063c:	4618      	mov	r0, r3
 800063e:	f007 ffa3 	bl	8008588 <HAL_RCC_ClockConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000648:	f000 fcfe 	bl	8001048 <Error_Handler>
  }
}
 800064c:	bf00      	nop
 800064e:	3770      	adds	r7, #112	@ 0x70
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	58024800 	.word	0x58024800
 8000658:	58000400 	.word	0x58000400

0800065c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	@ 0x28
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800066e:	463b      	mov	r3, r7
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
 800067c:	615a      	str	r2, [r3, #20]
 800067e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000680:	4b56      	ldr	r3, [pc, #344]	@ (80007dc <MX_ADC1_Init+0x180>)
 8000682:	4a57      	ldr	r2, [pc, #348]	@ (80007e0 <MX_ADC1_Init+0x184>)
 8000684:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8000686:	4b55      	ldr	r3, [pc, #340]	@ (80007dc <MX_ADC1_Init+0x180>)
 8000688:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800068c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800068e:	4b53      	ldr	r3, [pc, #332]	@ (80007dc <MX_ADC1_Init+0x180>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000694:	4b51      	ldr	r3, [pc, #324]	@ (80007dc <MX_ADC1_Init+0x180>)
 8000696:	2201      	movs	r2, #1
 8000698:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800069a:	4b50      	ldr	r3, [pc, #320]	@ (80007dc <MX_ADC1_Init+0x180>)
 800069c:	2204      	movs	r2, #4
 800069e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006a0:	4b4e      	ldr	r3, [pc, #312]	@ (80007dc <MX_ADC1_Init+0x180>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006a6:	4b4d      	ldr	r3, [pc, #308]	@ (80007dc <MX_ADC1_Init+0x180>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 6;
 80006ac:	4b4b      	ldr	r3, [pc, #300]	@ (80007dc <MX_ADC1_Init+0x180>)
 80006ae:	2206      	movs	r2, #6
 80006b0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006b2:	4b4a      	ldr	r3, [pc, #296]	@ (80007dc <MX_ADC1_Init+0x180>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006b8:	4b48      	ldr	r3, [pc, #288]	@ (80007dc <MX_ADC1_Init+0x180>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006be:	4b47      	ldr	r3, [pc, #284]	@ (80007dc <MX_ADC1_Init+0x180>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80006c4:	4b45      	ldr	r3, [pc, #276]	@ (80007dc <MX_ADC1_Init+0x180>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006ca:	4b44      	ldr	r3, [pc, #272]	@ (80007dc <MX_ADC1_Init+0x180>)
 80006cc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80006d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006d2:	4b42      	ldr	r3, [pc, #264]	@ (80007dc <MX_ADC1_Init+0x180>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006d8:	4b40      	ldr	r3, [pc, #256]	@ (80007dc <MX_ADC1_Init+0x180>)
 80006da:	2200      	movs	r2, #0
 80006dc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 80006e0:	4b3e      	ldr	r3, [pc, #248]	@ (80007dc <MX_ADC1_Init+0x180>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006e6:	483d      	ldr	r0, [pc, #244]	@ (80007dc <MX_ADC1_Init+0x180>)
 80006e8:	f001 fd5e 	bl	80021a8 <HAL_ADC_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 80006f2:	f000 fca9 	bl	8001048 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	4619      	mov	r1, r3
 8000700:	4836      	ldr	r0, [pc, #216]	@ (80007dc <MX_ADC1_Init+0x180>)
 8000702:	f002 ff6b 	bl	80035dc <HAL_ADCEx_MultiModeConfigChannel>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800070c:	f000 fc9c 	bl	8001048 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000710:	4b34      	ldr	r3, [pc, #208]	@ (80007e4 <MX_ADC1_Init+0x188>)
 8000712:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000714:	2306      	movs	r3, #6
 8000716:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 8000718:	2304      	movs	r3, #4
 800071a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800071c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000720:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000722:	2304      	movs	r3, #4
 8000724:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800072a:	2300      	movs	r3, #0
 800072c:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800072e:	463b      	mov	r3, r7
 8000730:	4619      	mov	r1, r3
 8000732:	482a      	ldr	r0, [pc, #168]	@ (80007dc <MX_ADC1_Init+0x180>)
 8000734:	f002 fa74 	bl	8002c20 <HAL_ADC_ConfigChannel>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800073e:	f000 fc83 	bl	8001048 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000742:	4b29      	ldr	r3, [pc, #164]	@ (80007e8 <MX_ADC1_Init+0x18c>)
 8000744:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000746:	230c      	movs	r3, #12
 8000748:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	4619      	mov	r1, r3
 800074e:	4823      	ldr	r0, [pc, #140]	@ (80007dc <MX_ADC1_Init+0x180>)
 8000750:	f002 fa66 	bl	8002c20 <HAL_ADC_ConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 800075a:	f000 fc75 	bl	8001048 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 800075e:	4b23      	ldr	r3, [pc, #140]	@ (80007ec <MX_ADC1_Init+0x190>)
 8000760:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000762:	2312      	movs	r3, #18
 8000764:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000766:	463b      	mov	r3, r7
 8000768:	4619      	mov	r1, r3
 800076a:	481c      	ldr	r0, [pc, #112]	@ (80007dc <MX_ADC1_Init+0x180>)
 800076c:	f002 fa58 	bl	8002c20 <HAL_ADC_ConfigChannel>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8000776:	f000 fc67 	bl	8001048 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800077a:	4b1d      	ldr	r3, [pc, #116]	@ (80007f0 <MX_ADC1_Init+0x194>)
 800077c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800077e:	2318      	movs	r3, #24
 8000780:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000782:	463b      	mov	r3, r7
 8000784:	4619      	mov	r1, r3
 8000786:	4815      	ldr	r0, [pc, #84]	@ (80007dc <MX_ADC1_Init+0x180>)
 8000788:	f002 fa4a 	bl	8002c20 <HAL_ADC_ConfigChannel>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 8000792:	f000 fc59 	bl	8001048 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000796:	4b17      	ldr	r3, [pc, #92]	@ (80007f4 <MX_ADC1_Init+0x198>)
 8000798:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800079a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800079e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a0:	463b      	mov	r3, r7
 80007a2:	4619      	mov	r1, r3
 80007a4:	480d      	ldr	r0, [pc, #52]	@ (80007dc <MX_ADC1_Init+0x180>)
 80007a6:	f002 fa3b 	bl	8002c20 <HAL_ADC_ConfigChannel>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 80007b0:	f000 fc4a 	bl	8001048 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80007b4:	4b10      	ldr	r3, [pc, #64]	@ (80007f8 <MX_ADC1_Init+0x19c>)
 80007b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80007b8:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80007bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007be:	463b      	mov	r3, r7
 80007c0:	4619      	mov	r1, r3
 80007c2:	4806      	ldr	r0, [pc, #24]	@ (80007dc <MX_ADC1_Init+0x180>)
 80007c4:	f002 fa2c 	bl	8002c20 <HAL_ADC_ConfigChannel>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_ADC1_Init+0x176>
  {
    Error_Handler();
 80007ce:	f000 fc3b 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	3728      	adds	r7, #40	@ 0x28
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	24000104 	.word	0x24000104
 80007e0:	40022000 	.word	0x40022000
 80007e4:	3ac04000 	.word	0x3ac04000
 80007e8:	3ef08000 	.word	0x3ef08000
 80007ec:	43210000 	.word	0x43210000
 80007f0:	2e300800 	.word	0x2e300800
 80007f4:	25b00200 	.word	0x25b00200
 80007f8:	21800100 	.word	0x21800100

080007fc <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000800:	4b2e      	ldr	r3, [pc, #184]	@ (80008bc <MX_FDCAN2_Init+0xc0>)
 8000802:	4a2f      	ldr	r2, [pc, #188]	@ (80008c0 <MX_FDCAN2_Init+0xc4>)
 8000804:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000806:	4b2d      	ldr	r3, [pc, #180]	@ (80008bc <MX_FDCAN2_Init+0xc0>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800080c:	4b2b      	ldr	r3, [pc, #172]	@ (80008bc <MX_FDCAN2_Init+0xc0>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000812:	4b2a      	ldr	r3, [pc, #168]	@ (80008bc <MX_FDCAN2_Init+0xc0>)
 8000814:	2200      	movs	r2, #0
 8000816:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000818:	4b28      	ldr	r3, [pc, #160]	@ (80008bc <MX_FDCAN2_Init+0xc0>)
 800081a:	2200      	movs	r2, #0
 800081c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800081e:	4b27      	ldr	r3, [pc, #156]	@ (80008bc <MX_FDCAN2_Init+0xc0>)
 8000820:	2200      	movs	r2, #0
 8000822:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000824:	4b25      	ldr	r3, [pc, #148]	@ (80008bc <MX_FDCAN2_Init+0xc0>)
 8000826:	2210      	movs	r2, #16
 8000828:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800082a:	4b24      	ldr	r3, [pc, #144]	@ (80008bc <MX_FDCAN2_Init+0xc0>)
 800082c:	2201      	movs	r2, #1
 800082e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 1;
 8000830:	4b22      	ldr	r3, [pc, #136]	@ (80008bc <MX_FDCAN2_Init+0xc0>)
 8000832:	2201      	movs	r2, #1
 8000834:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 1;
 8000836:	4b21      	ldr	r3, [pc, #132]	@ (80008bc <MX_FDCAN2_Init+0xc0>)
 8000838:	2201      	movs	r2, #1
 800083a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800083c:	4b1f      	ldr	r3, [pc, #124]	@ (80008bc <MX_FDCAN2_Init+0xc0>)
 800083e:	2201      	movs	r2, #1
 8000840:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000842:	4b1e      	ldr	r3, [pc, #120]	@ (80008bc <MX_FDCAN2_Init+0xc0>)
 8000844:	2201      	movs	r2, #1
 8000846:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000848:	4b1c      	ldr	r3, [pc, #112]	@ (80008bc <MX_FDCAN2_Init+0xc0>)
 800084a:	2201      	movs	r2, #1
 800084c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800084e:	4b1b      	ldr	r3, [pc, #108]	@ (80008bc <MX_FDCAN2_Init+0xc0>)
 8000850:	2201      	movs	r2, #1
 8000852:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000854:	4b19      	ldr	r3, [pc, #100]	@ (80008bc <MX_FDCAN2_Init+0xc0>)
 8000856:	2200      	movs	r2, #0
 8000858:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 800085a:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <MX_FDCAN2_Init+0xc0>)
 800085c:	2200      	movs	r2, #0
 800085e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000860:	4b16      	ldr	r3, [pc, #88]	@ (80008bc <MX_FDCAN2_Init+0xc0>)
 8000862:	2200      	movs	r2, #0
 8000864:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000866:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <MX_FDCAN2_Init+0xc0>)
 8000868:	2200      	movs	r2, #0
 800086a:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800086c:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <MX_FDCAN2_Init+0xc0>)
 800086e:	2204      	movs	r2, #4
 8000870:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000872:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <MX_FDCAN2_Init+0xc0>)
 8000874:	2200      	movs	r2, #0
 8000876:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000878:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <MX_FDCAN2_Init+0xc0>)
 800087a:	2204      	movs	r2, #4
 800087c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 800087e:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <MX_FDCAN2_Init+0xc0>)
 8000880:	2200      	movs	r2, #0
 8000882:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000884:	4b0d      	ldr	r3, [pc, #52]	@ (80008bc <MX_FDCAN2_Init+0xc0>)
 8000886:	2204      	movs	r2, #4
 8000888:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 800088a:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <MX_FDCAN2_Init+0xc0>)
 800088c:	2200      	movs	r2, #0
 800088e:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000890:	4b0a      	ldr	r3, [pc, #40]	@ (80008bc <MX_FDCAN2_Init+0xc0>)
 8000892:	2200      	movs	r2, #0
 8000894:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000896:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <MX_FDCAN2_Init+0xc0>)
 8000898:	2200      	movs	r2, #0
 800089a:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800089c:	4b07      	ldr	r3, [pc, #28]	@ (80008bc <MX_FDCAN2_Init+0xc0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80008a2:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <MX_FDCAN2_Init+0xc0>)
 80008a4:	2204      	movs	r2, #4
 80008a6:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80008a8:	4804      	ldr	r0, [pc, #16]	@ (80008bc <MX_FDCAN2_Init+0xc0>)
 80008aa:	f004 ff9b 	bl	80057e4 <HAL_FDCAN_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 80008b4:	f000 fbc8 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	240001e0 	.word	0x240001e0
 80008c0:	4000a400 	.word	0x4000a400

080008c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000938 <MX_I2C1_Init+0x74>)
 80008ca:	4a1c      	ldr	r2, [pc, #112]	@ (800093c <MX_I2C1_Init+0x78>)
 80008cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 80008ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000938 <MX_I2C1_Init+0x74>)
 80008d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000940 <MX_I2C1_Init+0x7c>)
 80008d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008d4:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <MX_I2C1_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008da:	4b17      	ldr	r3, [pc, #92]	@ (8000938 <MX_I2C1_Init+0x74>)
 80008dc:	2201      	movs	r2, #1
 80008de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e0:	4b15      	ldr	r3, [pc, #84]	@ (8000938 <MX_I2C1_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008e6:	4b14      	ldr	r3, [pc, #80]	@ (8000938 <MX_I2C1_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008ec:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <MX_I2C1_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008f2:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <MX_I2C1_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <MX_I2C1_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008fe:	480e      	ldr	r0, [pc, #56]	@ (8000938 <MX_I2C1_Init+0x74>)
 8000900:	f005 fcc2 	bl	8006288 <HAL_I2C_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800090a:	f000 fb9d 	bl	8001048 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800090e:	2100      	movs	r1, #0
 8000910:	4809      	ldr	r0, [pc, #36]	@ (8000938 <MX_I2C1_Init+0x74>)
 8000912:	f007 f90d 	bl	8007b30 <HAL_I2CEx_ConfigAnalogFilter>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800091c:	f000 fb94 	bl	8001048 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000920:	2100      	movs	r1, #0
 8000922:	4805      	ldr	r0, [pc, #20]	@ (8000938 <MX_I2C1_Init+0x74>)
 8000924:	f007 f94f 	bl	8007bc6 <HAL_I2CEx_ConfigDigitalFilter>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800092e:	f000 fb8b 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	24000280 	.word	0x24000280
 800093c:	40005400 	.word	0x40005400
 8000940:	00b03fdb 	.word	0x00b03fdb

08000944 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000948:	4b28      	ldr	r3, [pc, #160]	@ (80009ec <MX_SPI1_Init+0xa8>)
 800094a:	4a29      	ldr	r2, [pc, #164]	@ (80009f0 <MX_SPI1_Init+0xac>)
 800094c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800094e:	4b27      	ldr	r3, [pc, #156]	@ (80009ec <MX_SPI1_Init+0xa8>)
 8000950:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000954:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000956:	4b25      	ldr	r3, [pc, #148]	@ (80009ec <MX_SPI1_Init+0xa8>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800095c:	4b23      	ldr	r3, [pc, #140]	@ (80009ec <MX_SPI1_Init+0xa8>)
 800095e:	2207      	movs	r2, #7
 8000960:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000962:	4b22      	ldr	r3, [pc, #136]	@ (80009ec <MX_SPI1_Init+0xa8>)
 8000964:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000968:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800096a:	4b20      	ldr	r3, [pc, #128]	@ (80009ec <MX_SPI1_Init+0xa8>)
 800096c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000970:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000972:	4b1e      	ldr	r3, [pc, #120]	@ (80009ec <MX_SPI1_Init+0xa8>)
 8000974:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000978:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800097a:	4b1c      	ldr	r3, [pc, #112]	@ (80009ec <MX_SPI1_Init+0xa8>)
 800097c:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8000980:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000982:	4b1a      	ldr	r3, [pc, #104]	@ (80009ec <MX_SPI1_Init+0xa8>)
 8000984:	2200      	movs	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000988:	4b18      	ldr	r3, [pc, #96]	@ (80009ec <MX_SPI1_Init+0xa8>)
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800098e:	4b17      	ldr	r3, [pc, #92]	@ (80009ec <MX_SPI1_Init+0xa8>)
 8000990:	2200      	movs	r2, #0
 8000992:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000994:	4b15      	ldr	r3, [pc, #84]	@ (80009ec <MX_SPI1_Init+0xa8>)
 8000996:	2200      	movs	r2, #0
 8000998:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800099a:	4b14      	ldr	r3, [pc, #80]	@ (80009ec <MX_SPI1_Init+0xa8>)
 800099c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009a0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009a2:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <MX_SPI1_Init+0xa8>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009a8:	4b10      	ldr	r3, [pc, #64]	@ (80009ec <MX_SPI1_Init+0xa8>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009ae:	4b0f      	ldr	r3, [pc, #60]	@ (80009ec <MX_SPI1_Init+0xa8>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009b4:	4b0d      	ldr	r3, [pc, #52]	@ (80009ec <MX_SPI1_Init+0xa8>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009ba:	4b0c      	ldr	r3, [pc, #48]	@ (80009ec <MX_SPI1_Init+0xa8>)
 80009bc:	2200      	movs	r2, #0
 80009be:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009c0:	4b0a      	ldr	r3, [pc, #40]	@ (80009ec <MX_SPI1_Init+0xa8>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009c6:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <MX_SPI1_Init+0xa8>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009cc:	4b07      	ldr	r3, [pc, #28]	@ (80009ec <MX_SPI1_Init+0xa8>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009d2:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <MX_SPI1_Init+0xa8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009d8:	4804      	ldr	r0, [pc, #16]	@ (80009ec <MX_SPI1_Init+0xa8>)
 80009da:	f00a fe49 	bl	800b670 <HAL_SPI_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 80009e4:	f000 fb30 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	240002d4 	.word	0x240002d4
 80009f0:	40013000 	.word	0x40013000

080009f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08c      	sub	sp, #48	@ 0x30
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009fa:	f107 030c 	add.w	r3, r7, #12
 80009fe:	2224      	movs	r2, #36	@ 0x24
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f010 fc41 	bl	801128a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a08:	463b      	mov	r3, r7
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a12:	4b23      	ldr	r3, [pc, #140]	@ (8000aa0 <MX_TIM1_Init+0xac>)
 8000a14:	4a23      	ldr	r2, [pc, #140]	@ (8000aa4 <MX_TIM1_Init+0xb0>)
 8000a16:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a18:	4b21      	ldr	r3, [pc, #132]	@ (8000aa0 <MX_TIM1_Init+0xac>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1e:	4b20      	ldr	r3, [pc, #128]	@ (8000aa0 <MX_TIM1_Init+0xac>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a24:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa0 <MX_TIM1_Init+0xac>)
 8000a26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a2a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa0 <MX_TIM1_Init+0xac>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a32:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa0 <MX_TIM1_Init+0xac>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a38:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <MX_TIM1_Init+0xac>)
 8000a3a:	2280      	movs	r2, #128	@ 0x80
 8000a3c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a42:	2300      	movs	r3, #0
 8000a44:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a46:	2301      	movs	r3, #1
 8000a48:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000a4e:	230a      	movs	r3, #10
 8000a50:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a56:	2301      	movs	r3, #1
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8000a5e:	230a      	movs	r3, #10
 8000a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000a62:	f107 030c 	add.w	r3, r7, #12
 8000a66:	4619      	mov	r1, r3
 8000a68:	480d      	ldr	r0, [pc, #52]	@ (8000aa0 <MX_TIM1_Init+0xac>)
 8000a6a:	f00b fd37 	bl	800c4dc <HAL_TIM_Encoder_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000a74:	f000 fae8 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a84:	463b      	mov	r3, r7
 8000a86:	4619      	mov	r1, r3
 8000a88:	4805      	ldr	r0, [pc, #20]	@ (8000aa0 <MX_TIM1_Init+0xac>)
 8000a8a:	f00b ff21 	bl	800c8d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000a94:	f000 fad8 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	3730      	adds	r7, #48	@ 0x30
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	2400035c 	.word	0x2400035c
 8000aa4:	40010000 	.word	0x40010000

08000aa8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08c      	sub	sp, #48	@ 0x30
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	2224      	movs	r2, #36	@ 0x24
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f010 fbe7 	bl	801128a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000abc:	463b      	mov	r3, r7
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ac6:	4b21      	ldr	r3, [pc, #132]	@ (8000b4c <MX_TIM2_Init+0xa4>)
 8000ac8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000acc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ace:	4b1f      	ldr	r3, [pc, #124]	@ (8000b4c <MX_TIM2_Init+0xa4>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b4c <MX_TIM2_Init+0xa4>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ada:	4b1c      	ldr	r3, [pc, #112]	@ (8000b4c <MX_TIM2_Init+0xa4>)
 8000adc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b4c <MX_TIM2_Init+0xa4>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ae8:	4b18      	ldr	r3, [pc, #96]	@ (8000b4c <MX_TIM2_Init+0xa4>)
 8000aea:	2280      	movs	r2, #128	@ 0x80
 8000aec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000aee:	2301      	movs	r3, #1
 8000af0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000af6:	2301      	movs	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000afe:	230a      	movs	r3, #10
 8000b00:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b02:	2300      	movs	r3, #0
 8000b04:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b06:	2301      	movs	r3, #1
 8000b08:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8000b0e:	230a      	movs	r3, #10
 8000b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000b12:	f107 030c 	add.w	r3, r7, #12
 8000b16:	4619      	mov	r1, r3
 8000b18:	480c      	ldr	r0, [pc, #48]	@ (8000b4c <MX_TIM2_Init+0xa4>)
 8000b1a:	f00b fcdf 	bl	800c4dc <HAL_TIM_Encoder_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000b24:	f000 fa90 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b30:	463b      	mov	r3, r7
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <MX_TIM2_Init+0xa4>)
 8000b36:	f00b fecb 	bl	800c8d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000b40:	f000 fa82 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	3730      	adds	r7, #48	@ 0x30
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	240003a8 	.word	0x240003a8

08000b50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08c      	sub	sp, #48	@ 0x30
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b56:	f107 030c 	add.w	r3, r7, #12
 8000b5a:	2224      	movs	r2, #36	@ 0x24
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f010 fb93 	bl	801128a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b64:	463b      	mov	r3, r7
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b6e:	4b21      	ldr	r3, [pc, #132]	@ (8000bf4 <MX_TIM3_Init+0xa4>)
 8000b70:	4a21      	ldr	r2, [pc, #132]	@ (8000bf8 <MX_TIM3_Init+0xa8>)
 8000b72:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b74:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf4 <MX_TIM3_Init+0xa4>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf4 <MX_TIM3_Init+0xa4>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b80:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf4 <MX_TIM3_Init+0xa4>)
 8000b82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b88:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf4 <MX_TIM3_Init+0xa4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b8e:	4b19      	ldr	r3, [pc, #100]	@ (8000bf4 <MX_TIM3_Init+0xa4>)
 8000b90:	2280      	movs	r2, #128	@ 0x80
 8000b92:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b94:	2301      	movs	r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000ba4:	230a      	movs	r3, #10
 8000ba6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bac:	2301      	movs	r3, #1
 8000bae:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8000bb4:	230a      	movs	r3, #10
 8000bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000bb8:	f107 030c 	add.w	r3, r7, #12
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	480d      	ldr	r0, [pc, #52]	@ (8000bf4 <MX_TIM3_Init+0xa4>)
 8000bc0:	f00b fc8c 	bl	800c4dc <HAL_TIM_Encoder_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000bca:	f000 fa3d 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4806      	ldr	r0, [pc, #24]	@ (8000bf4 <MX_TIM3_Init+0xa4>)
 8000bdc:	f00b fe78 	bl	800c8d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000be6:	f000 fa2f 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	3730      	adds	r7, #48	@ 0x30
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	240003f4 	.word	0x240003f4
 8000bf8:	40000400 	.word	0x40000400

08000bfc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08c      	sub	sp, #48	@ 0x30
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c02:	f107 030c 	add.w	r3, r7, #12
 8000c06:	2224      	movs	r2, #36	@ 0x24
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f010 fb3d 	bl	801128a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c10:	463b      	mov	r3, r7
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c1a:	4b21      	ldr	r3, [pc, #132]	@ (8000ca0 <MX_TIM4_Init+0xa4>)
 8000c1c:	4a21      	ldr	r2, [pc, #132]	@ (8000ca4 <MX_TIM4_Init+0xa8>)
 8000c1e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca0 <MX_TIM4_Init+0xa4>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c26:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca0 <MX_TIM4_Init+0xa4>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca0 <MX_TIM4_Init+0xa4>)
 8000c2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c32:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c34:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca0 <MX_TIM4_Init+0xa4>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <MX_TIM4_Init+0xa4>)
 8000c3c:	2280      	movs	r2, #128	@ 0x80
 8000c3e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c40:	2301      	movs	r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c44:	2300      	movs	r3, #0
 8000c46:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000c50:	230a      	movs	r3, #10
 8000c52:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c54:	2300      	movs	r3, #0
 8000c56:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8000c60:	230a      	movs	r3, #10
 8000c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	4619      	mov	r1, r3
 8000c6a:	480d      	ldr	r0, [pc, #52]	@ (8000ca0 <MX_TIM4_Init+0xa4>)
 8000c6c:	f00b fc36 	bl	800c4dc <HAL_TIM_Encoder_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000c76:	f000 f9e7 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c82:	463b      	mov	r3, r7
 8000c84:	4619      	mov	r1, r3
 8000c86:	4806      	ldr	r0, [pc, #24]	@ (8000ca0 <MX_TIM4_Init+0xa4>)
 8000c88:	f00b fe22 	bl	800c8d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000c92:	f000 f9d9 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c96:	bf00      	nop
 8000c98:	3730      	adds	r7, #48	@ 0x30
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	24000440 	.word	0x24000440
 8000ca4:	40000800 	.word	0x40000800

08000ca8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce4 <MX_DMA_Init+0x3c>)
 8000cb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cb4:	4a0b      	ldr	r2, [pc, #44]	@ (8000ce4 <MX_DMA_Init+0x3c>)
 8000cb6:	f043 0301 	orr.w	r3, r3, #1
 8000cba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000cbe:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <MX_DMA_Init+0x3c>)
 8000cc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2100      	movs	r1, #0
 8000cd0:	200b      	movs	r0, #11
 8000cd2:	f002 fe3c 	bl	800394e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000cd6:	200b      	movs	r0, #11
 8000cd8:	f002 fe53 	bl	8003982 <HAL_NVIC_EnableIRQ>

}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	58024400 	.word	0x58024400

08000ce8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08c      	sub	sp, #48	@ 0x30
 8000cec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
 8000cfc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cfe:	4b64      	ldr	r3, [pc, #400]	@ (8000e90 <MX_GPIO_Init+0x1a8>)
 8000d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d04:	4a62      	ldr	r2, [pc, #392]	@ (8000e90 <MX_GPIO_Init+0x1a8>)
 8000d06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d0e:	4b60      	ldr	r3, [pc, #384]	@ (8000e90 <MX_GPIO_Init+0x1a8>)
 8000d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d18:	61bb      	str	r3, [r7, #24]
 8000d1a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1c:	4b5c      	ldr	r3, [pc, #368]	@ (8000e90 <MX_GPIO_Init+0x1a8>)
 8000d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d22:	4a5b      	ldr	r2, [pc, #364]	@ (8000e90 <MX_GPIO_Init+0x1a8>)
 8000d24:	f043 0304 	orr.w	r3, r3, #4
 8000d28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d2c:	4b58      	ldr	r3, [pc, #352]	@ (8000e90 <MX_GPIO_Init+0x1a8>)
 8000d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d32:	f003 0304 	and.w	r3, r3, #4
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	4b55      	ldr	r3, [pc, #340]	@ (8000e90 <MX_GPIO_Init+0x1a8>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d40:	4a53      	ldr	r2, [pc, #332]	@ (8000e90 <MX_GPIO_Init+0x1a8>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d4a:	4b51      	ldr	r3, [pc, #324]	@ (8000e90 <MX_GPIO_Init+0x1a8>)
 8000d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d58:	4b4d      	ldr	r3, [pc, #308]	@ (8000e90 <MX_GPIO_Init+0x1a8>)
 8000d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5e:	4a4c      	ldr	r2, [pc, #304]	@ (8000e90 <MX_GPIO_Init+0x1a8>)
 8000d60:	f043 0302 	orr.w	r3, r3, #2
 8000d64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d68:	4b49      	ldr	r3, [pc, #292]	@ (8000e90 <MX_GPIO_Init+0x1a8>)
 8000d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d76:	4b46      	ldr	r3, [pc, #280]	@ (8000e90 <MX_GPIO_Init+0x1a8>)
 8000d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7c:	4a44      	ldr	r2, [pc, #272]	@ (8000e90 <MX_GPIO_Init+0x1a8>)
 8000d7e:	f043 0310 	orr.w	r3, r3, #16
 8000d82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d86:	4b42      	ldr	r3, [pc, #264]	@ (8000e90 <MX_GPIO_Init+0x1a8>)
 8000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8c:	f003 0310 	and.w	r3, r3, #16
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d94:	4b3e      	ldr	r3, [pc, #248]	@ (8000e90 <MX_GPIO_Init+0x1a8>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9a:	4a3d      	ldr	r2, [pc, #244]	@ (8000e90 <MX_GPIO_Init+0x1a8>)
 8000d9c:	f043 0308 	orr.w	r3, r3, #8
 8000da0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000da4:	4b3a      	ldr	r3, [pc, #232]	@ (8000e90 <MX_GPIO_Init+0x1a8>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000daa:	f003 0308 	and.w	r3, r3, #8
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2110      	movs	r1, #16
 8000db6:	4837      	ldr	r0, [pc, #220]	@ (8000e94 <MX_GPIO_Init+0x1ac>)
 8000db8:	f005 fa28 	bl	800620c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESC_GPIO_Pin_RSTN_GPIO_Port, ESC_GPIO_Pin_RSTN_Pin, GPIO_PIN_RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dc2:	4835      	ldr	r0, [pc, #212]	@ (8000e98 <MX_GPIO_Init+0x1b0>)
 8000dc4:	f005 fa22 	bl	800620c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ENC1_B_DIR_Pin|ENC2_B_DIR_Pin|ENC3_B_DIR_Pin|ENC4_B_DIR_Pin
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f44f 617f 	mov.w	r1, #4080	@ 0xff0
 8000dce:	4833      	ldr	r0, [pc, #204]	@ (8000e9c <MX_GPIO_Init+0x1b4>)
 8000dd0:	f005 fa1c 	bl	800620c <HAL_GPIO_WritePin>
                          |ENC1_A_DIR_Pin|ENC2_A_DIR_Pin|ENC3_A_DIR_Pin|ENC4_A_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000dd4:	2310      	movs	r3, #16
 8000dd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000de4:	f107 031c 	add.w	r3, r7, #28
 8000de8:	4619      	mov	r1, r3
 8000dea:	482a      	ldr	r0, [pc, #168]	@ (8000e94 <MX_GPIO_Init+0x1ac>)
 8000dec:	f005 f85e 	bl	8005eac <HAL_GPIO_Init>

  /*Configure GPIO pin : ESC_GPIO_Pin_RSTN_Pin */
  GPIO_InitStruct.Pin = ESC_GPIO_Pin_RSTN_Pin;
 8000df0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df6:	2301      	movs	r3, #1
 8000df8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ESC_GPIO_Pin_RSTN_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	4619      	mov	r1, r3
 8000e08:	4823      	ldr	r0, [pc, #140]	@ (8000e98 <MX_GPIO_Init+0x1b0>)
 8000e0a:	f005 f84f 	bl	8005eac <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC1_B_DIR_Pin ENC2_B_DIR_Pin ENC3_B_DIR_Pin ENC4_B_DIR_Pin
                           ENC1_A_DIR_Pin ENC2_A_DIR_Pin ENC3_A_DIR_Pin ENC4_A_DIR_Pin */
  GPIO_InitStruct.Pin = ENC1_B_DIR_Pin|ENC2_B_DIR_Pin|ENC3_B_DIR_Pin|ENC4_B_DIR_Pin
 8000e0e:	f44f 637f 	mov.w	r3, #4080	@ 0xff0
 8000e12:	61fb      	str	r3, [r7, #28]
                          |ENC1_A_DIR_Pin|ENC2_A_DIR_Pin|ENC3_A_DIR_Pin|ENC4_A_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e14:	2301      	movs	r3, #1
 8000e16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e20:	f107 031c 	add.w	r3, r7, #28
 8000e24:	4619      	mov	r1, r3
 8000e26:	481d      	ldr	r0, [pc, #116]	@ (8000e9c <MX_GPIO_Init+0x1b4>)
 8000e28:	f005 f840 	bl	8005eac <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC1_Z_Data_Pin ENC2_Z_Data_Pin ENC3_Z_Data_Pin ENC4_Z_Data_Pin */
  GPIO_InitStruct.Pin = ENC1_Z_Data_Pin|ENC2_Z_Data_Pin|ENC3_Z_Data_Pin|ENC4_Z_Data_Pin;
 8000e2c:	230f      	movs	r3, #15
 8000e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e30:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e36:	2302      	movs	r3, #2
 8000e38:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4816      	ldr	r0, [pc, #88]	@ (8000e9c <MX_GPIO_Init+0x1b4>)
 8000e42:	f005 f833 	bl	8005eac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(ENC1_Z_Data_EXTI_IRQn, 4, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2104      	movs	r1, #4
 8000e4a:	2006      	movs	r0, #6
 8000e4c:	f002 fd7f 	bl	800394e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ENC1_Z_Data_EXTI_IRQn);
 8000e50:	2006      	movs	r0, #6
 8000e52:	f002 fd96 	bl	8003982 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(ENC2_Z_Data_EXTI_IRQn, 4, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2104      	movs	r1, #4
 8000e5a:	2007      	movs	r0, #7
 8000e5c:	f002 fd77 	bl	800394e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ENC2_Z_Data_EXTI_IRQn);
 8000e60:	2007      	movs	r0, #7
 8000e62:	f002 fd8e 	bl	8003982 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(ENC3_Z_Data_EXTI_IRQn, 4, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2104      	movs	r1, #4
 8000e6a:	2008      	movs	r0, #8
 8000e6c:	f002 fd6f 	bl	800394e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ENC3_Z_Data_EXTI_IRQn);
 8000e70:	2008      	movs	r0, #8
 8000e72:	f002 fd86 	bl	8003982 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(ENC4_Z_Data_EXTI_IRQn, 4, 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2104      	movs	r1, #4
 8000e7a:	2009      	movs	r0, #9
 8000e7c:	f002 fd67 	bl	800394e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ENC4_Z_Data_EXTI_IRQn);
 8000e80:	2009      	movs	r0, #9
 8000e82:	f002 fd7e 	bl	8003982 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e86:	bf00      	nop
 8000e88:	3730      	adds	r7, #48	@ 0x30
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	58024400 	.word	0x58024400
 8000e94:	58020000 	.word	0x58020000
 8000e98:	58020400 	.word	0x58020400
 8000e9c:	58020c00 	.word	0x58020c00

08000ea0 <disableAllOutputs>:




void disableAllOutputs()
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af04      	add	r7, sp, #16
	memset(outputData, 0x00, sizeof(outputData));
 8000ea6:	2206      	movs	r2, #6
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4812      	ldr	r0, [pc, #72]	@ (8000ef4 <disableAllOutputs+0x54>)
 8000eac:	f010 f9ed 	bl	801128a <memset>
	for(uint8_t i = 0; i < 3; i++)
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	71fb      	strb	r3, [r7, #7]
 8000eb4:	e014      	b.n	8000ee0 <disableAllOutputs+0x40>
	{
		HAL_I2C_Mem_Write(&hi2c1, outputExpanders[i], OUTPUT_REG, 1, (uint8_t*)&outputData[i], 2, 100);
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	4a0f      	ldr	r2, [pc, #60]	@ (8000ef8 <disableAllOutputs+0x58>)
 8000eba:	5cd3      	ldrb	r3, [r2, r3]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	4a0c      	ldr	r2, [pc, #48]	@ (8000ef4 <disableAllOutputs+0x54>)
 8000ec4:	4413      	add	r3, r2
 8000ec6:	2264      	movs	r2, #100	@ 0x64
 8000ec8:	9202      	str	r2, [sp, #8]
 8000eca:	2202      	movs	r2, #2
 8000ecc:	9201      	str	r2, [sp, #4]
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	4809      	ldr	r0, [pc, #36]	@ (8000efc <disableAllOutputs+0x5c>)
 8000ed6:	f005 fa73 	bl	80063c0 <HAL_I2C_Mem_Write>
	for(uint8_t i = 0; i < 3; i++)
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	3301      	adds	r3, #1
 8000ede:	71fb      	strb	r3, [r7, #7]
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d9e7      	bls.n	8000eb6 <disableAllOutputs+0x16>
	}
	isInOp = false;
 8000ee6:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <disableAllOutputs+0x60>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	240004c4 	.word	0x240004c4
 8000ef8:	24000054 	.word	0x24000054
 8000efc:	24000280 	.word	0x24000280
 8000f00:	240004e1 	.word	0x240004e1

08000f04 <stateChangeHook>:
void stateChangeHook(uint8_t* oldState, uint8_t* newState)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
	if(*newState == ESCop)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b08      	cmp	r3, #8
 8000f14:	d102      	bne.n	8000f1c <stateChangeHook+0x18>
	{
		isInOp = true;
 8000f16:	4b04      	ldr	r3, [pc, #16]	@ (8000f28 <stateChangeHook+0x24>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	701a      	strb	r2, [r3, #0]
	}

}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	240004e1 	.word	0x240004e1

08000f2c <handleNewData>:

void handleNewData()
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
	gotNewData = true;
 8000f30:	4b03      	ldr	r3, [pc, #12]	@ (8000f40 <handleNewData+0x14>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	240004e0 	.word	0x240004e0

08000f44 <cb_set_outputs>:


void cb_set_outputs(void) // Get Master outputs, slave inputs, first operation
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 3; i++)
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	73fb      	strb	r3, [r7, #15]
 8000f4e:	e013      	b.n	8000f78 <cb_set_outputs+0x34>
	{
		newOutputData[i] = __RBIT(Obj.Outputs[i]) >> 16;
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	4a0e      	ldr	r2, [pc, #56]	@ (8000f8c <cb_set_outputs+0x48>)
 8000f54:	3314      	adds	r3, #20
 8000f56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f5a:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	fa93 f3a3 	rbit	r3, r3
 8000f62:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	0c1a      	lsrs	r2, r3, #16
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	b291      	uxth	r1, r2
 8000f6c:	4a08      	ldr	r2, [pc, #32]	@ (8000f90 <cb_set_outputs+0x4c>)
 8000f6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i = 0; i < 3; i++)
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	3301      	adds	r3, #1
 8000f76:	73fb      	strb	r3, [r7, #15]
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d9e8      	bls.n	8000f50 <cb_set_outputs+0xc>
	}
}
 8000f7e:	bf00      	nop
 8000f80:	bf00      	nop
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	2400048c 	.word	0x2400048c
 8000f90:	240004cc 	.word	0x240004cc

08000f94 <cb_get_inputs>:

void cb_get_inputs(void) // Set Master inputs, slave outputs, last operation
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 3; i++)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	73fb      	strb	r3, [r7, #15]
 8000f9e:	e014      	b.n	8000fca <cb_get_inputs+0x36>
	{
		Obj.Inputs[i] = __RBIT(inputData[i]) >> 16;
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	4a22      	ldr	r2, [pc, #136]	@ (800102c <cb_get_inputs+0x98>)
 8000fa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fa8:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	fa93 f3a3 	rbit	r3, r3
 8000fb0:	607b      	str	r3, [r7, #4]
  return result;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	0c1a      	lsrs	r2, r3, #16
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	b291      	uxth	r1, r2
 8000fba:	4a1d      	ldr	r2, [pc, #116]	@ (8001030 <cb_get_inputs+0x9c>)
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	4413      	add	r3, r2
 8000fc0:	460a      	mov	r2, r1
 8000fc2:	809a      	strh	r2, [r3, #4]
	for(uint8_t i = 0; i < 3; i++)
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	73fb      	strb	r3, [r7, #15]
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d9e7      	bls.n	8000fa0 <cb_get_inputs+0xc>
	}

	for(uint8_t i = 0; i< 6; i++)
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	73bb      	strb	r3, [r7, #14]
 8000fd4:	e00d      	b.n	8000ff2 <cb_get_inputs+0x5e>
	{
		Obj.Analog[i] = adcVal[i];
 8000fd6:	7bba      	ldrb	r2, [r7, #14]
 8000fd8:	7bbb      	ldrb	r3, [r7, #14]
 8000fda:	4916      	ldr	r1, [pc, #88]	@ (8001034 <cb_get_inputs+0xa0>)
 8000fdc:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000fe0:	4a13      	ldr	r2, [pc, #76]	@ (8001030 <cb_get_inputs+0x9c>)
 8000fe2:	330c      	adds	r3, #12
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	4413      	add	r3, r2
 8000fe8:	460a      	mov	r2, r1
 8000fea:	809a      	strh	r2, [r3, #4]
	for(uint8_t i = 0; i< 6; i++)
 8000fec:	7bbb      	ldrb	r3, [r7, #14]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	73bb      	strb	r3, [r7, #14]
 8000ff2:	7bbb      	ldrb	r3, [r7, #14]
 8000ff4:	2b05      	cmp	r3, #5
 8000ff6:	d9ee      	bls.n	8000fd6 <cb_get_inputs+0x42>
	}

	Obj.Encoder[0] = htim1.Instance->CNT;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8001038 <cb_get_inputs+0xa4>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ffe:	4a0c      	ldr	r2, [pc, #48]	@ (8001030 <cb_get_inputs+0x9c>)
 8001000:	60d3      	str	r3, [r2, #12]
	Obj.Encoder[1] = htim2.Instance->CNT;
 8001002:	4b0e      	ldr	r3, [pc, #56]	@ (800103c <cb_get_inputs+0xa8>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001008:	4a09      	ldr	r2, [pc, #36]	@ (8001030 <cb_get_inputs+0x9c>)
 800100a:	6113      	str	r3, [r2, #16]
	Obj.Encoder[2] = htim3.Instance->CNT;
 800100c:	4b0c      	ldr	r3, [pc, #48]	@ (8001040 <cb_get_inputs+0xac>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001012:	4a07      	ldr	r2, [pc, #28]	@ (8001030 <cb_get_inputs+0x9c>)
 8001014:	6153      	str	r3, [r2, #20]
	Obj.Encoder[3] = htim4.Instance->CNT;
 8001016:	4b0b      	ldr	r3, [pc, #44]	@ (8001044 <cb_get_inputs+0xb0>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800101c:	4a04      	ldr	r2, [pc, #16]	@ (8001030 <cb_get_inputs+0x9c>)
 800101e:	6193      	str	r3, [r2, #24]


}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	240004bc 	.word	0x240004bc
 8001030:	2400048c 	.word	0x2400048c
 8001034:	240004d4 	.word	0x240004d4
 8001038:	2400035c 	.word	0x2400035c
 800103c:	240003a8 	.word	0x240003a8
 8001040:	240003f4 	.word	0x240003f4
 8001044:	24000440 	.word	0x24000440

08001048 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800104c:	b672      	cpsid	i
}
 800104e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <Error_Handler+0x8>

08001054 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	4b15      	ldr	r3, [pc, #84]	@ (80010b0 <HAL_MspInit+0x5c>)
 800105c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001060:	4a13      	ldr	r2, [pc, #76]	@ (80010b0 <HAL_MspInit+0x5c>)
 8001062:	f043 0302 	orr.w	r3, r3, #2
 8001066:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800106a:	4b11      	ldr	r3, [pc, #68]	@ (80010b0 <HAL_MspInit+0x5c>)
 800106c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8001078:	4b0d      	ldr	r3, [pc, #52]	@ (80010b0 <HAL_MspInit+0x5c>)
 800107a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800107e:	4a0c      	ldr	r2, [pc, #48]	@ (80010b0 <HAL_MspInit+0x5c>)
 8001080:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001084:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001088:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <HAL_MspInit+0x5c>)
 800108a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800108e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	683b      	ldr	r3, [r7, #0]

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8001096:	2000      	movs	r0, #0
 8001098:	f000 fe12 	bl	8001cc0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 800109c:	f000 fe38 	bl	8001d10 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80010a0:	2000      	movs	r0, #0
 80010a2:	f000 fe21 	bl	8001ce8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	58024400 	.word	0x58024400

080010b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b0bc      	sub	sp, #240	@ 0xf0
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010cc:	f107 0318 	add.w	r3, r7, #24
 80010d0:	22c0      	movs	r2, #192	@ 0xc0
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f010 f8d8 	bl	801128a <memset>
  if(hadc->Instance==ADC1)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a67      	ldr	r2, [pc, #412]	@ (800127c <HAL_ADC_MspInit+0x1c8>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	f040 80c6 	bne.w	8001272 <HAL_ADC_MspInit+0x1be>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010e6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80010ea:	f04f 0300 	mov.w	r3, #0
 80010ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 5;
 80010f2:	2305      	movs	r3, #5
 80010f4:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 32;
 80010f6:	2320      	movs	r3, #32
 80010f8:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 5;
 80010fa:	2305      	movs	r3, #5
 80010fc:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80010fe:	2302      	movs	r3, #2
 8001100:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 10;
 8001102:	230a      	movs	r3, #10
 8001104:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8001106:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800110a:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800110c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001110:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8001116:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800111a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800111e:	f107 0318 	add.w	r3, r7, #24
 8001122:	4618      	mov	r0, r3
 8001124:	f007 fda6 	bl	8008c74 <HAL_RCCEx_PeriphCLKConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 800112e:	f7ff ff8b 	bl	8001048 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001132:	4b53      	ldr	r3, [pc, #332]	@ (8001280 <HAL_ADC_MspInit+0x1cc>)
 8001134:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001138:	4a51      	ldr	r2, [pc, #324]	@ (8001280 <HAL_ADC_MspInit+0x1cc>)
 800113a:	f043 0320 	orr.w	r3, r3, #32
 800113e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001142:	4b4f      	ldr	r3, [pc, #316]	@ (8001280 <HAL_ADC_MspInit+0x1cc>)
 8001144:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001148:	f003 0320 	and.w	r3, r3, #32
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001150:	4b4b      	ldr	r3, [pc, #300]	@ (8001280 <HAL_ADC_MspInit+0x1cc>)
 8001152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001156:	4a4a      	ldr	r2, [pc, #296]	@ (8001280 <HAL_ADC_MspInit+0x1cc>)
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001160:	4b47      	ldr	r3, [pc, #284]	@ (8001280 <HAL_ADC_MspInit+0x1cc>)
 8001162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	4b44      	ldr	r3, [pc, #272]	@ (8001280 <HAL_ADC_MspInit+0x1cc>)
 8001170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001174:	4a42      	ldr	r2, [pc, #264]	@ (8001280 <HAL_ADC_MspInit+0x1cc>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800117e:	4b40      	ldr	r3, [pc, #256]	@ (8001280 <HAL_ADC_MspInit+0x1cc>)
 8001180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118c:	4b3c      	ldr	r3, [pc, #240]	@ (8001280 <HAL_ADC_MspInit+0x1cc>)
 800118e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001192:	4a3b      	ldr	r2, [pc, #236]	@ (8001280 <HAL_ADC_MspInit+0x1cc>)
 8001194:	f043 0302 	orr.w	r3, r3, #2
 8001198:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800119c:	4b38      	ldr	r3, [pc, #224]	@ (8001280 <HAL_ADC_MspInit+0x1cc>)
 800119e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_INP14
    PA3     ------> ADC1_INP15
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80011aa:	2322      	movs	r3, #34	@ 0x22
 80011ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b0:	2303      	movs	r3, #3
 80011b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011bc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011c0:	4619      	mov	r1, r3
 80011c2:	4830      	ldr	r0, [pc, #192]	@ (8001284 <HAL_ADC_MspInit+0x1d0>)
 80011c4:	f004 fe72 	bl	8005eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80011c8:	230d      	movs	r3, #13
 80011ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ce:	2303      	movs	r3, #3
 80011d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011da:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011de:	4619      	mov	r1, r3
 80011e0:	4829      	ldr	r0, [pc, #164]	@ (8001288 <HAL_ADC_MspInit+0x1d4>)
 80011e2:	f004 fe63 	bl	8005eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011e6:	2301      	movs	r3, #1
 80011e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ec:	2303      	movs	r3, #3
 80011ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011fc:	4619      	mov	r1, r3
 80011fe:	4823      	ldr	r0, [pc, #140]	@ (800128c <HAL_ADC_MspInit+0x1d8>)
 8001200:	f004 fe54 	bl	8005eac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001204:	4b22      	ldr	r3, [pc, #136]	@ (8001290 <HAL_ADC_MspInit+0x1dc>)
 8001206:	4a23      	ldr	r2, [pc, #140]	@ (8001294 <HAL_ADC_MspInit+0x1e0>)
 8001208:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800120a:	4b21      	ldr	r3, [pc, #132]	@ (8001290 <HAL_ADC_MspInit+0x1dc>)
 800120c:	2209      	movs	r2, #9
 800120e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001210:	4b1f      	ldr	r3, [pc, #124]	@ (8001290 <HAL_ADC_MspInit+0x1dc>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001216:	4b1e      	ldr	r3, [pc, #120]	@ (8001290 <HAL_ADC_MspInit+0x1dc>)
 8001218:	2200      	movs	r2, #0
 800121a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800121c:	4b1c      	ldr	r3, [pc, #112]	@ (8001290 <HAL_ADC_MspInit+0x1dc>)
 800121e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001222:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001224:	4b1a      	ldr	r3, [pc, #104]	@ (8001290 <HAL_ADC_MspInit+0x1dc>)
 8001226:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800122a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800122c:	4b18      	ldr	r3, [pc, #96]	@ (8001290 <HAL_ADC_MspInit+0x1dc>)
 800122e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001232:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001234:	4b16      	ldr	r3, [pc, #88]	@ (8001290 <HAL_ADC_MspInit+0x1dc>)
 8001236:	2200      	movs	r2, #0
 8001238:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800123a:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <HAL_ADC_MspInit+0x1dc>)
 800123c:	2200      	movs	r2, #0
 800123e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001240:	4b13      	ldr	r3, [pc, #76]	@ (8001290 <HAL_ADC_MspInit+0x1dc>)
 8001242:	2200      	movs	r2, #0
 8001244:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001246:	4812      	ldr	r0, [pc, #72]	@ (8001290 <HAL_ADC_MspInit+0x1dc>)
 8001248:	f002 fbb6 	bl	80039b8 <HAL_DMA_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_ADC_MspInit+0x1a2>
    {
      Error_Handler();
 8001252:	f7ff fef9 	bl	8001048 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a0d      	ldr	r2, [pc, #52]	@ (8001290 <HAL_ADC_MspInit+0x1dc>)
 800125a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800125c:	4a0c      	ldr	r2, [pc, #48]	@ (8001290 <HAL_ADC_MspInit+0x1dc>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 3, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2103      	movs	r1, #3
 8001266:	2012      	movs	r0, #18
 8001268:	f002 fb71 	bl	800394e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800126c:	2012      	movs	r0, #18
 800126e:	f002 fb88 	bl	8003982 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001272:	bf00      	nop
 8001274:	37f0      	adds	r7, #240	@ 0xf0
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40022000 	.word	0x40022000
 8001280:	58024400 	.word	0x58024400
 8001284:	58020800 	.word	0x58020800
 8001288:	58020000 	.word	0x58020000
 800128c:	58020400 	.word	0x58020400
 8001290:	24000168 	.word	0x24000168
 8001294:	40020010 	.word	0x40020010

08001298 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b0ba      	sub	sp, #232	@ 0xe8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012b0:	f107 0310 	add.w	r3, r7, #16
 80012b4:	22c0      	movs	r2, #192	@ 0xc0
 80012b6:	2100      	movs	r1, #0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f00f ffe6 	bl	801128a <memset>
  if(hfdcan->Instance==FDCAN2)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a2f      	ldr	r2, [pc, #188]	@ (8001380 <HAL_FDCAN_MspInit+0xe8>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d157      	bne.n	8001378 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80012c8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80012cc:	f04f 0300 	mov.w	r3, #0
 80012d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 80012d4:	2302      	movs	r3, #2
 80012d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 80012d8:	230c      	movs	r3, #12
 80012da:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80012dc:	2302      	movs	r3, #2
 80012de:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80012e0:	2302      	movs	r3, #2
 80012e2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80012e4:	2302      	movs	r3, #2
 80012e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80012e8:	23c0      	movs	r3, #192	@ 0xc0
 80012ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80012ec:	2320      	movs	r3, #32
 80012ee:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 80012f4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80012f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	4618      	mov	r0, r3
 8001302:	f007 fcb7 	bl	8008c74 <HAL_RCCEx_PeriphCLKConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 800130c:	f7ff fe9c 	bl	8001048 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001310:	4b1c      	ldr	r3, [pc, #112]	@ (8001384 <HAL_FDCAN_MspInit+0xec>)
 8001312:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001316:	4a1b      	ldr	r2, [pc, #108]	@ (8001384 <HAL_FDCAN_MspInit+0xec>)
 8001318:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800131c:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001320:	4b18      	ldr	r3, [pc, #96]	@ (8001384 <HAL_FDCAN_MspInit+0xec>)
 8001322:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	4b15      	ldr	r3, [pc, #84]	@ (8001384 <HAL_FDCAN_MspInit+0xec>)
 8001330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001334:	4a13      	ldr	r2, [pc, #76]	@ (8001384 <HAL_FDCAN_MspInit+0xec>)
 8001336:	f043 0302 	orr.w	r3, r3, #2
 800133a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800133e:	4b11      	ldr	r3, [pc, #68]	@ (8001384 <HAL_FDCAN_MspInit+0xec>)
 8001340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800134c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001350:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001354:	2302      	movs	r3, #2
 8001356:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	2300      	movs	r3, #0
 8001362:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001366:	2309      	movs	r3, #9
 8001368:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001370:	4619      	mov	r1, r3
 8001372:	4805      	ldr	r0, [pc, #20]	@ (8001388 <HAL_FDCAN_MspInit+0xf0>)
 8001374:	f004 fd9a 	bl	8005eac <HAL_GPIO_Init>

  /* USER CODE END FDCAN2_MspInit 1 */

  }

}
 8001378:	bf00      	nop
 800137a:	37e8      	adds	r7, #232	@ 0xe8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	4000a400 	.word	0x4000a400
 8001384:	58024400 	.word	0x58024400
 8001388:	58020400 	.word	0x58020400

0800138c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b0ba      	sub	sp, #232	@ 0xe8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013a4:	f107 0310 	add.w	r3, r7, #16
 80013a8:	22c0      	movs	r2, #192	@ 0xc0
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f00f ff6c 	bl	801128a <memset>
  if(hi2c->Instance==I2C1)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a2e      	ldr	r2, [pc, #184]	@ (8001470 <HAL_I2C_MspInit+0xe4>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d155      	bne.n	8001468 <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013bc:	f04f 0208 	mov.w	r2, #8
 80013c0:	f04f 0300 	mov.w	r3, #0
 80013c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ce:	f107 0310 	add.w	r3, r7, #16
 80013d2:	4618      	mov	r0, r3
 80013d4:	f007 fc4e 	bl	8008c74 <HAL_RCCEx_PeriphCLKConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80013de:	f7ff fe33 	bl	8001048 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e2:	4b24      	ldr	r3, [pc, #144]	@ (8001474 <HAL_I2C_MspInit+0xe8>)
 80013e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e8:	4a22      	ldr	r2, [pc, #136]	@ (8001474 <HAL_I2C_MspInit+0xe8>)
 80013ea:	f043 0302 	orr.w	r3, r3, #2
 80013ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013f2:	4b20      	ldr	r3, [pc, #128]	@ (8001474 <HAL_I2C_MspInit+0xe8>)
 80013f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001400:	23c0      	movs	r3, #192	@ 0xc0
 8001402:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001406:	2312      	movs	r3, #18
 8001408:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001412:	2300      	movs	r3, #0
 8001414:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001418:	2304      	movs	r3, #4
 800141a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001422:	4619      	mov	r1, r3
 8001424:	4814      	ldr	r0, [pc, #80]	@ (8001478 <HAL_I2C_MspInit+0xec>)
 8001426:	f004 fd41 	bl	8005eac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800142a:	4b12      	ldr	r3, [pc, #72]	@ (8001474 <HAL_I2C_MspInit+0xe8>)
 800142c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001430:	4a10      	ldr	r2, [pc, #64]	@ (8001474 <HAL_I2C_MspInit+0xe8>)
 8001432:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001436:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800143a:	4b0e      	ldr	r3, [pc, #56]	@ (8001474 <HAL_I2C_MspInit+0xe8>)
 800143c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001440:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001448:	2200      	movs	r2, #0
 800144a:	2100      	movs	r1, #0
 800144c:	201f      	movs	r0, #31
 800144e:	f002 fa7e 	bl	800394e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001452:	201f      	movs	r0, #31
 8001454:	f002 fa95 	bl	8003982 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001458:	2200      	movs	r2, #0
 800145a:	2100      	movs	r1, #0
 800145c:	2020      	movs	r0, #32
 800145e:	f002 fa76 	bl	800394e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001462:	2020      	movs	r0, #32
 8001464:	f002 fa8d 	bl	8003982 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001468:	bf00      	nop
 800146a:	37e8      	adds	r7, #232	@ 0xe8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40005400 	.word	0x40005400
 8001474:	58024400 	.word	0x58024400
 8001478:	58020400 	.word	0x58020400

0800147c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b0ba      	sub	sp, #232	@ 0xe8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001494:	f107 0310 	add.w	r3, r7, #16
 8001498:	22c0      	movs	r2, #192	@ 0xc0
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f00f fef4 	bl	801128a <memset>
  if(hspi->Instance==SPI1)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a26      	ldr	r2, [pc, #152]	@ (8001540 <HAL_SPI_MspInit+0xc4>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d144      	bne.n	8001536 <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80014ac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014b0:	f04f 0300 	mov.w	r3, #0
 80014b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014bc:	f107 0310 	add.w	r3, r7, #16
 80014c0:	4618      	mov	r0, r3
 80014c2:	f007 fbd7 	bl	8008c74 <HAL_RCCEx_PeriphCLKConfig>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80014cc:	f7ff fdbc 	bl	8001048 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001544 <HAL_SPI_MspInit+0xc8>)
 80014d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001544 <HAL_SPI_MspInit+0xc8>)
 80014d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80014e0:	4b18      	ldr	r3, [pc, #96]	@ (8001544 <HAL_SPI_MspInit+0xc8>)
 80014e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <HAL_SPI_MspInit+0xc8>)
 80014f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f4:	4a13      	ldr	r2, [pc, #76]	@ (8001544 <HAL_SPI_MspInit+0xc8>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014fe:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <HAL_SPI_MspInit+0xc8>)
 8001500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001504:	f003 0301 	and.w	r3, r3, #1
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800150c:	23e0      	movs	r3, #224	@ 0xe0
 800150e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001524:	2305      	movs	r3, #5
 8001526:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800152e:	4619      	mov	r1, r3
 8001530:	4805      	ldr	r0, [pc, #20]	@ (8001548 <HAL_SPI_MspInit+0xcc>)
 8001532:	f004 fcbb 	bl	8005eac <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001536:	bf00      	nop
 8001538:	37e8      	adds	r7, #232	@ 0xe8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40013000 	.word	0x40013000
 8001544:	58024400 	.word	0x58024400
 8001548:	58020000 	.word	0x58020000

0800154c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b090      	sub	sp, #64	@ 0x40
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a69      	ldr	r2, [pc, #420]	@ (8001710 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d12f      	bne.n	80015ce <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800156e:	4b69      	ldr	r3, [pc, #420]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001570:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001574:	4a67      	ldr	r2, [pc, #412]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800157e:	4b65      	ldr	r3, [pc, #404]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001580:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	62bb      	str	r3, [r7, #40]	@ 0x28
 800158a:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800158c:	4b61      	ldr	r3, [pc, #388]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800158e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001592:	4a60      	ldr	r2, [pc, #384]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001594:	f043 0310 	orr.w	r3, r3, #16
 8001598:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800159c:	4b5d      	ldr	r3, [pc, #372]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800159e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80015a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80015aa:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80015ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80015bc:	2301      	movs	r3, #1
 80015be:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015c4:	4619      	mov	r1, r3
 80015c6:	4854      	ldr	r0, [pc, #336]	@ (8001718 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80015c8:	f004 fc70 	bl	8005eac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80015cc:	e09c      	b.n	8001708 <HAL_TIM_Encoder_MspInit+0x1bc>
  else if(htim_encoder->Instance==TIM2)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015d6:	d12f      	bne.n	8001638 <HAL_TIM_Encoder_MspInit+0xec>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015d8:	4b4e      	ldr	r3, [pc, #312]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80015da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015de:	4a4d      	ldr	r2, [pc, #308]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80015e8:	4b4a      	ldr	r3, [pc, #296]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80015ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	623b      	str	r3, [r7, #32]
 80015f4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f6:	4b47      	ldr	r3, [pc, #284]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80015f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015fc:	4a45      	ldr	r2, [pc, #276]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001606:	4b43      	ldr	r3, [pc, #268]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	61fb      	str	r3, [r7, #28]
 8001612:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8001614:	f248 0302 	movw	r3, #32770	@ 0x8002
 8001618:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	2302      	movs	r3, #2
 800161c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2300      	movs	r3, #0
 8001624:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001626:	2301      	movs	r3, #1
 8001628:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800162e:	4619      	mov	r1, r3
 8001630:	483a      	ldr	r0, [pc, #232]	@ (800171c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8001632:	f004 fc3b 	bl	8005eac <HAL_GPIO_Init>
}
 8001636:	e067      	b.n	8001708 <HAL_TIM_Encoder_MspInit+0x1bc>
  else if(htim_encoder->Instance==TIM3)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a38      	ldr	r2, [pc, #224]	@ (8001720 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d12e      	bne.n	80016a0 <HAL_TIM_Encoder_MspInit+0x154>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001642:	4b34      	ldr	r3, [pc, #208]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001644:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001648:	4a32      	ldr	r2, [pc, #200]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800164a:	f043 0302 	orr.w	r3, r3, #2
 800164e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001652:	4b30      	ldr	r3, [pc, #192]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001654:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	61bb      	str	r3, [r7, #24]
 800165e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001660:	4b2c      	ldr	r3, [pc, #176]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001666:	4a2b      	ldr	r2, [pc, #172]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001668:	f043 0304 	orr.w	r3, r3, #4
 800166c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001670:	4b28      	ldr	r3, [pc, #160]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8001672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800167e:	23c0      	movs	r3, #192	@ 0xc0
 8001680:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2300      	movs	r3, #0
 800168c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800168e:	2302      	movs	r3, #2
 8001690:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001692:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001696:	4619      	mov	r1, r3
 8001698:	4822      	ldr	r0, [pc, #136]	@ (8001724 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800169a:	f004 fc07 	bl	8005eac <HAL_GPIO_Init>
}
 800169e:	e033      	b.n	8001708 <HAL_TIM_Encoder_MspInit+0x1bc>
  else if(htim_encoder->Instance==TIM4)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a20      	ldr	r2, [pc, #128]	@ (8001728 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d12e      	bne.n	8001708 <HAL_TIM_Encoder_MspInit+0x1bc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80016ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016b0:	4a18      	ldr	r2, [pc, #96]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80016b2:	f043 0304 	orr.w	r3, r3, #4
 80016b6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80016ba:	4b16      	ldr	r3, [pc, #88]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80016bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c8:	4b12      	ldr	r3, [pc, #72]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80016ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ce:	4a11      	ldr	r2, [pc, #68]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80016d0:	f043 0308 	orr.w	r3, r3, #8
 80016d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001714 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80016da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80016e6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80016ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016f8:	2302      	movs	r3, #2
 80016fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001700:	4619      	mov	r1, r3
 8001702:	480a      	ldr	r0, [pc, #40]	@ (800172c <HAL_TIM_Encoder_MspInit+0x1e0>)
 8001704:	f004 fbd2 	bl	8005eac <HAL_GPIO_Init>
}
 8001708:	bf00      	nop
 800170a:	3740      	adds	r7, #64	@ 0x40
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40010000 	.word	0x40010000
 8001714:	58024400 	.word	0x58024400
 8001718:	58021000 	.word	0x58021000
 800171c:	58020000 	.word	0x58020000
 8001720:	40000400 	.word	0x40000400
 8001724:	58020800 	.word	0x58020800
 8001728:	40000800 	.word	0x40000800
 800172c:	58020c00 	.word	0x58020c00

08001730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <NMI_Handler+0x4>

08001738 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <HardFault_Handler+0x4>

08001740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <MemManage_Handler+0x4>

08001748 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <BusFault_Handler+0x4>

08001750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <UsageFault_Handler+0x4>

08001758 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001786:	f000 fa6f 	bl	8001c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}

0800178e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC1_Z_Data_Pin);
 8001792:	2001      	movs	r0, #1
 8001794:	f004 fd53 	bl	800623e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}

0800179c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC2_Z_Data_Pin);
 80017a0:	2002      	movs	r0, #2
 80017a2:	f004 fd4c 	bl	800623e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}

080017aa <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC3_Z_Data_Pin);
 80017ae:	2004      	movs	r0, #4
 80017b0:	f004 fd45 	bl	800623e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC4_Z_Data_Pin);
 80017bc:	2008      	movs	r0, #8
 80017be:	f004 fd3e 	bl	800623e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017cc:	4802      	ldr	r0, [pc, #8]	@ (80017d8 <DMA1_Stream0_IRQHandler+0x10>)
 80017ce:	f002 fe95 	bl	80044fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	24000168 	.word	0x24000168

080017dc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */


  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80017e0:	4802      	ldr	r0, [pc, #8]	@ (80017ec <ADC_IRQHandler+0x10>)
 80017e2:	f000 ffcf 	bl	8002784 <HAL_ADC_IRQHandler>
//	if(adcCnt>5)
//	{
//		adcCnt=0;
//	}
  /* USER CODE END ADC_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	24000104 	.word	0x24000104

080017f0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80017f4:	4802      	ldr	r0, [pc, #8]	@ (8001800 <I2C1_EV_IRQHandler+0x10>)
 80017f6:	f005 f811 	bl	800681c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	24000280 	.word	0x24000280

08001804 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001808:	4802      	ldr	r0, [pc, #8]	@ (8001814 <I2C1_ER_IRQHandler+0x10>)
 800180a:	f005 f821 	bl	8006850 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	24000280 	.word	0x24000280

08001818 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
		adcVal[adcCnt++] = HAL_ADC_GetValue(&hadc1);
 8001820:	480c      	ldr	r0, [pc, #48]	@ (8001854 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001822:	f000 ffa1 	bl	8002768 <HAL_ADC_GetValue>
 8001826:	4b0c      	ldr	r3, [pc, #48]	@ (8001858 <HAL_ADC_ConvCpltCallback+0x40>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	1c5a      	adds	r2, r3, #1
 800182c:	b2d1      	uxtb	r1, r2
 800182e:	4a0a      	ldr	r2, [pc, #40]	@ (8001858 <HAL_ADC_ConvCpltCallback+0x40>)
 8001830:	7011      	strb	r1, [r2, #0]
 8001832:	461a      	mov	r2, r3
 8001834:	b281      	uxth	r1, r0
 8001836:	4b09      	ldr	r3, [pc, #36]	@ (800185c <HAL_ADC_ConvCpltCallback+0x44>)
 8001838:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		if(adcCnt>5)
 800183c:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <HAL_ADC_ConvCpltCallback+0x40>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b05      	cmp	r3, #5
 8001842:	d902      	bls.n	800184a <HAL_ADC_ConvCpltCallback+0x32>
		{
			adcCnt=0;
 8001844:	4b04      	ldr	r3, [pc, #16]	@ (8001858 <HAL_ADC_ConvCpltCallback+0x40>)
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
		}
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	24000104 	.word	0x24000104
 8001858:	240004e2 	.word	0x240004e2
 800185c:	240004d4 	.word	0x240004d4

08001860 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return 1;
 8001864:	2301      	movs	r3, #1
}
 8001866:	4618      	mov	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <_kill>:

int _kill(int pid, int sig)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800187a:	f00f fd55 	bl	8011328 <__errno>
 800187e:	4603      	mov	r3, r0
 8001880:	2216      	movs	r2, #22
 8001882:	601a      	str	r2, [r3, #0]
  return -1;
 8001884:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <_exit>:

void _exit (int status)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001898:	f04f 31ff 	mov.w	r1, #4294967295
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff ffe7 	bl	8001870 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018a2:	bf00      	nop
 80018a4:	e7fd      	b.n	80018a2 <_exit+0x12>

080018a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b086      	sub	sp, #24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	60f8      	str	r0, [r7, #12]
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	e00a      	b.n	80018ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018b8:	f3af 8000 	nop.w
 80018bc:	4601      	mov	r1, r0
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	1c5a      	adds	r2, r3, #1
 80018c2:	60ba      	str	r2, [r7, #8]
 80018c4:	b2ca      	uxtb	r2, r1
 80018c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	3301      	adds	r3, #1
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	dbf0      	blt.n	80018b8 <_read+0x12>
  }

  return len;
 80018d6:	687b      	ldr	r3, [r7, #4]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	e009      	b.n	8001906 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	1c5a      	adds	r2, r3, #1
 80018f6:	60ba      	str	r2, [r7, #8]
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	3301      	adds	r3, #1
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	429a      	cmp	r2, r3
 800190c:	dbf1      	blt.n	80018f2 <_write+0x12>
  }
  return len;
 800190e:	687b      	ldr	r3, [r7, #4]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <_close>:

int _close(int file)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001920:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001924:	4618      	mov	r0, r3
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001940:	605a      	str	r2, [r3, #4]
  return 0;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <_isatty>:

int _isatty(int file)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001958:	2301      	movs	r3, #1
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001966:	b480      	push	{r7}
 8001968:	b085      	sub	sp, #20
 800196a:	af00      	add	r7, sp, #0
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001988:	4a14      	ldr	r2, [pc, #80]	@ (80019dc <_sbrk+0x5c>)
 800198a:	4b15      	ldr	r3, [pc, #84]	@ (80019e0 <_sbrk+0x60>)
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001994:	4b13      	ldr	r3, [pc, #76]	@ (80019e4 <_sbrk+0x64>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d102      	bne.n	80019a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800199c:	4b11      	ldr	r3, [pc, #68]	@ (80019e4 <_sbrk+0x64>)
 800199e:	4a12      	ldr	r2, [pc, #72]	@ (80019e8 <_sbrk+0x68>)
 80019a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019a2:	4b10      	ldr	r3, [pc, #64]	@ (80019e4 <_sbrk+0x64>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d207      	bcs.n	80019c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b0:	f00f fcba 	bl	8011328 <__errno>
 80019b4:	4603      	mov	r3, r0
 80019b6:	220c      	movs	r2, #12
 80019b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
 80019be:	e009      	b.n	80019d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c0:	4b08      	ldr	r3, [pc, #32]	@ (80019e4 <_sbrk+0x64>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019c6:	4b07      	ldr	r3, [pc, #28]	@ (80019e4 <_sbrk+0x64>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	4a05      	ldr	r2, [pc, #20]	@ (80019e4 <_sbrk+0x64>)
 80019d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019d2:	68fb      	ldr	r3, [r7, #12]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	24080000 	.word	0x24080000
 80019e0:	00000400 	.word	0x00000400
 80019e4:	240004e4 	.word	0x240004e4
 80019e8:	24001870 	.word	0x24001870

080019ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019f0:	4b37      	ldr	r3, [pc, #220]	@ (8001ad0 <SystemInit+0xe4>)
 80019f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019f6:	4a36      	ldr	r2, [pc, #216]	@ (8001ad0 <SystemInit+0xe4>)
 80019f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a00:	4b34      	ldr	r3, [pc, #208]	@ (8001ad4 <SystemInit+0xe8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 030f 	and.w	r3, r3, #15
 8001a08:	2b06      	cmp	r3, #6
 8001a0a:	d807      	bhi.n	8001a1c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a0c:	4b31      	ldr	r3, [pc, #196]	@ (8001ad4 <SystemInit+0xe8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f023 030f 	bic.w	r3, r3, #15
 8001a14:	4a2f      	ldr	r2, [pc, #188]	@ (8001ad4 <SystemInit+0xe8>)
 8001a16:	f043 0307 	orr.w	r3, r3, #7
 8001a1a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a1c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ad8 <SystemInit+0xec>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a2d      	ldr	r2, [pc, #180]	@ (8001ad8 <SystemInit+0xec>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a28:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad8 <SystemInit+0xec>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a2e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad8 <SystemInit+0xec>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	4929      	ldr	r1, [pc, #164]	@ (8001ad8 <SystemInit+0xec>)
 8001a34:	4b29      	ldr	r3, [pc, #164]	@ (8001adc <SystemInit+0xf0>)
 8001a36:	4013      	ands	r3, r2
 8001a38:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a3a:	4b26      	ldr	r3, [pc, #152]	@ (8001ad4 <SystemInit+0xe8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d007      	beq.n	8001a56 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a46:	4b23      	ldr	r3, [pc, #140]	@ (8001ad4 <SystemInit+0xe8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 030f 	bic.w	r3, r3, #15
 8001a4e:	4a21      	ldr	r2, [pc, #132]	@ (8001ad4 <SystemInit+0xe8>)
 8001a50:	f043 0307 	orr.w	r3, r3, #7
 8001a54:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a56:	4b20      	ldr	r3, [pc, #128]	@ (8001ad8 <SystemInit+0xec>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad8 <SystemInit+0xec>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001a62:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad8 <SystemInit+0xec>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a68:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad8 <SystemInit+0xec>)
 8001a6a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ae0 <SystemInit+0xf4>)
 8001a6c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad8 <SystemInit+0xec>)
 8001a70:	4a1c      	ldr	r2, [pc, #112]	@ (8001ae4 <SystemInit+0xf8>)
 8001a72:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a74:	4b18      	ldr	r3, [pc, #96]	@ (8001ad8 <SystemInit+0xec>)
 8001a76:	4a1c      	ldr	r2, [pc, #112]	@ (8001ae8 <SystemInit+0xfc>)
 8001a78:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a7a:	4b17      	ldr	r3, [pc, #92]	@ (8001ad8 <SystemInit+0xec>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a80:	4b15      	ldr	r3, [pc, #84]	@ (8001ad8 <SystemInit+0xec>)
 8001a82:	4a19      	ldr	r2, [pc, #100]	@ (8001ae8 <SystemInit+0xfc>)
 8001a84:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a86:	4b14      	ldr	r3, [pc, #80]	@ (8001ad8 <SystemInit+0xec>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a8c:	4b12      	ldr	r3, [pc, #72]	@ (8001ad8 <SystemInit+0xec>)
 8001a8e:	4a16      	ldr	r2, [pc, #88]	@ (8001ae8 <SystemInit+0xfc>)
 8001a90:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a92:	4b11      	ldr	r3, [pc, #68]	@ (8001ad8 <SystemInit+0xec>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a98:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad8 <SystemInit+0xec>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a0e      	ldr	r2, [pc, #56]	@ (8001ad8 <SystemInit+0xec>)
 8001a9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aa2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad8 <SystemInit+0xec>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001aaa:	4b10      	ldr	r3, [pc, #64]	@ (8001aec <SystemInit+0x100>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	4b10      	ldr	r3, [pc, #64]	@ (8001af0 <SystemInit+0x104>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ab6:	d202      	bcs.n	8001abe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8001af4 <SystemInit+0x108>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001abe:	4b0e      	ldr	r3, [pc, #56]	@ (8001af8 <SystemInit+0x10c>)
 8001ac0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001ac4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000ed00 	.word	0xe000ed00
 8001ad4:	52002000 	.word	0x52002000
 8001ad8:	58024400 	.word	0x58024400
 8001adc:	eaf6ed7f 	.word	0xeaf6ed7f
 8001ae0:	02020200 	.word	0x02020200
 8001ae4:	01ff0000 	.word	0x01ff0000
 8001ae8:	01010280 	.word	0x01010280
 8001aec:	5c001000 	.word	0x5c001000
 8001af0:	ffff0000 	.word	0xffff0000
 8001af4:	51008108 	.word	0x51008108
 8001af8:	52004000 	.word	0x52004000

08001afc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001b00:	4b09      	ldr	r3, [pc, #36]	@ (8001b28 <ExitRun0Mode+0x2c>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	4a08      	ldr	r2, [pc, #32]	@ (8001b28 <ExitRun0Mode+0x2c>)
 8001b06:	f043 0302 	orr.w	r3, r3, #2
 8001b0a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001b0c:	bf00      	nop
 8001b0e:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <ExitRun0Mode+0x2c>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f9      	beq.n	8001b0e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001b1a:	bf00      	nop
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	58024800 	.word	0x58024800

08001b2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b2c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001b68 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001b30:	f7ff ffe4 	bl	8001afc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b34:	f7ff ff5a 	bl	80019ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b38:	480c      	ldr	r0, [pc, #48]	@ (8001b6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b3a:	490d      	ldr	r1, [pc, #52]	@ (8001b70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b40:	e002      	b.n	8001b48 <LoopCopyDataInit>

08001b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b46:	3304      	adds	r3, #4

08001b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b4c:	d3f9      	bcc.n	8001b42 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b50:	4c0a      	ldr	r4, [pc, #40]	@ (8001b7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b54:	e001      	b.n	8001b5a <LoopFillZerobss>

08001b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b58:	3204      	adds	r2, #4

08001b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b5c:	d3fb      	bcc.n	8001b56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b5e:	f00f fbe9 	bl	8011334 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b62:	f7fe fc0d 	bl	8000380 <main>
  bx  lr
 8001b66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b68:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001b6c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b70:	240000e8 	.word	0x240000e8
  ldr r2, =_sidata
 8001b74:	080129d8 	.word	0x080129d8
  ldr r2, =_sbss
 8001b78:	240000e8 	.word	0x240000e8
  ldr r4, =_ebss
 8001b7c:	2400186c 	.word	0x2400186c

08001b80 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b80:	e7fe      	b.n	8001b80 <ADC3_IRQHandler>
	...

08001b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b8a:	2003      	movs	r0, #3
 8001b8c:	f001 fed4 	bl	8003938 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b90:	f006 feb0 	bl	80088f4 <HAL_RCC_GetSysClockFreq>
 8001b94:	4602      	mov	r2, r0
 8001b96:	4b15      	ldr	r3, [pc, #84]	@ (8001bec <HAL_Init+0x68>)
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	0a1b      	lsrs	r3, r3, #8
 8001b9c:	f003 030f 	and.w	r3, r3, #15
 8001ba0:	4913      	ldr	r1, [pc, #76]	@ (8001bf0 <HAL_Init+0x6c>)
 8001ba2:	5ccb      	ldrb	r3, [r1, r3]
 8001ba4:	f003 031f 	and.w	r3, r3, #31
 8001ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bae:	4b0f      	ldr	r3, [pc, #60]	@ (8001bec <HAL_Init+0x68>)
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	4a0e      	ldr	r2, [pc, #56]	@ (8001bf0 <HAL_Init+0x6c>)
 8001bb8:	5cd3      	ldrb	r3, [r2, r3]
 8001bba:	f003 031f 	and.w	r3, r3, #31
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc4:	4a0b      	ldr	r2, [pc, #44]	@ (8001bf4 <HAL_Init+0x70>)
 8001bc6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bc8:	4a0b      	ldr	r2, [pc, #44]	@ (8001bf8 <HAL_Init+0x74>)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bce:	2005      	movs	r0, #5
 8001bd0:	f000 f814 	bl	8001bfc <HAL_InitTick>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e002      	b.n	8001be4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bde:	f7ff fa39 	bl	8001054 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	58024400 	.word	0x58024400
 8001bf0:	08012020 	.word	0x08012020
 8001bf4:	2400005c 	.word	0x2400005c
 8001bf8:	24000058 	.word	0x24000058

08001bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c04:	4b15      	ldr	r3, [pc, #84]	@ (8001c5c <HAL_InitTick+0x60>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e021      	b.n	8001c54 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c10:	4b13      	ldr	r3, [pc, #76]	@ (8001c60 <HAL_InitTick+0x64>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4b11      	ldr	r3, [pc, #68]	@ (8001c5c <HAL_InitTick+0x60>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c26:	4618      	mov	r0, r3
 8001c28:	f001 feb9 	bl	800399e <HAL_SYSTICK_Config>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e00e      	b.n	8001c54 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b0f      	cmp	r3, #15
 8001c3a:	d80a      	bhi.n	8001c52 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	f04f 30ff 	mov.w	r0, #4294967295
 8001c44:	f001 fe83 	bl	800394e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c48:	4a06      	ldr	r2, [pc, #24]	@ (8001c64 <HAL_InitTick+0x68>)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	e000      	b.n	8001c54 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	24000064 	.word	0x24000064
 8001c60:	24000058 	.word	0x24000058
 8001c64:	24000060 	.word	0x24000060

08001c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c6c:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <HAL_IncTick+0x20>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <HAL_IncTick+0x24>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4413      	add	r3, r2
 8001c78:	4a04      	ldr	r2, [pc, #16]	@ (8001c8c <HAL_IncTick+0x24>)
 8001c7a:	6013      	str	r3, [r2, #0]
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	24000064 	.word	0x24000064
 8001c8c:	240004e8 	.word	0x240004e8

08001c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return uwTick;
 8001c94:	4b03      	ldr	r3, [pc, #12]	@ (8001ca4 <HAL_GetTick+0x14>)
 8001c96:	681b      	ldr	r3, [r3, #0]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	240004e8 	.word	0x240004e8

08001ca8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001cac:	4b03      	ldr	r3, [pc, #12]	@ (8001cbc <HAL_GetREVID+0x14>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	0c1b      	lsrs	r3, r3, #16
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	5c001000 	.word	0x5c001000

08001cc0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT4 around 1.5 V.
  *                                                This requires VDDA equal to or higher than 1.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8001cc8:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001cd0:	4904      	ldr	r1, [pc, #16]	@ (8001ce4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	600b      	str	r3, [r1, #0]
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	58003c00 	.word	0x58003c00

08001ce8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001cf0:	4b06      	ldr	r3, [pc, #24]	@ (8001d0c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f023 0202 	bic.w	r2, r3, #2
 8001cf8:	4904      	ldr	r1, [pc, #16]	@ (8001d0c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	600b      	str	r3, [r1, #0]
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	58003c00 	.word	0x58003c00

08001d10 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8001d16:	4b0f      	ldr	r3, [pc, #60]	@ (8001d54 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a0e      	ldr	r2, [pc, #56]	@ (8001d54 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001d22:	f7ff ffb5 	bl	8001c90 <HAL_GetTick>
 8001d26:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8001d28:	e008      	b.n	8001d3c <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8001d2a:	f7ff ffb1 	bl	8001c90 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b0a      	cmp	r3, #10
 8001d36:	d901      	bls.n	8001d3c <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e006      	b.n	8001d4a <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8001d3c:	4b05      	ldr	r3, [pc, #20]	@ (8001d54 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0308 	and.w	r3, r3, #8
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0f0      	beq.n	8001d2a <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	58003c00 	.word	0x58003c00

08001d58 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	609a      	str	r2, [r3, #8]
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	609a      	str	r2, [r3, #8]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b087      	sub	sp, #28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d107      	bne.n	8001de4 <LL_ADC_SetChannelPreselection+0x24>
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	0e9b      	lsrs	r3, r3, #26
 8001dd8:	f003 031f 	and.w	r3, r3, #31
 8001ddc:	2201      	movs	r2, #1
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	e015      	b.n	8001e10 <LL_ADC_SetChannelPreselection+0x50>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	fa93 f3a3 	rbit	r3, r3
 8001dee:	60fb      	str	r3, [r7, #12]
  return result;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8001dfa:	2320      	movs	r3, #32
 8001dfc:	e003      	b.n	8001e06 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	fab3 f383 	clz	r3, r3
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	f003 031f 	and.w	r3, r3, #31
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	69d2      	ldr	r2, [r2, #28]
 8001e14:	431a      	orrs	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8001e1a:	bf00      	nop
 8001e1c:	371c      	adds	r7, #28
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b087      	sub	sp, #28
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	60f8      	str	r0, [r7, #12]
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	607a      	str	r2, [r7, #4]
 8001e32:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	3360      	adds	r3, #96	@ 0x60
 8001e38:	461a      	mov	r2, r3
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	430b      	orrs	r3, r1
 8001e54:	431a      	orrs	r2, r3
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001e5a:	bf00      	nop
 8001e5c:	371c      	adds	r7, #28
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b085      	sub	sp, #20
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	60f8      	str	r0, [r7, #12]
 8001e6e:	60b9      	str	r1, [r7, #8]
 8001e70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	f003 031f 	and.w	r3, r3, #31
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	fa01 f303 	lsl.w	r3, r1, r3
 8001e86:	431a      	orrs	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
}
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b087      	sub	sp, #28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	3360      	adds	r3, #96	@ 0x60
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	601a      	str	r2, [r3, #0]
  }
}
 8001ec2:	bf00      	nop
 8001ec4:	371c      	adds	r7, #28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b087      	sub	sp, #28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	3330      	adds	r3, #48	@ 0x30
 8001f04:	461a      	mov	r2, r3
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	0a1b      	lsrs	r3, r3, #8
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	f003 030c 	and.w	r3, r3, #12
 8001f10:	4413      	add	r3, r2
 8001f12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f003 031f 	and.w	r3, r3, #31
 8001f1e:	211f      	movs	r1, #31
 8001f20:	fa01 f303 	lsl.w	r3, r1, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	401a      	ands	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	0e9b      	lsrs	r3, r3, #26
 8001f2c:	f003 011f 	and.w	r1, r3, #31
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f003 031f 	and.w	r3, r3, #31
 8001f36:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f40:	bf00      	nop
 8001f42:	371c      	adds	r7, #28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f58:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001f60:	2301      	movs	r3, #1
 8001f62:	e000      	b.n	8001f66 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b087      	sub	sp, #28
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	60f8      	str	r0, [r7, #12]
 8001f7a:	60b9      	str	r1, [r7, #8]
 8001f7c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	3314      	adds	r3, #20
 8001f82:	461a      	mov	r2, r3
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	0e5b      	lsrs	r3, r3, #25
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	4413      	add	r3, r2
 8001f90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	0d1b      	lsrs	r3, r3, #20
 8001f9a:	f003 031f 	and.w	r3, r3, #31
 8001f9e:	2107      	movs	r1, #7
 8001fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	401a      	ands	r2, r3
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	0d1b      	lsrs	r3, r3, #20
 8001fac:	f003 031f 	and.w	r3, r3, #31
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001fbc:	bf00      	nop
 8001fbe:	371c      	adds	r7, #28
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f003 0318 	and.w	r3, r3, #24
 8001fea:	4908      	ldr	r1, [pc, #32]	@ (800200c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001fec:	40d9      	lsrs	r1, r3
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	400b      	ands	r3, r1
 8001ff2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001ffe:	bf00      	nop
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	000fffff 	.word	0x000fffff

08002010 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 031f 	and.w	r3, r3, #31
}
 8002020:	4618      	mov	r0, r3
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 800203c:	4618      	mov	r0, r3
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	4b04      	ldr	r3, [pc, #16]	@ (8002068 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002056:	4013      	ands	r3, r2
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6093      	str	r3, [r2, #8]
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	5fffffc0 	.word	0x5fffffc0

0800206c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800207c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002080:	d101      	bne.n	8002086 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	4b05      	ldr	r3, [pc, #20]	@ (80020b8 <LL_ADC_EnableInternalRegulator+0x24>)
 80020a2:	4013      	ands	r3, r2
 80020a4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	6fffffc0 	.word	0x6fffffc0

080020bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80020d0:	d101      	bne.n	80020d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	4b05      	ldr	r3, [pc, #20]	@ (8002108 <LL_ADC_Enable+0x24>)
 80020f2:	4013      	ands	r3, r2
 80020f4:	f043 0201 	orr.w	r2, r3, #1
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	7fffffc0 	.word	0x7fffffc0

0800210c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <LL_ADC_IsEnabled+0x18>
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <LL_ADC_IsEnabled+0x1a>
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
	...

08002134 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	4b05      	ldr	r3, [pc, #20]	@ (8002158 <LL_ADC_REG_StartConversion+0x24>)
 8002142:	4013      	ands	r3, r2
 8002144:	f043 0204 	orr.w	r2, r3, #4
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	7fffffc0 	.word	0x7fffffc0

0800215c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b04      	cmp	r3, #4
 800216e:	d101      	bne.n	8002174 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002170:	2301      	movs	r3, #1
 8002172:	e000      	b.n	8002176 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 0308 	and.w	r3, r3, #8
 8002192:	2b08      	cmp	r3, #8
 8002194:	d101      	bne.n	800219a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021a8:	b590      	push	{r4, r7, lr}
 80021aa:	b089      	sub	sp, #36	@ 0x24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e18f      	b.n	80024e2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d109      	bne.n	80021e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7fe ff6f 	bl	80010b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff3f 	bl	800206c <LL_ADC_IsDeepPowerDownEnabled>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d004      	beq.n	80021fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff25 	bl	8002048 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff ff5a 	bl	80020bc <LL_ADC_IsInternalRegulatorEnabled>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d114      	bne.n	8002238 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff ff3e 	bl	8002094 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002218:	4b87      	ldr	r3, [pc, #540]	@ (8002438 <HAL_ADC_Init+0x290>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	099b      	lsrs	r3, r3, #6
 800221e:	4a87      	ldr	r2, [pc, #540]	@ (800243c <HAL_ADC_Init+0x294>)
 8002220:	fba2 2303 	umull	r2, r3, r2, r3
 8002224:	099b      	lsrs	r3, r3, #6
 8002226:	3301      	adds	r3, #1
 8002228:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800222a:	e002      	b.n	8002232 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	3b01      	subs	r3, #1
 8002230:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1f9      	bne.n	800222c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ff3d 	bl	80020bc <LL_ADC_IsInternalRegulatorEnabled>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10d      	bne.n	8002264 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800224c:	f043 0210 	orr.w	r2, r3, #16
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002258:	f043 0201 	orr.w	r2, r3, #1
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff77 	bl	800215c <LL_ADC_REG_IsConversionOngoing>
 800226e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002274:	f003 0310 	and.w	r3, r3, #16
 8002278:	2b00      	cmp	r3, #0
 800227a:	f040 8129 	bne.w	80024d0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	2b00      	cmp	r3, #0
 8002282:	f040 8125 	bne.w	80024d0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800228a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800228e:	f043 0202 	orr.w	r2, r3, #2
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff ff36 	bl	800210c <LL_ADC_IsEnabled>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d136      	bne.n	8002314 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a65      	ldr	r2, [pc, #404]	@ (8002440 <HAL_ADC_Init+0x298>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d004      	beq.n	80022ba <HAL_ADC_Init+0x112>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a63      	ldr	r2, [pc, #396]	@ (8002444 <HAL_ADC_Init+0x29c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d10e      	bne.n	80022d8 <HAL_ADC_Init+0x130>
 80022ba:	4861      	ldr	r0, [pc, #388]	@ (8002440 <HAL_ADC_Init+0x298>)
 80022bc:	f7ff ff26 	bl	800210c <LL_ADC_IsEnabled>
 80022c0:	4604      	mov	r4, r0
 80022c2:	4860      	ldr	r0, [pc, #384]	@ (8002444 <HAL_ADC_Init+0x29c>)
 80022c4:	f7ff ff22 	bl	800210c <LL_ADC_IsEnabled>
 80022c8:	4603      	mov	r3, r0
 80022ca:	4323      	orrs	r3, r4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	bf0c      	ite	eq
 80022d0:	2301      	moveq	r3, #1
 80022d2:	2300      	movne	r3, #0
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	e008      	b.n	80022ea <HAL_ADC_Init+0x142>
 80022d8:	485b      	ldr	r0, [pc, #364]	@ (8002448 <HAL_ADC_Init+0x2a0>)
 80022da:	f7ff ff17 	bl	800210c <LL_ADC_IsEnabled>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	bf0c      	ite	eq
 80022e4:	2301      	moveq	r3, #1
 80022e6:	2300      	movne	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d012      	beq.n	8002314 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a53      	ldr	r2, [pc, #332]	@ (8002440 <HAL_ADC_Init+0x298>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d004      	beq.n	8002302 <HAL_ADC_Init+0x15a>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a51      	ldr	r2, [pc, #324]	@ (8002444 <HAL_ADC_Init+0x29c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d101      	bne.n	8002306 <HAL_ADC_Init+0x15e>
 8002302:	4a52      	ldr	r2, [pc, #328]	@ (800244c <HAL_ADC_Init+0x2a4>)
 8002304:	e000      	b.n	8002308 <HAL_ADC_Init+0x160>
 8002306:	4a52      	ldr	r2, [pc, #328]	@ (8002450 <HAL_ADC_Init+0x2a8>)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	4619      	mov	r1, r3
 800230e:	4610      	mov	r0, r2
 8002310:	f7ff fd22 	bl	8001d58 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002314:	f7ff fcc8 	bl	8001ca8 <HAL_GetREVID>
 8002318:	4603      	mov	r3, r0
 800231a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800231e:	4293      	cmp	r3, r2
 8002320:	d914      	bls.n	800234c <HAL_ADC_Init+0x1a4>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	2b10      	cmp	r3, #16
 8002328:	d110      	bne.n	800234c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	7d5b      	ldrb	r3, [r3, #21]
 800232e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002334:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800233a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	7f1b      	ldrb	r3, [r3, #28]
 8002340:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002342:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002344:	f043 030c 	orr.w	r3, r3, #12
 8002348:	61bb      	str	r3, [r7, #24]
 800234a:	e00d      	b.n	8002368 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	7d5b      	ldrb	r3, [r3, #21]
 8002350:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002356:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800235c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	7f1b      	ldrb	r3, [r3, #28]
 8002362:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	7f1b      	ldrb	r3, [r3, #28]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d106      	bne.n	800237e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	3b01      	subs	r3, #1
 8002376:	045b      	lsls	r3, r3, #17
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002382:	2b00      	cmp	r3, #0
 8002384:	d009      	beq.n	800239a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002392:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	4b2c      	ldr	r3, [pc, #176]	@ (8002454 <HAL_ADC_Init+0x2ac>)
 80023a2:	4013      	ands	r3, r2
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	69b9      	ldr	r1, [r7, #24]
 80023aa:	430b      	orrs	r3, r1
 80023ac:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff fed2 	bl	800215c <LL_ADC_REG_IsConversionOngoing>
 80023b8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fedf 	bl	8002182 <LL_ADC_INJ_IsConversionOngoing>
 80023c4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d15f      	bne.n	800248c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d15c      	bne.n	800248c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	7d1b      	ldrb	r3, [r3, #20]
 80023d6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002458 <HAL_ADC_Init+0x2b0>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6812      	ldr	r2, [r2, #0]
 80023ee:	69b9      	ldr	r1, [r7, #24]
 80023f0:	430b      	orrs	r3, r1
 80023f2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d130      	bne.n	8002460 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002402:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	691a      	ldr	r2, [r3, #16]
 800240a:	4b14      	ldr	r3, [pc, #80]	@ (800245c <HAL_ADC_Init+0x2b4>)
 800240c:	4013      	ands	r3, r2
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002412:	3a01      	subs	r2, #1
 8002414:	0411      	lsls	r1, r2, #16
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800241a:	4311      	orrs	r1, r2
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002420:	4311      	orrs	r1, r2
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002426:	430a      	orrs	r2, r1
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0201 	orr.w	r2, r2, #1
 8002432:	611a      	str	r2, [r3, #16]
 8002434:	e01c      	b.n	8002470 <HAL_ADC_Init+0x2c8>
 8002436:	bf00      	nop
 8002438:	24000058 	.word	0x24000058
 800243c:	053e2d63 	.word	0x053e2d63
 8002440:	40022000 	.word	0x40022000
 8002444:	40022100 	.word	0x40022100
 8002448:	58026000 	.word	0x58026000
 800244c:	40022300 	.word	0x40022300
 8002450:	58026300 	.word	0x58026300
 8002454:	fff0c003 	.word	0xfff0c003
 8002458:	ffffbffc 	.word	0xffffbffc
 800245c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	691a      	ldr	r2, [r3, #16]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0201 	bic.w	r2, r2, #1
 800246e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 ff44 	bl	8003314 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d10c      	bne.n	80024ae <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249a:	f023 010f 	bic.w	r1, r3, #15
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	1e5a      	subs	r2, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80024ac:	e007      	b.n	80024be <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 020f 	bic.w	r2, r2, #15
 80024bc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c2:	f023 0303 	bic.w	r3, r3, #3
 80024c6:	f043 0201 	orr.w	r2, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	655a      	str	r2, [r3, #84]	@ 0x54
 80024ce:	e007      	b.n	80024e0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024d4:	f043 0210 	orr.w	r2, r3, #16
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3724      	adds	r7, #36	@ 0x24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd90      	pop	{r4, r7, pc}
 80024ea:	bf00      	nop

080024ec <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a92      	ldr	r2, [pc, #584]	@ (8002744 <HAL_ADC_Start_IT+0x258>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d004      	beq.n	8002508 <HAL_ADC_Start_IT+0x1c>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a91      	ldr	r2, [pc, #580]	@ (8002748 <HAL_ADC_Start_IT+0x25c>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d101      	bne.n	800250c <HAL_ADC_Start_IT+0x20>
 8002508:	4b90      	ldr	r3, [pc, #576]	@ (800274c <HAL_ADC_Start_IT+0x260>)
 800250a:	e000      	b.n	800250e <HAL_ADC_Start_IT+0x22>
 800250c:	4b90      	ldr	r3, [pc, #576]	@ (8002750 <HAL_ADC_Start_IT+0x264>)
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fd7e 	bl	8002010 <LL_ADC_GetMultimode>
 8002514:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fe1e 	bl	800215c <LL_ADC_REG_IsConversionOngoing>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	f040 8118 	bne.w	8002758 <HAL_ADC_Start_IT+0x26c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800252e:	2b01      	cmp	r3, #1
 8002530:	d101      	bne.n	8002536 <HAL_ADC_Start_IT+0x4a>
 8002532:	2302      	movs	r3, #2
 8002534:	e113      	b.n	800275e <HAL_ADC_Start_IT+0x272>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 fe5e 	bl	8003200 <ADC_Enable>
 8002544:	4603      	mov	r3, r0
 8002546:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002548:	7dfb      	ldrb	r3, [r7, #23]
 800254a:	2b00      	cmp	r3, #0
 800254c:	f040 80f5 	bne.w	800273a <HAL_ADC_Start_IT+0x24e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002554:	4b7f      	ldr	r3, [pc, #508]	@ (8002754 <HAL_ADC_Start_IT+0x268>)
 8002556:	4013      	ands	r3, r2
 8002558:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a78      	ldr	r2, [pc, #480]	@ (8002748 <HAL_ADC_Start_IT+0x25c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d002      	beq.n	8002570 <HAL_ADC_Start_IT+0x84>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	e000      	b.n	8002572 <HAL_ADC_Start_IT+0x86>
 8002570:	4b74      	ldr	r3, [pc, #464]	@ (8002744 <HAL_ADC_Start_IT+0x258>)
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6812      	ldr	r2, [r2, #0]
 8002576:	4293      	cmp	r3, r2
 8002578:	d002      	beq.n	8002580 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d105      	bne.n	800258c <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002584:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002590:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d006      	beq.n	80025a6 <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259c:	f023 0206 	bic.w	r2, r3, #6
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	659a      	str	r2, [r3, #88]	@ 0x58
 80025a4:	e002      	b.n	80025ac <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	221c      	movs	r2, #28
 80025b2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 021c 	bic.w	r2, r2, #28
 80025ca:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d108      	bne.n	80025e6 <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0208 	orr.w	r2, r2, #8
 80025e2:	605a      	str	r2, [r3, #4]
          break;
 80025e4:	e008      	b.n	80025f8 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f042 0204 	orr.w	r2, r2, #4
 80025f4:	605a      	str	r2, [r3, #4]
          break;
 80025f6:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d107      	bne.n	8002610 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0210 	orr.w	r2, r2, #16
 800260e:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a4c      	ldr	r2, [pc, #304]	@ (8002748 <HAL_ADC_Start_IT+0x25c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d002      	beq.n	8002620 <HAL_ADC_Start_IT+0x134>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	e000      	b.n	8002622 <HAL_ADC_Start_IT+0x136>
 8002620:	4b48      	ldr	r3, [pc, #288]	@ (8002744 <HAL_ADC_Start_IT+0x258>)
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6812      	ldr	r2, [r2, #0]
 8002626:	4293      	cmp	r3, r2
 8002628:	d008      	beq.n	800263c <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	2b05      	cmp	r3, #5
 8002634:	d002      	beq.n	800263c <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	2b09      	cmp	r3, #9
 800263a:	d13a      	bne.n	80026b2 <HAL_ADC_Start_IT+0x1c6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d02d      	beq.n	80026a6 <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800264e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002652:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	2b08      	cmp	r3, #8
 8002660:	d110      	bne.n	8002684 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0220 	bic.w	r2, r2, #32
 8002670:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002680:	605a      	str	r2, [r3, #4]
              break;
 8002682:	e010      	b.n	80026a6 <HAL_ADC_Start_IT+0x1ba>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002692:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0220 	orr.w	r2, r2, #32
 80026a2:	605a      	str	r2, [r3, #4]
              break;
 80026a4:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff fd42 	bl	8002134 <LL_ADC_REG_StartConversion>
 80026b0:	e054      	b.n	800275c <HAL_ADC_Start_IT+0x270>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a21      	ldr	r2, [pc, #132]	@ (8002748 <HAL_ADC_Start_IT+0x25c>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d002      	beq.n	80026ce <HAL_ADC_Start_IT+0x1e2>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	e000      	b.n	80026d0 <HAL_ADC_Start_IT+0x1e4>
 80026ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002744 <HAL_ADC_Start_IT+0x258>)
 80026d0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d03e      	beq.n	800275c <HAL_ADC_Start_IT+0x270>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80026e6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	655a      	str	r2, [r3, #84]	@ 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	2b08      	cmp	r3, #8
 80026f4:	d110      	bne.n	8002718 <HAL_ADC_Start_IT+0x22c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0220 	bic.w	r2, r2, #32
 8002704:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002714:	605a      	str	r2, [r3, #4]
              break;
 8002716:	e021      	b.n	800275c <HAL_ADC_Start_IT+0x270>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002726:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0220 	orr.w	r2, r2, #32
 8002736:	605a      	str	r2, [r3, #4]
              break;
 8002738:	e010      	b.n	800275c <HAL_ADC_Start_IT+0x270>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002742:	e00b      	b.n	800275c <HAL_ADC_Start_IT+0x270>
 8002744:	40022000 	.word	0x40022000
 8002748:	40022100 	.word	0x40022100
 800274c:	40022300 	.word	0x40022300
 8002750:	58026300 	.word	0x58026300
 8002754:	fffff0fe 	.word	0xfffff0fe
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002758:	2302      	movs	r3, #2
 800275a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800275c:	7dfb      	ldrb	r3, [r7, #23]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop

08002768 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002776:	4618      	mov	r0, r3
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
	...

08002784 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b08a      	sub	sp, #40	@ 0x28
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800278c:	2300      	movs	r3, #0
 800278e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a87      	ldr	r2, [pc, #540]	@ (80029c4 <HAL_ADC_IRQHandler+0x240>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d004      	beq.n	80027b4 <HAL_ADC_IRQHandler+0x30>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a86      	ldr	r2, [pc, #536]	@ (80029c8 <HAL_ADC_IRQHandler+0x244>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d101      	bne.n	80027b8 <HAL_ADC_IRQHandler+0x34>
 80027b4:	4b85      	ldr	r3, [pc, #532]	@ (80029cc <HAL_ADC_IRQHandler+0x248>)
 80027b6:	e000      	b.n	80027ba <HAL_ADC_IRQHandler+0x36>
 80027b8:	4b85      	ldr	r3, [pc, #532]	@ (80029d0 <HAL_ADC_IRQHandler+0x24c>)
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff fc28 	bl	8002010 <LL_ADC_GetMultimode>
 80027c0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d017      	beq.n	80027fc <HAL_ADC_IRQHandler+0x78>
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d012      	beq.n	80027fc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027da:	f003 0310 	and.w	r3, r3, #16
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d105      	bne.n	80027ee <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 feea 	bl	80035c8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2202      	movs	r2, #2
 80027fa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f003 0304 	and.w	r3, r3, #4
 8002802:	2b00      	cmp	r3, #0
 8002804:	d004      	beq.n	8002810 <HAL_ADC_IRQHandler+0x8c>
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10a      	bne.n	8002826 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 8083 	beq.w	8002922 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b00      	cmp	r3, #0
 8002824:	d07d      	beq.n	8002922 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800282a:	f003 0310 	and.w	r3, r3, #16
 800282e:	2b00      	cmp	r3, #0
 8002830:	d105      	bne.n	800283e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002836:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff fb43 	bl	8001ece <LL_ADC_REG_IsTriggerSourceSWStart>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d062      	beq.n	8002914 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a5d      	ldr	r2, [pc, #372]	@ (80029c8 <HAL_ADC_IRQHandler+0x244>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d002      	beq.n	800285e <HAL_ADC_IRQHandler+0xda>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	e000      	b.n	8002860 <HAL_ADC_IRQHandler+0xdc>
 800285e:	4b59      	ldr	r3, [pc, #356]	@ (80029c4 <HAL_ADC_IRQHandler+0x240>)
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	4293      	cmp	r3, r2
 8002866:	d008      	beq.n	800287a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d005      	beq.n	800287a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2b05      	cmp	r3, #5
 8002872:	d002      	beq.n	800287a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	2b09      	cmp	r3, #9
 8002878:	d104      	bne.n	8002884 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	623b      	str	r3, [r7, #32]
 8002882:	e00c      	b.n	800289e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a4f      	ldr	r2, [pc, #316]	@ (80029c8 <HAL_ADC_IRQHandler+0x244>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d002      	beq.n	8002894 <HAL_ADC_IRQHandler+0x110>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	e000      	b.n	8002896 <HAL_ADC_IRQHandler+0x112>
 8002894:	4b4b      	ldr	r3, [pc, #300]	@ (80029c4 <HAL_ADC_IRQHandler+0x240>)
 8002896:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d135      	bne.n	8002914 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d12e      	bne.n	8002914 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff fc4e 	bl	800215c <LL_ADC_REG_IsConversionOngoing>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d11a      	bne.n	80028fc <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 020c 	bic.w	r2, r2, #12
 80028d4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028da:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d112      	bne.n	8002914 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f2:	f043 0201 	orr.w	r2, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	655a      	str	r2, [r3, #84]	@ 0x54
 80028fa:	e00b      	b.n	8002914 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002900:	f043 0210 	orr.w	r2, r3, #16
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800290c:	f043 0201 	orr.w	r2, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7fe ff7f 	bl	8001818 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	220c      	movs	r2, #12
 8002920:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	f003 0320 	and.w	r3, r3, #32
 8002928:	2b00      	cmp	r3, #0
 800292a:	d004      	beq.n	8002936 <HAL_ADC_IRQHandler+0x1b2>
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	f003 0320 	and.w	r3, r3, #32
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10b      	bne.n	800294e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 80a0 	beq.w	8002a82 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 809a 	beq.w	8002a82 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002952:	f003 0310 	and.w	r3, r3, #16
 8002956:	2b00      	cmp	r3, #0
 8002958:	d105      	bne.n	8002966 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800295e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff faee 	bl	8001f4c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002970:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff faa9 	bl	8001ece <LL_ADC_REG_IsTriggerSourceSWStart>
 800297c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a11      	ldr	r2, [pc, #68]	@ (80029c8 <HAL_ADC_IRQHandler+0x244>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d002      	beq.n	800298e <HAL_ADC_IRQHandler+0x20a>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	e000      	b.n	8002990 <HAL_ADC_IRQHandler+0x20c>
 800298e:	4b0d      	ldr	r3, [pc, #52]	@ (80029c4 <HAL_ADC_IRQHandler+0x240>)
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6812      	ldr	r2, [r2, #0]
 8002994:	4293      	cmp	r3, r2
 8002996:	d008      	beq.n	80029aa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d005      	beq.n	80029aa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	2b06      	cmp	r3, #6
 80029a2:	d002      	beq.n	80029aa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	2b07      	cmp	r3, #7
 80029a8:	d104      	bne.n	80029b4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	623b      	str	r3, [r7, #32]
 80029b2:	e014      	b.n	80029de <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a03      	ldr	r2, [pc, #12]	@ (80029c8 <HAL_ADC_IRQHandler+0x244>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d00a      	beq.n	80029d4 <HAL_ADC_IRQHandler+0x250>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	e008      	b.n	80029d6 <HAL_ADC_IRQHandler+0x252>
 80029c4:	40022000 	.word	0x40022000
 80029c8:	40022100 	.word	0x40022100
 80029cc:	40022300 	.word	0x40022300
 80029d0:	58026300 	.word	0x58026300
 80029d4:	4b84      	ldr	r3, [pc, #528]	@ (8002be8 <HAL_ADC_IRQHandler+0x464>)
 80029d6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d047      	beq.n	8002a74 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d007      	beq.n	80029fe <HAL_ADC_IRQHandler+0x27a>
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d03f      	beq.n	8002a74 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80029f4:	6a3b      	ldr	r3, [r7, #32]
 80029f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d13a      	bne.n	8002a74 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a08:	2b40      	cmp	r3, #64	@ 0x40
 8002a0a:	d133      	bne.n	8002a74 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d12e      	bne.n	8002a74 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff fbb1 	bl	8002182 <LL_ADC_INJ_IsConversionOngoing>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d11a      	bne.n	8002a5c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002a34:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a3a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d112      	bne.n	8002a74 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a52:	f043 0201 	orr.w	r2, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	655a      	str	r2, [r3, #84]	@ 0x54
 8002a5a:	e00b      	b.n	8002a74 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a60:	f043 0210 	orr.w	r2, r3, #16
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a6c:	f043 0201 	orr.w	r2, r3, #1
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 fd7f 	bl	8003578 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2260      	movs	r2, #96	@ 0x60
 8002a80:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d011      	beq.n	8002ab0 <HAL_ADC_IRQHandler+0x32c>
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00c      	beq.n	8002ab0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a9a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f8a8 	bl	8002bf8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2280      	movs	r2, #128	@ 0x80
 8002aae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d012      	beq.n	8002ae0 <HAL_ADC_IRQHandler+0x35c>
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00d      	beq.n	8002ae0 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 fd65 	bl	80035a0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ade:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d012      	beq.n	8002b10 <HAL_ADC_IRQHandler+0x38c>
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00d      	beq.n	8002b10 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 fd57 	bl	80035b4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b0e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	f003 0310 	and.w	r3, r3, #16
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d043      	beq.n	8002ba2 <HAL_ADC_IRQHandler+0x41e>
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	f003 0310 	and.w	r3, r3, #16
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d03e      	beq.n	8002ba2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d102      	bne.n	8002b32 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b30:	e021      	b.n	8002b76 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d015      	beq.n	8002b64 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a2a      	ldr	r2, [pc, #168]	@ (8002be8 <HAL_ADC_IRQHandler+0x464>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d004      	beq.n	8002b4c <HAL_ADC_IRQHandler+0x3c8>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a29      	ldr	r2, [pc, #164]	@ (8002bec <HAL_ADC_IRQHandler+0x468>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d101      	bne.n	8002b50 <HAL_ADC_IRQHandler+0x3cc>
 8002b4c:	4b28      	ldr	r3, [pc, #160]	@ (8002bf0 <HAL_ADC_IRQHandler+0x46c>)
 8002b4e:	e000      	b.n	8002b52 <HAL_ADC_IRQHandler+0x3ce>
 8002b50:	4b28      	ldr	r3, [pc, #160]	@ (8002bf4 <HAL_ADC_IRQHandler+0x470>)
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff fa6a 	bl	800202c <LL_ADC_GetMultiDMATransfer>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00b      	beq.n	8002b76 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b62:	e008      	b.n	8002b76 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002b72:	2301      	movs	r3, #1
 8002b74:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d10e      	bne.n	8002b9a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b80:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b8c:	f043 0202 	orr.w	r2, r3, #2
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f839 	bl	8002c0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2210      	movs	r2, #16
 8002ba0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d018      	beq.n	8002bde <HAL_ADC_IRQHandler+0x45a>
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d013      	beq.n	8002bde <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bba:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc6:	f043 0208 	orr.w	r2, r3, #8
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002bd6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 fcd7 	bl	800358c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002bde:	bf00      	nop
 8002be0:	3728      	adds	r7, #40	@ 0x28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40022000 	.word	0x40022000
 8002bec:	40022100 	.word	0x40022100
 8002bf0:	40022300 	.word	0x40022300
 8002bf4:	58026300 	.word	0x58026300

08002bf8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c20:	b590      	push	{r4, r7, lr}
 8002c22:	b08d      	sub	sp, #52	@ 0x34
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	4a65      	ldr	r2, [pc, #404]	@ (8002dd0 <HAL_ADC_ConfigChannel+0x1b0>)
 8002c3a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x2a>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e2c7      	b.n	80031da <HAL_ADC_ConfigChannel+0x5ba>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff fa80 	bl	800215c <LL_ADC_REG_IsConversionOngoing>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f040 82ac 	bne.w	80031bc <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	db2c      	blt.n	8002cc6 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d108      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x6a>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	0e9b      	lsrs	r3, r3, #26
 8002c7e:	f003 031f 	and.w	r3, r3, #31
 8002c82:	2201      	movs	r2, #1
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	e016      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x98>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	fa93 f3a3 	rbit	r3, r3
 8002c96:	613b      	str	r3, [r7, #16]
  return result;
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8002ca2:	2320      	movs	r3, #32
 8002ca4:	e003      	b.n	8002cae <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	fab3 f383 	clz	r3, r3
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	f003 031f 	and.w	r3, r3, #31
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6812      	ldr	r2, [r2, #0]
 8002cbc:	69d1      	ldr	r1, [r2, #28]
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6812      	ldr	r2, [r2, #0]
 8002cc2:	430b      	orrs	r3, r1
 8002cc4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6818      	ldr	r0, [r3, #0]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	6859      	ldr	r1, [r3, #4]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	f7ff f90e 	bl	8001ef4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff fa3d 	bl	800215c <LL_ADC_REG_IsConversionOngoing>
 8002ce2:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff fa4a 	bl	8002182 <LL_ADC_INJ_IsConversionOngoing>
 8002cee:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f040 80b8 	bne.w	8002e68 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f040 80b4 	bne.w	8002e68 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6818      	ldr	r0, [r3, #0]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	6819      	ldr	r1, [r3, #0]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	f7ff f930 	bl	8001f72 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002d12:	4b30      	ldr	r3, [pc, #192]	@ (8002dd4 <HAL_ADC_ConfigChannel+0x1b4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002d1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d1e:	d10b      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x118>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	695a      	ldr	r2, [r3, #20]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	089b      	lsrs	r3, r3, #2
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	e01d      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x154>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f003 0310 	and.w	r3, r3, #16
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10b      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x13e>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	695a      	ldr	r2, [r3, #20]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	089b      	lsrs	r3, r3, #2
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	e00a      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x154>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	695a      	ldr	r2, [r3, #20]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	089b      	lsrs	r3, r3, #2
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d02c      	beq.n	8002dd8 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	6919      	ldr	r1, [r3, #16]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	f7ff f84b 	bl	8001e26 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	6919      	ldr	r1, [r3, #16]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	7e5b      	ldrb	r3, [r3, #25]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d102      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x186>
 8002da0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002da4:	e000      	b.n	8002da8 <HAL_ADC_ConfigChannel+0x188>
 8002da6:	2300      	movs	r3, #0
 8002da8:	461a      	mov	r2, r3
 8002daa:	f7ff f875 	bl	8001e98 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6818      	ldr	r0, [r3, #0]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	6919      	ldr	r1, [r3, #16]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	7e1b      	ldrb	r3, [r3, #24]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d102      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x1a4>
 8002dbe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002dc2:	e000      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x1a6>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	f7ff f84d 	bl	8001e66 <LL_ADC_SetDataRightShift>
 8002dcc:	e04c      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x248>
 8002dce:	bf00      	nop
 8002dd0:	47ff0000 	.word	0x47ff0000
 8002dd4:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dde:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	069b      	lsls	r3, r3, #26
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d107      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002dfa:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e02:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	069b      	lsls	r3, r3, #26
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d107      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e1e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e26:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	069b      	lsls	r3, r3, #26
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d107      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e42:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e4a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	069b      	lsls	r3, r3, #26
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d107      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e66:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff f94d 	bl	800210c <LL_ADC_IsEnabled>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f040 81aa 	bne.w	80031ce <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6818      	ldr	r0, [r3, #0]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	6819      	ldr	r1, [r3, #0]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	461a      	mov	r2, r3
 8002e88:	f7ff f89e 	bl	8001fc8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	4a87      	ldr	r2, [pc, #540]	@ (80030b0 <HAL_ADC_ConfigChannel+0x490>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	f040 809a 	bne.w	8002fcc <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4984      	ldr	r1, [pc, #528]	@ (80030b4 <HAL_ADC_ConfigChannel+0x494>)
 8002ea2:	428b      	cmp	r3, r1
 8002ea4:	d147      	bne.n	8002f36 <HAL_ADC_ConfigChannel+0x316>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4983      	ldr	r1, [pc, #524]	@ (80030b8 <HAL_ADC_ConfigChannel+0x498>)
 8002eac:	428b      	cmp	r3, r1
 8002eae:	d040      	beq.n	8002f32 <HAL_ADC_ConfigChannel+0x312>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4981      	ldr	r1, [pc, #516]	@ (80030bc <HAL_ADC_ConfigChannel+0x49c>)
 8002eb6:	428b      	cmp	r3, r1
 8002eb8:	d039      	beq.n	8002f2e <HAL_ADC_ConfigChannel+0x30e>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4980      	ldr	r1, [pc, #512]	@ (80030c0 <HAL_ADC_ConfigChannel+0x4a0>)
 8002ec0:	428b      	cmp	r3, r1
 8002ec2:	d032      	beq.n	8002f2a <HAL_ADC_ConfigChannel+0x30a>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	497e      	ldr	r1, [pc, #504]	@ (80030c4 <HAL_ADC_ConfigChannel+0x4a4>)
 8002eca:	428b      	cmp	r3, r1
 8002ecc:	d02b      	beq.n	8002f26 <HAL_ADC_ConfigChannel+0x306>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	497d      	ldr	r1, [pc, #500]	@ (80030c8 <HAL_ADC_ConfigChannel+0x4a8>)
 8002ed4:	428b      	cmp	r3, r1
 8002ed6:	d024      	beq.n	8002f22 <HAL_ADC_ConfigChannel+0x302>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	497b      	ldr	r1, [pc, #492]	@ (80030cc <HAL_ADC_ConfigChannel+0x4ac>)
 8002ede:	428b      	cmp	r3, r1
 8002ee0:	d01d      	beq.n	8002f1e <HAL_ADC_ConfigChannel+0x2fe>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	497a      	ldr	r1, [pc, #488]	@ (80030d0 <HAL_ADC_ConfigChannel+0x4b0>)
 8002ee8:	428b      	cmp	r3, r1
 8002eea:	d016      	beq.n	8002f1a <HAL_ADC_ConfigChannel+0x2fa>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4978      	ldr	r1, [pc, #480]	@ (80030d4 <HAL_ADC_ConfigChannel+0x4b4>)
 8002ef2:	428b      	cmp	r3, r1
 8002ef4:	d00f      	beq.n	8002f16 <HAL_ADC_ConfigChannel+0x2f6>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4977      	ldr	r1, [pc, #476]	@ (80030d8 <HAL_ADC_ConfigChannel+0x4b8>)
 8002efc:	428b      	cmp	r3, r1
 8002efe:	d008      	beq.n	8002f12 <HAL_ADC_ConfigChannel+0x2f2>
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4975      	ldr	r1, [pc, #468]	@ (80030dc <HAL_ADC_ConfigChannel+0x4bc>)
 8002f06:	428b      	cmp	r3, r1
 8002f08:	d101      	bne.n	8002f0e <HAL_ADC_ConfigChannel+0x2ee>
 8002f0a:	4b75      	ldr	r3, [pc, #468]	@ (80030e0 <HAL_ADC_ConfigChannel+0x4c0>)
 8002f0c:	e05a      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x3a4>
 8002f0e:	2300      	movs	r3, #0
 8002f10:	e058      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x3a4>
 8002f12:	4b74      	ldr	r3, [pc, #464]	@ (80030e4 <HAL_ADC_ConfigChannel+0x4c4>)
 8002f14:	e056      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x3a4>
 8002f16:	4b74      	ldr	r3, [pc, #464]	@ (80030e8 <HAL_ADC_ConfigChannel+0x4c8>)
 8002f18:	e054      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x3a4>
 8002f1a:	4b6e      	ldr	r3, [pc, #440]	@ (80030d4 <HAL_ADC_ConfigChannel+0x4b4>)
 8002f1c:	e052      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x3a4>
 8002f1e:	4b6c      	ldr	r3, [pc, #432]	@ (80030d0 <HAL_ADC_ConfigChannel+0x4b0>)
 8002f20:	e050      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x3a4>
 8002f22:	4b72      	ldr	r3, [pc, #456]	@ (80030ec <HAL_ADC_ConfigChannel+0x4cc>)
 8002f24:	e04e      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x3a4>
 8002f26:	4b72      	ldr	r3, [pc, #456]	@ (80030f0 <HAL_ADC_ConfigChannel+0x4d0>)
 8002f28:	e04c      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x3a4>
 8002f2a:	4b72      	ldr	r3, [pc, #456]	@ (80030f4 <HAL_ADC_ConfigChannel+0x4d4>)
 8002f2c:	e04a      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x3a4>
 8002f2e:	4b72      	ldr	r3, [pc, #456]	@ (80030f8 <HAL_ADC_ConfigChannel+0x4d8>)
 8002f30:	e048      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x3a4>
 8002f32:	2301      	movs	r3, #1
 8002f34:	e046      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x3a4>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4970      	ldr	r1, [pc, #448]	@ (80030fc <HAL_ADC_ConfigChannel+0x4dc>)
 8002f3c:	428b      	cmp	r3, r1
 8002f3e:	d140      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0x3a2>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	495c      	ldr	r1, [pc, #368]	@ (80030b8 <HAL_ADC_ConfigChannel+0x498>)
 8002f46:	428b      	cmp	r3, r1
 8002f48:	d039      	beq.n	8002fbe <HAL_ADC_ConfigChannel+0x39e>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	495b      	ldr	r1, [pc, #364]	@ (80030bc <HAL_ADC_ConfigChannel+0x49c>)
 8002f50:	428b      	cmp	r3, r1
 8002f52:	d032      	beq.n	8002fba <HAL_ADC_ConfigChannel+0x39a>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4959      	ldr	r1, [pc, #356]	@ (80030c0 <HAL_ADC_ConfigChannel+0x4a0>)
 8002f5a:	428b      	cmp	r3, r1
 8002f5c:	d02b      	beq.n	8002fb6 <HAL_ADC_ConfigChannel+0x396>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4958      	ldr	r1, [pc, #352]	@ (80030c4 <HAL_ADC_ConfigChannel+0x4a4>)
 8002f64:	428b      	cmp	r3, r1
 8002f66:	d024      	beq.n	8002fb2 <HAL_ADC_ConfigChannel+0x392>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4956      	ldr	r1, [pc, #344]	@ (80030c8 <HAL_ADC_ConfigChannel+0x4a8>)
 8002f6e:	428b      	cmp	r3, r1
 8002f70:	d01d      	beq.n	8002fae <HAL_ADC_ConfigChannel+0x38e>
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4955      	ldr	r1, [pc, #340]	@ (80030cc <HAL_ADC_ConfigChannel+0x4ac>)
 8002f78:	428b      	cmp	r3, r1
 8002f7a:	d016      	beq.n	8002faa <HAL_ADC_ConfigChannel+0x38a>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4953      	ldr	r1, [pc, #332]	@ (80030d0 <HAL_ADC_ConfigChannel+0x4b0>)
 8002f82:	428b      	cmp	r3, r1
 8002f84:	d00f      	beq.n	8002fa6 <HAL_ADC_ConfigChannel+0x386>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4952      	ldr	r1, [pc, #328]	@ (80030d4 <HAL_ADC_ConfigChannel+0x4b4>)
 8002f8c:	428b      	cmp	r3, r1
 8002f8e:	d008      	beq.n	8002fa2 <HAL_ADC_ConfigChannel+0x382>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4951      	ldr	r1, [pc, #324]	@ (80030dc <HAL_ADC_ConfigChannel+0x4bc>)
 8002f96:	428b      	cmp	r3, r1
 8002f98:	d101      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0x37e>
 8002f9a:	4b51      	ldr	r3, [pc, #324]	@ (80030e0 <HAL_ADC_ConfigChannel+0x4c0>)
 8002f9c:	e012      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x3a4>
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	e010      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x3a4>
 8002fa2:	4b51      	ldr	r3, [pc, #324]	@ (80030e8 <HAL_ADC_ConfigChannel+0x4c8>)
 8002fa4:	e00e      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x3a4>
 8002fa6:	4b4b      	ldr	r3, [pc, #300]	@ (80030d4 <HAL_ADC_ConfigChannel+0x4b4>)
 8002fa8:	e00c      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x3a4>
 8002faa:	4b49      	ldr	r3, [pc, #292]	@ (80030d0 <HAL_ADC_ConfigChannel+0x4b0>)
 8002fac:	e00a      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x3a4>
 8002fae:	4b4f      	ldr	r3, [pc, #316]	@ (80030ec <HAL_ADC_ConfigChannel+0x4cc>)
 8002fb0:	e008      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x3a4>
 8002fb2:	4b4f      	ldr	r3, [pc, #316]	@ (80030f0 <HAL_ADC_ConfigChannel+0x4d0>)
 8002fb4:	e006      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x3a4>
 8002fb6:	4b4f      	ldr	r3, [pc, #316]	@ (80030f4 <HAL_ADC_ConfigChannel+0x4d4>)
 8002fb8:	e004      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x3a4>
 8002fba:	4b4f      	ldr	r3, [pc, #316]	@ (80030f8 <HAL_ADC_ConfigChannel+0x4d8>)
 8002fbc:	e002      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x3a4>
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e000      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x3a4>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4610      	mov	r0, r2
 8002fc8:	f7fe fefa 	bl	8001dc0 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f280 80fc 	bge.w	80031ce <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a36      	ldr	r2, [pc, #216]	@ (80030b4 <HAL_ADC_ConfigChannel+0x494>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d004      	beq.n	8002fea <HAL_ADC_ConfigChannel+0x3ca>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a45      	ldr	r2, [pc, #276]	@ (80030fc <HAL_ADC_ConfigChannel+0x4dc>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d101      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x3ce>
 8002fea:	4b45      	ldr	r3, [pc, #276]	@ (8003100 <HAL_ADC_ConfigChannel+0x4e0>)
 8002fec:	e000      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x3d0>
 8002fee:	4b45      	ldr	r3, [pc, #276]	@ (8003104 <HAL_ADC_ConfigChannel+0x4e4>)
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7fe fed7 	bl	8001da4 <LL_ADC_GetCommonPathInternalCh>
 8002ff6:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a2d      	ldr	r2, [pc, #180]	@ (80030b4 <HAL_ADC_ConfigChannel+0x494>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d004      	beq.n	800300c <HAL_ADC_ConfigChannel+0x3ec>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a3d      	ldr	r2, [pc, #244]	@ (80030fc <HAL_ADC_ConfigChannel+0x4dc>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d10e      	bne.n	800302a <HAL_ADC_ConfigChannel+0x40a>
 800300c:	4829      	ldr	r0, [pc, #164]	@ (80030b4 <HAL_ADC_ConfigChannel+0x494>)
 800300e:	f7ff f87d 	bl	800210c <LL_ADC_IsEnabled>
 8003012:	4604      	mov	r4, r0
 8003014:	4839      	ldr	r0, [pc, #228]	@ (80030fc <HAL_ADC_ConfigChannel+0x4dc>)
 8003016:	f7ff f879 	bl	800210c <LL_ADC_IsEnabled>
 800301a:	4603      	mov	r3, r0
 800301c:	4323      	orrs	r3, r4
 800301e:	2b00      	cmp	r3, #0
 8003020:	bf0c      	ite	eq
 8003022:	2301      	moveq	r3, #1
 8003024:	2300      	movne	r3, #0
 8003026:	b2db      	uxtb	r3, r3
 8003028:	e008      	b.n	800303c <HAL_ADC_ConfigChannel+0x41c>
 800302a:	4837      	ldr	r0, [pc, #220]	@ (8003108 <HAL_ADC_ConfigChannel+0x4e8>)
 800302c:	f7ff f86e 	bl	800210c <LL_ADC_IsEnabled>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	bf0c      	ite	eq
 8003036:	2301      	moveq	r3, #1
 8003038:	2300      	movne	r3, #0
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 80b3 	beq.w	80031a8 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a31      	ldr	r2, [pc, #196]	@ (800310c <HAL_ADC_ConfigChannel+0x4ec>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d165      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x4f8>
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d160      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a2b      	ldr	r2, [pc, #172]	@ (8003108 <HAL_ADC_ConfigChannel+0x4e8>)
 800305c:	4293      	cmp	r3, r2
 800305e:	f040 80b6 	bne.w	80031ce <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a13      	ldr	r2, [pc, #76]	@ (80030b4 <HAL_ADC_ConfigChannel+0x494>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d004      	beq.n	8003076 <HAL_ADC_ConfigChannel+0x456>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a22      	ldr	r2, [pc, #136]	@ (80030fc <HAL_ADC_ConfigChannel+0x4dc>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d101      	bne.n	800307a <HAL_ADC_ConfigChannel+0x45a>
 8003076:	4a22      	ldr	r2, [pc, #136]	@ (8003100 <HAL_ADC_ConfigChannel+0x4e0>)
 8003078:	e000      	b.n	800307c <HAL_ADC_ConfigChannel+0x45c>
 800307a:	4a22      	ldr	r2, [pc, #136]	@ (8003104 <HAL_ADC_ConfigChannel+0x4e4>)
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003082:	4619      	mov	r1, r3
 8003084:	4610      	mov	r0, r2
 8003086:	f7fe fe7a 	bl	8001d7e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800308a:	4b21      	ldr	r3, [pc, #132]	@ (8003110 <HAL_ADC_ConfigChannel+0x4f0>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	099b      	lsrs	r3, r3, #6
 8003090:	4a20      	ldr	r2, [pc, #128]	@ (8003114 <HAL_ADC_ConfigChannel+0x4f4>)
 8003092:	fba2 2303 	umull	r2, r3, r2, r3
 8003096:	099b      	lsrs	r3, r3, #6
 8003098:	3301      	adds	r3, #1
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800309e:	e002      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	3b01      	subs	r3, #1
 80030a4:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1f9      	bne.n	80030a0 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030ac:	e08f      	b.n	80031ce <HAL_ADC_ConfigChannel+0x5ae>
 80030ae:	bf00      	nop
 80030b0:	47ff0000 	.word	0x47ff0000
 80030b4:	40022000 	.word	0x40022000
 80030b8:	04300002 	.word	0x04300002
 80030bc:	08600004 	.word	0x08600004
 80030c0:	0c900008 	.word	0x0c900008
 80030c4:	10c00010 	.word	0x10c00010
 80030c8:	14f00020 	.word	0x14f00020
 80030cc:	2a000400 	.word	0x2a000400
 80030d0:	2e300800 	.word	0x2e300800
 80030d4:	32601000 	.word	0x32601000
 80030d8:	43210000 	.word	0x43210000
 80030dc:	4b840000 	.word	0x4b840000
 80030e0:	4fb80000 	.word	0x4fb80000
 80030e4:	47520000 	.word	0x47520000
 80030e8:	36902000 	.word	0x36902000
 80030ec:	25b00200 	.word	0x25b00200
 80030f0:	21800100 	.word	0x21800100
 80030f4:	1d500080 	.word	0x1d500080
 80030f8:	19200040 	.word	0x19200040
 80030fc:	40022100 	.word	0x40022100
 8003100:	40022300 	.word	0x40022300
 8003104:	58026300 	.word	0x58026300
 8003108:	58026000 	.word	0x58026000
 800310c:	cb840000 	.word	0xcb840000
 8003110:	24000058 	.word	0x24000058
 8003114:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a31      	ldr	r2, [pc, #196]	@ (80031e4 <HAL_ADC_ConfigChannel+0x5c4>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d11e      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x540>
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d119      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a2d      	ldr	r2, [pc, #180]	@ (80031e8 <HAL_ADC_ConfigChannel+0x5c8>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d14b      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a2c      	ldr	r2, [pc, #176]	@ (80031ec <HAL_ADC_ConfigChannel+0x5cc>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d004      	beq.n	800314a <HAL_ADC_ConfigChannel+0x52a>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a2a      	ldr	r2, [pc, #168]	@ (80031f0 <HAL_ADC_ConfigChannel+0x5d0>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d101      	bne.n	800314e <HAL_ADC_ConfigChannel+0x52e>
 800314a:	4a2a      	ldr	r2, [pc, #168]	@ (80031f4 <HAL_ADC_ConfigChannel+0x5d4>)
 800314c:	e000      	b.n	8003150 <HAL_ADC_ConfigChannel+0x530>
 800314e:	4a2a      	ldr	r2, [pc, #168]	@ (80031f8 <HAL_ADC_ConfigChannel+0x5d8>)
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003156:	4619      	mov	r1, r3
 8003158:	4610      	mov	r0, r2
 800315a:	f7fe fe10 	bl	8001d7e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800315e:	e036      	b.n	80031ce <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a25      	ldr	r2, [pc, #148]	@ (80031fc <HAL_ADC_ConfigChannel+0x5dc>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d131      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x5ae>
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d12c      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a1b      	ldr	r2, [pc, #108]	@ (80031e8 <HAL_ADC_ConfigChannel+0x5c8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d127      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a1a      	ldr	r2, [pc, #104]	@ (80031ec <HAL_ADC_ConfigChannel+0x5cc>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d004      	beq.n	8003192 <HAL_ADC_ConfigChannel+0x572>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a18      	ldr	r2, [pc, #96]	@ (80031f0 <HAL_ADC_ConfigChannel+0x5d0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d101      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x576>
 8003192:	4a18      	ldr	r2, [pc, #96]	@ (80031f4 <HAL_ADC_ConfigChannel+0x5d4>)
 8003194:	e000      	b.n	8003198 <HAL_ADC_ConfigChannel+0x578>
 8003196:	4a18      	ldr	r2, [pc, #96]	@ (80031f8 <HAL_ADC_ConfigChannel+0x5d8>)
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800319e:	4619      	mov	r1, r3
 80031a0:	4610      	mov	r0, r2
 80031a2:	f7fe fdec 	bl	8001d7e <LL_ADC_SetCommonPathInternalCh>
 80031a6:	e012      	b.n	80031ce <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ac:	f043 0220 	orr.w	r2, r3, #32
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80031ba:	e008      	b.n	80031ce <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c0:	f043 0220 	orr.w	r2, r3, #32
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80031d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3734      	adds	r7, #52	@ 0x34
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd90      	pop	{r4, r7, pc}
 80031e2:	bf00      	nop
 80031e4:	c7520000 	.word	0xc7520000
 80031e8:	58026000 	.word	0x58026000
 80031ec:	40022000 	.word	0x40022000
 80031f0:	40022100 	.word	0x40022100
 80031f4:	40022300 	.word	0x40022300
 80031f8:	58026300 	.word	0x58026300
 80031fc:	cfb80000 	.word	0xcfb80000

08003200 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f7fe ff7d 	bl	800210c <LL_ADC_IsEnabled>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d16e      	bne.n	80032f6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	4b38      	ldr	r3, [pc, #224]	@ (8003300 <ADC_Enable+0x100>)
 8003220:	4013      	ands	r3, r2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00d      	beq.n	8003242 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800322a:	f043 0210 	orr.w	r2, r3, #16
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003236:	f043 0201 	orr.w	r2, r3, #1
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e05a      	b.n	80032f8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f7fe ff4c 	bl	80020e4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800324c:	f7fe fd20 	bl	8001c90 <HAL_GetTick>
 8003250:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a2b      	ldr	r2, [pc, #172]	@ (8003304 <ADC_Enable+0x104>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d004      	beq.n	8003266 <ADC_Enable+0x66>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a29      	ldr	r2, [pc, #164]	@ (8003308 <ADC_Enable+0x108>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d101      	bne.n	800326a <ADC_Enable+0x6a>
 8003266:	4b29      	ldr	r3, [pc, #164]	@ (800330c <ADC_Enable+0x10c>)
 8003268:	e000      	b.n	800326c <ADC_Enable+0x6c>
 800326a:	4b29      	ldr	r3, [pc, #164]	@ (8003310 <ADC_Enable+0x110>)
 800326c:	4618      	mov	r0, r3
 800326e:	f7fe fecf 	bl	8002010 <LL_ADC_GetMultimode>
 8003272:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a23      	ldr	r2, [pc, #140]	@ (8003308 <ADC_Enable+0x108>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d002      	beq.n	8003284 <ADC_Enable+0x84>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	e000      	b.n	8003286 <ADC_Enable+0x86>
 8003284:	4b1f      	ldr	r3, [pc, #124]	@ (8003304 <ADC_Enable+0x104>)
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6812      	ldr	r2, [r2, #0]
 800328a:	4293      	cmp	r3, r2
 800328c:	d02c      	beq.n	80032e8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d130      	bne.n	80032f6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003294:	e028      	b.n	80032e8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f7fe ff36 	bl	800210c <LL_ADC_IsEnabled>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d104      	bne.n	80032b0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fe ff1a 	bl	80020e4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032b0:	f7fe fcee 	bl	8001c90 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d914      	bls.n	80032e8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d00d      	beq.n	80032e8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032d0:	f043 0210 	orr.w	r2, r3, #16
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032dc:	f043 0201 	orr.w	r2, r3, #1
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e007      	b.n	80032f8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d1cf      	bne.n	8003296 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	8000003f 	.word	0x8000003f
 8003304:	40022000 	.word	0x40022000
 8003308:	40022100 	.word	0x40022100
 800330c:	40022300 	.word	0x40022300
 8003310:	58026300 	.word	0x58026300

08003314 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a7a      	ldr	r2, [pc, #488]	@ (800350c <ADC_ConfigureBoostMode+0x1f8>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d004      	beq.n	8003330 <ADC_ConfigureBoostMode+0x1c>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a79      	ldr	r2, [pc, #484]	@ (8003510 <ADC_ConfigureBoostMode+0x1fc>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d109      	bne.n	8003344 <ADC_ConfigureBoostMode+0x30>
 8003330:	4b78      	ldr	r3, [pc, #480]	@ (8003514 <ADC_ConfigureBoostMode+0x200>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003338:	2b00      	cmp	r3, #0
 800333a:	bf14      	ite	ne
 800333c:	2301      	movne	r3, #1
 800333e:	2300      	moveq	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	e008      	b.n	8003356 <ADC_ConfigureBoostMode+0x42>
 8003344:	4b74      	ldr	r3, [pc, #464]	@ (8003518 <ADC_ConfigureBoostMode+0x204>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800334c:	2b00      	cmp	r3, #0
 800334e:	bf14      	ite	ne
 8003350:	2301      	movne	r3, #1
 8003352:	2300      	moveq	r3, #0
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d01c      	beq.n	8003394 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800335a:	f005 fc45 	bl	8008be8 <HAL_RCC_GetHCLKFreq>
 800335e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003368:	d010      	beq.n	800338c <ADC_ConfigureBoostMode+0x78>
 800336a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800336e:	d873      	bhi.n	8003458 <ADC_ConfigureBoostMode+0x144>
 8003370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003374:	d002      	beq.n	800337c <ADC_ConfigureBoostMode+0x68>
 8003376:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800337a:	d16d      	bne.n	8003458 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	0c1b      	lsrs	r3, r3, #16
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	fbb2 f3f3 	udiv	r3, r2, r3
 8003388:	60fb      	str	r3, [r7, #12]
        break;
 800338a:	e068      	b.n	800345e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	089b      	lsrs	r3, r3, #2
 8003390:	60fb      	str	r3, [r7, #12]
        break;
 8003392:	e064      	b.n	800345e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003394:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003398:	f04f 0100 	mov.w	r1, #0
 800339c:	f006 fe74 	bl	800a088 <HAL_RCCEx_GetPeriphCLKFreq>
 80033a0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80033aa:	d051      	beq.n	8003450 <ADC_ConfigureBoostMode+0x13c>
 80033ac:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80033b0:	d854      	bhi.n	800345c <ADC_ConfigureBoostMode+0x148>
 80033b2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80033b6:	d047      	beq.n	8003448 <ADC_ConfigureBoostMode+0x134>
 80033b8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80033bc:	d84e      	bhi.n	800345c <ADC_ConfigureBoostMode+0x148>
 80033be:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80033c2:	d03d      	beq.n	8003440 <ADC_ConfigureBoostMode+0x12c>
 80033c4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80033c8:	d848      	bhi.n	800345c <ADC_ConfigureBoostMode+0x148>
 80033ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033ce:	d033      	beq.n	8003438 <ADC_ConfigureBoostMode+0x124>
 80033d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033d4:	d842      	bhi.n	800345c <ADC_ConfigureBoostMode+0x148>
 80033d6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80033da:	d029      	beq.n	8003430 <ADC_ConfigureBoostMode+0x11c>
 80033dc:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80033e0:	d83c      	bhi.n	800345c <ADC_ConfigureBoostMode+0x148>
 80033e2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80033e6:	d01a      	beq.n	800341e <ADC_ConfigureBoostMode+0x10a>
 80033e8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80033ec:	d836      	bhi.n	800345c <ADC_ConfigureBoostMode+0x148>
 80033ee:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80033f2:	d014      	beq.n	800341e <ADC_ConfigureBoostMode+0x10a>
 80033f4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80033f8:	d830      	bhi.n	800345c <ADC_ConfigureBoostMode+0x148>
 80033fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033fe:	d00e      	beq.n	800341e <ADC_ConfigureBoostMode+0x10a>
 8003400:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003404:	d82a      	bhi.n	800345c <ADC_ConfigureBoostMode+0x148>
 8003406:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800340a:	d008      	beq.n	800341e <ADC_ConfigureBoostMode+0x10a>
 800340c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003410:	d824      	bhi.n	800345c <ADC_ConfigureBoostMode+0x148>
 8003412:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003416:	d002      	beq.n	800341e <ADC_ConfigureBoostMode+0x10a>
 8003418:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800341c:	d11e      	bne.n	800345c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	0c9b      	lsrs	r3, r3, #18
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	fbb2 f3f3 	udiv	r3, r2, r3
 800342c:	60fb      	str	r3, [r7, #12]
        break;
 800342e:	e016      	b.n	800345e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	091b      	lsrs	r3, r3, #4
 8003434:	60fb      	str	r3, [r7, #12]
        break;
 8003436:	e012      	b.n	800345e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	095b      	lsrs	r3, r3, #5
 800343c:	60fb      	str	r3, [r7, #12]
        break;
 800343e:	e00e      	b.n	800345e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	099b      	lsrs	r3, r3, #6
 8003444:	60fb      	str	r3, [r7, #12]
        break;
 8003446:	e00a      	b.n	800345e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	09db      	lsrs	r3, r3, #7
 800344c:	60fb      	str	r3, [r7, #12]
        break;
 800344e:	e006      	b.n	800345e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	0a1b      	lsrs	r3, r3, #8
 8003454:	60fb      	str	r3, [r7, #12]
        break;
 8003456:	e002      	b.n	800345e <ADC_ConfigureBoostMode+0x14a>
        break;
 8003458:	bf00      	nop
 800345a:	e000      	b.n	800345e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800345c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800345e:	f7fe fc23 	bl	8001ca8 <HAL_GetREVID>
 8003462:	4603      	mov	r3, r0
 8003464:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003468:	4293      	cmp	r3, r2
 800346a:	d815      	bhi.n	8003498 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4a2b      	ldr	r2, [pc, #172]	@ (800351c <ADC_ConfigureBoostMode+0x208>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d908      	bls.n	8003486 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003482:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003484:	e03e      	b.n	8003504 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003494:	609a      	str	r2, [r3, #8]
}
 8003496:	e035      	b.n	8003504 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	085b      	lsrs	r3, r3, #1
 800349c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	4a1f      	ldr	r2, [pc, #124]	@ (8003520 <ADC_ConfigureBoostMode+0x20c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d808      	bhi.n	80034b8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80034b4:	609a      	str	r2, [r3, #8]
}
 80034b6:	e025      	b.n	8003504 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4a1a      	ldr	r2, [pc, #104]	@ (8003524 <ADC_ConfigureBoostMode+0x210>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d80a      	bhi.n	80034d6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034d2:	609a      	str	r2, [r3, #8]
}
 80034d4:	e016      	b.n	8003504 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4a13      	ldr	r2, [pc, #76]	@ (8003528 <ADC_ConfigureBoostMode+0x214>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d80a      	bhi.n	80034f4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034f0:	609a      	str	r2, [r3, #8]
}
 80034f2:	e007      	b.n	8003504 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003502:	609a      	str	r2, [r3, #8]
}
 8003504:	bf00      	nop
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40022000 	.word	0x40022000
 8003510:	40022100 	.word	0x40022100
 8003514:	40022300 	.word	0x40022300
 8003518:	58026300 	.word	0x58026300
 800351c:	01312d00 	.word	0x01312d00
 8003520:	005f5e10 	.word	0x005f5e10
 8003524:	00bebc20 	.word	0x00bebc20
 8003528:	017d7840 	.word	0x017d7840

0800352c <LL_ADC_IsEnabled>:
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <LL_ADC_IsEnabled+0x18>
 8003540:	2301      	movs	r3, #1
 8003542:	e000      	b.n	8003546 <LL_ADC_IsEnabled+0x1a>
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <LL_ADC_REG_IsConversionOngoing>:
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 0304 	and.w	r3, r3, #4
 8003562:	2b04      	cmp	r3, #4
 8003564:	d101      	bne.n	800356a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80035dc:	b590      	push	{r4, r7, lr}
 80035de:	b09f      	sub	sp, #124	@ 0x7c
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035e6:	2300      	movs	r3, #0
 80035e8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e0be      	b.n	8003778 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003602:	2300      	movs	r3, #0
 8003604:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003606:	2300      	movs	r3, #0
 8003608:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a5c      	ldr	r2, [pc, #368]	@ (8003780 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d102      	bne.n	800361a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003614:	4b5b      	ldr	r3, [pc, #364]	@ (8003784 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003616:	60bb      	str	r3, [r7, #8]
 8003618:	e001      	b.n	800361e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800361a:	2300      	movs	r3, #0
 800361c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10b      	bne.n	800363c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003628:	f043 0220 	orr.w	r2, r3, #32
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e09d      	b.n	8003778 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff ff87 	bl	8003552 <LL_ADC_REG_IsConversionOngoing>
 8003644:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7ff ff81 	bl	8003552 <LL_ADC_REG_IsConversionOngoing>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d17f      	bne.n	8003756 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003656:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003658:	2b00      	cmp	r3, #0
 800365a:	d17c      	bne.n	8003756 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a47      	ldr	r2, [pc, #284]	@ (8003780 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d004      	beq.n	8003670 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a46      	ldr	r2, [pc, #280]	@ (8003784 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d101      	bne.n	8003674 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003670:	4b45      	ldr	r3, [pc, #276]	@ (8003788 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003672:	e000      	b.n	8003676 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003674:	4b45      	ldr	r3, [pc, #276]	@ (800378c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003676:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d039      	beq.n	80036f4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003680:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	431a      	orrs	r2, r3
 800368e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003690:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a3a      	ldr	r2, [pc, #232]	@ (8003780 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d004      	beq.n	80036a6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a38      	ldr	r2, [pc, #224]	@ (8003784 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d10e      	bne.n	80036c4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80036a6:	4836      	ldr	r0, [pc, #216]	@ (8003780 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80036a8:	f7ff ff40 	bl	800352c <LL_ADC_IsEnabled>
 80036ac:	4604      	mov	r4, r0
 80036ae:	4835      	ldr	r0, [pc, #212]	@ (8003784 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80036b0:	f7ff ff3c 	bl	800352c <LL_ADC_IsEnabled>
 80036b4:	4603      	mov	r3, r0
 80036b6:	4323      	orrs	r3, r4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	bf0c      	ite	eq
 80036bc:	2301      	moveq	r3, #1
 80036be:	2300      	movne	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	e008      	b.n	80036d6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80036c4:	4832      	ldr	r0, [pc, #200]	@ (8003790 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80036c6:	f7ff ff31 	bl	800352c <LL_ADC_IsEnabled>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	bf0c      	ite	eq
 80036d0:	2301      	moveq	r3, #1
 80036d2:	2300      	movne	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d047      	beq.n	800376a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80036da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	4b2d      	ldr	r3, [pc, #180]	@ (8003794 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	6811      	ldr	r1, [r2, #0]
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	6892      	ldr	r2, [r2, #8]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	431a      	orrs	r2, r3
 80036ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036f0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036f2:	e03a      	b.n	800376a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80036f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80036fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036fe:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a1e      	ldr	r2, [pc, #120]	@ (8003780 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d004      	beq.n	8003714 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a1d      	ldr	r2, [pc, #116]	@ (8003784 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d10e      	bne.n	8003732 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003714:	481a      	ldr	r0, [pc, #104]	@ (8003780 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003716:	f7ff ff09 	bl	800352c <LL_ADC_IsEnabled>
 800371a:	4604      	mov	r4, r0
 800371c:	4819      	ldr	r0, [pc, #100]	@ (8003784 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800371e:	f7ff ff05 	bl	800352c <LL_ADC_IsEnabled>
 8003722:	4603      	mov	r3, r0
 8003724:	4323      	orrs	r3, r4
 8003726:	2b00      	cmp	r3, #0
 8003728:	bf0c      	ite	eq
 800372a:	2301      	moveq	r3, #1
 800372c:	2300      	movne	r3, #0
 800372e:	b2db      	uxtb	r3, r3
 8003730:	e008      	b.n	8003744 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003732:	4817      	ldr	r0, [pc, #92]	@ (8003790 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003734:	f7ff fefa 	bl	800352c <LL_ADC_IsEnabled>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	bf0c      	ite	eq
 800373e:	2301      	moveq	r3, #1
 8003740:	2300      	movne	r3, #0
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	d010      	beq.n	800376a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003748:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	4b11      	ldr	r3, [pc, #68]	@ (8003794 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800374e:	4013      	ands	r3, r2
 8003750:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003752:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003754:	e009      	b.n	800376a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800375a:	f043 0220 	orr.w	r2, r3, #32
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003768:	e000      	b.n	800376c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800376a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003774:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003778:	4618      	mov	r0, r3
 800377a:	377c      	adds	r7, #124	@ 0x7c
 800377c:	46bd      	mov	sp, r7
 800377e:	bd90      	pop	{r4, r7, pc}
 8003780:	40022000 	.word	0x40022000
 8003784:	40022100 	.word	0x40022100
 8003788:	40022300 	.word	0x40022300
 800378c:	58026300 	.word	0x58026300
 8003790:	58026000 	.word	0x58026000
 8003794:	fffff0e0 	.word	0xfffff0e0

08003798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037a8:	4b0b      	ldr	r3, [pc, #44]	@ (80037d8 <__NVIC_SetPriorityGrouping+0x40>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037b4:	4013      	ands	r3, r2
 80037b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80037c0:	4b06      	ldr	r3, [pc, #24]	@ (80037dc <__NVIC_SetPriorityGrouping+0x44>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037c6:	4a04      	ldr	r2, [pc, #16]	@ (80037d8 <__NVIC_SetPriorityGrouping+0x40>)
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	60d3      	str	r3, [r2, #12]
}
 80037cc:	bf00      	nop
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	e000ed00 	.word	0xe000ed00
 80037dc:	05fa0000 	.word	0x05fa0000

080037e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037e4:	4b04      	ldr	r3, [pc, #16]	@ (80037f8 <__NVIC_GetPriorityGrouping+0x18>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	0a1b      	lsrs	r3, r3, #8
 80037ea:	f003 0307 	and.w	r3, r3, #7
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	e000ed00 	.word	0xe000ed00

080037fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003806:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800380a:	2b00      	cmp	r3, #0
 800380c:	db0b      	blt.n	8003826 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800380e:	88fb      	ldrh	r3, [r7, #6]
 8003810:	f003 021f 	and.w	r2, r3, #31
 8003814:	4907      	ldr	r1, [pc, #28]	@ (8003834 <__NVIC_EnableIRQ+0x38>)
 8003816:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800381a:	095b      	lsrs	r3, r3, #5
 800381c:	2001      	movs	r0, #1
 800381e:	fa00 f202 	lsl.w	r2, r0, r2
 8003822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	e000e100 	.word	0xe000e100

08003838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	6039      	str	r1, [r7, #0]
 8003842:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003844:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003848:	2b00      	cmp	r3, #0
 800384a:	db0a      	blt.n	8003862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	b2da      	uxtb	r2, r3
 8003850:	490c      	ldr	r1, [pc, #48]	@ (8003884 <__NVIC_SetPriority+0x4c>)
 8003852:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003856:	0112      	lsls	r2, r2, #4
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	440b      	add	r3, r1
 800385c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003860:	e00a      	b.n	8003878 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	b2da      	uxtb	r2, r3
 8003866:	4908      	ldr	r1, [pc, #32]	@ (8003888 <__NVIC_SetPriority+0x50>)
 8003868:	88fb      	ldrh	r3, [r7, #6]
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	3b04      	subs	r3, #4
 8003870:	0112      	lsls	r2, r2, #4
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	440b      	add	r3, r1
 8003876:	761a      	strb	r2, [r3, #24]
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	e000e100 	.word	0xe000e100
 8003888:	e000ed00 	.word	0xe000ed00

0800388c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800388c:	b480      	push	{r7}
 800388e:	b089      	sub	sp, #36	@ 0x24
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f003 0307 	and.w	r3, r3, #7
 800389e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f1c3 0307 	rsb	r3, r3, #7
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	bf28      	it	cs
 80038aa:	2304      	movcs	r3, #4
 80038ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	3304      	adds	r3, #4
 80038b2:	2b06      	cmp	r3, #6
 80038b4:	d902      	bls.n	80038bc <NVIC_EncodePriority+0x30>
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	3b03      	subs	r3, #3
 80038ba:	e000      	b.n	80038be <NVIC_EncodePriority+0x32>
 80038bc:	2300      	movs	r3, #0
 80038be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c0:	f04f 32ff 	mov.w	r2, #4294967295
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43da      	mvns	r2, r3
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	401a      	ands	r2, r3
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038d4:	f04f 31ff 	mov.w	r1, #4294967295
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	fa01 f303 	lsl.w	r3, r1, r3
 80038de:	43d9      	mvns	r1, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e4:	4313      	orrs	r3, r2
         );
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3724      	adds	r7, #36	@ 0x24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
	...

080038f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3b01      	subs	r3, #1
 8003900:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003904:	d301      	bcc.n	800390a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003906:	2301      	movs	r3, #1
 8003908:	e00f      	b.n	800392a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800390a:	4a0a      	ldr	r2, [pc, #40]	@ (8003934 <SysTick_Config+0x40>)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3b01      	subs	r3, #1
 8003910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003912:	210f      	movs	r1, #15
 8003914:	f04f 30ff 	mov.w	r0, #4294967295
 8003918:	f7ff ff8e 	bl	8003838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800391c:	4b05      	ldr	r3, [pc, #20]	@ (8003934 <SysTick_Config+0x40>)
 800391e:	2200      	movs	r2, #0
 8003920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003922:	4b04      	ldr	r3, [pc, #16]	@ (8003934 <SysTick_Config+0x40>)
 8003924:	2207      	movs	r2, #7
 8003926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	e000e010 	.word	0xe000e010

08003938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff ff29 	bl	8003798 <__NVIC_SetPriorityGrouping>
}
 8003946:	bf00      	nop
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b086      	sub	sp, #24
 8003952:	af00      	add	r7, sp, #0
 8003954:	4603      	mov	r3, r0
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	607a      	str	r2, [r7, #4]
 800395a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800395c:	f7ff ff40 	bl	80037e0 <__NVIC_GetPriorityGrouping>
 8003960:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	68b9      	ldr	r1, [r7, #8]
 8003966:	6978      	ldr	r0, [r7, #20]
 8003968:	f7ff ff90 	bl	800388c <NVIC_EncodePriority>
 800396c:	4602      	mov	r2, r0
 800396e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003972:	4611      	mov	r1, r2
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff ff5f 	bl	8003838 <__NVIC_SetPriority>
}
 800397a:	bf00      	nop
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b082      	sub	sp, #8
 8003986:	af00      	add	r7, sp, #0
 8003988:	4603      	mov	r3, r0
 800398a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800398c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff ff33 	bl	80037fc <__NVIC_EnableIRQ>
}
 8003996:	bf00      	nop
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b082      	sub	sp, #8
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7ff ffa4 	bl	80038f4 <SysTick_Config>
 80039ac:	4603      	mov	r3, r0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
	...

080039b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80039c0:	f7fe f966 	bl	8001c90 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e316      	b.n	8003ffe <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a66      	ldr	r2, [pc, #408]	@ (8003b70 <HAL_DMA_Init+0x1b8>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d04a      	beq.n	8003a70 <HAL_DMA_Init+0xb8>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a65      	ldr	r2, [pc, #404]	@ (8003b74 <HAL_DMA_Init+0x1bc>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d045      	beq.n	8003a70 <HAL_DMA_Init+0xb8>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a63      	ldr	r2, [pc, #396]	@ (8003b78 <HAL_DMA_Init+0x1c0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d040      	beq.n	8003a70 <HAL_DMA_Init+0xb8>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a62      	ldr	r2, [pc, #392]	@ (8003b7c <HAL_DMA_Init+0x1c4>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d03b      	beq.n	8003a70 <HAL_DMA_Init+0xb8>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a60      	ldr	r2, [pc, #384]	@ (8003b80 <HAL_DMA_Init+0x1c8>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d036      	beq.n	8003a70 <HAL_DMA_Init+0xb8>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a5f      	ldr	r2, [pc, #380]	@ (8003b84 <HAL_DMA_Init+0x1cc>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d031      	beq.n	8003a70 <HAL_DMA_Init+0xb8>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a5d      	ldr	r2, [pc, #372]	@ (8003b88 <HAL_DMA_Init+0x1d0>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d02c      	beq.n	8003a70 <HAL_DMA_Init+0xb8>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a5c      	ldr	r2, [pc, #368]	@ (8003b8c <HAL_DMA_Init+0x1d4>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d027      	beq.n	8003a70 <HAL_DMA_Init+0xb8>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a5a      	ldr	r2, [pc, #360]	@ (8003b90 <HAL_DMA_Init+0x1d8>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d022      	beq.n	8003a70 <HAL_DMA_Init+0xb8>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a59      	ldr	r2, [pc, #356]	@ (8003b94 <HAL_DMA_Init+0x1dc>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d01d      	beq.n	8003a70 <HAL_DMA_Init+0xb8>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a57      	ldr	r2, [pc, #348]	@ (8003b98 <HAL_DMA_Init+0x1e0>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d018      	beq.n	8003a70 <HAL_DMA_Init+0xb8>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a56      	ldr	r2, [pc, #344]	@ (8003b9c <HAL_DMA_Init+0x1e4>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d013      	beq.n	8003a70 <HAL_DMA_Init+0xb8>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a54      	ldr	r2, [pc, #336]	@ (8003ba0 <HAL_DMA_Init+0x1e8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d00e      	beq.n	8003a70 <HAL_DMA_Init+0xb8>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a53      	ldr	r2, [pc, #332]	@ (8003ba4 <HAL_DMA_Init+0x1ec>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d009      	beq.n	8003a70 <HAL_DMA_Init+0xb8>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a51      	ldr	r2, [pc, #324]	@ (8003ba8 <HAL_DMA_Init+0x1f0>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d004      	beq.n	8003a70 <HAL_DMA_Init+0xb8>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a50      	ldr	r2, [pc, #320]	@ (8003bac <HAL_DMA_Init+0x1f4>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d101      	bne.n	8003a74 <HAL_DMA_Init+0xbc>
 8003a70:	2301      	movs	r3, #1
 8003a72:	e000      	b.n	8003a76 <HAL_DMA_Init+0xbe>
 8003a74:	2300      	movs	r3, #0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 813b 	beq.w	8003cf2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a37      	ldr	r2, [pc, #220]	@ (8003b70 <HAL_DMA_Init+0x1b8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d04a      	beq.n	8003b2c <HAL_DMA_Init+0x174>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a36      	ldr	r2, [pc, #216]	@ (8003b74 <HAL_DMA_Init+0x1bc>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d045      	beq.n	8003b2c <HAL_DMA_Init+0x174>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a34      	ldr	r2, [pc, #208]	@ (8003b78 <HAL_DMA_Init+0x1c0>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d040      	beq.n	8003b2c <HAL_DMA_Init+0x174>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a33      	ldr	r2, [pc, #204]	@ (8003b7c <HAL_DMA_Init+0x1c4>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d03b      	beq.n	8003b2c <HAL_DMA_Init+0x174>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a31      	ldr	r2, [pc, #196]	@ (8003b80 <HAL_DMA_Init+0x1c8>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d036      	beq.n	8003b2c <HAL_DMA_Init+0x174>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a30      	ldr	r2, [pc, #192]	@ (8003b84 <HAL_DMA_Init+0x1cc>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d031      	beq.n	8003b2c <HAL_DMA_Init+0x174>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a2e      	ldr	r2, [pc, #184]	@ (8003b88 <HAL_DMA_Init+0x1d0>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d02c      	beq.n	8003b2c <HAL_DMA_Init+0x174>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a2d      	ldr	r2, [pc, #180]	@ (8003b8c <HAL_DMA_Init+0x1d4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d027      	beq.n	8003b2c <HAL_DMA_Init+0x174>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8003b90 <HAL_DMA_Init+0x1d8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d022      	beq.n	8003b2c <HAL_DMA_Init+0x174>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a2a      	ldr	r2, [pc, #168]	@ (8003b94 <HAL_DMA_Init+0x1dc>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d01d      	beq.n	8003b2c <HAL_DMA_Init+0x174>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a28      	ldr	r2, [pc, #160]	@ (8003b98 <HAL_DMA_Init+0x1e0>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d018      	beq.n	8003b2c <HAL_DMA_Init+0x174>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a27      	ldr	r2, [pc, #156]	@ (8003b9c <HAL_DMA_Init+0x1e4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d013      	beq.n	8003b2c <HAL_DMA_Init+0x174>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a25      	ldr	r2, [pc, #148]	@ (8003ba0 <HAL_DMA_Init+0x1e8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d00e      	beq.n	8003b2c <HAL_DMA_Init+0x174>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a24      	ldr	r2, [pc, #144]	@ (8003ba4 <HAL_DMA_Init+0x1ec>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d009      	beq.n	8003b2c <HAL_DMA_Init+0x174>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a22      	ldr	r2, [pc, #136]	@ (8003ba8 <HAL_DMA_Init+0x1f0>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d004      	beq.n	8003b2c <HAL_DMA_Init+0x174>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a21      	ldr	r2, [pc, #132]	@ (8003bac <HAL_DMA_Init+0x1f4>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d108      	bne.n	8003b3e <HAL_DMA_Init+0x186>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0201 	bic.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	e007      	b.n	8003b4e <HAL_DMA_Init+0x196>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0201 	bic.w	r2, r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b4e:	e02f      	b.n	8003bb0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b50:	f7fe f89e 	bl	8001c90 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b05      	cmp	r3, #5
 8003b5c:	d928      	bls.n	8003bb0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2220      	movs	r2, #32
 8003b62:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2203      	movs	r2, #3
 8003b68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e246      	b.n	8003ffe <HAL_DMA_Init+0x646>
 8003b70:	40020010 	.word	0x40020010
 8003b74:	40020028 	.word	0x40020028
 8003b78:	40020040 	.word	0x40020040
 8003b7c:	40020058 	.word	0x40020058
 8003b80:	40020070 	.word	0x40020070
 8003b84:	40020088 	.word	0x40020088
 8003b88:	400200a0 	.word	0x400200a0
 8003b8c:	400200b8 	.word	0x400200b8
 8003b90:	40020410 	.word	0x40020410
 8003b94:	40020428 	.word	0x40020428
 8003b98:	40020440 	.word	0x40020440
 8003b9c:	40020458 	.word	0x40020458
 8003ba0:	40020470 	.word	0x40020470
 8003ba4:	40020488 	.word	0x40020488
 8003ba8:	400204a0 	.word	0x400204a0
 8003bac:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1c8      	bne.n	8003b50 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	4b83      	ldr	r3, [pc, #524]	@ (8003dd8 <HAL_DMA_Init+0x420>)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003bd6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003be2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bee:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	d107      	bne.n	8003c14 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003c14:	4b71      	ldr	r3, [pc, #452]	@ (8003ddc <HAL_DMA_Init+0x424>)
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	4b71      	ldr	r3, [pc, #452]	@ (8003de0 <HAL_DMA_Init+0x428>)
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c20:	d328      	bcc.n	8003c74 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b28      	cmp	r3, #40	@ 0x28
 8003c28:	d903      	bls.n	8003c32 <HAL_DMA_Init+0x27a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c30:	d917      	bls.n	8003c62 <HAL_DMA_Init+0x2aa>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c38:	d903      	bls.n	8003c42 <HAL_DMA_Init+0x28a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2b42      	cmp	r3, #66	@ 0x42
 8003c40:	d90f      	bls.n	8003c62 <HAL_DMA_Init+0x2aa>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b46      	cmp	r3, #70	@ 0x46
 8003c48:	d903      	bls.n	8003c52 <HAL_DMA_Init+0x29a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b48      	cmp	r3, #72	@ 0x48
 8003c50:	d907      	bls.n	8003c62 <HAL_DMA_Init+0x2aa>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2b4e      	cmp	r3, #78	@ 0x4e
 8003c58:	d905      	bls.n	8003c66 <HAL_DMA_Init+0x2ae>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b52      	cmp	r3, #82	@ 0x52
 8003c60:	d801      	bhi.n	8003c66 <HAL_DMA_Init+0x2ae>
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <HAL_DMA_Init+0x2b0>
 8003c66:	2300      	movs	r3, #0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c72:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f023 0307 	bic.w	r3, r3, #7
 8003c8a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d117      	bne.n	8003cce <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00e      	beq.n	8003cce <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f001 fc0d 	bl	80054d0 <DMA_CheckFifoParam>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d008      	beq.n	8003cce <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2240      	movs	r2, #64	@ 0x40
 8003cc0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e197      	b.n	8003ffe <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f001 fb48 	bl	800536c <DMA_CalcBaseAndBitshift>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ce4:	f003 031f 	and.w	r3, r3, #31
 8003ce8:	223f      	movs	r2, #63	@ 0x3f
 8003cea:	409a      	lsls	r2, r3
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	609a      	str	r2, [r3, #8]
 8003cf0:	e0cd      	b.n	8003e8e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a3b      	ldr	r2, [pc, #236]	@ (8003de4 <HAL_DMA_Init+0x42c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d022      	beq.n	8003d42 <HAL_DMA_Init+0x38a>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a39      	ldr	r2, [pc, #228]	@ (8003de8 <HAL_DMA_Init+0x430>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d01d      	beq.n	8003d42 <HAL_DMA_Init+0x38a>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a38      	ldr	r2, [pc, #224]	@ (8003dec <HAL_DMA_Init+0x434>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d018      	beq.n	8003d42 <HAL_DMA_Init+0x38a>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a36      	ldr	r2, [pc, #216]	@ (8003df0 <HAL_DMA_Init+0x438>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d013      	beq.n	8003d42 <HAL_DMA_Init+0x38a>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a35      	ldr	r2, [pc, #212]	@ (8003df4 <HAL_DMA_Init+0x43c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d00e      	beq.n	8003d42 <HAL_DMA_Init+0x38a>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a33      	ldr	r2, [pc, #204]	@ (8003df8 <HAL_DMA_Init+0x440>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d009      	beq.n	8003d42 <HAL_DMA_Init+0x38a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a32      	ldr	r2, [pc, #200]	@ (8003dfc <HAL_DMA_Init+0x444>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d004      	beq.n	8003d42 <HAL_DMA_Init+0x38a>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a30      	ldr	r2, [pc, #192]	@ (8003e00 <HAL_DMA_Init+0x448>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d101      	bne.n	8003d46 <HAL_DMA_Init+0x38e>
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <HAL_DMA_Init+0x390>
 8003d46:	2300      	movs	r3, #0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 8097 	beq.w	8003e7c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a24      	ldr	r2, [pc, #144]	@ (8003de4 <HAL_DMA_Init+0x42c>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d021      	beq.n	8003d9c <HAL_DMA_Init+0x3e4>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a22      	ldr	r2, [pc, #136]	@ (8003de8 <HAL_DMA_Init+0x430>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d01c      	beq.n	8003d9c <HAL_DMA_Init+0x3e4>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a21      	ldr	r2, [pc, #132]	@ (8003dec <HAL_DMA_Init+0x434>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d017      	beq.n	8003d9c <HAL_DMA_Init+0x3e4>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a1f      	ldr	r2, [pc, #124]	@ (8003df0 <HAL_DMA_Init+0x438>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d012      	beq.n	8003d9c <HAL_DMA_Init+0x3e4>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a1e      	ldr	r2, [pc, #120]	@ (8003df4 <HAL_DMA_Init+0x43c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d00d      	beq.n	8003d9c <HAL_DMA_Init+0x3e4>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a1c      	ldr	r2, [pc, #112]	@ (8003df8 <HAL_DMA_Init+0x440>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d008      	beq.n	8003d9c <HAL_DMA_Init+0x3e4>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a1b      	ldr	r2, [pc, #108]	@ (8003dfc <HAL_DMA_Init+0x444>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d003      	beq.n	8003d9c <HAL_DMA_Init+0x3e4>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a19      	ldr	r2, [pc, #100]	@ (8003e00 <HAL_DMA_Init+0x448>)
 8003d9a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	4b13      	ldr	r3, [pc, #76]	@ (8003e04 <HAL_DMA_Init+0x44c>)
 8003db8:	4013      	ands	r3, r2
 8003dba:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	2b40      	cmp	r3, #64	@ 0x40
 8003dc2:	d021      	beq.n	8003e08 <HAL_DMA_Init+0x450>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	2b80      	cmp	r3, #128	@ 0x80
 8003dca:	d102      	bne.n	8003dd2 <HAL_DMA_Init+0x41a>
 8003dcc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003dd0:	e01b      	b.n	8003e0a <HAL_DMA_Init+0x452>
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	e019      	b.n	8003e0a <HAL_DMA_Init+0x452>
 8003dd6:	bf00      	nop
 8003dd8:	fe10803f 	.word	0xfe10803f
 8003ddc:	5c001000 	.word	0x5c001000
 8003de0:	ffff0000 	.word	0xffff0000
 8003de4:	58025408 	.word	0x58025408
 8003de8:	5802541c 	.word	0x5802541c
 8003dec:	58025430 	.word	0x58025430
 8003df0:	58025444 	.word	0x58025444
 8003df4:	58025458 	.word	0x58025458
 8003df8:	5802546c 	.word	0x5802546c
 8003dfc:	58025480 	.word	0x58025480
 8003e00:	58025494 	.word	0x58025494
 8003e04:	fffe000f 	.word	0xfffe000f
 8003e08:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	68d2      	ldr	r2, [r2, #12]
 8003e0e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003e38:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	4b6e      	ldr	r3, [pc, #440]	@ (8004008 <HAL_DMA_Init+0x650>)
 8003e50:	4413      	add	r3, r2
 8003e52:	4a6e      	ldr	r2, [pc, #440]	@ (800400c <HAL_DMA_Init+0x654>)
 8003e54:	fba2 2303 	umull	r2, r3, r2, r3
 8003e58:	091b      	lsrs	r3, r3, #4
 8003e5a:	009a      	lsls	r2, r3, #2
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f001 fa83 	bl	800536c <DMA_CalcBaseAndBitshift>
 8003e66:	4603      	mov	r3, r0
 8003e68:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e6e:	f003 031f 	and.w	r3, r3, #31
 8003e72:	2201      	movs	r2, #1
 8003e74:	409a      	lsls	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	605a      	str	r2, [r3, #4]
 8003e7a:	e008      	b.n	8003e8e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2240      	movs	r2, #64	@ 0x40
 8003e80:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2203      	movs	r2, #3
 8003e86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e0b7      	b.n	8003ffe <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a5f      	ldr	r2, [pc, #380]	@ (8004010 <HAL_DMA_Init+0x658>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d072      	beq.n	8003f7e <HAL_DMA_Init+0x5c6>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a5d      	ldr	r2, [pc, #372]	@ (8004014 <HAL_DMA_Init+0x65c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d06d      	beq.n	8003f7e <HAL_DMA_Init+0x5c6>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a5c      	ldr	r2, [pc, #368]	@ (8004018 <HAL_DMA_Init+0x660>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d068      	beq.n	8003f7e <HAL_DMA_Init+0x5c6>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a5a      	ldr	r2, [pc, #360]	@ (800401c <HAL_DMA_Init+0x664>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d063      	beq.n	8003f7e <HAL_DMA_Init+0x5c6>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a59      	ldr	r2, [pc, #356]	@ (8004020 <HAL_DMA_Init+0x668>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d05e      	beq.n	8003f7e <HAL_DMA_Init+0x5c6>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a57      	ldr	r2, [pc, #348]	@ (8004024 <HAL_DMA_Init+0x66c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d059      	beq.n	8003f7e <HAL_DMA_Init+0x5c6>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a56      	ldr	r2, [pc, #344]	@ (8004028 <HAL_DMA_Init+0x670>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d054      	beq.n	8003f7e <HAL_DMA_Init+0x5c6>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a54      	ldr	r2, [pc, #336]	@ (800402c <HAL_DMA_Init+0x674>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d04f      	beq.n	8003f7e <HAL_DMA_Init+0x5c6>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a53      	ldr	r2, [pc, #332]	@ (8004030 <HAL_DMA_Init+0x678>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d04a      	beq.n	8003f7e <HAL_DMA_Init+0x5c6>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a51      	ldr	r2, [pc, #324]	@ (8004034 <HAL_DMA_Init+0x67c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d045      	beq.n	8003f7e <HAL_DMA_Init+0x5c6>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a50      	ldr	r2, [pc, #320]	@ (8004038 <HAL_DMA_Init+0x680>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d040      	beq.n	8003f7e <HAL_DMA_Init+0x5c6>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a4e      	ldr	r2, [pc, #312]	@ (800403c <HAL_DMA_Init+0x684>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d03b      	beq.n	8003f7e <HAL_DMA_Init+0x5c6>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a4d      	ldr	r2, [pc, #308]	@ (8004040 <HAL_DMA_Init+0x688>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d036      	beq.n	8003f7e <HAL_DMA_Init+0x5c6>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a4b      	ldr	r2, [pc, #300]	@ (8004044 <HAL_DMA_Init+0x68c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d031      	beq.n	8003f7e <HAL_DMA_Init+0x5c6>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a4a      	ldr	r2, [pc, #296]	@ (8004048 <HAL_DMA_Init+0x690>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d02c      	beq.n	8003f7e <HAL_DMA_Init+0x5c6>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a48      	ldr	r2, [pc, #288]	@ (800404c <HAL_DMA_Init+0x694>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d027      	beq.n	8003f7e <HAL_DMA_Init+0x5c6>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a47      	ldr	r2, [pc, #284]	@ (8004050 <HAL_DMA_Init+0x698>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d022      	beq.n	8003f7e <HAL_DMA_Init+0x5c6>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a45      	ldr	r2, [pc, #276]	@ (8004054 <HAL_DMA_Init+0x69c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d01d      	beq.n	8003f7e <HAL_DMA_Init+0x5c6>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a44      	ldr	r2, [pc, #272]	@ (8004058 <HAL_DMA_Init+0x6a0>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d018      	beq.n	8003f7e <HAL_DMA_Init+0x5c6>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a42      	ldr	r2, [pc, #264]	@ (800405c <HAL_DMA_Init+0x6a4>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d013      	beq.n	8003f7e <HAL_DMA_Init+0x5c6>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a41      	ldr	r2, [pc, #260]	@ (8004060 <HAL_DMA_Init+0x6a8>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d00e      	beq.n	8003f7e <HAL_DMA_Init+0x5c6>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a3f      	ldr	r2, [pc, #252]	@ (8004064 <HAL_DMA_Init+0x6ac>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d009      	beq.n	8003f7e <HAL_DMA_Init+0x5c6>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a3e      	ldr	r2, [pc, #248]	@ (8004068 <HAL_DMA_Init+0x6b0>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d004      	beq.n	8003f7e <HAL_DMA_Init+0x5c6>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a3c      	ldr	r2, [pc, #240]	@ (800406c <HAL_DMA_Init+0x6b4>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d101      	bne.n	8003f82 <HAL_DMA_Init+0x5ca>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e000      	b.n	8003f84 <HAL_DMA_Init+0x5cc>
 8003f82:	2300      	movs	r3, #0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d032      	beq.n	8003fee <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f001 fb1d 	bl	80055c8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2b80      	cmp	r3, #128	@ 0x80
 8003f94:	d102      	bne.n	8003f9c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fa4:	b2d2      	uxtb	r2, r2
 8003fa6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003fb0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d010      	beq.n	8003fdc <HAL_DMA_Init+0x624>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2b08      	cmp	r3, #8
 8003fc0:	d80c      	bhi.n	8003fdc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f001 fb9a 	bl	80056fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003fd8:	605a      	str	r2, [r3, #4]
 8003fda:	e008      	b.n	8003fee <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3718      	adds	r7, #24
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	a7fdabf8 	.word	0xa7fdabf8
 800400c:	cccccccd 	.word	0xcccccccd
 8004010:	40020010 	.word	0x40020010
 8004014:	40020028 	.word	0x40020028
 8004018:	40020040 	.word	0x40020040
 800401c:	40020058 	.word	0x40020058
 8004020:	40020070 	.word	0x40020070
 8004024:	40020088 	.word	0x40020088
 8004028:	400200a0 	.word	0x400200a0
 800402c:	400200b8 	.word	0x400200b8
 8004030:	40020410 	.word	0x40020410
 8004034:	40020428 	.word	0x40020428
 8004038:	40020440 	.word	0x40020440
 800403c:	40020458 	.word	0x40020458
 8004040:	40020470 	.word	0x40020470
 8004044:	40020488 	.word	0x40020488
 8004048:	400204a0 	.word	0x400204a0
 800404c:	400204b8 	.word	0x400204b8
 8004050:	58025408 	.word	0x58025408
 8004054:	5802541c 	.word	0x5802541c
 8004058:	58025430 	.word	0x58025430
 800405c:	58025444 	.word	0x58025444
 8004060:	58025458 	.word	0x58025458
 8004064:	5802546c 	.word	0x5802546c
 8004068:	58025480 	.word	0x58025480
 800406c:	58025494 	.word	0x58025494

08004070 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e237      	b.n	80044f2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d004      	beq.n	8004098 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2280      	movs	r2, #128	@ 0x80
 8004092:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e22c      	b.n	80044f2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a5c      	ldr	r2, [pc, #368]	@ (8004210 <HAL_DMA_Abort_IT+0x1a0>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d04a      	beq.n	8004138 <HAL_DMA_Abort_IT+0xc8>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a5b      	ldr	r2, [pc, #364]	@ (8004214 <HAL_DMA_Abort_IT+0x1a4>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d045      	beq.n	8004138 <HAL_DMA_Abort_IT+0xc8>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a59      	ldr	r2, [pc, #356]	@ (8004218 <HAL_DMA_Abort_IT+0x1a8>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d040      	beq.n	8004138 <HAL_DMA_Abort_IT+0xc8>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a58      	ldr	r2, [pc, #352]	@ (800421c <HAL_DMA_Abort_IT+0x1ac>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d03b      	beq.n	8004138 <HAL_DMA_Abort_IT+0xc8>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a56      	ldr	r2, [pc, #344]	@ (8004220 <HAL_DMA_Abort_IT+0x1b0>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d036      	beq.n	8004138 <HAL_DMA_Abort_IT+0xc8>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a55      	ldr	r2, [pc, #340]	@ (8004224 <HAL_DMA_Abort_IT+0x1b4>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d031      	beq.n	8004138 <HAL_DMA_Abort_IT+0xc8>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a53      	ldr	r2, [pc, #332]	@ (8004228 <HAL_DMA_Abort_IT+0x1b8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d02c      	beq.n	8004138 <HAL_DMA_Abort_IT+0xc8>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a52      	ldr	r2, [pc, #328]	@ (800422c <HAL_DMA_Abort_IT+0x1bc>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d027      	beq.n	8004138 <HAL_DMA_Abort_IT+0xc8>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a50      	ldr	r2, [pc, #320]	@ (8004230 <HAL_DMA_Abort_IT+0x1c0>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d022      	beq.n	8004138 <HAL_DMA_Abort_IT+0xc8>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a4f      	ldr	r2, [pc, #316]	@ (8004234 <HAL_DMA_Abort_IT+0x1c4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d01d      	beq.n	8004138 <HAL_DMA_Abort_IT+0xc8>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a4d      	ldr	r2, [pc, #308]	@ (8004238 <HAL_DMA_Abort_IT+0x1c8>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d018      	beq.n	8004138 <HAL_DMA_Abort_IT+0xc8>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a4c      	ldr	r2, [pc, #304]	@ (800423c <HAL_DMA_Abort_IT+0x1cc>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d013      	beq.n	8004138 <HAL_DMA_Abort_IT+0xc8>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a4a      	ldr	r2, [pc, #296]	@ (8004240 <HAL_DMA_Abort_IT+0x1d0>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d00e      	beq.n	8004138 <HAL_DMA_Abort_IT+0xc8>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a49      	ldr	r2, [pc, #292]	@ (8004244 <HAL_DMA_Abort_IT+0x1d4>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d009      	beq.n	8004138 <HAL_DMA_Abort_IT+0xc8>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a47      	ldr	r2, [pc, #284]	@ (8004248 <HAL_DMA_Abort_IT+0x1d8>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d004      	beq.n	8004138 <HAL_DMA_Abort_IT+0xc8>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a46      	ldr	r2, [pc, #280]	@ (800424c <HAL_DMA_Abort_IT+0x1dc>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d101      	bne.n	800413c <HAL_DMA_Abort_IT+0xcc>
 8004138:	2301      	movs	r3, #1
 800413a:	e000      	b.n	800413e <HAL_DMA_Abort_IT+0xce>
 800413c:	2300      	movs	r3, #0
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 8086 	beq.w	8004250 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2204      	movs	r2, #4
 8004148:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a2f      	ldr	r2, [pc, #188]	@ (8004210 <HAL_DMA_Abort_IT+0x1a0>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d04a      	beq.n	80041ec <HAL_DMA_Abort_IT+0x17c>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a2e      	ldr	r2, [pc, #184]	@ (8004214 <HAL_DMA_Abort_IT+0x1a4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d045      	beq.n	80041ec <HAL_DMA_Abort_IT+0x17c>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a2c      	ldr	r2, [pc, #176]	@ (8004218 <HAL_DMA_Abort_IT+0x1a8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d040      	beq.n	80041ec <HAL_DMA_Abort_IT+0x17c>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a2b      	ldr	r2, [pc, #172]	@ (800421c <HAL_DMA_Abort_IT+0x1ac>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d03b      	beq.n	80041ec <HAL_DMA_Abort_IT+0x17c>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a29      	ldr	r2, [pc, #164]	@ (8004220 <HAL_DMA_Abort_IT+0x1b0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d036      	beq.n	80041ec <HAL_DMA_Abort_IT+0x17c>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a28      	ldr	r2, [pc, #160]	@ (8004224 <HAL_DMA_Abort_IT+0x1b4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d031      	beq.n	80041ec <HAL_DMA_Abort_IT+0x17c>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a26      	ldr	r2, [pc, #152]	@ (8004228 <HAL_DMA_Abort_IT+0x1b8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d02c      	beq.n	80041ec <HAL_DMA_Abort_IT+0x17c>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a25      	ldr	r2, [pc, #148]	@ (800422c <HAL_DMA_Abort_IT+0x1bc>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d027      	beq.n	80041ec <HAL_DMA_Abort_IT+0x17c>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a23      	ldr	r2, [pc, #140]	@ (8004230 <HAL_DMA_Abort_IT+0x1c0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d022      	beq.n	80041ec <HAL_DMA_Abort_IT+0x17c>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a22      	ldr	r2, [pc, #136]	@ (8004234 <HAL_DMA_Abort_IT+0x1c4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d01d      	beq.n	80041ec <HAL_DMA_Abort_IT+0x17c>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a20      	ldr	r2, [pc, #128]	@ (8004238 <HAL_DMA_Abort_IT+0x1c8>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d018      	beq.n	80041ec <HAL_DMA_Abort_IT+0x17c>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a1f      	ldr	r2, [pc, #124]	@ (800423c <HAL_DMA_Abort_IT+0x1cc>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d013      	beq.n	80041ec <HAL_DMA_Abort_IT+0x17c>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004240 <HAL_DMA_Abort_IT+0x1d0>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d00e      	beq.n	80041ec <HAL_DMA_Abort_IT+0x17c>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004244 <HAL_DMA_Abort_IT+0x1d4>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d009      	beq.n	80041ec <HAL_DMA_Abort_IT+0x17c>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a1a      	ldr	r2, [pc, #104]	@ (8004248 <HAL_DMA_Abort_IT+0x1d8>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d004      	beq.n	80041ec <HAL_DMA_Abort_IT+0x17c>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a19      	ldr	r2, [pc, #100]	@ (800424c <HAL_DMA_Abort_IT+0x1dc>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d108      	bne.n	80041fe <HAL_DMA_Abort_IT+0x18e>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 0201 	bic.w	r2, r2, #1
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	e178      	b.n	80044f0 <HAL_DMA_Abort_IT+0x480>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 0201 	bic.w	r2, r2, #1
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	e16f      	b.n	80044f0 <HAL_DMA_Abort_IT+0x480>
 8004210:	40020010 	.word	0x40020010
 8004214:	40020028 	.word	0x40020028
 8004218:	40020040 	.word	0x40020040
 800421c:	40020058 	.word	0x40020058
 8004220:	40020070 	.word	0x40020070
 8004224:	40020088 	.word	0x40020088
 8004228:	400200a0 	.word	0x400200a0
 800422c:	400200b8 	.word	0x400200b8
 8004230:	40020410 	.word	0x40020410
 8004234:	40020428 	.word	0x40020428
 8004238:	40020440 	.word	0x40020440
 800423c:	40020458 	.word	0x40020458
 8004240:	40020470 	.word	0x40020470
 8004244:	40020488 	.word	0x40020488
 8004248:	400204a0 	.word	0x400204a0
 800424c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 020e 	bic.w	r2, r2, #14
 800425e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a6c      	ldr	r2, [pc, #432]	@ (8004418 <HAL_DMA_Abort_IT+0x3a8>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d04a      	beq.n	8004300 <HAL_DMA_Abort_IT+0x290>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a6b      	ldr	r2, [pc, #428]	@ (800441c <HAL_DMA_Abort_IT+0x3ac>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d045      	beq.n	8004300 <HAL_DMA_Abort_IT+0x290>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a69      	ldr	r2, [pc, #420]	@ (8004420 <HAL_DMA_Abort_IT+0x3b0>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d040      	beq.n	8004300 <HAL_DMA_Abort_IT+0x290>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a68      	ldr	r2, [pc, #416]	@ (8004424 <HAL_DMA_Abort_IT+0x3b4>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d03b      	beq.n	8004300 <HAL_DMA_Abort_IT+0x290>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a66      	ldr	r2, [pc, #408]	@ (8004428 <HAL_DMA_Abort_IT+0x3b8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d036      	beq.n	8004300 <HAL_DMA_Abort_IT+0x290>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a65      	ldr	r2, [pc, #404]	@ (800442c <HAL_DMA_Abort_IT+0x3bc>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d031      	beq.n	8004300 <HAL_DMA_Abort_IT+0x290>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a63      	ldr	r2, [pc, #396]	@ (8004430 <HAL_DMA_Abort_IT+0x3c0>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d02c      	beq.n	8004300 <HAL_DMA_Abort_IT+0x290>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a62      	ldr	r2, [pc, #392]	@ (8004434 <HAL_DMA_Abort_IT+0x3c4>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d027      	beq.n	8004300 <HAL_DMA_Abort_IT+0x290>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a60      	ldr	r2, [pc, #384]	@ (8004438 <HAL_DMA_Abort_IT+0x3c8>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d022      	beq.n	8004300 <HAL_DMA_Abort_IT+0x290>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a5f      	ldr	r2, [pc, #380]	@ (800443c <HAL_DMA_Abort_IT+0x3cc>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d01d      	beq.n	8004300 <HAL_DMA_Abort_IT+0x290>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a5d      	ldr	r2, [pc, #372]	@ (8004440 <HAL_DMA_Abort_IT+0x3d0>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d018      	beq.n	8004300 <HAL_DMA_Abort_IT+0x290>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a5c      	ldr	r2, [pc, #368]	@ (8004444 <HAL_DMA_Abort_IT+0x3d4>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d013      	beq.n	8004300 <HAL_DMA_Abort_IT+0x290>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a5a      	ldr	r2, [pc, #360]	@ (8004448 <HAL_DMA_Abort_IT+0x3d8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d00e      	beq.n	8004300 <HAL_DMA_Abort_IT+0x290>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a59      	ldr	r2, [pc, #356]	@ (800444c <HAL_DMA_Abort_IT+0x3dc>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d009      	beq.n	8004300 <HAL_DMA_Abort_IT+0x290>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a57      	ldr	r2, [pc, #348]	@ (8004450 <HAL_DMA_Abort_IT+0x3e0>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d004      	beq.n	8004300 <HAL_DMA_Abort_IT+0x290>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a56      	ldr	r2, [pc, #344]	@ (8004454 <HAL_DMA_Abort_IT+0x3e4>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d108      	bne.n	8004312 <HAL_DMA_Abort_IT+0x2a2>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0201 	bic.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	e007      	b.n	8004322 <HAL_DMA_Abort_IT+0x2b2>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0201 	bic.w	r2, r2, #1
 8004320:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a3c      	ldr	r2, [pc, #240]	@ (8004418 <HAL_DMA_Abort_IT+0x3a8>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d072      	beq.n	8004412 <HAL_DMA_Abort_IT+0x3a2>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a3a      	ldr	r2, [pc, #232]	@ (800441c <HAL_DMA_Abort_IT+0x3ac>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d06d      	beq.n	8004412 <HAL_DMA_Abort_IT+0x3a2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a39      	ldr	r2, [pc, #228]	@ (8004420 <HAL_DMA_Abort_IT+0x3b0>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d068      	beq.n	8004412 <HAL_DMA_Abort_IT+0x3a2>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a37      	ldr	r2, [pc, #220]	@ (8004424 <HAL_DMA_Abort_IT+0x3b4>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d063      	beq.n	8004412 <HAL_DMA_Abort_IT+0x3a2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a36      	ldr	r2, [pc, #216]	@ (8004428 <HAL_DMA_Abort_IT+0x3b8>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d05e      	beq.n	8004412 <HAL_DMA_Abort_IT+0x3a2>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a34      	ldr	r2, [pc, #208]	@ (800442c <HAL_DMA_Abort_IT+0x3bc>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d059      	beq.n	8004412 <HAL_DMA_Abort_IT+0x3a2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a33      	ldr	r2, [pc, #204]	@ (8004430 <HAL_DMA_Abort_IT+0x3c0>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d054      	beq.n	8004412 <HAL_DMA_Abort_IT+0x3a2>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a31      	ldr	r2, [pc, #196]	@ (8004434 <HAL_DMA_Abort_IT+0x3c4>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d04f      	beq.n	8004412 <HAL_DMA_Abort_IT+0x3a2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a30      	ldr	r2, [pc, #192]	@ (8004438 <HAL_DMA_Abort_IT+0x3c8>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d04a      	beq.n	8004412 <HAL_DMA_Abort_IT+0x3a2>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a2e      	ldr	r2, [pc, #184]	@ (800443c <HAL_DMA_Abort_IT+0x3cc>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d045      	beq.n	8004412 <HAL_DMA_Abort_IT+0x3a2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a2d      	ldr	r2, [pc, #180]	@ (8004440 <HAL_DMA_Abort_IT+0x3d0>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d040      	beq.n	8004412 <HAL_DMA_Abort_IT+0x3a2>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a2b      	ldr	r2, [pc, #172]	@ (8004444 <HAL_DMA_Abort_IT+0x3d4>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d03b      	beq.n	8004412 <HAL_DMA_Abort_IT+0x3a2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a2a      	ldr	r2, [pc, #168]	@ (8004448 <HAL_DMA_Abort_IT+0x3d8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d036      	beq.n	8004412 <HAL_DMA_Abort_IT+0x3a2>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a28      	ldr	r2, [pc, #160]	@ (800444c <HAL_DMA_Abort_IT+0x3dc>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d031      	beq.n	8004412 <HAL_DMA_Abort_IT+0x3a2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a27      	ldr	r2, [pc, #156]	@ (8004450 <HAL_DMA_Abort_IT+0x3e0>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d02c      	beq.n	8004412 <HAL_DMA_Abort_IT+0x3a2>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a25      	ldr	r2, [pc, #148]	@ (8004454 <HAL_DMA_Abort_IT+0x3e4>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d027      	beq.n	8004412 <HAL_DMA_Abort_IT+0x3a2>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a24      	ldr	r2, [pc, #144]	@ (8004458 <HAL_DMA_Abort_IT+0x3e8>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d022      	beq.n	8004412 <HAL_DMA_Abort_IT+0x3a2>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a22      	ldr	r2, [pc, #136]	@ (800445c <HAL_DMA_Abort_IT+0x3ec>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d01d      	beq.n	8004412 <HAL_DMA_Abort_IT+0x3a2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a21      	ldr	r2, [pc, #132]	@ (8004460 <HAL_DMA_Abort_IT+0x3f0>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d018      	beq.n	8004412 <HAL_DMA_Abort_IT+0x3a2>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004464 <HAL_DMA_Abort_IT+0x3f4>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d013      	beq.n	8004412 <HAL_DMA_Abort_IT+0x3a2>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a1e      	ldr	r2, [pc, #120]	@ (8004468 <HAL_DMA_Abort_IT+0x3f8>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d00e      	beq.n	8004412 <HAL_DMA_Abort_IT+0x3a2>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a1c      	ldr	r2, [pc, #112]	@ (800446c <HAL_DMA_Abort_IT+0x3fc>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d009      	beq.n	8004412 <HAL_DMA_Abort_IT+0x3a2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a1b      	ldr	r2, [pc, #108]	@ (8004470 <HAL_DMA_Abort_IT+0x400>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d004      	beq.n	8004412 <HAL_DMA_Abort_IT+0x3a2>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a19      	ldr	r2, [pc, #100]	@ (8004474 <HAL_DMA_Abort_IT+0x404>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d132      	bne.n	8004478 <HAL_DMA_Abort_IT+0x408>
 8004412:	2301      	movs	r3, #1
 8004414:	e031      	b.n	800447a <HAL_DMA_Abort_IT+0x40a>
 8004416:	bf00      	nop
 8004418:	40020010 	.word	0x40020010
 800441c:	40020028 	.word	0x40020028
 8004420:	40020040 	.word	0x40020040
 8004424:	40020058 	.word	0x40020058
 8004428:	40020070 	.word	0x40020070
 800442c:	40020088 	.word	0x40020088
 8004430:	400200a0 	.word	0x400200a0
 8004434:	400200b8 	.word	0x400200b8
 8004438:	40020410 	.word	0x40020410
 800443c:	40020428 	.word	0x40020428
 8004440:	40020440 	.word	0x40020440
 8004444:	40020458 	.word	0x40020458
 8004448:	40020470 	.word	0x40020470
 800444c:	40020488 	.word	0x40020488
 8004450:	400204a0 	.word	0x400204a0
 8004454:	400204b8 	.word	0x400204b8
 8004458:	58025408 	.word	0x58025408
 800445c:	5802541c 	.word	0x5802541c
 8004460:	58025430 	.word	0x58025430
 8004464:	58025444 	.word	0x58025444
 8004468:	58025458 	.word	0x58025458
 800446c:	5802546c 	.word	0x5802546c
 8004470:	58025480 	.word	0x58025480
 8004474:	58025494 	.word	0x58025494
 8004478:	2300      	movs	r3, #0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d028      	beq.n	80044d0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004488:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800448c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004492:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004498:	f003 031f 	and.w	r3, r3, #31
 800449c:	2201      	movs	r2, #1
 800449e:	409a      	lsls	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80044ac:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00c      	beq.n	80044d0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044c4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80044ce:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d003      	beq.n	80044f0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop

080044fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b08a      	sub	sp, #40	@ 0x28
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004508:	4b67      	ldr	r3, [pc, #412]	@ (80046a8 <HAL_DMA_IRQHandler+0x1ac>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a67      	ldr	r2, [pc, #412]	@ (80046ac <HAL_DMA_IRQHandler+0x1b0>)
 800450e:	fba2 2303 	umull	r2, r3, r2, r3
 8004512:	0a9b      	lsrs	r3, r3, #10
 8004514:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800451a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004520:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a5f      	ldr	r2, [pc, #380]	@ (80046b0 <HAL_DMA_IRQHandler+0x1b4>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d04a      	beq.n	80045ce <HAL_DMA_IRQHandler+0xd2>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a5d      	ldr	r2, [pc, #372]	@ (80046b4 <HAL_DMA_IRQHandler+0x1b8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d045      	beq.n	80045ce <HAL_DMA_IRQHandler+0xd2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a5c      	ldr	r2, [pc, #368]	@ (80046b8 <HAL_DMA_IRQHandler+0x1bc>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d040      	beq.n	80045ce <HAL_DMA_IRQHandler+0xd2>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a5a      	ldr	r2, [pc, #360]	@ (80046bc <HAL_DMA_IRQHandler+0x1c0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d03b      	beq.n	80045ce <HAL_DMA_IRQHandler+0xd2>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a59      	ldr	r2, [pc, #356]	@ (80046c0 <HAL_DMA_IRQHandler+0x1c4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d036      	beq.n	80045ce <HAL_DMA_IRQHandler+0xd2>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a57      	ldr	r2, [pc, #348]	@ (80046c4 <HAL_DMA_IRQHandler+0x1c8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d031      	beq.n	80045ce <HAL_DMA_IRQHandler+0xd2>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a56      	ldr	r2, [pc, #344]	@ (80046c8 <HAL_DMA_IRQHandler+0x1cc>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d02c      	beq.n	80045ce <HAL_DMA_IRQHandler+0xd2>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a54      	ldr	r2, [pc, #336]	@ (80046cc <HAL_DMA_IRQHandler+0x1d0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d027      	beq.n	80045ce <HAL_DMA_IRQHandler+0xd2>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a53      	ldr	r2, [pc, #332]	@ (80046d0 <HAL_DMA_IRQHandler+0x1d4>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d022      	beq.n	80045ce <HAL_DMA_IRQHandler+0xd2>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a51      	ldr	r2, [pc, #324]	@ (80046d4 <HAL_DMA_IRQHandler+0x1d8>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d01d      	beq.n	80045ce <HAL_DMA_IRQHandler+0xd2>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a50      	ldr	r2, [pc, #320]	@ (80046d8 <HAL_DMA_IRQHandler+0x1dc>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d018      	beq.n	80045ce <HAL_DMA_IRQHandler+0xd2>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a4e      	ldr	r2, [pc, #312]	@ (80046dc <HAL_DMA_IRQHandler+0x1e0>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d013      	beq.n	80045ce <HAL_DMA_IRQHandler+0xd2>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a4d      	ldr	r2, [pc, #308]	@ (80046e0 <HAL_DMA_IRQHandler+0x1e4>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d00e      	beq.n	80045ce <HAL_DMA_IRQHandler+0xd2>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a4b      	ldr	r2, [pc, #300]	@ (80046e4 <HAL_DMA_IRQHandler+0x1e8>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d009      	beq.n	80045ce <HAL_DMA_IRQHandler+0xd2>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a4a      	ldr	r2, [pc, #296]	@ (80046e8 <HAL_DMA_IRQHandler+0x1ec>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d004      	beq.n	80045ce <HAL_DMA_IRQHandler+0xd2>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a48      	ldr	r2, [pc, #288]	@ (80046ec <HAL_DMA_IRQHandler+0x1f0>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d101      	bne.n	80045d2 <HAL_DMA_IRQHandler+0xd6>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e000      	b.n	80045d4 <HAL_DMA_IRQHandler+0xd8>
 80045d2:	2300      	movs	r3, #0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f000 842b 	beq.w	8004e30 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045de:	f003 031f 	and.w	r3, r3, #31
 80045e2:	2208      	movs	r2, #8
 80045e4:	409a      	lsls	r2, r3
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	4013      	ands	r3, r2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f000 80a2 	beq.w	8004734 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a2e      	ldr	r2, [pc, #184]	@ (80046b0 <HAL_DMA_IRQHandler+0x1b4>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d04a      	beq.n	8004690 <HAL_DMA_IRQHandler+0x194>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a2d      	ldr	r2, [pc, #180]	@ (80046b4 <HAL_DMA_IRQHandler+0x1b8>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d045      	beq.n	8004690 <HAL_DMA_IRQHandler+0x194>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a2b      	ldr	r2, [pc, #172]	@ (80046b8 <HAL_DMA_IRQHandler+0x1bc>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d040      	beq.n	8004690 <HAL_DMA_IRQHandler+0x194>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a2a      	ldr	r2, [pc, #168]	@ (80046bc <HAL_DMA_IRQHandler+0x1c0>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d03b      	beq.n	8004690 <HAL_DMA_IRQHandler+0x194>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a28      	ldr	r2, [pc, #160]	@ (80046c0 <HAL_DMA_IRQHandler+0x1c4>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d036      	beq.n	8004690 <HAL_DMA_IRQHandler+0x194>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a27      	ldr	r2, [pc, #156]	@ (80046c4 <HAL_DMA_IRQHandler+0x1c8>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d031      	beq.n	8004690 <HAL_DMA_IRQHandler+0x194>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a25      	ldr	r2, [pc, #148]	@ (80046c8 <HAL_DMA_IRQHandler+0x1cc>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d02c      	beq.n	8004690 <HAL_DMA_IRQHandler+0x194>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a24      	ldr	r2, [pc, #144]	@ (80046cc <HAL_DMA_IRQHandler+0x1d0>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d027      	beq.n	8004690 <HAL_DMA_IRQHandler+0x194>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a22      	ldr	r2, [pc, #136]	@ (80046d0 <HAL_DMA_IRQHandler+0x1d4>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d022      	beq.n	8004690 <HAL_DMA_IRQHandler+0x194>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a21      	ldr	r2, [pc, #132]	@ (80046d4 <HAL_DMA_IRQHandler+0x1d8>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d01d      	beq.n	8004690 <HAL_DMA_IRQHandler+0x194>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a1f      	ldr	r2, [pc, #124]	@ (80046d8 <HAL_DMA_IRQHandler+0x1dc>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d018      	beq.n	8004690 <HAL_DMA_IRQHandler+0x194>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a1e      	ldr	r2, [pc, #120]	@ (80046dc <HAL_DMA_IRQHandler+0x1e0>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d013      	beq.n	8004690 <HAL_DMA_IRQHandler+0x194>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a1c      	ldr	r2, [pc, #112]	@ (80046e0 <HAL_DMA_IRQHandler+0x1e4>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d00e      	beq.n	8004690 <HAL_DMA_IRQHandler+0x194>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a1b      	ldr	r2, [pc, #108]	@ (80046e4 <HAL_DMA_IRQHandler+0x1e8>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d009      	beq.n	8004690 <HAL_DMA_IRQHandler+0x194>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a19      	ldr	r2, [pc, #100]	@ (80046e8 <HAL_DMA_IRQHandler+0x1ec>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d004      	beq.n	8004690 <HAL_DMA_IRQHandler+0x194>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a18      	ldr	r2, [pc, #96]	@ (80046ec <HAL_DMA_IRQHandler+0x1f0>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d12f      	bne.n	80046f0 <HAL_DMA_IRQHandler+0x1f4>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0304 	and.w	r3, r3, #4
 800469a:	2b00      	cmp	r3, #0
 800469c:	bf14      	ite	ne
 800469e:	2301      	movne	r3, #1
 80046a0:	2300      	moveq	r3, #0
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	e02e      	b.n	8004704 <HAL_DMA_IRQHandler+0x208>
 80046a6:	bf00      	nop
 80046a8:	24000058 	.word	0x24000058
 80046ac:	1b4e81b5 	.word	0x1b4e81b5
 80046b0:	40020010 	.word	0x40020010
 80046b4:	40020028 	.word	0x40020028
 80046b8:	40020040 	.word	0x40020040
 80046bc:	40020058 	.word	0x40020058
 80046c0:	40020070 	.word	0x40020070
 80046c4:	40020088 	.word	0x40020088
 80046c8:	400200a0 	.word	0x400200a0
 80046cc:	400200b8 	.word	0x400200b8
 80046d0:	40020410 	.word	0x40020410
 80046d4:	40020428 	.word	0x40020428
 80046d8:	40020440 	.word	0x40020440
 80046dc:	40020458 	.word	0x40020458
 80046e0:	40020470 	.word	0x40020470
 80046e4:	40020488 	.word	0x40020488
 80046e8:	400204a0 	.word	0x400204a0
 80046ec:	400204b8 	.word	0x400204b8
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0308 	and.w	r3, r3, #8
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	bf14      	ite	ne
 80046fe:	2301      	movne	r3, #1
 8004700:	2300      	moveq	r3, #0
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	d015      	beq.n	8004734 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0204 	bic.w	r2, r2, #4
 8004716:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800471c:	f003 031f 	and.w	r3, r3, #31
 8004720:	2208      	movs	r2, #8
 8004722:	409a      	lsls	r2, r3
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800472c:	f043 0201 	orr.w	r2, r3, #1
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004738:	f003 031f 	and.w	r3, r3, #31
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	fa22 f303 	lsr.w	r3, r2, r3
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d06e      	beq.n	8004828 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a69      	ldr	r2, [pc, #420]	@ (80048f4 <HAL_DMA_IRQHandler+0x3f8>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d04a      	beq.n	80047ea <HAL_DMA_IRQHandler+0x2ee>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a67      	ldr	r2, [pc, #412]	@ (80048f8 <HAL_DMA_IRQHandler+0x3fc>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d045      	beq.n	80047ea <HAL_DMA_IRQHandler+0x2ee>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a66      	ldr	r2, [pc, #408]	@ (80048fc <HAL_DMA_IRQHandler+0x400>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d040      	beq.n	80047ea <HAL_DMA_IRQHandler+0x2ee>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a64      	ldr	r2, [pc, #400]	@ (8004900 <HAL_DMA_IRQHandler+0x404>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d03b      	beq.n	80047ea <HAL_DMA_IRQHandler+0x2ee>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a63      	ldr	r2, [pc, #396]	@ (8004904 <HAL_DMA_IRQHandler+0x408>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d036      	beq.n	80047ea <HAL_DMA_IRQHandler+0x2ee>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a61      	ldr	r2, [pc, #388]	@ (8004908 <HAL_DMA_IRQHandler+0x40c>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d031      	beq.n	80047ea <HAL_DMA_IRQHandler+0x2ee>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a60      	ldr	r2, [pc, #384]	@ (800490c <HAL_DMA_IRQHandler+0x410>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d02c      	beq.n	80047ea <HAL_DMA_IRQHandler+0x2ee>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a5e      	ldr	r2, [pc, #376]	@ (8004910 <HAL_DMA_IRQHandler+0x414>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d027      	beq.n	80047ea <HAL_DMA_IRQHandler+0x2ee>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a5d      	ldr	r2, [pc, #372]	@ (8004914 <HAL_DMA_IRQHandler+0x418>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d022      	beq.n	80047ea <HAL_DMA_IRQHandler+0x2ee>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a5b      	ldr	r2, [pc, #364]	@ (8004918 <HAL_DMA_IRQHandler+0x41c>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d01d      	beq.n	80047ea <HAL_DMA_IRQHandler+0x2ee>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a5a      	ldr	r2, [pc, #360]	@ (800491c <HAL_DMA_IRQHandler+0x420>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d018      	beq.n	80047ea <HAL_DMA_IRQHandler+0x2ee>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a58      	ldr	r2, [pc, #352]	@ (8004920 <HAL_DMA_IRQHandler+0x424>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d013      	beq.n	80047ea <HAL_DMA_IRQHandler+0x2ee>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a57      	ldr	r2, [pc, #348]	@ (8004924 <HAL_DMA_IRQHandler+0x428>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d00e      	beq.n	80047ea <HAL_DMA_IRQHandler+0x2ee>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a55      	ldr	r2, [pc, #340]	@ (8004928 <HAL_DMA_IRQHandler+0x42c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d009      	beq.n	80047ea <HAL_DMA_IRQHandler+0x2ee>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a54      	ldr	r2, [pc, #336]	@ (800492c <HAL_DMA_IRQHandler+0x430>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d004      	beq.n	80047ea <HAL_DMA_IRQHandler+0x2ee>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a52      	ldr	r2, [pc, #328]	@ (8004930 <HAL_DMA_IRQHandler+0x434>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d10a      	bne.n	8004800 <HAL_DMA_IRQHandler+0x304>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	bf14      	ite	ne
 80047f8:	2301      	movne	r3, #1
 80047fa:	2300      	moveq	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	e003      	b.n	8004808 <HAL_DMA_IRQHandler+0x30c>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2300      	movs	r3, #0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00d      	beq.n	8004828 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004810:	f003 031f 	and.w	r3, r3, #31
 8004814:	2201      	movs	r2, #1
 8004816:	409a      	lsls	r2, r3
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004820:	f043 0202 	orr.w	r2, r3, #2
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800482c:	f003 031f 	and.w	r3, r3, #31
 8004830:	2204      	movs	r2, #4
 8004832:	409a      	lsls	r2, r3
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	4013      	ands	r3, r2
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 808f 	beq.w	800495c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a2c      	ldr	r2, [pc, #176]	@ (80048f4 <HAL_DMA_IRQHandler+0x3f8>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d04a      	beq.n	80048de <HAL_DMA_IRQHandler+0x3e2>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a2a      	ldr	r2, [pc, #168]	@ (80048f8 <HAL_DMA_IRQHandler+0x3fc>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d045      	beq.n	80048de <HAL_DMA_IRQHandler+0x3e2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a29      	ldr	r2, [pc, #164]	@ (80048fc <HAL_DMA_IRQHandler+0x400>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d040      	beq.n	80048de <HAL_DMA_IRQHandler+0x3e2>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a27      	ldr	r2, [pc, #156]	@ (8004900 <HAL_DMA_IRQHandler+0x404>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d03b      	beq.n	80048de <HAL_DMA_IRQHandler+0x3e2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a26      	ldr	r2, [pc, #152]	@ (8004904 <HAL_DMA_IRQHandler+0x408>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d036      	beq.n	80048de <HAL_DMA_IRQHandler+0x3e2>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a24      	ldr	r2, [pc, #144]	@ (8004908 <HAL_DMA_IRQHandler+0x40c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d031      	beq.n	80048de <HAL_DMA_IRQHandler+0x3e2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a23      	ldr	r2, [pc, #140]	@ (800490c <HAL_DMA_IRQHandler+0x410>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d02c      	beq.n	80048de <HAL_DMA_IRQHandler+0x3e2>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a21      	ldr	r2, [pc, #132]	@ (8004910 <HAL_DMA_IRQHandler+0x414>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d027      	beq.n	80048de <HAL_DMA_IRQHandler+0x3e2>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a20      	ldr	r2, [pc, #128]	@ (8004914 <HAL_DMA_IRQHandler+0x418>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d022      	beq.n	80048de <HAL_DMA_IRQHandler+0x3e2>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a1e      	ldr	r2, [pc, #120]	@ (8004918 <HAL_DMA_IRQHandler+0x41c>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d01d      	beq.n	80048de <HAL_DMA_IRQHandler+0x3e2>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a1d      	ldr	r2, [pc, #116]	@ (800491c <HAL_DMA_IRQHandler+0x420>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d018      	beq.n	80048de <HAL_DMA_IRQHandler+0x3e2>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004920 <HAL_DMA_IRQHandler+0x424>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d013      	beq.n	80048de <HAL_DMA_IRQHandler+0x3e2>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a1a      	ldr	r2, [pc, #104]	@ (8004924 <HAL_DMA_IRQHandler+0x428>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d00e      	beq.n	80048de <HAL_DMA_IRQHandler+0x3e2>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a18      	ldr	r2, [pc, #96]	@ (8004928 <HAL_DMA_IRQHandler+0x42c>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d009      	beq.n	80048de <HAL_DMA_IRQHandler+0x3e2>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a17      	ldr	r2, [pc, #92]	@ (800492c <HAL_DMA_IRQHandler+0x430>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d004      	beq.n	80048de <HAL_DMA_IRQHandler+0x3e2>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a15      	ldr	r2, [pc, #84]	@ (8004930 <HAL_DMA_IRQHandler+0x434>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d12a      	bne.n	8004934 <HAL_DMA_IRQHandler+0x438>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	bf14      	ite	ne
 80048ec:	2301      	movne	r3, #1
 80048ee:	2300      	moveq	r3, #0
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	e023      	b.n	800493c <HAL_DMA_IRQHandler+0x440>
 80048f4:	40020010 	.word	0x40020010
 80048f8:	40020028 	.word	0x40020028
 80048fc:	40020040 	.word	0x40020040
 8004900:	40020058 	.word	0x40020058
 8004904:	40020070 	.word	0x40020070
 8004908:	40020088 	.word	0x40020088
 800490c:	400200a0 	.word	0x400200a0
 8004910:	400200b8 	.word	0x400200b8
 8004914:	40020410 	.word	0x40020410
 8004918:	40020428 	.word	0x40020428
 800491c:	40020440 	.word	0x40020440
 8004920:	40020458 	.word	0x40020458
 8004924:	40020470 	.word	0x40020470
 8004928:	40020488 	.word	0x40020488
 800492c:	400204a0 	.word	0x400204a0
 8004930:	400204b8 	.word	0x400204b8
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2300      	movs	r3, #0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00d      	beq.n	800495c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004944:	f003 031f 	and.w	r3, r3, #31
 8004948:	2204      	movs	r2, #4
 800494a:	409a      	lsls	r2, r3
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004954:	f043 0204 	orr.w	r2, r3, #4
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004960:	f003 031f 	and.w	r3, r3, #31
 8004964:	2210      	movs	r2, #16
 8004966:	409a      	lsls	r2, r3
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	4013      	ands	r3, r2
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 80a6 	beq.w	8004abe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a85      	ldr	r2, [pc, #532]	@ (8004b8c <HAL_DMA_IRQHandler+0x690>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d04a      	beq.n	8004a12 <HAL_DMA_IRQHandler+0x516>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a83      	ldr	r2, [pc, #524]	@ (8004b90 <HAL_DMA_IRQHandler+0x694>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d045      	beq.n	8004a12 <HAL_DMA_IRQHandler+0x516>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a82      	ldr	r2, [pc, #520]	@ (8004b94 <HAL_DMA_IRQHandler+0x698>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d040      	beq.n	8004a12 <HAL_DMA_IRQHandler+0x516>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a80      	ldr	r2, [pc, #512]	@ (8004b98 <HAL_DMA_IRQHandler+0x69c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d03b      	beq.n	8004a12 <HAL_DMA_IRQHandler+0x516>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a7f      	ldr	r2, [pc, #508]	@ (8004b9c <HAL_DMA_IRQHandler+0x6a0>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d036      	beq.n	8004a12 <HAL_DMA_IRQHandler+0x516>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a7d      	ldr	r2, [pc, #500]	@ (8004ba0 <HAL_DMA_IRQHandler+0x6a4>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d031      	beq.n	8004a12 <HAL_DMA_IRQHandler+0x516>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a7c      	ldr	r2, [pc, #496]	@ (8004ba4 <HAL_DMA_IRQHandler+0x6a8>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d02c      	beq.n	8004a12 <HAL_DMA_IRQHandler+0x516>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a7a      	ldr	r2, [pc, #488]	@ (8004ba8 <HAL_DMA_IRQHandler+0x6ac>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d027      	beq.n	8004a12 <HAL_DMA_IRQHandler+0x516>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a79      	ldr	r2, [pc, #484]	@ (8004bac <HAL_DMA_IRQHandler+0x6b0>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d022      	beq.n	8004a12 <HAL_DMA_IRQHandler+0x516>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a77      	ldr	r2, [pc, #476]	@ (8004bb0 <HAL_DMA_IRQHandler+0x6b4>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d01d      	beq.n	8004a12 <HAL_DMA_IRQHandler+0x516>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a76      	ldr	r2, [pc, #472]	@ (8004bb4 <HAL_DMA_IRQHandler+0x6b8>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d018      	beq.n	8004a12 <HAL_DMA_IRQHandler+0x516>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a74      	ldr	r2, [pc, #464]	@ (8004bb8 <HAL_DMA_IRQHandler+0x6bc>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d013      	beq.n	8004a12 <HAL_DMA_IRQHandler+0x516>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a73      	ldr	r2, [pc, #460]	@ (8004bbc <HAL_DMA_IRQHandler+0x6c0>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d00e      	beq.n	8004a12 <HAL_DMA_IRQHandler+0x516>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a71      	ldr	r2, [pc, #452]	@ (8004bc0 <HAL_DMA_IRQHandler+0x6c4>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d009      	beq.n	8004a12 <HAL_DMA_IRQHandler+0x516>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a70      	ldr	r2, [pc, #448]	@ (8004bc4 <HAL_DMA_IRQHandler+0x6c8>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d004      	beq.n	8004a12 <HAL_DMA_IRQHandler+0x516>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a6e      	ldr	r2, [pc, #440]	@ (8004bc8 <HAL_DMA_IRQHandler+0x6cc>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d10a      	bne.n	8004a28 <HAL_DMA_IRQHandler+0x52c>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0308 	and.w	r3, r3, #8
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	bf14      	ite	ne
 8004a20:	2301      	movne	r3, #1
 8004a22:	2300      	moveq	r3, #0
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	e009      	b.n	8004a3c <HAL_DMA_IRQHandler+0x540>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0304 	and.w	r3, r3, #4
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	bf14      	ite	ne
 8004a36:	2301      	movne	r3, #1
 8004a38:	2300      	moveq	r3, #0
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d03e      	beq.n	8004abe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a44:	f003 031f 	and.w	r3, r3, #31
 8004a48:	2210      	movs	r2, #16
 8004a4a:	409a      	lsls	r2, r3
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d018      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d108      	bne.n	8004a7e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d024      	beq.n	8004abe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	4798      	blx	r3
 8004a7c:	e01f      	b.n	8004abe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d01b      	beq.n	8004abe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	4798      	blx	r3
 8004a8e:	e016      	b.n	8004abe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d107      	bne.n	8004aae <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 0208 	bic.w	r2, r2, #8
 8004aac:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ac2:	f003 031f 	and.w	r3, r3, #31
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	409a      	lsls	r2, r3
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	4013      	ands	r3, r2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 8110 	beq.w	8004cf4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a2c      	ldr	r2, [pc, #176]	@ (8004b8c <HAL_DMA_IRQHandler+0x690>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d04a      	beq.n	8004b74 <HAL_DMA_IRQHandler+0x678>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a2b      	ldr	r2, [pc, #172]	@ (8004b90 <HAL_DMA_IRQHandler+0x694>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d045      	beq.n	8004b74 <HAL_DMA_IRQHandler+0x678>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a29      	ldr	r2, [pc, #164]	@ (8004b94 <HAL_DMA_IRQHandler+0x698>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d040      	beq.n	8004b74 <HAL_DMA_IRQHandler+0x678>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a28      	ldr	r2, [pc, #160]	@ (8004b98 <HAL_DMA_IRQHandler+0x69c>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d03b      	beq.n	8004b74 <HAL_DMA_IRQHandler+0x678>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a26      	ldr	r2, [pc, #152]	@ (8004b9c <HAL_DMA_IRQHandler+0x6a0>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d036      	beq.n	8004b74 <HAL_DMA_IRQHandler+0x678>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a25      	ldr	r2, [pc, #148]	@ (8004ba0 <HAL_DMA_IRQHandler+0x6a4>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d031      	beq.n	8004b74 <HAL_DMA_IRQHandler+0x678>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a23      	ldr	r2, [pc, #140]	@ (8004ba4 <HAL_DMA_IRQHandler+0x6a8>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d02c      	beq.n	8004b74 <HAL_DMA_IRQHandler+0x678>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a22      	ldr	r2, [pc, #136]	@ (8004ba8 <HAL_DMA_IRQHandler+0x6ac>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d027      	beq.n	8004b74 <HAL_DMA_IRQHandler+0x678>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a20      	ldr	r2, [pc, #128]	@ (8004bac <HAL_DMA_IRQHandler+0x6b0>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d022      	beq.n	8004b74 <HAL_DMA_IRQHandler+0x678>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a1f      	ldr	r2, [pc, #124]	@ (8004bb0 <HAL_DMA_IRQHandler+0x6b4>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d01d      	beq.n	8004b74 <HAL_DMA_IRQHandler+0x678>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a1d      	ldr	r2, [pc, #116]	@ (8004bb4 <HAL_DMA_IRQHandler+0x6b8>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d018      	beq.n	8004b74 <HAL_DMA_IRQHandler+0x678>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a1c      	ldr	r2, [pc, #112]	@ (8004bb8 <HAL_DMA_IRQHandler+0x6bc>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d013      	beq.n	8004b74 <HAL_DMA_IRQHandler+0x678>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a1a      	ldr	r2, [pc, #104]	@ (8004bbc <HAL_DMA_IRQHandler+0x6c0>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d00e      	beq.n	8004b74 <HAL_DMA_IRQHandler+0x678>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a19      	ldr	r2, [pc, #100]	@ (8004bc0 <HAL_DMA_IRQHandler+0x6c4>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d009      	beq.n	8004b74 <HAL_DMA_IRQHandler+0x678>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a17      	ldr	r2, [pc, #92]	@ (8004bc4 <HAL_DMA_IRQHandler+0x6c8>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d004      	beq.n	8004b74 <HAL_DMA_IRQHandler+0x678>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a16      	ldr	r2, [pc, #88]	@ (8004bc8 <HAL_DMA_IRQHandler+0x6cc>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d12b      	bne.n	8004bcc <HAL_DMA_IRQHandler+0x6d0>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0310 	and.w	r3, r3, #16
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	bf14      	ite	ne
 8004b82:	2301      	movne	r3, #1
 8004b84:	2300      	moveq	r3, #0
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	e02a      	b.n	8004be0 <HAL_DMA_IRQHandler+0x6e4>
 8004b8a:	bf00      	nop
 8004b8c:	40020010 	.word	0x40020010
 8004b90:	40020028 	.word	0x40020028
 8004b94:	40020040 	.word	0x40020040
 8004b98:	40020058 	.word	0x40020058
 8004b9c:	40020070 	.word	0x40020070
 8004ba0:	40020088 	.word	0x40020088
 8004ba4:	400200a0 	.word	0x400200a0
 8004ba8:	400200b8 	.word	0x400200b8
 8004bac:	40020410 	.word	0x40020410
 8004bb0:	40020428 	.word	0x40020428
 8004bb4:	40020440 	.word	0x40020440
 8004bb8:	40020458 	.word	0x40020458
 8004bbc:	40020470 	.word	0x40020470
 8004bc0:	40020488 	.word	0x40020488
 8004bc4:	400204a0 	.word	0x400204a0
 8004bc8:	400204b8 	.word	0x400204b8
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	bf14      	ite	ne
 8004bda:	2301      	movne	r3, #1
 8004bdc:	2300      	moveq	r3, #0
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f000 8087 	beq.w	8004cf4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bea:	f003 031f 	and.w	r3, r3, #31
 8004bee:	2220      	movs	r2, #32
 8004bf0:	409a      	lsls	r2, r3
 8004bf2:	6a3b      	ldr	r3, [r7, #32]
 8004bf4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	d139      	bne.n	8004c76 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0216 	bic.w	r2, r2, #22
 8004c10:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	695a      	ldr	r2, [r3, #20]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c20:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d103      	bne.n	8004c32 <HAL_DMA_IRQHandler+0x736>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d007      	beq.n	8004c42 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 0208 	bic.w	r2, r2, #8
 8004c40:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c46:	f003 031f 	and.w	r3, r3, #31
 8004c4a:	223f      	movs	r2, #63	@ 0x3f
 8004c4c:	409a      	lsls	r2, r3
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f000 834a 	beq.w	8005300 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	4798      	blx	r3
          }
          return;
 8004c74:	e344      	b.n	8005300 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d018      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d108      	bne.n	8004ca4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d02c      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	4798      	blx	r3
 8004ca2:	e027      	b.n	8004cf4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d023      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	4798      	blx	r3
 8004cb4:	e01e      	b.n	8004cf4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10f      	bne.n	8004ce4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 0210 	bic.w	r2, r2, #16
 8004cd2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 8306 	beq.w	800530a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 8088 	beq.w	8004e1c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2204      	movs	r2, #4
 8004d10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a7a      	ldr	r2, [pc, #488]	@ (8004f04 <HAL_DMA_IRQHandler+0xa08>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d04a      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x8b8>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a79      	ldr	r2, [pc, #484]	@ (8004f08 <HAL_DMA_IRQHandler+0xa0c>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d045      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x8b8>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a77      	ldr	r2, [pc, #476]	@ (8004f0c <HAL_DMA_IRQHandler+0xa10>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d040      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x8b8>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a76      	ldr	r2, [pc, #472]	@ (8004f10 <HAL_DMA_IRQHandler+0xa14>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d03b      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x8b8>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a74      	ldr	r2, [pc, #464]	@ (8004f14 <HAL_DMA_IRQHandler+0xa18>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d036      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x8b8>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a73      	ldr	r2, [pc, #460]	@ (8004f18 <HAL_DMA_IRQHandler+0xa1c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d031      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x8b8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a71      	ldr	r2, [pc, #452]	@ (8004f1c <HAL_DMA_IRQHandler+0xa20>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d02c      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x8b8>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a70      	ldr	r2, [pc, #448]	@ (8004f20 <HAL_DMA_IRQHandler+0xa24>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d027      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x8b8>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a6e      	ldr	r2, [pc, #440]	@ (8004f24 <HAL_DMA_IRQHandler+0xa28>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d022      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x8b8>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a6d      	ldr	r2, [pc, #436]	@ (8004f28 <HAL_DMA_IRQHandler+0xa2c>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d01d      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x8b8>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a6b      	ldr	r2, [pc, #428]	@ (8004f2c <HAL_DMA_IRQHandler+0xa30>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d018      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x8b8>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a6a      	ldr	r2, [pc, #424]	@ (8004f30 <HAL_DMA_IRQHandler+0xa34>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d013      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x8b8>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a68      	ldr	r2, [pc, #416]	@ (8004f34 <HAL_DMA_IRQHandler+0xa38>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d00e      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x8b8>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a67      	ldr	r2, [pc, #412]	@ (8004f38 <HAL_DMA_IRQHandler+0xa3c>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d009      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x8b8>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a65      	ldr	r2, [pc, #404]	@ (8004f3c <HAL_DMA_IRQHandler+0xa40>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d004      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x8b8>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a64      	ldr	r2, [pc, #400]	@ (8004f40 <HAL_DMA_IRQHandler+0xa44>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d108      	bne.n	8004dc6 <HAL_DMA_IRQHandler+0x8ca>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0201 	bic.w	r2, r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	e007      	b.n	8004dd6 <HAL_DMA_IRQHandler+0x8da>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 0201 	bic.w	r2, r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	60fb      	str	r3, [r7, #12]
 8004ddc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d307      	bcc.n	8004df2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1f2      	bne.n	8004dd6 <HAL_DMA_IRQHandler+0x8da>
 8004df0:	e000      	b.n	8004df4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004df2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d004      	beq.n	8004e0c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2203      	movs	r2, #3
 8004e06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004e0a:	e003      	b.n	8004e14 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f000 8272 	beq.w	800530a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	4798      	blx	r3
 8004e2e:	e26c      	b.n	800530a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a43      	ldr	r2, [pc, #268]	@ (8004f44 <HAL_DMA_IRQHandler+0xa48>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d022      	beq.n	8004e80 <HAL_DMA_IRQHandler+0x984>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a42      	ldr	r2, [pc, #264]	@ (8004f48 <HAL_DMA_IRQHandler+0xa4c>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d01d      	beq.n	8004e80 <HAL_DMA_IRQHandler+0x984>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a40      	ldr	r2, [pc, #256]	@ (8004f4c <HAL_DMA_IRQHandler+0xa50>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d018      	beq.n	8004e80 <HAL_DMA_IRQHandler+0x984>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a3f      	ldr	r2, [pc, #252]	@ (8004f50 <HAL_DMA_IRQHandler+0xa54>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d013      	beq.n	8004e80 <HAL_DMA_IRQHandler+0x984>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a3d      	ldr	r2, [pc, #244]	@ (8004f54 <HAL_DMA_IRQHandler+0xa58>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d00e      	beq.n	8004e80 <HAL_DMA_IRQHandler+0x984>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a3c      	ldr	r2, [pc, #240]	@ (8004f58 <HAL_DMA_IRQHandler+0xa5c>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d009      	beq.n	8004e80 <HAL_DMA_IRQHandler+0x984>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a3a      	ldr	r2, [pc, #232]	@ (8004f5c <HAL_DMA_IRQHandler+0xa60>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d004      	beq.n	8004e80 <HAL_DMA_IRQHandler+0x984>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a39      	ldr	r2, [pc, #228]	@ (8004f60 <HAL_DMA_IRQHandler+0xa64>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d101      	bne.n	8004e84 <HAL_DMA_IRQHandler+0x988>
 8004e80:	2301      	movs	r3, #1
 8004e82:	e000      	b.n	8004e86 <HAL_DMA_IRQHandler+0x98a>
 8004e84:	2300      	movs	r3, #0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f000 823f 	beq.w	800530a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e98:	f003 031f 	and.w	r3, r3, #31
 8004e9c:	2204      	movs	r2, #4
 8004e9e:	409a      	lsls	r2, r3
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 80cd 	beq.w	8005044 <HAL_DMA_IRQHandler+0xb48>
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 80c7 	beq.w	8005044 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eba:	f003 031f 	and.w	r3, r3, #31
 8004ebe:	2204      	movs	r2, #4
 8004ec0:	409a      	lsls	r2, r3
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d049      	beq.n	8004f64 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d109      	bne.n	8004eee <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f000 8210 	beq.w	8005304 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004eec:	e20a      	b.n	8005304 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 8206 	beq.w	8005304 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f00:	e200      	b.n	8005304 <HAL_DMA_IRQHandler+0xe08>
 8004f02:	bf00      	nop
 8004f04:	40020010 	.word	0x40020010
 8004f08:	40020028 	.word	0x40020028
 8004f0c:	40020040 	.word	0x40020040
 8004f10:	40020058 	.word	0x40020058
 8004f14:	40020070 	.word	0x40020070
 8004f18:	40020088 	.word	0x40020088
 8004f1c:	400200a0 	.word	0x400200a0
 8004f20:	400200b8 	.word	0x400200b8
 8004f24:	40020410 	.word	0x40020410
 8004f28:	40020428 	.word	0x40020428
 8004f2c:	40020440 	.word	0x40020440
 8004f30:	40020458 	.word	0x40020458
 8004f34:	40020470 	.word	0x40020470
 8004f38:	40020488 	.word	0x40020488
 8004f3c:	400204a0 	.word	0x400204a0
 8004f40:	400204b8 	.word	0x400204b8
 8004f44:	58025408 	.word	0x58025408
 8004f48:	5802541c 	.word	0x5802541c
 8004f4c:	58025430 	.word	0x58025430
 8004f50:	58025444 	.word	0x58025444
 8004f54:	58025458 	.word	0x58025458
 8004f58:	5802546c 	.word	0x5802546c
 8004f5c:	58025480 	.word	0x58025480
 8004f60:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f003 0320 	and.w	r3, r3, #32
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d160      	bne.n	8005030 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a7f      	ldr	r2, [pc, #508]	@ (8005170 <HAL_DMA_IRQHandler+0xc74>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d04a      	beq.n	800500e <HAL_DMA_IRQHandler+0xb12>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a7d      	ldr	r2, [pc, #500]	@ (8005174 <HAL_DMA_IRQHandler+0xc78>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d045      	beq.n	800500e <HAL_DMA_IRQHandler+0xb12>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a7c      	ldr	r2, [pc, #496]	@ (8005178 <HAL_DMA_IRQHandler+0xc7c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d040      	beq.n	800500e <HAL_DMA_IRQHandler+0xb12>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a7a      	ldr	r2, [pc, #488]	@ (800517c <HAL_DMA_IRQHandler+0xc80>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d03b      	beq.n	800500e <HAL_DMA_IRQHandler+0xb12>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a79      	ldr	r2, [pc, #484]	@ (8005180 <HAL_DMA_IRQHandler+0xc84>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d036      	beq.n	800500e <HAL_DMA_IRQHandler+0xb12>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a77      	ldr	r2, [pc, #476]	@ (8005184 <HAL_DMA_IRQHandler+0xc88>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d031      	beq.n	800500e <HAL_DMA_IRQHandler+0xb12>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a76      	ldr	r2, [pc, #472]	@ (8005188 <HAL_DMA_IRQHandler+0xc8c>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d02c      	beq.n	800500e <HAL_DMA_IRQHandler+0xb12>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a74      	ldr	r2, [pc, #464]	@ (800518c <HAL_DMA_IRQHandler+0xc90>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d027      	beq.n	800500e <HAL_DMA_IRQHandler+0xb12>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a73      	ldr	r2, [pc, #460]	@ (8005190 <HAL_DMA_IRQHandler+0xc94>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d022      	beq.n	800500e <HAL_DMA_IRQHandler+0xb12>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a71      	ldr	r2, [pc, #452]	@ (8005194 <HAL_DMA_IRQHandler+0xc98>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d01d      	beq.n	800500e <HAL_DMA_IRQHandler+0xb12>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a70      	ldr	r2, [pc, #448]	@ (8005198 <HAL_DMA_IRQHandler+0xc9c>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d018      	beq.n	800500e <HAL_DMA_IRQHandler+0xb12>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a6e      	ldr	r2, [pc, #440]	@ (800519c <HAL_DMA_IRQHandler+0xca0>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d013      	beq.n	800500e <HAL_DMA_IRQHandler+0xb12>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a6d      	ldr	r2, [pc, #436]	@ (80051a0 <HAL_DMA_IRQHandler+0xca4>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d00e      	beq.n	800500e <HAL_DMA_IRQHandler+0xb12>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a6b      	ldr	r2, [pc, #428]	@ (80051a4 <HAL_DMA_IRQHandler+0xca8>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d009      	beq.n	800500e <HAL_DMA_IRQHandler+0xb12>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a6a      	ldr	r2, [pc, #424]	@ (80051a8 <HAL_DMA_IRQHandler+0xcac>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d004      	beq.n	800500e <HAL_DMA_IRQHandler+0xb12>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a68      	ldr	r2, [pc, #416]	@ (80051ac <HAL_DMA_IRQHandler+0xcb0>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d108      	bne.n	8005020 <HAL_DMA_IRQHandler+0xb24>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 0208 	bic.w	r2, r2, #8
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	e007      	b.n	8005030 <HAL_DMA_IRQHandler+0xb34>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0204 	bic.w	r2, r2, #4
 800502e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 8165 	beq.w	8005304 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005042:	e15f      	b.n	8005304 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005048:	f003 031f 	and.w	r3, r3, #31
 800504c:	2202      	movs	r2, #2
 800504e:	409a      	lsls	r2, r3
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	4013      	ands	r3, r2
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 80c5 	beq.w	80051e4 <HAL_DMA_IRQHandler+0xce8>
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b00      	cmp	r3, #0
 8005062:	f000 80bf 	beq.w	80051e4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800506a:	f003 031f 	and.w	r3, r3, #31
 800506e:	2202      	movs	r2, #2
 8005070:	409a      	lsls	r2, r3
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d018      	beq.n	80050b2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d109      	bne.n	800509e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800508e:	2b00      	cmp	r3, #0
 8005090:	f000 813a 	beq.w	8005308 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800509c:	e134      	b.n	8005308 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 8130 	beq.w	8005308 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050b0:	e12a      	b.n	8005308 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f003 0320 	and.w	r3, r3, #32
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f040 8089 	bne.w	80051d0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a2b      	ldr	r2, [pc, #172]	@ (8005170 <HAL_DMA_IRQHandler+0xc74>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d04a      	beq.n	800515e <HAL_DMA_IRQHandler+0xc62>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a29      	ldr	r2, [pc, #164]	@ (8005174 <HAL_DMA_IRQHandler+0xc78>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d045      	beq.n	800515e <HAL_DMA_IRQHandler+0xc62>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a28      	ldr	r2, [pc, #160]	@ (8005178 <HAL_DMA_IRQHandler+0xc7c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d040      	beq.n	800515e <HAL_DMA_IRQHandler+0xc62>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a26      	ldr	r2, [pc, #152]	@ (800517c <HAL_DMA_IRQHandler+0xc80>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d03b      	beq.n	800515e <HAL_DMA_IRQHandler+0xc62>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a25      	ldr	r2, [pc, #148]	@ (8005180 <HAL_DMA_IRQHandler+0xc84>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d036      	beq.n	800515e <HAL_DMA_IRQHandler+0xc62>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a23      	ldr	r2, [pc, #140]	@ (8005184 <HAL_DMA_IRQHandler+0xc88>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d031      	beq.n	800515e <HAL_DMA_IRQHandler+0xc62>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a22      	ldr	r2, [pc, #136]	@ (8005188 <HAL_DMA_IRQHandler+0xc8c>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d02c      	beq.n	800515e <HAL_DMA_IRQHandler+0xc62>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a20      	ldr	r2, [pc, #128]	@ (800518c <HAL_DMA_IRQHandler+0xc90>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d027      	beq.n	800515e <HAL_DMA_IRQHandler+0xc62>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a1f      	ldr	r2, [pc, #124]	@ (8005190 <HAL_DMA_IRQHandler+0xc94>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d022      	beq.n	800515e <HAL_DMA_IRQHandler+0xc62>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a1d      	ldr	r2, [pc, #116]	@ (8005194 <HAL_DMA_IRQHandler+0xc98>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d01d      	beq.n	800515e <HAL_DMA_IRQHandler+0xc62>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a1c      	ldr	r2, [pc, #112]	@ (8005198 <HAL_DMA_IRQHandler+0xc9c>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d018      	beq.n	800515e <HAL_DMA_IRQHandler+0xc62>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a1a      	ldr	r2, [pc, #104]	@ (800519c <HAL_DMA_IRQHandler+0xca0>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d013      	beq.n	800515e <HAL_DMA_IRQHandler+0xc62>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a19      	ldr	r2, [pc, #100]	@ (80051a0 <HAL_DMA_IRQHandler+0xca4>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d00e      	beq.n	800515e <HAL_DMA_IRQHandler+0xc62>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a17      	ldr	r2, [pc, #92]	@ (80051a4 <HAL_DMA_IRQHandler+0xca8>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d009      	beq.n	800515e <HAL_DMA_IRQHandler+0xc62>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a16      	ldr	r2, [pc, #88]	@ (80051a8 <HAL_DMA_IRQHandler+0xcac>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d004      	beq.n	800515e <HAL_DMA_IRQHandler+0xc62>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a14      	ldr	r2, [pc, #80]	@ (80051ac <HAL_DMA_IRQHandler+0xcb0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d128      	bne.n	80051b0 <HAL_DMA_IRQHandler+0xcb4>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 0214 	bic.w	r2, r2, #20
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	e027      	b.n	80051c0 <HAL_DMA_IRQHandler+0xcc4>
 8005170:	40020010 	.word	0x40020010
 8005174:	40020028 	.word	0x40020028
 8005178:	40020040 	.word	0x40020040
 800517c:	40020058 	.word	0x40020058
 8005180:	40020070 	.word	0x40020070
 8005184:	40020088 	.word	0x40020088
 8005188:	400200a0 	.word	0x400200a0
 800518c:	400200b8 	.word	0x400200b8
 8005190:	40020410 	.word	0x40020410
 8005194:	40020428 	.word	0x40020428
 8005198:	40020440 	.word	0x40020440
 800519c:	40020458 	.word	0x40020458
 80051a0:	40020470 	.word	0x40020470
 80051a4:	40020488 	.word	0x40020488
 80051a8:	400204a0 	.word	0x400204a0
 80051ac:	400204b8 	.word	0x400204b8
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 020a 	bic.w	r2, r2, #10
 80051be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f000 8097 	beq.w	8005308 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051e2:	e091      	b.n	8005308 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051e8:	f003 031f 	and.w	r3, r3, #31
 80051ec:	2208      	movs	r2, #8
 80051ee:	409a      	lsls	r2, r3
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	4013      	ands	r3, r2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 8088 	beq.w	800530a <HAL_DMA_IRQHandler+0xe0e>
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	f003 0308 	and.w	r3, r3, #8
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 8082 	beq.w	800530a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a41      	ldr	r2, [pc, #260]	@ (8005310 <HAL_DMA_IRQHandler+0xe14>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d04a      	beq.n	80052a6 <HAL_DMA_IRQHandler+0xdaa>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a3f      	ldr	r2, [pc, #252]	@ (8005314 <HAL_DMA_IRQHandler+0xe18>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d045      	beq.n	80052a6 <HAL_DMA_IRQHandler+0xdaa>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a3e      	ldr	r2, [pc, #248]	@ (8005318 <HAL_DMA_IRQHandler+0xe1c>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d040      	beq.n	80052a6 <HAL_DMA_IRQHandler+0xdaa>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a3c      	ldr	r2, [pc, #240]	@ (800531c <HAL_DMA_IRQHandler+0xe20>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d03b      	beq.n	80052a6 <HAL_DMA_IRQHandler+0xdaa>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a3b      	ldr	r2, [pc, #236]	@ (8005320 <HAL_DMA_IRQHandler+0xe24>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d036      	beq.n	80052a6 <HAL_DMA_IRQHandler+0xdaa>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a39      	ldr	r2, [pc, #228]	@ (8005324 <HAL_DMA_IRQHandler+0xe28>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d031      	beq.n	80052a6 <HAL_DMA_IRQHandler+0xdaa>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a38      	ldr	r2, [pc, #224]	@ (8005328 <HAL_DMA_IRQHandler+0xe2c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d02c      	beq.n	80052a6 <HAL_DMA_IRQHandler+0xdaa>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a36      	ldr	r2, [pc, #216]	@ (800532c <HAL_DMA_IRQHandler+0xe30>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d027      	beq.n	80052a6 <HAL_DMA_IRQHandler+0xdaa>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a35      	ldr	r2, [pc, #212]	@ (8005330 <HAL_DMA_IRQHandler+0xe34>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d022      	beq.n	80052a6 <HAL_DMA_IRQHandler+0xdaa>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a33      	ldr	r2, [pc, #204]	@ (8005334 <HAL_DMA_IRQHandler+0xe38>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d01d      	beq.n	80052a6 <HAL_DMA_IRQHandler+0xdaa>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a32      	ldr	r2, [pc, #200]	@ (8005338 <HAL_DMA_IRQHandler+0xe3c>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d018      	beq.n	80052a6 <HAL_DMA_IRQHandler+0xdaa>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a30      	ldr	r2, [pc, #192]	@ (800533c <HAL_DMA_IRQHandler+0xe40>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d013      	beq.n	80052a6 <HAL_DMA_IRQHandler+0xdaa>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a2f      	ldr	r2, [pc, #188]	@ (8005340 <HAL_DMA_IRQHandler+0xe44>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d00e      	beq.n	80052a6 <HAL_DMA_IRQHandler+0xdaa>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a2d      	ldr	r2, [pc, #180]	@ (8005344 <HAL_DMA_IRQHandler+0xe48>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d009      	beq.n	80052a6 <HAL_DMA_IRQHandler+0xdaa>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a2c      	ldr	r2, [pc, #176]	@ (8005348 <HAL_DMA_IRQHandler+0xe4c>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d004      	beq.n	80052a6 <HAL_DMA_IRQHandler+0xdaa>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a2a      	ldr	r2, [pc, #168]	@ (800534c <HAL_DMA_IRQHandler+0xe50>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d108      	bne.n	80052b8 <HAL_DMA_IRQHandler+0xdbc>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f022 021c 	bic.w	r2, r2, #28
 80052b4:	601a      	str	r2, [r3, #0]
 80052b6:	e007      	b.n	80052c8 <HAL_DMA_IRQHandler+0xdcc>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 020e 	bic.w	r2, r2, #14
 80052c6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052cc:	f003 031f 	and.w	r3, r3, #31
 80052d0:	2201      	movs	r2, #1
 80052d2:	409a      	lsls	r2, r3
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d009      	beq.n	800530a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	4798      	blx	r3
 80052fe:	e004      	b.n	800530a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005300:	bf00      	nop
 8005302:	e002      	b.n	800530a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005304:	bf00      	nop
 8005306:	e000      	b.n	800530a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005308:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800530a:	3728      	adds	r7, #40	@ 0x28
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	40020010 	.word	0x40020010
 8005314:	40020028 	.word	0x40020028
 8005318:	40020040 	.word	0x40020040
 800531c:	40020058 	.word	0x40020058
 8005320:	40020070 	.word	0x40020070
 8005324:	40020088 	.word	0x40020088
 8005328:	400200a0 	.word	0x400200a0
 800532c:	400200b8 	.word	0x400200b8
 8005330:	40020410 	.word	0x40020410
 8005334:	40020428 	.word	0x40020428
 8005338:	40020440 	.word	0x40020440
 800533c:	40020458 	.word	0x40020458
 8005340:	40020470 	.word	0x40020470
 8005344:	40020488 	.word	0x40020488
 8005348:	400204a0 	.word	0x400204a0
 800534c:	400204b8 	.word	0x400204b8

08005350 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800535e:	b2db      	uxtb	r3, r3
}
 8005360:	4618      	mov	r0, r3
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a42      	ldr	r2, [pc, #264]	@ (8005484 <DMA_CalcBaseAndBitshift+0x118>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d04a      	beq.n	8005414 <DMA_CalcBaseAndBitshift+0xa8>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a41      	ldr	r2, [pc, #260]	@ (8005488 <DMA_CalcBaseAndBitshift+0x11c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d045      	beq.n	8005414 <DMA_CalcBaseAndBitshift+0xa8>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a3f      	ldr	r2, [pc, #252]	@ (800548c <DMA_CalcBaseAndBitshift+0x120>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d040      	beq.n	8005414 <DMA_CalcBaseAndBitshift+0xa8>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a3e      	ldr	r2, [pc, #248]	@ (8005490 <DMA_CalcBaseAndBitshift+0x124>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d03b      	beq.n	8005414 <DMA_CalcBaseAndBitshift+0xa8>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a3c      	ldr	r2, [pc, #240]	@ (8005494 <DMA_CalcBaseAndBitshift+0x128>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d036      	beq.n	8005414 <DMA_CalcBaseAndBitshift+0xa8>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a3b      	ldr	r2, [pc, #236]	@ (8005498 <DMA_CalcBaseAndBitshift+0x12c>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d031      	beq.n	8005414 <DMA_CalcBaseAndBitshift+0xa8>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a39      	ldr	r2, [pc, #228]	@ (800549c <DMA_CalcBaseAndBitshift+0x130>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d02c      	beq.n	8005414 <DMA_CalcBaseAndBitshift+0xa8>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a38      	ldr	r2, [pc, #224]	@ (80054a0 <DMA_CalcBaseAndBitshift+0x134>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d027      	beq.n	8005414 <DMA_CalcBaseAndBitshift+0xa8>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a36      	ldr	r2, [pc, #216]	@ (80054a4 <DMA_CalcBaseAndBitshift+0x138>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d022      	beq.n	8005414 <DMA_CalcBaseAndBitshift+0xa8>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a35      	ldr	r2, [pc, #212]	@ (80054a8 <DMA_CalcBaseAndBitshift+0x13c>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d01d      	beq.n	8005414 <DMA_CalcBaseAndBitshift+0xa8>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a33      	ldr	r2, [pc, #204]	@ (80054ac <DMA_CalcBaseAndBitshift+0x140>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d018      	beq.n	8005414 <DMA_CalcBaseAndBitshift+0xa8>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a32      	ldr	r2, [pc, #200]	@ (80054b0 <DMA_CalcBaseAndBitshift+0x144>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d013      	beq.n	8005414 <DMA_CalcBaseAndBitshift+0xa8>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a30      	ldr	r2, [pc, #192]	@ (80054b4 <DMA_CalcBaseAndBitshift+0x148>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d00e      	beq.n	8005414 <DMA_CalcBaseAndBitshift+0xa8>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a2f      	ldr	r2, [pc, #188]	@ (80054b8 <DMA_CalcBaseAndBitshift+0x14c>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d009      	beq.n	8005414 <DMA_CalcBaseAndBitshift+0xa8>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a2d      	ldr	r2, [pc, #180]	@ (80054bc <DMA_CalcBaseAndBitshift+0x150>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d004      	beq.n	8005414 <DMA_CalcBaseAndBitshift+0xa8>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a2c      	ldr	r2, [pc, #176]	@ (80054c0 <DMA_CalcBaseAndBitshift+0x154>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d101      	bne.n	8005418 <DMA_CalcBaseAndBitshift+0xac>
 8005414:	2301      	movs	r3, #1
 8005416:	e000      	b.n	800541a <DMA_CalcBaseAndBitshift+0xae>
 8005418:	2300      	movs	r3, #0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d024      	beq.n	8005468 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	b2db      	uxtb	r3, r3
 8005424:	3b10      	subs	r3, #16
 8005426:	4a27      	ldr	r2, [pc, #156]	@ (80054c4 <DMA_CalcBaseAndBitshift+0x158>)
 8005428:	fba2 2303 	umull	r2, r3, r2, r3
 800542c:	091b      	lsrs	r3, r3, #4
 800542e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f003 0307 	and.w	r3, r3, #7
 8005436:	4a24      	ldr	r2, [pc, #144]	@ (80054c8 <DMA_CalcBaseAndBitshift+0x15c>)
 8005438:	5cd3      	ldrb	r3, [r2, r3]
 800543a:	461a      	mov	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2b03      	cmp	r3, #3
 8005444:	d908      	bls.n	8005458 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	461a      	mov	r2, r3
 800544c:	4b1f      	ldr	r3, [pc, #124]	@ (80054cc <DMA_CalcBaseAndBitshift+0x160>)
 800544e:	4013      	ands	r3, r2
 8005450:	1d1a      	adds	r2, r3, #4
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	659a      	str	r2, [r3, #88]	@ 0x58
 8005456:	e00d      	b.n	8005474 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	461a      	mov	r2, r3
 800545e:	4b1b      	ldr	r3, [pc, #108]	@ (80054cc <DMA_CalcBaseAndBitshift+0x160>)
 8005460:	4013      	ands	r3, r2
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	6593      	str	r3, [r2, #88]	@ 0x58
 8005466:	e005      	b.n	8005474 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005478:	4618      	mov	r0, r3
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	40020010 	.word	0x40020010
 8005488:	40020028 	.word	0x40020028
 800548c:	40020040 	.word	0x40020040
 8005490:	40020058 	.word	0x40020058
 8005494:	40020070 	.word	0x40020070
 8005498:	40020088 	.word	0x40020088
 800549c:	400200a0 	.word	0x400200a0
 80054a0:	400200b8 	.word	0x400200b8
 80054a4:	40020410 	.word	0x40020410
 80054a8:	40020428 	.word	0x40020428
 80054ac:	40020440 	.word	0x40020440
 80054b0:	40020458 	.word	0x40020458
 80054b4:	40020470 	.word	0x40020470
 80054b8:	40020488 	.word	0x40020488
 80054bc:	400204a0 	.word	0x400204a0
 80054c0:	400204b8 	.word	0x400204b8
 80054c4:	aaaaaaab 	.word	0xaaaaaaab
 80054c8:	08012030 	.word	0x08012030
 80054cc:	fffffc00 	.word	0xfffffc00

080054d0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054d8:	2300      	movs	r3, #0
 80054da:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d120      	bne.n	8005526 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e8:	2b03      	cmp	r3, #3
 80054ea:	d858      	bhi.n	800559e <DMA_CheckFifoParam+0xce>
 80054ec:	a201      	add	r2, pc, #4	@ (adr r2, 80054f4 <DMA_CheckFifoParam+0x24>)
 80054ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f2:	bf00      	nop
 80054f4:	08005505 	.word	0x08005505
 80054f8:	08005517 	.word	0x08005517
 80054fc:	08005505 	.word	0x08005505
 8005500:	0800559f 	.word	0x0800559f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005508:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d048      	beq.n	80055a2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005514:	e045      	b.n	80055a2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800551a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800551e:	d142      	bne.n	80055a6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005524:	e03f      	b.n	80055a6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800552e:	d123      	bne.n	8005578 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005534:	2b03      	cmp	r3, #3
 8005536:	d838      	bhi.n	80055aa <DMA_CheckFifoParam+0xda>
 8005538:	a201      	add	r2, pc, #4	@ (adr r2, 8005540 <DMA_CheckFifoParam+0x70>)
 800553a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553e:	bf00      	nop
 8005540:	08005551 	.word	0x08005551
 8005544:	08005557 	.word	0x08005557
 8005548:	08005551 	.word	0x08005551
 800554c:	08005569 	.word	0x08005569
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	73fb      	strb	r3, [r7, #15]
        break;
 8005554:	e030      	b.n	80055b8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800555a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d025      	beq.n	80055ae <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005566:	e022      	b.n	80055ae <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005570:	d11f      	bne.n	80055b2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005576:	e01c      	b.n	80055b2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800557c:	2b02      	cmp	r3, #2
 800557e:	d902      	bls.n	8005586 <DMA_CheckFifoParam+0xb6>
 8005580:	2b03      	cmp	r3, #3
 8005582:	d003      	beq.n	800558c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005584:	e018      	b.n	80055b8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	73fb      	strb	r3, [r7, #15]
        break;
 800558a:	e015      	b.n	80055b8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005590:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00e      	beq.n	80055b6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	73fb      	strb	r3, [r7, #15]
    break;
 800559c:	e00b      	b.n	80055b6 <DMA_CheckFifoParam+0xe6>
        break;
 800559e:	bf00      	nop
 80055a0:	e00a      	b.n	80055b8 <DMA_CheckFifoParam+0xe8>
        break;
 80055a2:	bf00      	nop
 80055a4:	e008      	b.n	80055b8 <DMA_CheckFifoParam+0xe8>
        break;
 80055a6:	bf00      	nop
 80055a8:	e006      	b.n	80055b8 <DMA_CheckFifoParam+0xe8>
        break;
 80055aa:	bf00      	nop
 80055ac:	e004      	b.n	80055b8 <DMA_CheckFifoParam+0xe8>
        break;
 80055ae:	bf00      	nop
 80055b0:	e002      	b.n	80055b8 <DMA_CheckFifoParam+0xe8>
        break;
 80055b2:	bf00      	nop
 80055b4:	e000      	b.n	80055b8 <DMA_CheckFifoParam+0xe8>
    break;
 80055b6:	bf00      	nop
    }
  }

  return status;
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3714      	adds	r7, #20
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop

080055c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a38      	ldr	r2, [pc, #224]	@ (80056bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d022      	beq.n	8005626 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a36      	ldr	r2, [pc, #216]	@ (80056c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d01d      	beq.n	8005626 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a35      	ldr	r2, [pc, #212]	@ (80056c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d018      	beq.n	8005626 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a33      	ldr	r2, [pc, #204]	@ (80056c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d013      	beq.n	8005626 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a32      	ldr	r2, [pc, #200]	@ (80056cc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d00e      	beq.n	8005626 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a30      	ldr	r2, [pc, #192]	@ (80056d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d009      	beq.n	8005626 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a2f      	ldr	r2, [pc, #188]	@ (80056d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d004      	beq.n	8005626 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a2d      	ldr	r2, [pc, #180]	@ (80056d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d101      	bne.n	800562a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005626:	2301      	movs	r3, #1
 8005628:	e000      	b.n	800562c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800562a:	2300      	movs	r3, #0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d01a      	beq.n	8005666 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	b2db      	uxtb	r3, r3
 8005636:	3b08      	subs	r3, #8
 8005638:	4a28      	ldr	r2, [pc, #160]	@ (80056dc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800563a:	fba2 2303 	umull	r2, r3, r2, r3
 800563e:	091b      	lsrs	r3, r3, #4
 8005640:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	4b26      	ldr	r3, [pc, #152]	@ (80056e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005646:	4413      	add	r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	461a      	mov	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a24      	ldr	r2, [pc, #144]	@ (80056e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005654:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f003 031f 	and.w	r3, r3, #31
 800565c:	2201      	movs	r2, #1
 800565e:	409a      	lsls	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005664:	e024      	b.n	80056b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	b2db      	uxtb	r3, r3
 800566c:	3b10      	subs	r3, #16
 800566e:	4a1e      	ldr	r2, [pc, #120]	@ (80056e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005670:	fba2 2303 	umull	r2, r3, r2, r3
 8005674:	091b      	lsrs	r3, r3, #4
 8005676:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	4a1c      	ldr	r2, [pc, #112]	@ (80056ec <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d806      	bhi.n	800568e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	4a1b      	ldr	r2, [pc, #108]	@ (80056f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d902      	bls.n	800568e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	3308      	adds	r3, #8
 800568c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	4b18      	ldr	r3, [pc, #96]	@ (80056f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005692:	4413      	add	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	461a      	mov	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a16      	ldr	r2, [pc, #88]	@ (80056f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80056a0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f003 031f 	and.w	r3, r3, #31
 80056a8:	2201      	movs	r2, #1
 80056aa:	409a      	lsls	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80056b0:	bf00      	nop
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	58025408 	.word	0x58025408
 80056c0:	5802541c 	.word	0x5802541c
 80056c4:	58025430 	.word	0x58025430
 80056c8:	58025444 	.word	0x58025444
 80056cc:	58025458 	.word	0x58025458
 80056d0:	5802546c 	.word	0x5802546c
 80056d4:	58025480 	.word	0x58025480
 80056d8:	58025494 	.word	0x58025494
 80056dc:	cccccccd 	.word	0xcccccccd
 80056e0:	16009600 	.word	0x16009600
 80056e4:	58025880 	.word	0x58025880
 80056e8:	aaaaaaab 	.word	0xaaaaaaab
 80056ec:	400204b8 	.word	0x400204b8
 80056f0:	4002040f 	.word	0x4002040f
 80056f4:	10008200 	.word	0x10008200
 80056f8:	40020880 	.word	0x40020880

080056fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	b2db      	uxtb	r3, r3
 800570a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d04a      	beq.n	80057a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2b08      	cmp	r3, #8
 8005716:	d847      	bhi.n	80057a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a25      	ldr	r2, [pc, #148]	@ (80057b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d022      	beq.n	8005768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a24      	ldr	r2, [pc, #144]	@ (80057b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d01d      	beq.n	8005768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a22      	ldr	r2, [pc, #136]	@ (80057bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d018      	beq.n	8005768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a21      	ldr	r2, [pc, #132]	@ (80057c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d013      	beq.n	8005768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a1f      	ldr	r2, [pc, #124]	@ (80057c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d00e      	beq.n	8005768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a1e      	ldr	r2, [pc, #120]	@ (80057c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d009      	beq.n	8005768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a1c      	ldr	r2, [pc, #112]	@ (80057cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d004      	beq.n	8005768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a1b      	ldr	r2, [pc, #108]	@ (80057d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d101      	bne.n	800576c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005768:	2301      	movs	r3, #1
 800576a:	e000      	b.n	800576e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800576c:	2300      	movs	r3, #0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00a      	beq.n	8005788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	4b17      	ldr	r3, [pc, #92]	@ (80057d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005776:	4413      	add	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	461a      	mov	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a15      	ldr	r2, [pc, #84]	@ (80057d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005784:	671a      	str	r2, [r3, #112]	@ 0x70
 8005786:	e009      	b.n	800579c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	4b14      	ldr	r3, [pc, #80]	@ (80057dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800578c:	4413      	add	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	461a      	mov	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a11      	ldr	r2, [pc, #68]	@ (80057e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800579a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	3b01      	subs	r3, #1
 80057a0:	2201      	movs	r2, #1
 80057a2:	409a      	lsls	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80057a8:	bf00      	nop
 80057aa:	3714      	adds	r7, #20
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	58025408 	.word	0x58025408
 80057b8:	5802541c 	.word	0x5802541c
 80057bc:	58025430 	.word	0x58025430
 80057c0:	58025444 	.word	0x58025444
 80057c4:	58025458 	.word	0x58025458
 80057c8:	5802546c 	.word	0x5802546c
 80057cc:	58025480 	.word	0x58025480
 80057d0:	58025494 	.word	0x58025494
 80057d4:	1600963f 	.word	0x1600963f
 80057d8:	58025940 	.word	0x58025940
 80057dc:	1000823f 	.word	0x1000823f
 80057e0:	40020940 	.word	0x40020940

080057e4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b098      	sub	sp, #96	@ 0x60
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80057ec:	4a84      	ldr	r2, [pc, #528]	@ (8005a00 <HAL_FDCAN_Init+0x21c>)
 80057ee:	f107 030c 	add.w	r3, r7, #12
 80057f2:	4611      	mov	r1, r2
 80057f4:	224c      	movs	r2, #76	@ 0x4c
 80057f6:	4618      	mov	r0, r3
 80057f8:	f00b fdc3 	bl	8011382 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e1c6      	b.n	8005b94 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a7e      	ldr	r2, [pc, #504]	@ (8005a04 <HAL_FDCAN_Init+0x220>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d106      	bne.n	800581e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005818:	461a      	mov	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d106      	bne.n	8005838 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7fb fd30 	bl	8001298 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	699a      	ldr	r2, [r3, #24]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 0210 	bic.w	r2, r2, #16
 8005846:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005848:	f7fc fa22 	bl	8001c90 <HAL_GetTick>
 800584c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800584e:	e014      	b.n	800587a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005850:	f7fc fa1e 	bl	8001c90 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	2b0a      	cmp	r3, #10
 800585c:	d90d      	bls.n	800587a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005864:	f043 0201 	orr.w	r2, r3, #1
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2203      	movs	r2, #3
 8005872:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e18c      	b.n	8005b94 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	f003 0308 	and.w	r3, r3, #8
 8005884:	2b08      	cmp	r3, #8
 8005886:	d0e3      	beq.n	8005850 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	699a      	ldr	r2, [r3, #24]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f042 0201 	orr.w	r2, r2, #1
 8005896:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005898:	f7fc f9fa 	bl	8001c90 <HAL_GetTick>
 800589c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800589e:	e014      	b.n	80058ca <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80058a0:	f7fc f9f6 	bl	8001c90 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b0a      	cmp	r3, #10
 80058ac:	d90d      	bls.n	80058ca <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058b4:	f043 0201 	orr.w	r2, r3, #1
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2203      	movs	r2, #3
 80058c2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e164      	b.n	8005b94 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d0e3      	beq.n	80058a0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699a      	ldr	r2, [r3, #24]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0202 	orr.w	r2, r2, #2
 80058e6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	7c1b      	ldrb	r3, [r3, #16]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d108      	bne.n	8005902 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	699a      	ldr	r2, [r3, #24]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058fe:	619a      	str	r2, [r3, #24]
 8005900:	e007      	b.n	8005912 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	699a      	ldr	r2, [r3, #24]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005910:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	7c5b      	ldrb	r3, [r3, #17]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d108      	bne.n	800592c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	699a      	ldr	r2, [r3, #24]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005928:	619a      	str	r2, [r3, #24]
 800592a:	e007      	b.n	800593c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699a      	ldr	r2, [r3, #24]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800593a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	7c9b      	ldrb	r3, [r3, #18]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d108      	bne.n	8005956 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	699a      	ldr	r2, [r3, #24]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005952:	619a      	str	r2, [r3, #24]
 8005954:	e007      	b.n	8005966 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	699a      	ldr	r2, [r3, #24]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005964:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	430a      	orrs	r2, r1
 800597a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	699a      	ldr	r2, [r3, #24]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800598a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	691a      	ldr	r2, [r3, #16]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f022 0210 	bic.w	r2, r2, #16
 800599a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d108      	bne.n	80059b6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	699a      	ldr	r2, [r3, #24]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f042 0204 	orr.w	r2, r2, #4
 80059b2:	619a      	str	r2, [r3, #24]
 80059b4:	e030      	b.n	8005a18 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d02c      	beq.n	8005a18 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d020      	beq.n	8005a08 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	699a      	ldr	r2, [r3, #24]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80059d4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	691a      	ldr	r2, [r3, #16]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f042 0210 	orr.w	r2, r2, #16
 80059e4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	2b03      	cmp	r3, #3
 80059ec:	d114      	bne.n	8005a18 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	699a      	ldr	r2, [r3, #24]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f042 0220 	orr.w	r2, r2, #32
 80059fc:	619a      	str	r2, [r3, #24]
 80059fe:	e00b      	b.n	8005a18 <HAL_FDCAN_Init+0x234>
 8005a00:	08011f84 	.word	0x08011f84
 8005a04:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	699a      	ldr	r2, [r3, #24]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f042 0220 	orr.w	r2, r2, #32
 8005a16:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	69db      	ldr	r3, [r3, #28]
 8005a24:	3b01      	subs	r3, #1
 8005a26:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a28:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005a30:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	695b      	ldr	r3, [r3, #20]
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005a40:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a42:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a4c:	d115      	bne.n	8005a7a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a52:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a5c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a62:	3b01      	subs	r3, #1
 8005a64:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005a66:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005a76:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a78:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00a      	beq.n	8005a98 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	430a      	orrs	r2, r1
 8005a94:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aa0:	4413      	add	r3, r2
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d011      	beq.n	8005aca <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005aae:	f023 0107 	bic.w	r1, r3, #7
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	3360      	adds	r3, #96	@ 0x60
 8005aba:	443b      	add	r3, r7
 8005abc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d011      	beq.n	8005af6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005ada:	f023 0107 	bic.w	r1, r3, #7
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	3360      	adds	r3, #96	@ 0x60
 8005ae6:	443b      	add	r3, r7
 8005ae8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	430a      	orrs	r2, r1
 8005af2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d012      	beq.n	8005b24 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005b06:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	3360      	adds	r3, #96	@ 0x60
 8005b12:	443b      	add	r3, r7
 8005b14:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005b18:	011a      	lsls	r2, r3, #4
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d012      	beq.n	8005b52 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005b34:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	3360      	adds	r3, #96	@ 0x60
 8005b40:	443b      	add	r3, r7
 8005b42:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005b46:	021a      	lsls	r2, r3, #8
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a11      	ldr	r2, [pc, #68]	@ (8005b9c <HAL_FDCAN_Init+0x3b8>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d107      	bne.n	8005b6c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	689a      	ldr	r2, [r3, #8]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f022 0203 	bic.w	r2, r2, #3
 8005b6a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 f80b 	bl	8005ba0 <FDCAN_CalcultateRamBlockAddresses>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8005b90:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3760      	adds	r7, #96	@ 0x60
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	4000a000 	.word	0x4000a000

08005ba0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bac:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005bb6:	4ba7      	ldr	r3, [pc, #668]	@ (8005e54 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005bb8:	4013      	ands	r3, r2
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	0091      	lsls	r1, r2, #2
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	6812      	ldr	r2, [r2, #0]
 8005bc2:	430b      	orrs	r3, r1
 8005bc4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bd0:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd8:	041a      	lsls	r2, r3, #16
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	4413      	add	r3, r2
 8005bec:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005bf6:	4b97      	ldr	r3, [pc, #604]	@ (8005e54 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	0091      	lsls	r1, r2, #2
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	6812      	ldr	r2, [r2, #0]
 8005c02:	430b      	orrs	r3, r1
 8005c04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c10:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c18:	041a      	lsls	r2, r3, #16
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005c38:	4b86      	ldr	r3, [pc, #536]	@ (8005e54 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	0091      	lsls	r1, r2, #2
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	6812      	ldr	r2, [r2, #0]
 8005c44:	430b      	orrs	r3, r1
 8005c46:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005c52:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5a:	041a      	lsls	r2, r3, #16
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	430a      	orrs	r2, r1
 8005c62:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005c6e:	fb02 f303 	mul.w	r3, r2, r3
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	4413      	add	r3, r2
 8005c76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005c80:	4b74      	ldr	r3, [pc, #464]	@ (8005e54 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c82:	4013      	ands	r3, r2
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	0091      	lsls	r1, r2, #2
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	6812      	ldr	r2, [r2, #0]
 8005c8c:	430b      	orrs	r3, r1
 8005c8e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005c9a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ca2:	041a      	lsls	r2, r3, #16
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005cb6:	fb02 f303 	mul.w	r3, r2, r3
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8005cc8:	4b62      	ldr	r3, [pc, #392]	@ (8005e54 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005cca:	4013      	ands	r3, r2
 8005ccc:	68ba      	ldr	r2, [r7, #8]
 8005cce:	0091      	lsls	r1, r2, #2
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	6812      	ldr	r2, [r2, #0]
 8005cd4:	430b      	orrs	r3, r1
 8005cd6:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005ce2:	fb02 f303 	mul.w	r3, r2, r3
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	4413      	add	r3, r2
 8005cea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8005cf4:	4b57      	ldr	r3, [pc, #348]	@ (8005e54 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	68ba      	ldr	r2, [r7, #8]
 8005cfa:	0091      	lsls	r1, r2, #2
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	6812      	ldr	r2, [r2, #0]
 8005d00:	430b      	orrs	r3, r1
 8005d02:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d0e:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d16:	041a      	lsls	r2, r3, #16
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d26:	005b      	lsls	r3, r3, #1
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005d36:	4b47      	ldr	r3, [pc, #284]	@ (8005e54 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d38:	4013      	ands	r3, r2
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	0091      	lsls	r1, r2, #2
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	6812      	ldr	r2, [r2, #0]
 8005d42:	430b      	orrs	r3, r1
 8005d44:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005d50:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d58:	041a      	lsls	r2, r3, #16
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005d6c:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d74:	061a      	lsls	r2, r3, #24
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d84:	4b34      	ldr	r3, [pc, #208]	@ (8005e58 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005d86:	4413      	add	r3, r2
 8005d88:	009a      	lsls	r2, r3, #2
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	441a      	add	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005da6:	00db      	lsls	r3, r3, #3
 8005da8:	441a      	add	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db6:	6879      	ldr	r1, [r7, #4]
 8005db8:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8005dba:	fb01 f303 	mul.w	r3, r1, r3
 8005dbe:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005dc0:	441a      	add	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dce:	6879      	ldr	r1, [r7, #4]
 8005dd0:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8005dd2:	fb01 f303 	mul.w	r3, r1, r3
 8005dd6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005dd8:	441a      	add	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005de6:	6879      	ldr	r1, [r7, #4]
 8005de8:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8005dea:	fb01 f303 	mul.w	r3, r1, r3
 8005dee:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005df0:	441a      	add	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	441a      	add	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e16:	6879      	ldr	r1, [r7, #4]
 8005e18:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005e1a:	fb01 f303 	mul.w	r3, r1, r3
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	441a      	add	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e32:	6879      	ldr	r1, [r7, #4]
 8005e34:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005e36:	fb01 f303 	mul.w	r3, r1, r3
 8005e3a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005e3c:	441a      	add	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e4a:	4a04      	ldr	r2, [pc, #16]	@ (8005e5c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d915      	bls.n	8005e7c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005e50:	e006      	b.n	8005e60 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005e52:	bf00      	nop
 8005e54:	ffff0003 	.word	0xffff0003
 8005e58:	10002b00 	.word	0x10002b00
 8005e5c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e66:	f043 0220 	orr.w	r2, r3, #32
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2203      	movs	r2, #3
 8005e74:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e010      	b.n	8005e9e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	e005      	b.n	8005e90 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d3f3      	bcc.n	8005e84 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop

08005eac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b089      	sub	sp, #36	@ 0x24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005eba:	4b89      	ldr	r3, [pc, #548]	@ (80060e0 <HAL_GPIO_Init+0x234>)
 8005ebc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005ebe:	e194      	b.n	80061ea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	2101      	movs	r1, #1
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ecc:	4013      	ands	r3, r2
 8005ece:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f000 8186 	beq.w	80061e4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f003 0303 	and.w	r3, r3, #3
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d005      	beq.n	8005ef0 <HAL_GPIO_Init+0x44>
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f003 0303 	and.w	r3, r3, #3
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d130      	bne.n	8005f52 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	005b      	lsls	r3, r3, #1
 8005efa:	2203      	movs	r2, #3
 8005efc:	fa02 f303 	lsl.w	r3, r2, r3
 8005f00:	43db      	mvns	r3, r3
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	4013      	ands	r3, r2
 8005f06:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	68da      	ldr	r2, [r3, #12]
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	005b      	lsls	r3, r3, #1
 8005f10:	fa02 f303 	lsl.w	r3, r2, r3
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005f26:	2201      	movs	r2, #1
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2e:	43db      	mvns	r3, r3
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	4013      	ands	r3, r2
 8005f34:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	091b      	lsrs	r3, r3, #4
 8005f3c:	f003 0201 	and.w	r2, r3, #1
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	fa02 f303 	lsl.w	r3, r2, r3
 8005f46:	69ba      	ldr	r2, [r7, #24]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	69ba      	ldr	r2, [r7, #24]
 8005f50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f003 0303 	and.w	r3, r3, #3
 8005f5a:	2b03      	cmp	r3, #3
 8005f5c:	d017      	beq.n	8005f8e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	005b      	lsls	r3, r3, #1
 8005f68:	2203      	movs	r2, #3
 8005f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6e:	43db      	mvns	r3, r3
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	4013      	ands	r3, r2
 8005f74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	689a      	ldr	r2, [r3, #8]
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	005b      	lsls	r3, r3, #1
 8005f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f82:	69ba      	ldr	r2, [r7, #24]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	69ba      	ldr	r2, [r7, #24]
 8005f8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f003 0303 	and.w	r3, r3, #3
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d123      	bne.n	8005fe2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	08da      	lsrs	r2, r3, #3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	3208      	adds	r2, #8
 8005fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	f003 0307 	and.w	r3, r3, #7
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	220f      	movs	r2, #15
 8005fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb6:	43db      	mvns	r3, r3
 8005fb8:	69ba      	ldr	r2, [r7, #24]
 8005fba:	4013      	ands	r3, r2
 8005fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	691a      	ldr	r2, [r3, #16]
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	f003 0307 	and.w	r3, r3, #7
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	fa02 f303 	lsl.w	r3, r2, r3
 8005fce:	69ba      	ldr	r2, [r7, #24]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	08da      	lsrs	r2, r3, #3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	3208      	adds	r2, #8
 8005fdc:	69b9      	ldr	r1, [r7, #24]
 8005fde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	005b      	lsls	r3, r3, #1
 8005fec:	2203      	movs	r2, #3
 8005fee:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff2:	43db      	mvns	r3, r3
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	f003 0203 	and.w	r2, r3, #3
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	005b      	lsls	r3, r3, #1
 8006006:	fa02 f303 	lsl.w	r3, r2, r3
 800600a:	69ba      	ldr	r2, [r7, #24]
 800600c:	4313      	orrs	r3, r2
 800600e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	69ba      	ldr	r2, [r7, #24]
 8006014:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 80e0 	beq.w	80061e4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006024:	4b2f      	ldr	r3, [pc, #188]	@ (80060e4 <HAL_GPIO_Init+0x238>)
 8006026:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800602a:	4a2e      	ldr	r2, [pc, #184]	@ (80060e4 <HAL_GPIO_Init+0x238>)
 800602c:	f043 0302 	orr.w	r3, r3, #2
 8006030:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006034:	4b2b      	ldr	r3, [pc, #172]	@ (80060e4 <HAL_GPIO_Init+0x238>)
 8006036:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	60fb      	str	r3, [r7, #12]
 8006040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006042:	4a29      	ldr	r2, [pc, #164]	@ (80060e8 <HAL_GPIO_Init+0x23c>)
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	089b      	lsrs	r3, r3, #2
 8006048:	3302      	adds	r3, #2
 800604a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800604e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	f003 0303 	and.w	r3, r3, #3
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	220f      	movs	r2, #15
 800605a:	fa02 f303 	lsl.w	r3, r2, r3
 800605e:	43db      	mvns	r3, r3
 8006060:	69ba      	ldr	r2, [r7, #24]
 8006062:	4013      	ands	r3, r2
 8006064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a20      	ldr	r2, [pc, #128]	@ (80060ec <HAL_GPIO_Init+0x240>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d052      	beq.n	8006114 <HAL_GPIO_Init+0x268>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a1f      	ldr	r2, [pc, #124]	@ (80060f0 <HAL_GPIO_Init+0x244>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d031      	beq.n	80060da <HAL_GPIO_Init+0x22e>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a1e      	ldr	r2, [pc, #120]	@ (80060f4 <HAL_GPIO_Init+0x248>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d02b      	beq.n	80060d6 <HAL_GPIO_Init+0x22a>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a1d      	ldr	r2, [pc, #116]	@ (80060f8 <HAL_GPIO_Init+0x24c>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d025      	beq.n	80060d2 <HAL_GPIO_Init+0x226>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a1c      	ldr	r2, [pc, #112]	@ (80060fc <HAL_GPIO_Init+0x250>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d01f      	beq.n	80060ce <HAL_GPIO_Init+0x222>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a1b      	ldr	r2, [pc, #108]	@ (8006100 <HAL_GPIO_Init+0x254>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d019      	beq.n	80060ca <HAL_GPIO_Init+0x21e>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a1a      	ldr	r2, [pc, #104]	@ (8006104 <HAL_GPIO_Init+0x258>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d013      	beq.n	80060c6 <HAL_GPIO_Init+0x21a>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a19      	ldr	r2, [pc, #100]	@ (8006108 <HAL_GPIO_Init+0x25c>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d00d      	beq.n	80060c2 <HAL_GPIO_Init+0x216>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a18      	ldr	r2, [pc, #96]	@ (800610c <HAL_GPIO_Init+0x260>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d007      	beq.n	80060be <HAL_GPIO_Init+0x212>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a17      	ldr	r2, [pc, #92]	@ (8006110 <HAL_GPIO_Init+0x264>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d101      	bne.n	80060ba <HAL_GPIO_Init+0x20e>
 80060b6:	2309      	movs	r3, #9
 80060b8:	e02d      	b.n	8006116 <HAL_GPIO_Init+0x26a>
 80060ba:	230a      	movs	r3, #10
 80060bc:	e02b      	b.n	8006116 <HAL_GPIO_Init+0x26a>
 80060be:	2308      	movs	r3, #8
 80060c0:	e029      	b.n	8006116 <HAL_GPIO_Init+0x26a>
 80060c2:	2307      	movs	r3, #7
 80060c4:	e027      	b.n	8006116 <HAL_GPIO_Init+0x26a>
 80060c6:	2306      	movs	r3, #6
 80060c8:	e025      	b.n	8006116 <HAL_GPIO_Init+0x26a>
 80060ca:	2305      	movs	r3, #5
 80060cc:	e023      	b.n	8006116 <HAL_GPIO_Init+0x26a>
 80060ce:	2304      	movs	r3, #4
 80060d0:	e021      	b.n	8006116 <HAL_GPIO_Init+0x26a>
 80060d2:	2303      	movs	r3, #3
 80060d4:	e01f      	b.n	8006116 <HAL_GPIO_Init+0x26a>
 80060d6:	2302      	movs	r3, #2
 80060d8:	e01d      	b.n	8006116 <HAL_GPIO_Init+0x26a>
 80060da:	2301      	movs	r3, #1
 80060dc:	e01b      	b.n	8006116 <HAL_GPIO_Init+0x26a>
 80060de:	bf00      	nop
 80060e0:	58000080 	.word	0x58000080
 80060e4:	58024400 	.word	0x58024400
 80060e8:	58000400 	.word	0x58000400
 80060ec:	58020000 	.word	0x58020000
 80060f0:	58020400 	.word	0x58020400
 80060f4:	58020800 	.word	0x58020800
 80060f8:	58020c00 	.word	0x58020c00
 80060fc:	58021000 	.word	0x58021000
 8006100:	58021400 	.word	0x58021400
 8006104:	58021800 	.word	0x58021800
 8006108:	58021c00 	.word	0x58021c00
 800610c:	58022000 	.word	0x58022000
 8006110:	58022400 	.word	0x58022400
 8006114:	2300      	movs	r3, #0
 8006116:	69fa      	ldr	r2, [r7, #28]
 8006118:	f002 0203 	and.w	r2, r2, #3
 800611c:	0092      	lsls	r2, r2, #2
 800611e:	4093      	lsls	r3, r2
 8006120:	69ba      	ldr	r2, [r7, #24]
 8006122:	4313      	orrs	r3, r2
 8006124:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006126:	4938      	ldr	r1, [pc, #224]	@ (8006208 <HAL_GPIO_Init+0x35c>)
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	089b      	lsrs	r3, r3, #2
 800612c:	3302      	adds	r3, #2
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006134:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	43db      	mvns	r3, r3
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	4013      	ands	r3, r2
 8006144:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d003      	beq.n	800615a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006152:	69ba      	ldr	r2, [r7, #24]
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	4313      	orrs	r3, r2
 8006158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800615a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006162:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	43db      	mvns	r3, r3
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	4013      	ands	r3, r2
 8006172:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d003      	beq.n	8006188 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006180:	69ba      	ldr	r2, [r7, #24]
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	4313      	orrs	r3, r2
 8006186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006188:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	43db      	mvns	r3, r3
 800619a:	69ba      	ldr	r2, [r7, #24]
 800619c:	4013      	ands	r3, r2
 800619e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d003      	beq.n	80061b4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80061ac:	69ba      	ldr	r2, [r7, #24]
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	43db      	mvns	r3, r3
 80061c4:	69ba      	ldr	r2, [r7, #24]
 80061c6:	4013      	ands	r3, r2
 80061c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d003      	beq.n	80061de <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80061d6:	69ba      	ldr	r2, [r7, #24]
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	4313      	orrs	r3, r2
 80061dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	69ba      	ldr	r2, [r7, #24]
 80061e2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	3301      	adds	r3, #1
 80061e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	fa22 f303 	lsr.w	r3, r2, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f47f ae63 	bne.w	8005ec0 <HAL_GPIO_Init+0x14>
  }
}
 80061fa:	bf00      	nop
 80061fc:	bf00      	nop
 80061fe:	3724      	adds	r7, #36	@ 0x24
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	58000400 	.word	0x58000400

0800620c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	460b      	mov	r3, r1
 8006216:	807b      	strh	r3, [r7, #2]
 8006218:	4613      	mov	r3, r2
 800621a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800621c:	787b      	ldrb	r3, [r7, #1]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d003      	beq.n	800622a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006222:	887a      	ldrh	r2, [r7, #2]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006228:	e003      	b.n	8006232 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800622a:	887b      	ldrh	r3, [r7, #2]
 800622c:	041a      	lsls	r2, r3, #16
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	619a      	str	r2, [r3, #24]
}
 8006232:	bf00      	nop
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b082      	sub	sp, #8
 8006242:	af00      	add	r7, sp, #0
 8006244:	4603      	mov	r3, r0
 8006246:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006248:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800624c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006250:	88fb      	ldrh	r3, [r7, #6]
 8006252:	4013      	ands	r3, r2
 8006254:	2b00      	cmp	r3, #0
 8006256:	d008      	beq.n	800626a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006258:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800625c:	88fb      	ldrh	r3, [r7, #6]
 800625e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006262:	88fb      	ldrh	r3, [r7, #6]
 8006264:	4618      	mov	r0, r3
 8006266:	f000 f804 	bl	8006272 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800626a:	bf00      	nop
 800626c:	3708      	adds	r7, #8
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006272:	b480      	push	{r7}
 8006274:	b083      	sub	sp, #12
 8006276:	af00      	add	r7, sp, #0
 8006278:	4603      	mov	r3, r0
 800627a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e08b      	b.n	80063b2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d106      	bne.n	80062b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7fb f86c 	bl	800138c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2224      	movs	r2, #36	@ 0x24
 80062b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 0201 	bic.w	r2, r2, #1
 80062ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80062d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	689a      	ldr	r2, [r3, #8]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80062e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d107      	bne.n	8006302 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	689a      	ldr	r2, [r3, #8]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80062fe:	609a      	str	r2, [r3, #8]
 8006300:	e006      	b.n	8006310 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	689a      	ldr	r2, [r3, #8]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800630e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	2b02      	cmp	r3, #2
 8006316:	d108      	bne.n	800632a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	685a      	ldr	r2, [r3, #4]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006326:	605a      	str	r2, [r3, #4]
 8006328:	e007      	b.n	800633a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006338:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	6859      	ldr	r1, [r3, #4]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	4b1d      	ldr	r3, [pc, #116]	@ (80063bc <HAL_I2C_Init+0x134>)
 8006346:	430b      	orrs	r3, r1
 8006348:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68da      	ldr	r2, [r3, #12]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006358:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691a      	ldr	r2, [r3, #16]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	69d9      	ldr	r1, [r3, #28]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a1a      	ldr	r2, [r3, #32]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	430a      	orrs	r2, r1
 8006382:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f042 0201 	orr.w	r2, r2, #1
 8006392:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2220      	movs	r2, #32
 800639e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	02008000 	.word	0x02008000

080063c0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b088      	sub	sp, #32
 80063c4:	af02      	add	r7, sp, #8
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	4608      	mov	r0, r1
 80063ca:	4611      	mov	r1, r2
 80063cc:	461a      	mov	r2, r3
 80063ce:	4603      	mov	r3, r0
 80063d0:	817b      	strh	r3, [r7, #10]
 80063d2:	460b      	mov	r3, r1
 80063d4:	813b      	strh	r3, [r7, #8]
 80063d6:	4613      	mov	r3, r2
 80063d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b20      	cmp	r3, #32
 80063e4:	f040 80f9 	bne.w	80065da <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80063e8:	6a3b      	ldr	r3, [r7, #32]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <HAL_I2C_Mem_Write+0x34>
 80063ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d105      	bne.n	8006400 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063fa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e0ed      	b.n	80065dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006406:	2b01      	cmp	r3, #1
 8006408:	d101      	bne.n	800640e <HAL_I2C_Mem_Write+0x4e>
 800640a:	2302      	movs	r3, #2
 800640c:	e0e6      	b.n	80065dc <HAL_I2C_Mem_Write+0x21c>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006416:	f7fb fc3b 	bl	8001c90 <HAL_GetTick>
 800641a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	2319      	movs	r3, #25
 8006422:	2201      	movs	r2, #1
 8006424:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f001 f92e 	bl	800768a <I2C_WaitOnFlagUntilTimeout>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d001      	beq.n	8006438 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e0d1      	b.n	80065dc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2221      	movs	r2, #33	@ 0x21
 800643c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2240      	movs	r2, #64	@ 0x40
 8006444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6a3a      	ldr	r2, [r7, #32]
 8006452:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006458:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006460:	88f8      	ldrh	r0, [r7, #6]
 8006462:	893a      	ldrh	r2, [r7, #8]
 8006464:	8979      	ldrh	r1, [r7, #10]
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	9301      	str	r3, [sp, #4]
 800646a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800646c:	9300      	str	r3, [sp, #0]
 800646e:	4603      	mov	r3, r0
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f000 fb81 	bl	8006b78 <I2C_RequestMemoryWrite>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d005      	beq.n	8006488 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e0a9      	b.n	80065dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800648c:	b29b      	uxth	r3, r3
 800648e:	2bff      	cmp	r3, #255	@ 0xff
 8006490:	d90e      	bls.n	80064b0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	22ff      	movs	r2, #255	@ 0xff
 8006496:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800649c:	b2da      	uxtb	r2, r3
 800649e:	8979      	ldrh	r1, [r7, #10]
 80064a0:	2300      	movs	r3, #0
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f001 fab1 	bl	8007a10 <I2C_TransferConfig>
 80064ae:	e00f      	b.n	80064d0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064be:	b2da      	uxtb	r2, r3
 80064c0:	8979      	ldrh	r1, [r7, #10]
 80064c2:	2300      	movs	r3, #0
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f001 faa0 	bl	8007a10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f001 f931 	bl	800773c <I2C_WaitOnTXISFlagUntilTimeout>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d001      	beq.n	80064e4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e07b      	b.n	80065dc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e8:	781a      	ldrb	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f4:	1c5a      	adds	r2, r3, #1
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064fe:	b29b      	uxth	r3, r3
 8006500:	3b01      	subs	r3, #1
 8006502:	b29a      	uxth	r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800650c:	3b01      	subs	r3, #1
 800650e:	b29a      	uxth	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006518:	b29b      	uxth	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d034      	beq.n	8006588 <HAL_I2C_Mem_Write+0x1c8>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006522:	2b00      	cmp	r3, #0
 8006524:	d130      	bne.n	8006588 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	9300      	str	r3, [sp, #0]
 800652a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800652c:	2200      	movs	r2, #0
 800652e:	2180      	movs	r1, #128	@ 0x80
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f001 f8aa 	bl	800768a <I2C_WaitOnFlagUntilTimeout>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d001      	beq.n	8006540 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e04d      	b.n	80065dc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006544:	b29b      	uxth	r3, r3
 8006546:	2bff      	cmp	r3, #255	@ 0xff
 8006548:	d90e      	bls.n	8006568 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	22ff      	movs	r2, #255	@ 0xff
 800654e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006554:	b2da      	uxtb	r2, r3
 8006556:	8979      	ldrh	r1, [r7, #10]
 8006558:	2300      	movs	r3, #0
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f001 fa55 	bl	8007a10 <I2C_TransferConfig>
 8006566:	e00f      	b.n	8006588 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800656c:	b29a      	uxth	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006576:	b2da      	uxtb	r2, r3
 8006578:	8979      	ldrh	r1, [r7, #10]
 800657a:	2300      	movs	r3, #0
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f001 fa44 	bl	8007a10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800658c:	b29b      	uxth	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d19e      	bne.n	80064d0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f001 f917 	bl	80077ca <I2C_WaitOnSTOPFlagUntilTimeout>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d001      	beq.n	80065a6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e01a      	b.n	80065dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2220      	movs	r2, #32
 80065ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6859      	ldr	r1, [r3, #4]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	4b0a      	ldr	r3, [pc, #40]	@ (80065e4 <HAL_I2C_Mem_Write+0x224>)
 80065ba:	400b      	ands	r3, r1
 80065bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2220      	movs	r2, #32
 80065c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	e000      	b.n	80065dc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80065da:	2302      	movs	r3, #2
  }
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3718      	adds	r7, #24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	fe00e800 	.word	0xfe00e800

080065e8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b088      	sub	sp, #32
 80065ec:	af02      	add	r7, sp, #8
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	4608      	mov	r0, r1
 80065f2:	4611      	mov	r1, r2
 80065f4:	461a      	mov	r2, r3
 80065f6:	4603      	mov	r3, r0
 80065f8:	817b      	strh	r3, [r7, #10]
 80065fa:	460b      	mov	r3, r1
 80065fc:	813b      	strh	r3, [r7, #8]
 80065fe:	4613      	mov	r3, r2
 8006600:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b20      	cmp	r3, #32
 800660c:	f040 80fd 	bne.w	800680a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006610:	6a3b      	ldr	r3, [r7, #32]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d002      	beq.n	800661c <HAL_I2C_Mem_Read+0x34>
 8006616:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006618:	2b00      	cmp	r3, #0
 800661a:	d105      	bne.n	8006628 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006622:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e0f1      	b.n	800680c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800662e:	2b01      	cmp	r3, #1
 8006630:	d101      	bne.n	8006636 <HAL_I2C_Mem_Read+0x4e>
 8006632:	2302      	movs	r3, #2
 8006634:	e0ea      	b.n	800680c <HAL_I2C_Mem_Read+0x224>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800663e:	f7fb fb27 	bl	8001c90 <HAL_GetTick>
 8006642:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	2319      	movs	r3, #25
 800664a:	2201      	movs	r2, #1
 800664c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f001 f81a 	bl	800768a <I2C_WaitOnFlagUntilTimeout>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d001      	beq.n	8006660 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e0d5      	b.n	800680c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2222      	movs	r2, #34	@ 0x22
 8006664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2240      	movs	r2, #64	@ 0x40
 800666c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6a3a      	ldr	r2, [r7, #32]
 800667a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006680:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006688:	88f8      	ldrh	r0, [r7, #6]
 800668a:	893a      	ldrh	r2, [r7, #8]
 800668c:	8979      	ldrh	r1, [r7, #10]
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	9301      	str	r3, [sp, #4]
 8006692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	4603      	mov	r3, r0
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f000 fac1 	bl	8006c20 <I2C_RequestMemoryRead>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d005      	beq.n	80066b0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e0ad      	b.n	800680c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	2bff      	cmp	r3, #255	@ 0xff
 80066b8:	d90e      	bls.n	80066d8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	22ff      	movs	r2, #255	@ 0xff
 80066be:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	8979      	ldrh	r1, [r7, #10]
 80066c8:	4b52      	ldr	r3, [pc, #328]	@ (8006814 <HAL_I2C_Mem_Read+0x22c>)
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	f001 f99d 	bl	8007a10 <I2C_TransferConfig>
 80066d6:	e00f      	b.n	80066f8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066dc:	b29a      	uxth	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	8979      	ldrh	r1, [r7, #10]
 80066ea:	4b4a      	ldr	r3, [pc, #296]	@ (8006814 <HAL_I2C_Mem_Read+0x22c>)
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f001 f98c 	bl	8007a10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066fe:	2200      	movs	r2, #0
 8006700:	2104      	movs	r1, #4
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f000 ffc1 	bl	800768a <I2C_WaitOnFlagUntilTimeout>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d001      	beq.n	8006712 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e07c      	b.n	800680c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800671c:	b2d2      	uxtb	r2, r2
 800671e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006724:	1c5a      	adds	r2, r3, #1
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800672e:	3b01      	subs	r3, #1
 8006730:	b29a      	uxth	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800673a:	b29b      	uxth	r3, r3
 800673c:	3b01      	subs	r3, #1
 800673e:	b29a      	uxth	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006748:	b29b      	uxth	r3, r3
 800674a:	2b00      	cmp	r3, #0
 800674c:	d034      	beq.n	80067b8 <HAL_I2C_Mem_Read+0x1d0>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006752:	2b00      	cmp	r3, #0
 8006754:	d130      	bne.n	80067b8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800675c:	2200      	movs	r2, #0
 800675e:	2180      	movs	r1, #128	@ 0x80
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f000 ff92 	bl	800768a <I2C_WaitOnFlagUntilTimeout>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d001      	beq.n	8006770 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e04d      	b.n	800680c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006774:	b29b      	uxth	r3, r3
 8006776:	2bff      	cmp	r3, #255	@ 0xff
 8006778:	d90e      	bls.n	8006798 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	22ff      	movs	r2, #255	@ 0xff
 800677e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006784:	b2da      	uxtb	r2, r3
 8006786:	8979      	ldrh	r1, [r7, #10]
 8006788:	2300      	movs	r3, #0
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f001 f93d 	bl	8007a10 <I2C_TransferConfig>
 8006796:	e00f      	b.n	80067b8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800679c:	b29a      	uxth	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	8979      	ldrh	r1, [r7, #10]
 80067aa:	2300      	movs	r3, #0
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f001 f92c 	bl	8007a10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067bc:	b29b      	uxth	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d19a      	bne.n	80066f8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 ffff 	bl	80077ca <I2C_WaitOnSTOPFlagUntilTimeout>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e01a      	b.n	800680c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2220      	movs	r2, #32
 80067dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6859      	ldr	r1, [r3, #4]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006818 <HAL_I2C_Mem_Read+0x230>)
 80067ea:	400b      	ands	r3, r1
 80067ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2220      	movs	r2, #32
 80067f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006806:	2300      	movs	r3, #0
 8006808:	e000      	b.n	800680c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800680a:	2302      	movs	r3, #2
  }
}
 800680c:	4618      	mov	r0, r3
 800680e:	3718      	adds	r7, #24
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	80002400 	.word	0x80002400
 8006818:	fe00e800 	.word	0xfe00e800

0800681c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006838:	2b00      	cmp	r3, #0
 800683a:	d005      	beq.n	8006848 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	68f9      	ldr	r1, [r7, #12]
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	4798      	blx	r3
  }
}
 8006848:	bf00      	nop
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b086      	sub	sp, #24
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00f      	beq.n	8006892 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00a      	beq.n	8006892 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006880:	f043 0201 	orr.w	r2, r3, #1
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006890:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00f      	beq.n	80068bc <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00a      	beq.n	80068bc <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068aa:	f043 0208 	orr.w	r2, r3, #8
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80068ba:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00f      	beq.n	80068e6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00a      	beq.n	80068e6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068d4:	f043 0202 	orr.w	r2, r3, #2
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068e4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f003 030b 	and.w	r3, r3, #11
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d003      	beq.n	80068fe <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80068f6:	68f9      	ldr	r1, [r7, #12]
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fd6d 	bl	80073d8 <I2C_ITError>
  }
}
 80068fe:	bf00      	nop
 8006900:	3718      	adds	r7, #24
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006906:	b480      	push	{r7}
 8006908:	b083      	sub	sp, #12
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800690e:	bf00      	nop
 8006910:	370c      	adds	r7, #12
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr

0800691a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800691a:	b480      	push	{r7}
 800691c:	b083      	sub	sp, #12
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006922:	bf00      	nop
 8006924:	370c      	adds	r7, #12
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800692e:	b480      	push	{r7}
 8006930:	b083      	sub	sp, #12
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
 8006936:	460b      	mov	r3, r1
 8006938:	70fb      	strb	r3, [r7, #3]
 800693a:	4613      	mov	r3, r2
 800693c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800693e:	bf00      	nop
 8006940:	370c      	adds	r7, #12
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800694a:	b480      	push	{r7}
 800694c:	b083      	sub	sp, #12
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006952:	bf00      	nop
 8006954:	370c      	adds	r7, #12
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr

0800695e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800695e:	b480      	push	{r7}
 8006960:	b083      	sub	sp, #12
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006966:	bf00      	nop
 8006968:	370c      	adds	r7, #12
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006972:	b480      	push	{r7}
 8006974:	b083      	sub	sp, #12
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800697a:	bf00      	nop
 800697c:	370c      	adds	r7, #12
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr

08006986 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b086      	sub	sp, #24
 800698a:	af00      	add	r7, sp, #0
 800698c:	60f8      	str	r0, [r7, #12]
 800698e:	60b9      	str	r1, [r7, #8]
 8006990:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006996:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d101      	bne.n	80069aa <I2C_Slave_ISR_IT+0x24>
 80069a6:	2302      	movs	r3, #2
 80069a8:	e0e2      	b.n	8006b70 <I2C_Slave_ISR_IT+0x1ea>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	f003 0320 	and.w	r3, r3, #32
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d009      	beq.n	80069d0 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d004      	beq.n	80069d0 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80069c6:	6939      	ldr	r1, [r7, #16]
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f000 fa5d 	bl	8006e88 <I2C_ITSlaveCplt>
 80069ce:	e0ca      	b.n	8006b66 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	f003 0310 	and.w	r3, r3, #16
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d04b      	beq.n	8006a72 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d046      	beq.n	8006a72 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d128      	bne.n	8006a40 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b28      	cmp	r3, #40	@ 0x28
 80069f8:	d108      	bne.n	8006a0c <I2C_Slave_ISR_IT+0x86>
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a00:	d104      	bne.n	8006a0c <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006a02:	6939      	ldr	r1, [r7, #16]
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f000 fc93 	bl	8007330 <I2C_ITListenCplt>
 8006a0a:	e031      	b.n	8006a70 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	2b29      	cmp	r3, #41	@ 0x29
 8006a16:	d10e      	bne.n	8006a36 <I2C_Slave_ISR_IT+0xb0>
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006a1e:	d00a      	beq.n	8006a36 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2210      	movs	r2, #16
 8006a26:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f000 fdec 	bl	8007606 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f000 f9ce 	bl	8006dd0 <I2C_ITSlaveSeqCplt>
 8006a34:	e01c      	b.n	8006a70 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2210      	movs	r2, #16
 8006a3c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006a3e:	e08f      	b.n	8006b60 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2210      	movs	r2, #16
 8006a46:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a4c:	f043 0204 	orr.w	r2, r3, #4
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d003      	beq.n	8006a62 <I2C_Slave_ISR_IT+0xdc>
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a60:	d17e      	bne.n	8006b60 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a66:	4619      	mov	r1, r3
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 fcb5 	bl	80073d8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006a6e:	e077      	b.n	8006b60 <I2C_Slave_ISR_IT+0x1da>
 8006a70:	e076      	b.n	8006b60 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	f003 0304 	and.w	r3, r3, #4
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d02f      	beq.n	8006adc <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d02a      	beq.n	8006adc <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d018      	beq.n	8006ac2 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a9a:	b2d2      	uxtb	r2, r2
 8006a9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa2:	1c5a      	adds	r2, r3, #1
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006aac:	3b01      	subs	r3, #1
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	3b01      	subs	r3, #1
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d14b      	bne.n	8006b64 <I2C_Slave_ISR_IT+0x1de>
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006ad2:	d047      	beq.n	8006b64 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f000 f97b 	bl	8006dd0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006ada:	e043      	b.n	8006b64 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	f003 0308 	and.w	r3, r3, #8
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d009      	beq.n	8006afa <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d004      	beq.n	8006afa <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006af0:	6939      	ldr	r1, [r7, #16]
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f000 f8e8 	bl	8006cc8 <I2C_ITAddrCplt>
 8006af8:	e035      	b.n	8006b66 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	f003 0302 	and.w	r3, r3, #2
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d030      	beq.n	8006b66 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d02b      	beq.n	8006b66 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d018      	beq.n	8006b4a <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b1c:	781a      	ldrb	r2, [r3, #0]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b28:	1c5a      	adds	r2, r3, #1
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	3b01      	subs	r3, #1
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b40:	3b01      	subs	r3, #1
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006b48:	e00d      	b.n	8006b66 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b50:	d002      	beq.n	8006b58 <I2C_Slave_ISR_IT+0x1d2>
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d106      	bne.n	8006b66 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 f939 	bl	8006dd0 <I2C_ITSlaveSeqCplt>
 8006b5e:	e002      	b.n	8006b66 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8006b60:	bf00      	nop
 8006b62:	e000      	b.n	8006b66 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8006b64:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3718      	adds	r7, #24
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af02      	add	r7, sp, #8
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	4608      	mov	r0, r1
 8006b82:	4611      	mov	r1, r2
 8006b84:	461a      	mov	r2, r3
 8006b86:	4603      	mov	r3, r0
 8006b88:	817b      	strh	r3, [r7, #10]
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	813b      	strh	r3, [r7, #8]
 8006b8e:	4613      	mov	r3, r2
 8006b90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006b92:	88fb      	ldrh	r3, [r7, #6]
 8006b94:	b2da      	uxtb	r2, r3
 8006b96:	8979      	ldrh	r1, [r7, #10]
 8006b98:	4b20      	ldr	r3, [pc, #128]	@ (8006c1c <I2C_RequestMemoryWrite+0xa4>)
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 ff35 	bl	8007a10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ba6:	69fa      	ldr	r2, [r7, #28]
 8006ba8:	69b9      	ldr	r1, [r7, #24]
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f000 fdc6 	bl	800773c <I2C_WaitOnTXISFlagUntilTimeout>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e02c      	b.n	8006c14 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006bba:	88fb      	ldrh	r3, [r7, #6]
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d105      	bne.n	8006bcc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006bc0:	893b      	ldrh	r3, [r7, #8]
 8006bc2:	b2da      	uxtb	r2, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	629a      	str	r2, [r3, #40]	@ 0x28
 8006bca:	e015      	b.n	8006bf8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006bcc:	893b      	ldrh	r3, [r7, #8]
 8006bce:	0a1b      	lsrs	r3, r3, #8
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	b2da      	uxtb	r2, r3
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bda:	69fa      	ldr	r2, [r7, #28]
 8006bdc:	69b9      	ldr	r1, [r7, #24]
 8006bde:	68f8      	ldr	r0, [r7, #12]
 8006be0:	f000 fdac 	bl	800773c <I2C_WaitOnTXISFlagUntilTimeout>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d001      	beq.n	8006bee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e012      	b.n	8006c14 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006bee:	893b      	ldrh	r3, [r7, #8]
 8006bf0:	b2da      	uxtb	r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	9300      	str	r3, [sp, #0]
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	2180      	movs	r1, #128	@ 0x80
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f000 fd41 	bl	800768a <I2C_WaitOnFlagUntilTimeout>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d001      	beq.n	8006c12 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e000      	b.n	8006c14 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	80002000 	.word	0x80002000

08006c20 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af02      	add	r7, sp, #8
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	4608      	mov	r0, r1
 8006c2a:	4611      	mov	r1, r2
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	4603      	mov	r3, r0
 8006c30:	817b      	strh	r3, [r7, #10]
 8006c32:	460b      	mov	r3, r1
 8006c34:	813b      	strh	r3, [r7, #8]
 8006c36:	4613      	mov	r3, r2
 8006c38:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006c3a:	88fb      	ldrh	r3, [r7, #6]
 8006c3c:	b2da      	uxtb	r2, r3
 8006c3e:	8979      	ldrh	r1, [r7, #10]
 8006c40:	4b20      	ldr	r3, [pc, #128]	@ (8006cc4 <I2C_RequestMemoryRead+0xa4>)
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	2300      	movs	r3, #0
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f000 fee2 	bl	8007a10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c4c:	69fa      	ldr	r2, [r7, #28]
 8006c4e:	69b9      	ldr	r1, [r7, #24]
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f000 fd73 	bl	800773c <I2C_WaitOnTXISFlagUntilTimeout>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d001      	beq.n	8006c60 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e02c      	b.n	8006cba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c60:	88fb      	ldrh	r3, [r7, #6]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d105      	bne.n	8006c72 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c66:	893b      	ldrh	r3, [r7, #8]
 8006c68:	b2da      	uxtb	r2, r3
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006c70:	e015      	b.n	8006c9e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006c72:	893b      	ldrh	r3, [r7, #8]
 8006c74:	0a1b      	lsrs	r3, r3, #8
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	b2da      	uxtb	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c80:	69fa      	ldr	r2, [r7, #28]
 8006c82:	69b9      	ldr	r1, [r7, #24]
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f000 fd59 	bl	800773c <I2C_WaitOnTXISFlagUntilTimeout>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d001      	beq.n	8006c94 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e012      	b.n	8006cba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c94:	893b      	ldrh	r3, [r7, #8]
 8006c96:	b2da      	uxtb	r2, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	2140      	movs	r1, #64	@ 0x40
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f000 fcee 	bl	800768a <I2C_WaitOnFlagUntilTimeout>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d001      	beq.n	8006cb8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e000      	b.n	8006cba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	80002000 	.word	0x80002000

08006cc8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006cde:	2b28      	cmp	r3, #40	@ 0x28
 8006ce0:	d16a      	bne.n	8006db8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	0c1b      	lsrs	r3, r3, #16
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	f003 0301 	and.w	r3, r3, #1
 8006cf0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	0c1b      	lsrs	r3, r3, #16
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006d00:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d0e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006d1c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d138      	bne.n	8006d98 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006d26:	897b      	ldrh	r3, [r7, #10]
 8006d28:	09db      	lsrs	r3, r3, #7
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	89bb      	ldrh	r3, [r7, #12]
 8006d2e:	4053      	eors	r3, r2
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	f003 0306 	and.w	r3, r3, #6
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d11c      	bne.n	8006d74 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006d3a:	897b      	ldrh	r3, [r7, #10]
 8006d3c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d42:	1c5a      	adds	r2, r3, #1
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d4c:	2b02      	cmp	r3, #2
 8006d4e:	d13b      	bne.n	8006dc8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2208      	movs	r2, #8
 8006d5c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006d66:	89ba      	ldrh	r2, [r7, #12]
 8006d68:	7bfb      	ldrb	r3, [r7, #15]
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f7ff fdde 	bl	800692e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006d72:	e029      	b.n	8006dc8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006d74:	893b      	ldrh	r3, [r7, #8]
 8006d76:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006d78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fe79 	bl	8007a74 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006d8a:	89ba      	ldrh	r2, [r7, #12]
 8006d8c:	7bfb      	ldrb	r3, [r7, #15]
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7ff fdcc 	bl	800692e <HAL_I2C_AddrCallback>
}
 8006d96:	e017      	b.n	8006dc8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006d98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 fe69 	bl	8007a74 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006daa:	89ba      	ldrh	r2, [r7, #12]
 8006dac:	7bfb      	ldrb	r3, [r7, #15]
 8006dae:	4619      	mov	r1, r3
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f7ff fdbc 	bl	800692e <HAL_I2C_AddrCallback>
}
 8006db6:	e007      	b.n	8006dc8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2208      	movs	r2, #8
 8006dbe:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8006dc8:	bf00      	nop
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d008      	beq.n	8006e04 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006e00:	601a      	str	r2, [r3, #0]
 8006e02:	e00c      	b.n	8006e1e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d007      	beq.n	8006e1e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006e1c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b29      	cmp	r3, #41	@ 0x29
 8006e28:	d112      	bne.n	8006e50 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2228      	movs	r2, #40	@ 0x28
 8006e2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2221      	movs	r2, #33	@ 0x21
 8006e36:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006e38:	2101      	movs	r1, #1
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 fe1a 	bl	8007a74 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f7ff fd5c 	bl	8006906 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006e4e:	e017      	b.n	8006e80 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e5a:	d111      	bne.n	8006e80 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2228      	movs	r2, #40	@ 0x28
 8006e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2222      	movs	r2, #34	@ 0x22
 8006e68:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006e6a:	2102      	movs	r1, #2
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 fe01 	bl	8007a74 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f7ff fd4d 	bl	800691a <HAL_I2C_SlaveRxCpltCallback>
}
 8006e80:	bf00      	nop
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b086      	sub	sp, #24
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006eaa:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2220      	movs	r2, #32
 8006eb2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006eb4:	7afb      	ldrb	r3, [r7, #11]
 8006eb6:	2b21      	cmp	r3, #33	@ 0x21
 8006eb8:	d002      	beq.n	8006ec0 <I2C_ITSlaveCplt+0x38>
 8006eba:	7afb      	ldrb	r3, [r7, #11]
 8006ebc:	2b29      	cmp	r3, #41	@ 0x29
 8006ebe:	d108      	bne.n	8006ed2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006ec0:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fdd5 	bl	8007a74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2221      	movs	r2, #33	@ 0x21
 8006ece:	631a      	str	r2, [r3, #48]	@ 0x30
 8006ed0:	e019      	b.n	8006f06 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006ed2:	7afb      	ldrb	r3, [r7, #11]
 8006ed4:	2b22      	cmp	r3, #34	@ 0x22
 8006ed6:	d002      	beq.n	8006ede <I2C_ITSlaveCplt+0x56>
 8006ed8:	7afb      	ldrb	r3, [r7, #11]
 8006eda:	2b2a      	cmp	r3, #42	@ 0x2a
 8006edc:	d108      	bne.n	8006ef0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006ede:	f248 0102 	movw	r1, #32770	@ 0x8002
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fdc6 	bl	8007a74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2222      	movs	r2, #34	@ 0x22
 8006eec:	631a      	str	r2, [r3, #48]	@ 0x30
 8006eee:	e00a      	b.n	8006f06 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006ef0:	7afb      	ldrb	r3, [r7, #11]
 8006ef2:	2b28      	cmp	r3, #40	@ 0x28
 8006ef4:	d107      	bne.n	8006f06 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006ef6:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 fdba 	bl	8007a74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	685a      	ldr	r2, [r3, #4]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006f14:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	6859      	ldr	r1, [r3, #4]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	4b7f      	ldr	r3, [pc, #508]	@ (8007120 <I2C_ITSlaveCplt+0x298>)
 8006f22:	400b      	ands	r3, r1
 8006f24:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 fb6d 	bl	8007606 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d07a      	beq.n	800702c <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006f44:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f000 8111 	beq.w	8007172 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a73      	ldr	r2, [pc, #460]	@ (8007124 <I2C_ITSlaveCplt+0x29c>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d059      	beq.n	8007010 <I2C_ITSlaveCplt+0x188>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a71      	ldr	r2, [pc, #452]	@ (8007128 <I2C_ITSlaveCplt+0x2a0>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d053      	beq.n	8007010 <I2C_ITSlaveCplt+0x188>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a6f      	ldr	r2, [pc, #444]	@ (800712c <I2C_ITSlaveCplt+0x2a4>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d04d      	beq.n	8007010 <I2C_ITSlaveCplt+0x188>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a6d      	ldr	r2, [pc, #436]	@ (8007130 <I2C_ITSlaveCplt+0x2a8>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d047      	beq.n	8007010 <I2C_ITSlaveCplt+0x188>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a6b      	ldr	r2, [pc, #428]	@ (8007134 <I2C_ITSlaveCplt+0x2ac>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d041      	beq.n	8007010 <I2C_ITSlaveCplt+0x188>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a69      	ldr	r2, [pc, #420]	@ (8007138 <I2C_ITSlaveCplt+0x2b0>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d03b      	beq.n	8007010 <I2C_ITSlaveCplt+0x188>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a67      	ldr	r2, [pc, #412]	@ (800713c <I2C_ITSlaveCplt+0x2b4>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d035      	beq.n	8007010 <I2C_ITSlaveCplt+0x188>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a65      	ldr	r2, [pc, #404]	@ (8007140 <I2C_ITSlaveCplt+0x2b8>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d02f      	beq.n	8007010 <I2C_ITSlaveCplt+0x188>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a63      	ldr	r2, [pc, #396]	@ (8007144 <I2C_ITSlaveCplt+0x2bc>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d029      	beq.n	8007010 <I2C_ITSlaveCplt+0x188>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a61      	ldr	r2, [pc, #388]	@ (8007148 <I2C_ITSlaveCplt+0x2c0>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d023      	beq.n	8007010 <I2C_ITSlaveCplt+0x188>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a5f      	ldr	r2, [pc, #380]	@ (800714c <I2C_ITSlaveCplt+0x2c4>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d01d      	beq.n	8007010 <I2C_ITSlaveCplt+0x188>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a5d      	ldr	r2, [pc, #372]	@ (8007150 <I2C_ITSlaveCplt+0x2c8>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d017      	beq.n	8007010 <I2C_ITSlaveCplt+0x188>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a5b      	ldr	r2, [pc, #364]	@ (8007154 <I2C_ITSlaveCplt+0x2cc>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d011      	beq.n	8007010 <I2C_ITSlaveCplt+0x188>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a59      	ldr	r2, [pc, #356]	@ (8007158 <I2C_ITSlaveCplt+0x2d0>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d00b      	beq.n	8007010 <I2C_ITSlaveCplt+0x188>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a57      	ldr	r2, [pc, #348]	@ (800715c <I2C_ITSlaveCplt+0x2d4>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d005      	beq.n	8007010 <I2C_ITSlaveCplt+0x188>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a55      	ldr	r2, [pc, #340]	@ (8007160 <I2C_ITSlaveCplt+0x2d8>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d105      	bne.n	800701c <I2C_ITSlaveCplt+0x194>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	b29b      	uxth	r3, r3
 800701a:	e004      	b.n	8007026 <I2C_ITSlaveCplt+0x19e>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	b29b      	uxth	r3, r3
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800702a:	e0a2      	b.n	8007172 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007032:	2b00      	cmp	r3, #0
 8007034:	f000 809d 	beq.w	8007172 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007046:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800704c:	2b00      	cmp	r3, #0
 800704e:	f000 8090 	beq.w	8007172 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a32      	ldr	r2, [pc, #200]	@ (8007124 <I2C_ITSlaveCplt+0x29c>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d059      	beq.n	8007112 <I2C_ITSlaveCplt+0x28a>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a30      	ldr	r2, [pc, #192]	@ (8007128 <I2C_ITSlaveCplt+0x2a0>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d053      	beq.n	8007112 <I2C_ITSlaveCplt+0x28a>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a2e      	ldr	r2, [pc, #184]	@ (800712c <I2C_ITSlaveCplt+0x2a4>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d04d      	beq.n	8007112 <I2C_ITSlaveCplt+0x28a>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a2c      	ldr	r2, [pc, #176]	@ (8007130 <I2C_ITSlaveCplt+0x2a8>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d047      	beq.n	8007112 <I2C_ITSlaveCplt+0x28a>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a2a      	ldr	r2, [pc, #168]	@ (8007134 <I2C_ITSlaveCplt+0x2ac>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d041      	beq.n	8007112 <I2C_ITSlaveCplt+0x28a>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a28      	ldr	r2, [pc, #160]	@ (8007138 <I2C_ITSlaveCplt+0x2b0>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d03b      	beq.n	8007112 <I2C_ITSlaveCplt+0x28a>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a26      	ldr	r2, [pc, #152]	@ (800713c <I2C_ITSlaveCplt+0x2b4>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d035      	beq.n	8007112 <I2C_ITSlaveCplt+0x28a>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a24      	ldr	r2, [pc, #144]	@ (8007140 <I2C_ITSlaveCplt+0x2b8>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d02f      	beq.n	8007112 <I2C_ITSlaveCplt+0x28a>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a22      	ldr	r2, [pc, #136]	@ (8007144 <I2C_ITSlaveCplt+0x2bc>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d029      	beq.n	8007112 <I2C_ITSlaveCplt+0x28a>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a20      	ldr	r2, [pc, #128]	@ (8007148 <I2C_ITSlaveCplt+0x2c0>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d023      	beq.n	8007112 <I2C_ITSlaveCplt+0x28a>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a1e      	ldr	r2, [pc, #120]	@ (800714c <I2C_ITSlaveCplt+0x2c4>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d01d      	beq.n	8007112 <I2C_ITSlaveCplt+0x28a>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a1c      	ldr	r2, [pc, #112]	@ (8007150 <I2C_ITSlaveCplt+0x2c8>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d017      	beq.n	8007112 <I2C_ITSlaveCplt+0x28a>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a1a      	ldr	r2, [pc, #104]	@ (8007154 <I2C_ITSlaveCplt+0x2cc>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d011      	beq.n	8007112 <I2C_ITSlaveCplt+0x28a>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a18      	ldr	r2, [pc, #96]	@ (8007158 <I2C_ITSlaveCplt+0x2d0>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d00b      	beq.n	8007112 <I2C_ITSlaveCplt+0x28a>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a16      	ldr	r2, [pc, #88]	@ (800715c <I2C_ITSlaveCplt+0x2d4>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d005      	beq.n	8007112 <I2C_ITSlaveCplt+0x28a>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a14      	ldr	r2, [pc, #80]	@ (8007160 <I2C_ITSlaveCplt+0x2d8>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d128      	bne.n	8007164 <I2C_ITSlaveCplt+0x2dc>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	b29b      	uxth	r3, r3
 800711c:	e027      	b.n	800716e <I2C_ITSlaveCplt+0x2e6>
 800711e:	bf00      	nop
 8007120:	fe00e800 	.word	0xfe00e800
 8007124:	40020010 	.word	0x40020010
 8007128:	40020028 	.word	0x40020028
 800712c:	40020040 	.word	0x40020040
 8007130:	40020058 	.word	0x40020058
 8007134:	40020070 	.word	0x40020070
 8007138:	40020088 	.word	0x40020088
 800713c:	400200a0 	.word	0x400200a0
 8007140:	400200b8 	.word	0x400200b8
 8007144:	40020410 	.word	0x40020410
 8007148:	40020428 	.word	0x40020428
 800714c:	40020440 	.word	0x40020440
 8007150:	40020458 	.word	0x40020458
 8007154:	40020470 	.word	0x40020470
 8007158:	40020488 	.word	0x40020488
 800715c:	400204a0 	.word	0x400204a0
 8007160:	400204b8 	.word	0x400204b8
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	b29b      	uxth	r3, r3
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f003 0304 	and.w	r3, r3, #4
 8007178:	2b00      	cmp	r3, #0
 800717a:	d020      	beq.n	80071be <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	f023 0304 	bic.w	r3, r3, #4
 8007182:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800718e:	b2d2      	uxtb	r2, r2
 8007190:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007196:	1c5a      	adds	r2, r3, #1
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00c      	beq.n	80071be <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071a8:	3b01      	subs	r3, #1
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	3b01      	subs	r3, #1
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d005      	beq.n	80071d4 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071cc:	f043 0204 	orr.w	r2, r3, #4
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	f003 0310 	and.w	r3, r3, #16
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d049      	beq.n	8007272 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d044      	beq.n	8007272 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d128      	bne.n	8007244 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	2b28      	cmp	r3, #40	@ 0x28
 80071fc:	d108      	bne.n	8007210 <I2C_ITSlaveCplt+0x388>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007204:	d104      	bne.n	8007210 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007206:	6979      	ldr	r1, [r7, #20]
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 f891 	bl	8007330 <I2C_ITListenCplt>
 800720e:	e030      	b.n	8007272 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007216:	b2db      	uxtb	r3, r3
 8007218:	2b29      	cmp	r3, #41	@ 0x29
 800721a:	d10e      	bne.n	800723a <I2C_ITSlaveCplt+0x3b2>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007222:	d00a      	beq.n	800723a <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2210      	movs	r2, #16
 800722a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 f9ea 	bl	8007606 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f7ff fdcc 	bl	8006dd0 <I2C_ITSlaveSeqCplt>
 8007238:	e01b      	b.n	8007272 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2210      	movs	r2, #16
 8007240:	61da      	str	r2, [r3, #28]
 8007242:	e016      	b.n	8007272 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2210      	movs	r2, #16
 800724a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007250:	f043 0204 	orr.w	r2, r3, #4
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d003      	beq.n	8007266 <I2C_ITSlaveCplt+0x3de>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007264:	d105      	bne.n	8007272 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800726a:	4619      	mov	r1, r3
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f8b3 	bl	80073d8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007284:	2b00      	cmp	r3, #0
 8007286:	d010      	beq.n	80072aa <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800728c:	4619      	mov	r1, r3
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f8a2 	bl	80073d8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800729a:	b2db      	uxtb	r3, r3
 800729c:	2b28      	cmp	r3, #40	@ 0x28
 800729e:	d141      	bne.n	8007324 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80072a0:	6979      	ldr	r1, [r7, #20]
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f844 	bl	8007330 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80072a8:	e03c      	b.n	8007324 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80072b2:	d014      	beq.n	80072de <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f7ff fd8b 	bl	8006dd0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a1b      	ldr	r2, [pc, #108]	@ (800732c <I2C_ITSlaveCplt+0x4a4>)
 80072be:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2220      	movs	r2, #32
 80072c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7ff fb37 	bl	800694a <HAL_I2C_ListenCpltCallback>
}
 80072dc:	e022      	b.n	8007324 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b22      	cmp	r3, #34	@ 0x22
 80072e8:	d10e      	bne.n	8007308 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2220      	movs	r2, #32
 80072ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f7ff fb0a 	bl	800691a <HAL_I2C_SlaveRxCpltCallback>
}
 8007306:	e00d      	b.n	8007324 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2220      	movs	r2, #32
 800730c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f7ff faf1 	bl	8006906 <HAL_I2C_SlaveTxCpltCallback>
}
 8007324:	bf00      	nop
 8007326:	3718      	adds	r7, #24
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	ffff0000 	.word	0xffff0000

08007330 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a25      	ldr	r2, [pc, #148]	@ (80073d4 <I2C_ITListenCplt+0xa4>)
 800733e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2220      	movs	r2, #32
 800734a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	f003 0304 	and.w	r3, r3, #4
 8007362:	2b00      	cmp	r3, #0
 8007364:	d022      	beq.n	80073ac <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007370:	b2d2      	uxtb	r2, r2
 8007372:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007378:	1c5a      	adds	r2, r3, #1
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007382:	2b00      	cmp	r3, #0
 8007384:	d012      	beq.n	80073ac <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800738a:	3b01      	subs	r3, #1
 800738c:	b29a      	uxth	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007396:	b29b      	uxth	r3, r3
 8007398:	3b01      	subs	r3, #1
 800739a:	b29a      	uxth	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073a4:	f043 0204 	orr.w	r2, r3, #4
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80073ac:	f248 0103 	movw	r1, #32771	@ 0x8003
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 fb5f 	bl	8007a74 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2210      	movs	r2, #16
 80073bc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f7ff fabf 	bl	800694a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80073cc:	bf00      	nop
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	ffff0000 	.word	0xffff0000

080073d8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073e8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a6d      	ldr	r2, [pc, #436]	@ (80075ac <I2C_ITError+0x1d4>)
 80073f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	431a      	orrs	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800740a:	7bfb      	ldrb	r3, [r7, #15]
 800740c:	2b28      	cmp	r3, #40	@ 0x28
 800740e:	d005      	beq.n	800741c <I2C_ITError+0x44>
 8007410:	7bfb      	ldrb	r3, [r7, #15]
 8007412:	2b29      	cmp	r3, #41	@ 0x29
 8007414:	d002      	beq.n	800741c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007416:	7bfb      	ldrb	r3, [r7, #15]
 8007418:	2b2a      	cmp	r3, #42	@ 0x2a
 800741a:	d10b      	bne.n	8007434 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800741c:	2103      	movs	r1, #3
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fb28 	bl	8007a74 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2228      	movs	r2, #40	@ 0x28
 8007428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a60      	ldr	r2, [pc, #384]	@ (80075b0 <I2C_ITError+0x1d8>)
 8007430:	635a      	str	r2, [r3, #52]	@ 0x34
 8007432:	e030      	b.n	8007496 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007434:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fb1b 	bl	8007a74 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f8e1 	bl	8007606 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800744a:	b2db      	uxtb	r3, r3
 800744c:	2b60      	cmp	r3, #96	@ 0x60
 800744e:	d01f      	beq.n	8007490 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2220      	movs	r2, #32
 8007454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	f003 0320 	and.w	r3, r3, #32
 8007462:	2b20      	cmp	r3, #32
 8007464:	d114      	bne.n	8007490 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	699b      	ldr	r3, [r3, #24]
 800746c:	f003 0310 	and.w	r3, r3, #16
 8007470:	2b10      	cmp	r3, #16
 8007472:	d109      	bne.n	8007488 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2210      	movs	r2, #16
 800747a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007480:	f043 0204 	orr.w	r2, r3, #4
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2220      	movs	r2, #32
 800748e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800749a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d039      	beq.n	8007518 <I2C_ITError+0x140>
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	2b11      	cmp	r3, #17
 80074a8:	d002      	beq.n	80074b0 <I2C_ITError+0xd8>
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	2b21      	cmp	r3, #33	@ 0x21
 80074ae:	d133      	bne.n	8007518 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80074ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80074be:	d107      	bne.n	80074d0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80074ce:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7fd ff3b 	bl	8005350 <HAL_DMA_GetState>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d017      	beq.n	8007510 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074e4:	4a33      	ldr	r2, [pc, #204]	@ (80075b4 <I2C_ITError+0x1dc>)
 80074e6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7fc fdbb 	bl	8004070 <HAL_DMA_Abort_IT>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d04d      	beq.n	800759c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800750a:	4610      	mov	r0, r2
 800750c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800750e:	e045      	b.n	800759c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 f851 	bl	80075b8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007516:	e041      	b.n	800759c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800751c:	2b00      	cmp	r3, #0
 800751e:	d039      	beq.n	8007594 <I2C_ITError+0x1bc>
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	2b12      	cmp	r3, #18
 8007524:	d002      	beq.n	800752c <I2C_ITError+0x154>
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	2b22      	cmp	r3, #34	@ 0x22
 800752a:	d133      	bne.n	8007594 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007536:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800753a:	d107      	bne.n	800754c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800754a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007550:	4618      	mov	r0, r3
 8007552:	f7fd fefd 	bl	8005350 <HAL_DMA_GetState>
 8007556:	4603      	mov	r3, r0
 8007558:	2b01      	cmp	r3, #1
 800755a:	d017      	beq.n	800758c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007560:	4a14      	ldr	r2, [pc, #80]	@ (80075b4 <I2C_ITError+0x1dc>)
 8007562:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007570:	4618      	mov	r0, r3
 8007572:	f7fc fd7d 	bl	8004070 <HAL_DMA_Abort_IT>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d011      	beq.n	80075a0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007586:	4610      	mov	r0, r2
 8007588:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800758a:	e009      	b.n	80075a0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f813 	bl	80075b8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007592:	e005      	b.n	80075a0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 f80f 	bl	80075b8 <I2C_TreatErrorCallback>
  }
}
 800759a:	e002      	b.n	80075a2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800759c:	bf00      	nop
 800759e:	e000      	b.n	80075a2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80075a0:	bf00      	nop
}
 80075a2:	bf00      	nop
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	ffff0000 	.word	0xffff0000
 80075b0:	08006987 	.word	0x08006987
 80075b4:	0800764f 	.word	0x0800764f

080075b8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	2b60      	cmp	r3, #96	@ 0x60
 80075ca:	d10e      	bne.n	80075ea <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2220      	movs	r2, #32
 80075d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f7ff f9c5 	bl	8006972 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80075e8:	e009      	b.n	80075fe <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7ff f9b0 	bl	800695e <HAL_I2C_ErrorCallback>
}
 80075fe:	bf00      	nop
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007606:	b480      	push	{r7}
 8007608:	b083      	sub	sp, #12
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	f003 0302 	and.w	r3, r3, #2
 8007618:	2b02      	cmp	r3, #2
 800761a:	d103      	bne.n	8007624 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2200      	movs	r2, #0
 8007622:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	699b      	ldr	r3, [r3, #24]
 800762a:	f003 0301 	and.w	r3, r3, #1
 800762e:	2b01      	cmp	r3, #1
 8007630:	d007      	beq.n	8007642 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	699a      	ldr	r2, [r3, #24]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f042 0201 	orr.w	r2, r2, #1
 8007640:	619a      	str	r2, [r3, #24]
  }
}
 8007642:	bf00      	nop
 8007644:	370c      	adds	r7, #12
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr

0800764e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b084      	sub	sp, #16
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800765a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007660:	2b00      	cmp	r3, #0
 8007662:	d003      	beq.n	800766c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007668:	2200      	movs	r2, #0
 800766a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007670:	2b00      	cmp	r3, #0
 8007672:	d003      	beq.n	800767c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007678:	2200      	movs	r2, #0
 800767a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f7ff ff9b 	bl	80075b8 <I2C_TreatErrorCallback>
}
 8007682:	bf00      	nop
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b084      	sub	sp, #16
 800768e:	af00      	add	r7, sp, #0
 8007690:	60f8      	str	r0, [r7, #12]
 8007692:	60b9      	str	r1, [r7, #8]
 8007694:	603b      	str	r3, [r7, #0]
 8007696:	4613      	mov	r3, r2
 8007698:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800769a:	e03b      	b.n	8007714 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800769c:	69ba      	ldr	r2, [r7, #24]
 800769e:	6839      	ldr	r1, [r7, #0]
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f000 f8d5 	bl	8007850 <I2C_IsErrorOccurred>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d001      	beq.n	80076b0 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e041      	b.n	8007734 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b6:	d02d      	beq.n	8007714 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076b8:	f7fa faea 	bl	8001c90 <HAL_GetTick>
 80076bc:	4602      	mov	r2, r0
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	683a      	ldr	r2, [r7, #0]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d302      	bcc.n	80076ce <I2C_WaitOnFlagUntilTimeout+0x44>
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d122      	bne.n	8007714 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	699a      	ldr	r2, [r3, #24]
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	4013      	ands	r3, r2
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	429a      	cmp	r2, r3
 80076dc:	bf0c      	ite	eq
 80076de:	2301      	moveq	r3, #1
 80076e0:	2300      	movne	r3, #0
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	461a      	mov	r2, r3
 80076e6:	79fb      	ldrb	r3, [r7, #7]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d113      	bne.n	8007714 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076f0:	f043 0220 	orr.w	r2, r3, #32
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2220      	movs	r2, #32
 80076fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e00f      	b.n	8007734 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	699a      	ldr	r2, [r3, #24]
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	4013      	ands	r3, r2
 800771e:	68ba      	ldr	r2, [r7, #8]
 8007720:	429a      	cmp	r2, r3
 8007722:	bf0c      	ite	eq
 8007724:	2301      	moveq	r3, #1
 8007726:	2300      	movne	r3, #0
 8007728:	b2db      	uxtb	r3, r3
 800772a:	461a      	mov	r2, r3
 800772c:	79fb      	ldrb	r3, [r7, #7]
 800772e:	429a      	cmp	r2, r3
 8007730:	d0b4      	beq.n	800769c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007748:	e033      	b.n	80077b2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	68b9      	ldr	r1, [r7, #8]
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f000 f87e 	bl	8007850 <I2C_IsErrorOccurred>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d001      	beq.n	800775e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e031      	b.n	80077c2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007764:	d025      	beq.n	80077b2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007766:	f7fa fa93 	bl	8001c90 <HAL_GetTick>
 800776a:	4602      	mov	r2, r0
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	68ba      	ldr	r2, [r7, #8]
 8007772:	429a      	cmp	r2, r3
 8007774:	d302      	bcc.n	800777c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d11a      	bne.n	80077b2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	f003 0302 	and.w	r3, r3, #2
 8007786:	2b02      	cmp	r3, #2
 8007788:	d013      	beq.n	80077b2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800778e:	f043 0220 	orr.w	r2, r3, #32
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2220      	movs	r2, #32
 800779a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e007      	b.n	80077c2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	f003 0302 	and.w	r3, r3, #2
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d1c4      	bne.n	800774a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b084      	sub	sp, #16
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	60f8      	str	r0, [r7, #12]
 80077d2:	60b9      	str	r1, [r7, #8]
 80077d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80077d6:	e02f      	b.n	8007838 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	68b9      	ldr	r1, [r7, #8]
 80077dc:	68f8      	ldr	r0, [r7, #12]
 80077de:	f000 f837 	bl	8007850 <I2C_IsErrorOccurred>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d001      	beq.n	80077ec <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e02d      	b.n	8007848 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077ec:	f7fa fa50 	bl	8001c90 <HAL_GetTick>
 80077f0:	4602      	mov	r2, r0
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d302      	bcc.n	8007802 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d11a      	bne.n	8007838 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	699b      	ldr	r3, [r3, #24]
 8007808:	f003 0320 	and.w	r3, r3, #32
 800780c:	2b20      	cmp	r3, #32
 800780e:	d013      	beq.n	8007838 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007814:	f043 0220 	orr.w	r2, r3, #32
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2220      	movs	r2, #32
 8007820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2200      	movs	r2, #0
 8007830:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	e007      	b.n	8007848 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	f003 0320 	and.w	r3, r3, #32
 8007842:	2b20      	cmp	r3, #32
 8007844:	d1c8      	bne.n	80077d8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b08a      	sub	sp, #40	@ 0x28
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800785c:	2300      	movs	r3, #0
 800785e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800786a:	2300      	movs	r3, #0
 800786c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	f003 0310 	and.w	r3, r3, #16
 8007878:	2b00      	cmp	r3, #0
 800787a:	d068      	beq.n	800794e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2210      	movs	r2, #16
 8007882:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007884:	e049      	b.n	800791a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800788c:	d045      	beq.n	800791a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800788e:	f7fa f9ff 	bl	8001c90 <HAL_GetTick>
 8007892:	4602      	mov	r2, r0
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	1ad3      	subs	r3, r2, r3
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	429a      	cmp	r2, r3
 800789c:	d302      	bcc.n	80078a4 <I2C_IsErrorOccurred+0x54>
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d13a      	bne.n	800791a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80078b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	699b      	ldr	r3, [r3, #24]
 80078be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80078c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078c6:	d121      	bne.n	800790c <I2C_IsErrorOccurred+0xbc>
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80078ce:	d01d      	beq.n	800790c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80078d0:	7cfb      	ldrb	r3, [r7, #19]
 80078d2:	2b20      	cmp	r3, #32
 80078d4:	d01a      	beq.n	800790c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	685a      	ldr	r2, [r3, #4]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80078e4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80078e6:	f7fa f9d3 	bl	8001c90 <HAL_GetTick>
 80078ea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80078ec:	e00e      	b.n	800790c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80078ee:	f7fa f9cf 	bl	8001c90 <HAL_GetTick>
 80078f2:	4602      	mov	r2, r0
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	1ad3      	subs	r3, r2, r3
 80078f8:	2b19      	cmp	r3, #25
 80078fa:	d907      	bls.n	800790c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80078fc:	6a3b      	ldr	r3, [r7, #32]
 80078fe:	f043 0320 	orr.w	r3, r3, #32
 8007902:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800790a:	e006      	b.n	800791a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	f003 0320 	and.w	r3, r3, #32
 8007916:	2b20      	cmp	r3, #32
 8007918:	d1e9      	bne.n	80078ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	699b      	ldr	r3, [r3, #24]
 8007920:	f003 0320 	and.w	r3, r3, #32
 8007924:	2b20      	cmp	r3, #32
 8007926:	d003      	beq.n	8007930 <I2C_IsErrorOccurred+0xe0>
 8007928:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800792c:	2b00      	cmp	r3, #0
 800792e:	d0aa      	beq.n	8007886 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007930:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007934:	2b00      	cmp	r3, #0
 8007936:	d103      	bne.n	8007940 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2220      	movs	r2, #32
 800793e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007940:	6a3b      	ldr	r3, [r7, #32]
 8007942:	f043 0304 	orr.w	r3, r3, #4
 8007946:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	699b      	ldr	r3, [r3, #24]
 8007954:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00b      	beq.n	8007978 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007960:	6a3b      	ldr	r3, [r7, #32]
 8007962:	f043 0301 	orr.w	r3, r3, #1
 8007966:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007970:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00b      	beq.n	800799a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007982:	6a3b      	ldr	r3, [r7, #32]
 8007984:	f043 0308 	orr.w	r3, r3, #8
 8007988:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007992:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00b      	beq.n	80079bc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80079a4:	6a3b      	ldr	r3, [r7, #32]
 80079a6:	f043 0302 	orr.w	r3, r3, #2
 80079aa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80079b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80079bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d01c      	beq.n	80079fe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80079c4:	68f8      	ldr	r0, [r7, #12]
 80079c6:	f7ff fe1e 	bl	8007606 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	6859      	ldr	r1, [r3, #4]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	4b0d      	ldr	r3, [pc, #52]	@ (8007a0c <I2C_IsErrorOccurred+0x1bc>)
 80079d6:	400b      	ands	r3, r1
 80079d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079de:	6a3b      	ldr	r3, [r7, #32]
 80079e0:	431a      	orrs	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2220      	movs	r2, #32
 80079ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80079fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3728      	adds	r7, #40	@ 0x28
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	fe00e800 	.word	0xfe00e800

08007a10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b087      	sub	sp, #28
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	607b      	str	r3, [r7, #4]
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	817b      	strh	r3, [r7, #10]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007a22:	897b      	ldrh	r3, [r7, #10]
 8007a24:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007a28:	7a7b      	ldrb	r3, [r7, #9]
 8007a2a:	041b      	lsls	r3, r3, #16
 8007a2c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007a30:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007a36:	6a3b      	ldr	r3, [r7, #32]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a3e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	685a      	ldr	r2, [r3, #4]
 8007a46:	6a3b      	ldr	r3, [r7, #32]
 8007a48:	0d5b      	lsrs	r3, r3, #21
 8007a4a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007a4e:	4b08      	ldr	r3, [pc, #32]	@ (8007a70 <I2C_TransferConfig+0x60>)
 8007a50:	430b      	orrs	r3, r1
 8007a52:	43db      	mvns	r3, r3
 8007a54:	ea02 0103 	and.w	r1, r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	697a      	ldr	r2, [r7, #20]
 8007a5e:	430a      	orrs	r2, r1
 8007a60:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007a62:	bf00      	nop
 8007a64:	371c      	adds	r7, #28
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	03ff63ff 	.word	0x03ff63ff

08007a74 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007a80:	2300      	movs	r3, #0
 8007a82:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007a84:	887b      	ldrh	r3, [r7, #2]
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00f      	beq.n	8007aae <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007a94:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007aa2:	2b28      	cmp	r3, #40	@ 0x28
 8007aa4:	d003      	beq.n	8007aae <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007aac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007aae:	887b      	ldrh	r3, [r7, #2]
 8007ab0:	f003 0302 	and.w	r3, r3, #2
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00f      	beq.n	8007ad8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8007abe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007acc:	2b28      	cmp	r3, #40	@ 0x28
 8007ace:	d003      	beq.n	8007ad8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007ad6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007ad8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	da03      	bge.n	8007ae8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007ae6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007ae8:	887b      	ldrh	r3, [r7, #2]
 8007aea:	2b10      	cmp	r3, #16
 8007aec:	d103      	bne.n	8007af6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007af4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007af6:	887b      	ldrh	r3, [r7, #2]
 8007af8:	2b20      	cmp	r3, #32
 8007afa:	d103      	bne.n	8007b04 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f043 0320 	orr.w	r3, r3, #32
 8007b02:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007b04:	887b      	ldrh	r3, [r7, #2]
 8007b06:	2b40      	cmp	r3, #64	@ 0x40
 8007b08:	d103      	bne.n	8007b12 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b10:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	6819      	ldr	r1, [r3, #0]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	43da      	mvns	r2, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	400a      	ands	r2, r1
 8007b22:	601a      	str	r2, [r3, #0]
}
 8007b24:	bf00      	nop
 8007b26:	3714      	adds	r7, #20
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	2b20      	cmp	r3, #32
 8007b44:	d138      	bne.n	8007bb8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d101      	bne.n	8007b54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007b50:	2302      	movs	r3, #2
 8007b52:	e032      	b.n	8007bba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2224      	movs	r2, #36	@ 0x24
 8007b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f022 0201 	bic.w	r2, r2, #1
 8007b72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007b82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6819      	ldr	r1, [r3, #0]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	430a      	orrs	r2, r1
 8007b92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f042 0201 	orr.w	r2, r2, #1
 8007ba2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2220      	movs	r2, #32
 8007ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	e000      	b.n	8007bba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007bb8:	2302      	movs	r3, #2
  }
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	370c      	adds	r7, #12
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr

08007bc6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007bc6:	b480      	push	{r7}
 8007bc8:	b085      	sub	sp, #20
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
 8007bce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	2b20      	cmp	r3, #32
 8007bda:	d139      	bne.n	8007c50 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d101      	bne.n	8007bea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007be6:	2302      	movs	r3, #2
 8007be8:	e033      	b.n	8007c52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2201      	movs	r2, #1
 8007bee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2224      	movs	r2, #36	@ 0x24
 8007bf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f022 0201 	bic.w	r2, r2, #1
 8007c08:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007c18:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	021b      	lsls	r3, r3, #8
 8007c1e:	68fa      	ldr	r2, [r7, #12]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f042 0201 	orr.w	r2, r2, #1
 8007c3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2220      	movs	r2, #32
 8007c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	e000      	b.n	8007c52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007c50:	2302      	movs	r3, #2
  }
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
	...

08007c60 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007c68:	4b19      	ldr	r3, [pc, #100]	@ (8007cd0 <HAL_PWREx_ConfigSupply+0x70>)
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	f003 0304 	and.w	r3, r3, #4
 8007c70:	2b04      	cmp	r3, #4
 8007c72:	d00a      	beq.n	8007c8a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007c74:	4b16      	ldr	r3, [pc, #88]	@ (8007cd0 <HAL_PWREx_ConfigSupply+0x70>)
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	f003 0307 	and.w	r3, r3, #7
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d001      	beq.n	8007c86 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e01f      	b.n	8007cc6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007c86:	2300      	movs	r3, #0
 8007c88:	e01d      	b.n	8007cc6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007c8a:	4b11      	ldr	r3, [pc, #68]	@ (8007cd0 <HAL_PWREx_ConfigSupply+0x70>)
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	f023 0207 	bic.w	r2, r3, #7
 8007c92:	490f      	ldr	r1, [pc, #60]	@ (8007cd0 <HAL_PWREx_ConfigSupply+0x70>)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007c9a:	f7f9 fff9 	bl	8001c90 <HAL_GetTick>
 8007c9e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007ca0:	e009      	b.n	8007cb6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007ca2:	f7f9 fff5 	bl	8001c90 <HAL_GetTick>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007cb0:	d901      	bls.n	8007cb6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e007      	b.n	8007cc6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007cb6:	4b06      	ldr	r3, [pc, #24]	@ (8007cd0 <HAL_PWREx_ConfigSupply+0x70>)
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007cbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cc2:	d1ee      	bne.n	8007ca2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	58024800 	.word	0x58024800

08007cd4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b08c      	sub	sp, #48	@ 0x30
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d102      	bne.n	8007ce8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	f000 bc48 	b.w	8008578 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 0301 	and.w	r3, r3, #1
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f000 8088 	beq.w	8007e06 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007cf6:	4b99      	ldr	r3, [pc, #612]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d00:	4b96      	ldr	r3, [pc, #600]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d04:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d08:	2b10      	cmp	r3, #16
 8007d0a:	d007      	beq.n	8007d1c <HAL_RCC_OscConfig+0x48>
 8007d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d0e:	2b18      	cmp	r3, #24
 8007d10:	d111      	bne.n	8007d36 <HAL_RCC_OscConfig+0x62>
 8007d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d14:	f003 0303 	and.w	r3, r3, #3
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	d10c      	bne.n	8007d36 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d1c:	4b8f      	ldr	r3, [pc, #572]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d06d      	beq.n	8007e04 <HAL_RCC_OscConfig+0x130>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d169      	bne.n	8007e04 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	f000 bc21 	b.w	8008578 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d3e:	d106      	bne.n	8007d4e <HAL_RCC_OscConfig+0x7a>
 8007d40:	4b86      	ldr	r3, [pc, #536]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a85      	ldr	r2, [pc, #532]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007d46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d4a:	6013      	str	r3, [r2, #0]
 8007d4c:	e02e      	b.n	8007dac <HAL_RCC_OscConfig+0xd8>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d10c      	bne.n	8007d70 <HAL_RCC_OscConfig+0x9c>
 8007d56:	4b81      	ldr	r3, [pc, #516]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a80      	ldr	r2, [pc, #512]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007d5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d60:	6013      	str	r3, [r2, #0]
 8007d62:	4b7e      	ldr	r3, [pc, #504]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a7d      	ldr	r2, [pc, #500]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007d68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d6c:	6013      	str	r3, [r2, #0]
 8007d6e:	e01d      	b.n	8007dac <HAL_RCC_OscConfig+0xd8>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d78:	d10c      	bne.n	8007d94 <HAL_RCC_OscConfig+0xc0>
 8007d7a:	4b78      	ldr	r3, [pc, #480]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a77      	ldr	r2, [pc, #476]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007d80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d84:	6013      	str	r3, [r2, #0]
 8007d86:	4b75      	ldr	r3, [pc, #468]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a74      	ldr	r2, [pc, #464]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007d8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d90:	6013      	str	r3, [r2, #0]
 8007d92:	e00b      	b.n	8007dac <HAL_RCC_OscConfig+0xd8>
 8007d94:	4b71      	ldr	r3, [pc, #452]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a70      	ldr	r2, [pc, #448]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007d9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d9e:	6013      	str	r3, [r2, #0]
 8007da0:	4b6e      	ldr	r3, [pc, #440]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a6d      	ldr	r2, [pc, #436]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007da6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007daa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d013      	beq.n	8007ddc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007db4:	f7f9 ff6c 	bl	8001c90 <HAL_GetTick>
 8007db8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007dba:	e008      	b.n	8007dce <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007dbc:	f7f9 ff68 	bl	8001c90 <HAL_GetTick>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	2b64      	cmp	r3, #100	@ 0x64
 8007dc8:	d901      	bls.n	8007dce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e3d4      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007dce:	4b63      	ldr	r3, [pc, #396]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d0f0      	beq.n	8007dbc <HAL_RCC_OscConfig+0xe8>
 8007dda:	e014      	b.n	8007e06 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ddc:	f7f9 ff58 	bl	8001c90 <HAL_GetTick>
 8007de0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007de2:	e008      	b.n	8007df6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007de4:	f7f9 ff54 	bl	8001c90 <HAL_GetTick>
 8007de8:	4602      	mov	r2, r0
 8007dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	2b64      	cmp	r3, #100	@ 0x64
 8007df0:	d901      	bls.n	8007df6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e3c0      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007df6:	4b59      	ldr	r3, [pc, #356]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1f0      	bne.n	8007de4 <HAL_RCC_OscConfig+0x110>
 8007e02:	e000      	b.n	8007e06 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0302 	and.w	r3, r3, #2
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f000 80ca 	beq.w	8007fa8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e14:	4b51      	ldr	r3, [pc, #324]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e1c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e1e:	4b4f      	ldr	r3, [pc, #316]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e22:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007e24:	6a3b      	ldr	r3, [r7, #32]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d007      	beq.n	8007e3a <HAL_RCC_OscConfig+0x166>
 8007e2a:	6a3b      	ldr	r3, [r7, #32]
 8007e2c:	2b18      	cmp	r3, #24
 8007e2e:	d156      	bne.n	8007ede <HAL_RCC_OscConfig+0x20a>
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	f003 0303 	and.w	r3, r3, #3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d151      	bne.n	8007ede <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e3a:	4b48      	ldr	r3, [pc, #288]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 0304 	and.w	r3, r3, #4
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d005      	beq.n	8007e52 <HAL_RCC_OscConfig+0x17e>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d101      	bne.n	8007e52 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e392      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007e52:	4b42      	ldr	r3, [pc, #264]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f023 0219 	bic.w	r2, r3, #25
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	493f      	ldr	r1, [pc, #252]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007e60:	4313      	orrs	r3, r2
 8007e62:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e64:	f7f9 ff14 	bl	8001c90 <HAL_GetTick>
 8007e68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e6a:	e008      	b.n	8007e7e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e6c:	f7f9 ff10 	bl	8001c90 <HAL_GetTick>
 8007e70:	4602      	mov	r2, r0
 8007e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e74:	1ad3      	subs	r3, r2, r3
 8007e76:	2b02      	cmp	r3, #2
 8007e78:	d901      	bls.n	8007e7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	e37c      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e7e:	4b37      	ldr	r3, [pc, #220]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 0304 	and.w	r3, r3, #4
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d0f0      	beq.n	8007e6c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e8a:	f7f9 ff0d 	bl	8001ca8 <HAL_GetREVID>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d817      	bhi.n	8007ec8 <HAL_RCC_OscConfig+0x1f4>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	2b40      	cmp	r3, #64	@ 0x40
 8007e9e:	d108      	bne.n	8007eb2 <HAL_RCC_OscConfig+0x1de>
 8007ea0:	4b2e      	ldr	r3, [pc, #184]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007ea8:	4a2c      	ldr	r2, [pc, #176]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007eaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007eae:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007eb0:	e07a      	b.n	8007fa8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007eb2:	4b2a      	ldr	r3, [pc, #168]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	031b      	lsls	r3, r3, #12
 8007ec0:	4926      	ldr	r1, [pc, #152]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ec6:	e06f      	b.n	8007fa8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ec8:	4b24      	ldr	r3, [pc, #144]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	061b      	lsls	r3, r3, #24
 8007ed6:	4921      	ldr	r1, [pc, #132]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007edc:	e064      	b.n	8007fa8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d047      	beq.n	8007f76 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f023 0219 	bic.w	r2, r3, #25
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	491a      	ldr	r1, [pc, #104]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ef8:	f7f9 feca 	bl	8001c90 <HAL_GetTick>
 8007efc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007efe:	e008      	b.n	8007f12 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f00:	f7f9 fec6 	bl	8001c90 <HAL_GetTick>
 8007f04:	4602      	mov	r2, r0
 8007f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	d901      	bls.n	8007f12 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007f0e:	2303      	movs	r3, #3
 8007f10:	e332      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f12:	4b12      	ldr	r3, [pc, #72]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 0304 	and.w	r3, r3, #4
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d0f0      	beq.n	8007f00 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f1e:	f7f9 fec3 	bl	8001ca8 <HAL_GetREVID>
 8007f22:	4603      	mov	r3, r0
 8007f24:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d819      	bhi.n	8007f60 <HAL_RCC_OscConfig+0x28c>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	2b40      	cmp	r3, #64	@ 0x40
 8007f32:	d108      	bne.n	8007f46 <HAL_RCC_OscConfig+0x272>
 8007f34:	4b09      	ldr	r3, [pc, #36]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007f3c:	4a07      	ldr	r2, [pc, #28]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007f3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f42:	6053      	str	r3, [r2, #4]
 8007f44:	e030      	b.n	8007fa8 <HAL_RCC_OscConfig+0x2d4>
 8007f46:	4b05      	ldr	r3, [pc, #20]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	031b      	lsls	r3, r3, #12
 8007f54:	4901      	ldr	r1, [pc, #4]	@ (8007f5c <HAL_RCC_OscConfig+0x288>)
 8007f56:	4313      	orrs	r3, r2
 8007f58:	604b      	str	r3, [r1, #4]
 8007f5a:	e025      	b.n	8007fa8 <HAL_RCC_OscConfig+0x2d4>
 8007f5c:	58024400 	.word	0x58024400
 8007f60:	4b9a      	ldr	r3, [pc, #616]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	061b      	lsls	r3, r3, #24
 8007f6e:	4997      	ldr	r1, [pc, #604]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8007f70:	4313      	orrs	r3, r2
 8007f72:	604b      	str	r3, [r1, #4]
 8007f74:	e018      	b.n	8007fa8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f76:	4b95      	ldr	r3, [pc, #596]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a94      	ldr	r2, [pc, #592]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8007f7c:	f023 0301 	bic.w	r3, r3, #1
 8007f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f82:	f7f9 fe85 	bl	8001c90 <HAL_GetTick>
 8007f86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f88:	e008      	b.n	8007f9c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f8a:	f7f9 fe81 	bl	8001c90 <HAL_GetTick>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f92:	1ad3      	subs	r3, r2, r3
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d901      	bls.n	8007f9c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	e2ed      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f9c:	4b8b      	ldr	r3, [pc, #556]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f003 0304 	and.w	r3, r3, #4
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1f0      	bne.n	8007f8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 0310 	and.w	r3, r3, #16
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	f000 80a9 	beq.w	8008108 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fb6:	4b85      	ldr	r3, [pc, #532]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007fbe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007fc0:	4b82      	ldr	r3, [pc, #520]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8007fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	2b08      	cmp	r3, #8
 8007fca:	d007      	beq.n	8007fdc <HAL_RCC_OscConfig+0x308>
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	2b18      	cmp	r3, #24
 8007fd0:	d13a      	bne.n	8008048 <HAL_RCC_OscConfig+0x374>
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	f003 0303 	and.w	r3, r3, #3
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d135      	bne.n	8008048 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007fdc:	4b7b      	ldr	r3, [pc, #492]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d005      	beq.n	8007ff4 <HAL_RCC_OscConfig+0x320>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	69db      	ldr	r3, [r3, #28]
 8007fec:	2b80      	cmp	r3, #128	@ 0x80
 8007fee:	d001      	beq.n	8007ff4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e2c1      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ff4:	f7f9 fe58 	bl	8001ca8 <HAL_GetREVID>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d817      	bhi.n	8008032 <HAL_RCC_OscConfig+0x35e>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a1b      	ldr	r3, [r3, #32]
 8008006:	2b20      	cmp	r3, #32
 8008008:	d108      	bne.n	800801c <HAL_RCC_OscConfig+0x348>
 800800a:	4b70      	ldr	r3, [pc, #448]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008012:	4a6e      	ldr	r2, [pc, #440]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8008014:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008018:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800801a:	e075      	b.n	8008108 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800801c:	4b6b      	ldr	r3, [pc, #428]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a1b      	ldr	r3, [r3, #32]
 8008028:	069b      	lsls	r3, r3, #26
 800802a:	4968      	ldr	r1, [pc, #416]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 800802c:	4313      	orrs	r3, r2
 800802e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008030:	e06a      	b.n	8008108 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008032:	4b66      	ldr	r3, [pc, #408]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a1b      	ldr	r3, [r3, #32]
 800803e:	061b      	lsls	r3, r3, #24
 8008040:	4962      	ldr	r1, [pc, #392]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8008042:	4313      	orrs	r3, r2
 8008044:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008046:	e05f      	b.n	8008108 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	69db      	ldr	r3, [r3, #28]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d042      	beq.n	80080d6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008050:	4b5e      	ldr	r3, [pc, #376]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a5d      	ldr	r2, [pc, #372]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8008056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800805a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800805c:	f7f9 fe18 	bl	8001c90 <HAL_GetTick>
 8008060:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008062:	e008      	b.n	8008076 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008064:	f7f9 fe14 	bl	8001c90 <HAL_GetTick>
 8008068:	4602      	mov	r2, r0
 800806a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	2b02      	cmp	r3, #2
 8008070:	d901      	bls.n	8008076 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008072:	2303      	movs	r3, #3
 8008074:	e280      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008076:	4b55      	ldr	r3, [pc, #340]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800807e:	2b00      	cmp	r3, #0
 8008080:	d0f0      	beq.n	8008064 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008082:	f7f9 fe11 	bl	8001ca8 <HAL_GetREVID>
 8008086:	4603      	mov	r3, r0
 8008088:	f241 0203 	movw	r2, #4099	@ 0x1003
 800808c:	4293      	cmp	r3, r2
 800808e:	d817      	bhi.n	80080c0 <HAL_RCC_OscConfig+0x3ec>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a1b      	ldr	r3, [r3, #32]
 8008094:	2b20      	cmp	r3, #32
 8008096:	d108      	bne.n	80080aa <HAL_RCC_OscConfig+0x3d6>
 8008098:	4b4c      	ldr	r3, [pc, #304]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80080a0:	4a4a      	ldr	r2, [pc, #296]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 80080a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80080a6:	6053      	str	r3, [r2, #4]
 80080a8:	e02e      	b.n	8008108 <HAL_RCC_OscConfig+0x434>
 80080aa:	4b48      	ldr	r3, [pc, #288]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a1b      	ldr	r3, [r3, #32]
 80080b6:	069b      	lsls	r3, r3, #26
 80080b8:	4944      	ldr	r1, [pc, #272]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 80080ba:	4313      	orrs	r3, r2
 80080bc:	604b      	str	r3, [r1, #4]
 80080be:	e023      	b.n	8008108 <HAL_RCC_OscConfig+0x434>
 80080c0:	4b42      	ldr	r3, [pc, #264]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a1b      	ldr	r3, [r3, #32]
 80080cc:	061b      	lsls	r3, r3, #24
 80080ce:	493f      	ldr	r1, [pc, #252]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 80080d0:	4313      	orrs	r3, r2
 80080d2:	60cb      	str	r3, [r1, #12]
 80080d4:	e018      	b.n	8008108 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80080d6:	4b3d      	ldr	r3, [pc, #244]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a3c      	ldr	r2, [pc, #240]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 80080dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080e2:	f7f9 fdd5 	bl	8001c90 <HAL_GetTick>
 80080e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80080e8:	e008      	b.n	80080fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80080ea:	f7f9 fdd1 	bl	8001c90 <HAL_GetTick>
 80080ee:	4602      	mov	r2, r0
 80080f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f2:	1ad3      	subs	r3, r2, r3
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d901      	bls.n	80080fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80080f8:	2303      	movs	r3, #3
 80080fa:	e23d      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80080fc:	4b33      	ldr	r3, [pc, #204]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008104:	2b00      	cmp	r3, #0
 8008106:	d1f0      	bne.n	80080ea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 0308 	and.w	r3, r3, #8
 8008110:	2b00      	cmp	r3, #0
 8008112:	d036      	beq.n	8008182 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	695b      	ldr	r3, [r3, #20]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d019      	beq.n	8008150 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800811c:	4b2b      	ldr	r3, [pc, #172]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 800811e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008120:	4a2a      	ldr	r2, [pc, #168]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8008122:	f043 0301 	orr.w	r3, r3, #1
 8008126:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008128:	f7f9 fdb2 	bl	8001c90 <HAL_GetTick>
 800812c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800812e:	e008      	b.n	8008142 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008130:	f7f9 fdae 	bl	8001c90 <HAL_GetTick>
 8008134:	4602      	mov	r2, r0
 8008136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008138:	1ad3      	subs	r3, r2, r3
 800813a:	2b02      	cmp	r3, #2
 800813c:	d901      	bls.n	8008142 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800813e:	2303      	movs	r3, #3
 8008140:	e21a      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008142:	4b22      	ldr	r3, [pc, #136]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8008144:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008146:	f003 0302 	and.w	r3, r3, #2
 800814a:	2b00      	cmp	r3, #0
 800814c:	d0f0      	beq.n	8008130 <HAL_RCC_OscConfig+0x45c>
 800814e:	e018      	b.n	8008182 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008150:	4b1e      	ldr	r3, [pc, #120]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8008152:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008154:	4a1d      	ldr	r2, [pc, #116]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8008156:	f023 0301 	bic.w	r3, r3, #1
 800815a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800815c:	f7f9 fd98 	bl	8001c90 <HAL_GetTick>
 8008160:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008162:	e008      	b.n	8008176 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008164:	f7f9 fd94 	bl	8001c90 <HAL_GetTick>
 8008168:	4602      	mov	r2, r0
 800816a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800816c:	1ad3      	subs	r3, r2, r3
 800816e:	2b02      	cmp	r3, #2
 8008170:	d901      	bls.n	8008176 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008172:	2303      	movs	r3, #3
 8008174:	e200      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008176:	4b15      	ldr	r3, [pc, #84]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8008178:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800817a:	f003 0302 	and.w	r3, r3, #2
 800817e:	2b00      	cmp	r3, #0
 8008180:	d1f0      	bne.n	8008164 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f003 0320 	and.w	r3, r3, #32
 800818a:	2b00      	cmp	r3, #0
 800818c:	d039      	beq.n	8008202 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	699b      	ldr	r3, [r3, #24]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d01c      	beq.n	80081d0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008196:	4b0d      	ldr	r3, [pc, #52]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a0c      	ldr	r2, [pc, #48]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 800819c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80081a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80081a2:	f7f9 fd75 	bl	8001c90 <HAL_GetTick>
 80081a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80081a8:	e008      	b.n	80081bc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80081aa:	f7f9 fd71 	bl	8001c90 <HAL_GetTick>
 80081ae:	4602      	mov	r2, r0
 80081b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b2:	1ad3      	subs	r3, r2, r3
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	d901      	bls.n	80081bc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80081b8:	2303      	movs	r3, #3
 80081ba:	e1dd      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80081bc:	4b03      	ldr	r3, [pc, #12]	@ (80081cc <HAL_RCC_OscConfig+0x4f8>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d0f0      	beq.n	80081aa <HAL_RCC_OscConfig+0x4d6>
 80081c8:	e01b      	b.n	8008202 <HAL_RCC_OscConfig+0x52e>
 80081ca:	bf00      	nop
 80081cc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80081d0:	4b9b      	ldr	r3, [pc, #620]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a9a      	ldr	r2, [pc, #616]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 80081d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80081da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80081dc:	f7f9 fd58 	bl	8001c90 <HAL_GetTick>
 80081e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80081e2:	e008      	b.n	80081f6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80081e4:	f7f9 fd54 	bl	8001c90 <HAL_GetTick>
 80081e8:	4602      	mov	r2, r0
 80081ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ec:	1ad3      	subs	r3, r2, r3
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	d901      	bls.n	80081f6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80081f2:	2303      	movs	r3, #3
 80081f4:	e1c0      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80081f6:	4b92      	ldr	r3, [pc, #584]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1f0      	bne.n	80081e4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 0304 	and.w	r3, r3, #4
 800820a:	2b00      	cmp	r3, #0
 800820c:	f000 8081 	beq.w	8008312 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008210:	4b8c      	ldr	r3, [pc, #560]	@ (8008444 <HAL_RCC_OscConfig+0x770>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a8b      	ldr	r2, [pc, #556]	@ (8008444 <HAL_RCC_OscConfig+0x770>)
 8008216:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800821a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800821c:	f7f9 fd38 	bl	8001c90 <HAL_GetTick>
 8008220:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008222:	e008      	b.n	8008236 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008224:	f7f9 fd34 	bl	8001c90 <HAL_GetTick>
 8008228:	4602      	mov	r2, r0
 800822a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	2b64      	cmp	r3, #100	@ 0x64
 8008230:	d901      	bls.n	8008236 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008232:	2303      	movs	r3, #3
 8008234:	e1a0      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008236:	4b83      	ldr	r3, [pc, #524]	@ (8008444 <HAL_RCC_OscConfig+0x770>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800823e:	2b00      	cmp	r3, #0
 8008240:	d0f0      	beq.n	8008224 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	2b01      	cmp	r3, #1
 8008248:	d106      	bne.n	8008258 <HAL_RCC_OscConfig+0x584>
 800824a:	4b7d      	ldr	r3, [pc, #500]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 800824c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800824e:	4a7c      	ldr	r2, [pc, #496]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008250:	f043 0301 	orr.w	r3, r3, #1
 8008254:	6713      	str	r3, [r2, #112]	@ 0x70
 8008256:	e02d      	b.n	80082b4 <HAL_RCC_OscConfig+0x5e0>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d10c      	bne.n	800827a <HAL_RCC_OscConfig+0x5a6>
 8008260:	4b77      	ldr	r3, [pc, #476]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008264:	4a76      	ldr	r2, [pc, #472]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008266:	f023 0301 	bic.w	r3, r3, #1
 800826a:	6713      	str	r3, [r2, #112]	@ 0x70
 800826c:	4b74      	ldr	r3, [pc, #464]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 800826e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008270:	4a73      	ldr	r2, [pc, #460]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008272:	f023 0304 	bic.w	r3, r3, #4
 8008276:	6713      	str	r3, [r2, #112]	@ 0x70
 8008278:	e01c      	b.n	80082b4 <HAL_RCC_OscConfig+0x5e0>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	2b05      	cmp	r3, #5
 8008280:	d10c      	bne.n	800829c <HAL_RCC_OscConfig+0x5c8>
 8008282:	4b6f      	ldr	r3, [pc, #444]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008286:	4a6e      	ldr	r2, [pc, #440]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008288:	f043 0304 	orr.w	r3, r3, #4
 800828c:	6713      	str	r3, [r2, #112]	@ 0x70
 800828e:	4b6c      	ldr	r3, [pc, #432]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008292:	4a6b      	ldr	r2, [pc, #428]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008294:	f043 0301 	orr.w	r3, r3, #1
 8008298:	6713      	str	r3, [r2, #112]	@ 0x70
 800829a:	e00b      	b.n	80082b4 <HAL_RCC_OscConfig+0x5e0>
 800829c:	4b68      	ldr	r3, [pc, #416]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 800829e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082a0:	4a67      	ldr	r2, [pc, #412]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 80082a2:	f023 0301 	bic.w	r3, r3, #1
 80082a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80082a8:	4b65      	ldr	r3, [pc, #404]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 80082aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082ac:	4a64      	ldr	r2, [pc, #400]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 80082ae:	f023 0304 	bic.w	r3, r3, #4
 80082b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d015      	beq.n	80082e8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082bc:	f7f9 fce8 	bl	8001c90 <HAL_GetTick>
 80082c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082c2:	e00a      	b.n	80082da <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082c4:	f7f9 fce4 	bl	8001c90 <HAL_GetTick>
 80082c8:	4602      	mov	r2, r0
 80082ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082cc:	1ad3      	subs	r3, r2, r3
 80082ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d901      	bls.n	80082da <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80082d6:	2303      	movs	r3, #3
 80082d8:	e14e      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082da:	4b59      	ldr	r3, [pc, #356]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 80082dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082de:	f003 0302 	and.w	r3, r3, #2
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d0ee      	beq.n	80082c4 <HAL_RCC_OscConfig+0x5f0>
 80082e6:	e014      	b.n	8008312 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082e8:	f7f9 fcd2 	bl	8001c90 <HAL_GetTick>
 80082ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80082ee:	e00a      	b.n	8008306 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082f0:	f7f9 fcce 	bl	8001c90 <HAL_GetTick>
 80082f4:	4602      	mov	r2, r0
 80082f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082fe:	4293      	cmp	r3, r2
 8008300:	d901      	bls.n	8008306 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008302:	2303      	movs	r3, #3
 8008304:	e138      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008306:	4b4e      	ldr	r3, [pc, #312]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800830a:	f003 0302 	and.w	r3, r3, #2
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1ee      	bne.n	80082f0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008316:	2b00      	cmp	r3, #0
 8008318:	f000 812d 	beq.w	8008576 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800831c:	4b48      	ldr	r3, [pc, #288]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008324:	2b18      	cmp	r3, #24
 8008326:	f000 80bd 	beq.w	80084a4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800832e:	2b02      	cmp	r3, #2
 8008330:	f040 809e 	bne.w	8008470 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008334:	4b42      	ldr	r3, [pc, #264]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a41      	ldr	r2, [pc, #260]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 800833a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800833e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008340:	f7f9 fca6 	bl	8001c90 <HAL_GetTick>
 8008344:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008346:	e008      	b.n	800835a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008348:	f7f9 fca2 	bl	8001c90 <HAL_GetTick>
 800834c:	4602      	mov	r2, r0
 800834e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008350:	1ad3      	subs	r3, r2, r3
 8008352:	2b02      	cmp	r3, #2
 8008354:	d901      	bls.n	800835a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008356:	2303      	movs	r3, #3
 8008358:	e10e      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800835a:	4b39      	ldr	r3, [pc, #228]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008362:	2b00      	cmp	r3, #0
 8008364:	d1f0      	bne.n	8008348 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008366:	4b36      	ldr	r3, [pc, #216]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008368:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800836a:	4b37      	ldr	r3, [pc, #220]	@ (8008448 <HAL_RCC_OscConfig+0x774>)
 800836c:	4013      	ands	r3, r2
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008376:	0112      	lsls	r2, r2, #4
 8008378:	430a      	orrs	r2, r1
 800837a:	4931      	ldr	r1, [pc, #196]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 800837c:	4313      	orrs	r3, r2
 800837e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008384:	3b01      	subs	r3, #1
 8008386:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800838e:	3b01      	subs	r3, #1
 8008390:	025b      	lsls	r3, r3, #9
 8008392:	b29b      	uxth	r3, r3
 8008394:	431a      	orrs	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800839a:	3b01      	subs	r3, #1
 800839c:	041b      	lsls	r3, r3, #16
 800839e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80083a2:	431a      	orrs	r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083a8:	3b01      	subs	r3, #1
 80083aa:	061b      	lsls	r3, r3, #24
 80083ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80083b0:	4923      	ldr	r1, [pc, #140]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 80083b2:	4313      	orrs	r3, r2
 80083b4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80083b6:	4b22      	ldr	r3, [pc, #136]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 80083b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ba:	4a21      	ldr	r2, [pc, #132]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 80083bc:	f023 0301 	bic.w	r3, r3, #1
 80083c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80083c2:	4b1f      	ldr	r3, [pc, #124]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 80083c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083c6:	4b21      	ldr	r3, [pc, #132]	@ (800844c <HAL_RCC_OscConfig+0x778>)
 80083c8:	4013      	ands	r3, r2
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80083ce:	00d2      	lsls	r2, r2, #3
 80083d0:	491b      	ldr	r1, [pc, #108]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 80083d2:	4313      	orrs	r3, r2
 80083d4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80083d6:	4b1a      	ldr	r3, [pc, #104]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 80083d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083da:	f023 020c 	bic.w	r2, r3, #12
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083e2:	4917      	ldr	r1, [pc, #92]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 80083e4:	4313      	orrs	r3, r2
 80083e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80083e8:	4b15      	ldr	r3, [pc, #84]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 80083ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ec:	f023 0202 	bic.w	r2, r3, #2
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083f4:	4912      	ldr	r1, [pc, #72]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 80083f6:	4313      	orrs	r3, r2
 80083f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80083fa:	4b11      	ldr	r3, [pc, #68]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 80083fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083fe:	4a10      	ldr	r2, [pc, #64]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008404:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008406:	4b0e      	ldr	r3, [pc, #56]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800840a:	4a0d      	ldr	r2, [pc, #52]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 800840c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008410:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008412:	4b0b      	ldr	r3, [pc, #44]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008416:	4a0a      	ldr	r2, [pc, #40]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008418:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800841c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800841e:	4b08      	ldr	r3, [pc, #32]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008422:	4a07      	ldr	r2, [pc, #28]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008424:	f043 0301 	orr.w	r3, r3, #1
 8008428:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800842a:	4b05      	ldr	r3, [pc, #20]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a04      	ldr	r2, [pc, #16]	@ (8008440 <HAL_RCC_OscConfig+0x76c>)
 8008430:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008436:	f7f9 fc2b 	bl	8001c90 <HAL_GetTick>
 800843a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800843c:	e011      	b.n	8008462 <HAL_RCC_OscConfig+0x78e>
 800843e:	bf00      	nop
 8008440:	58024400 	.word	0x58024400
 8008444:	58024800 	.word	0x58024800
 8008448:	fffffc0c 	.word	0xfffffc0c
 800844c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008450:	f7f9 fc1e 	bl	8001c90 <HAL_GetTick>
 8008454:	4602      	mov	r2, r0
 8008456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	2b02      	cmp	r3, #2
 800845c:	d901      	bls.n	8008462 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	e08a      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008462:	4b47      	ldr	r3, [pc, #284]	@ (8008580 <HAL_RCC_OscConfig+0x8ac>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d0f0      	beq.n	8008450 <HAL_RCC_OscConfig+0x77c>
 800846e:	e082      	b.n	8008576 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008470:	4b43      	ldr	r3, [pc, #268]	@ (8008580 <HAL_RCC_OscConfig+0x8ac>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a42      	ldr	r2, [pc, #264]	@ (8008580 <HAL_RCC_OscConfig+0x8ac>)
 8008476:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800847a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800847c:	f7f9 fc08 	bl	8001c90 <HAL_GetTick>
 8008480:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008482:	e008      	b.n	8008496 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008484:	f7f9 fc04 	bl	8001c90 <HAL_GetTick>
 8008488:	4602      	mov	r2, r0
 800848a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848c:	1ad3      	subs	r3, r2, r3
 800848e:	2b02      	cmp	r3, #2
 8008490:	d901      	bls.n	8008496 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008492:	2303      	movs	r3, #3
 8008494:	e070      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008496:	4b3a      	ldr	r3, [pc, #232]	@ (8008580 <HAL_RCC_OscConfig+0x8ac>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1f0      	bne.n	8008484 <HAL_RCC_OscConfig+0x7b0>
 80084a2:	e068      	b.n	8008576 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80084a4:	4b36      	ldr	r3, [pc, #216]	@ (8008580 <HAL_RCC_OscConfig+0x8ac>)
 80084a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084a8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80084aa:	4b35      	ldr	r3, [pc, #212]	@ (8008580 <HAL_RCC_OscConfig+0x8ac>)
 80084ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084ae:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d031      	beq.n	800851c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	f003 0203 	and.w	r2, r3, #3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d12a      	bne.n	800851c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	091b      	lsrs	r3, r3, #4
 80084ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d122      	bne.n	800851c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d11a      	bne.n	800851c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	0a5b      	lsrs	r3, r3, #9
 80084ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084f2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d111      	bne.n	800851c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	0c1b      	lsrs	r3, r3, #16
 80084fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008504:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008506:	429a      	cmp	r2, r3
 8008508:	d108      	bne.n	800851c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	0e1b      	lsrs	r3, r3, #24
 800850e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008516:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008518:	429a      	cmp	r2, r3
 800851a:	d001      	beq.n	8008520 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	e02b      	b.n	8008578 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008520:	4b17      	ldr	r3, [pc, #92]	@ (8008580 <HAL_RCC_OscConfig+0x8ac>)
 8008522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008524:	08db      	lsrs	r3, r3, #3
 8008526:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800852a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008530:	693a      	ldr	r2, [r7, #16]
 8008532:	429a      	cmp	r2, r3
 8008534:	d01f      	beq.n	8008576 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008536:	4b12      	ldr	r3, [pc, #72]	@ (8008580 <HAL_RCC_OscConfig+0x8ac>)
 8008538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800853a:	4a11      	ldr	r2, [pc, #68]	@ (8008580 <HAL_RCC_OscConfig+0x8ac>)
 800853c:	f023 0301 	bic.w	r3, r3, #1
 8008540:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008542:	f7f9 fba5 	bl	8001c90 <HAL_GetTick>
 8008546:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008548:	bf00      	nop
 800854a:	f7f9 fba1 	bl	8001c90 <HAL_GetTick>
 800854e:	4602      	mov	r2, r0
 8008550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008552:	4293      	cmp	r3, r2
 8008554:	d0f9      	beq.n	800854a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008556:	4b0a      	ldr	r3, [pc, #40]	@ (8008580 <HAL_RCC_OscConfig+0x8ac>)
 8008558:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800855a:	4b0a      	ldr	r3, [pc, #40]	@ (8008584 <HAL_RCC_OscConfig+0x8b0>)
 800855c:	4013      	ands	r3, r2
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008562:	00d2      	lsls	r2, r2, #3
 8008564:	4906      	ldr	r1, [pc, #24]	@ (8008580 <HAL_RCC_OscConfig+0x8ac>)
 8008566:	4313      	orrs	r3, r2
 8008568:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800856a:	4b05      	ldr	r3, [pc, #20]	@ (8008580 <HAL_RCC_OscConfig+0x8ac>)
 800856c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800856e:	4a04      	ldr	r2, [pc, #16]	@ (8008580 <HAL_RCC_OscConfig+0x8ac>)
 8008570:	f043 0301 	orr.w	r3, r3, #1
 8008574:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3730      	adds	r7, #48	@ 0x30
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	58024400 	.word	0x58024400
 8008584:	ffff0007 	.word	0xffff0007

08008588 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d101      	bne.n	800859c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e19c      	b.n	80088d6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800859c:	4b8a      	ldr	r3, [pc, #552]	@ (80087c8 <HAL_RCC_ClockConfig+0x240>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f003 030f 	and.w	r3, r3, #15
 80085a4:	683a      	ldr	r2, [r7, #0]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d910      	bls.n	80085cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085aa:	4b87      	ldr	r3, [pc, #540]	@ (80087c8 <HAL_RCC_ClockConfig+0x240>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f023 020f 	bic.w	r2, r3, #15
 80085b2:	4985      	ldr	r1, [pc, #532]	@ (80087c8 <HAL_RCC_ClockConfig+0x240>)
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80085ba:	4b83      	ldr	r3, [pc, #524]	@ (80087c8 <HAL_RCC_ClockConfig+0x240>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f003 030f 	and.w	r3, r3, #15
 80085c2:	683a      	ldr	r2, [r7, #0]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d001      	beq.n	80085cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	e184      	b.n	80088d6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f003 0304 	and.w	r3, r3, #4
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d010      	beq.n	80085fa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	691a      	ldr	r2, [r3, #16]
 80085dc:	4b7b      	ldr	r3, [pc, #492]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 80085de:	699b      	ldr	r3, [r3, #24]
 80085e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d908      	bls.n	80085fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80085e8:	4b78      	ldr	r3, [pc, #480]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	691b      	ldr	r3, [r3, #16]
 80085f4:	4975      	ldr	r1, [pc, #468]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 80085f6:	4313      	orrs	r3, r2
 80085f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 0308 	and.w	r3, r3, #8
 8008602:	2b00      	cmp	r3, #0
 8008604:	d010      	beq.n	8008628 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	695a      	ldr	r2, [r3, #20]
 800860a:	4b70      	ldr	r3, [pc, #448]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 800860c:	69db      	ldr	r3, [r3, #28]
 800860e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008612:	429a      	cmp	r2, r3
 8008614:	d908      	bls.n	8008628 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008616:	4b6d      	ldr	r3, [pc, #436]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 8008618:	69db      	ldr	r3, [r3, #28]
 800861a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	695b      	ldr	r3, [r3, #20]
 8008622:	496a      	ldr	r1, [pc, #424]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 8008624:	4313      	orrs	r3, r2
 8008626:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f003 0310 	and.w	r3, r3, #16
 8008630:	2b00      	cmp	r3, #0
 8008632:	d010      	beq.n	8008656 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	699a      	ldr	r2, [r3, #24]
 8008638:	4b64      	ldr	r3, [pc, #400]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 800863a:	69db      	ldr	r3, [r3, #28]
 800863c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008640:	429a      	cmp	r2, r3
 8008642:	d908      	bls.n	8008656 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008644:	4b61      	ldr	r3, [pc, #388]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 8008646:	69db      	ldr	r3, [r3, #28]
 8008648:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	699b      	ldr	r3, [r3, #24]
 8008650:	495e      	ldr	r1, [pc, #376]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 8008652:	4313      	orrs	r3, r2
 8008654:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f003 0320 	and.w	r3, r3, #32
 800865e:	2b00      	cmp	r3, #0
 8008660:	d010      	beq.n	8008684 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	69da      	ldr	r2, [r3, #28]
 8008666:	4b59      	ldr	r3, [pc, #356]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 8008668:	6a1b      	ldr	r3, [r3, #32]
 800866a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800866e:	429a      	cmp	r2, r3
 8008670:	d908      	bls.n	8008684 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008672:	4b56      	ldr	r3, [pc, #344]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 8008674:	6a1b      	ldr	r3, [r3, #32]
 8008676:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	69db      	ldr	r3, [r3, #28]
 800867e:	4953      	ldr	r1, [pc, #332]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 8008680:	4313      	orrs	r3, r2
 8008682:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f003 0302 	and.w	r3, r3, #2
 800868c:	2b00      	cmp	r3, #0
 800868e:	d010      	beq.n	80086b2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	68da      	ldr	r2, [r3, #12]
 8008694:	4b4d      	ldr	r3, [pc, #308]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 8008696:	699b      	ldr	r3, [r3, #24]
 8008698:	f003 030f 	and.w	r3, r3, #15
 800869c:	429a      	cmp	r2, r3
 800869e:	d908      	bls.n	80086b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80086a0:	4b4a      	ldr	r3, [pc, #296]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 80086a2:	699b      	ldr	r3, [r3, #24]
 80086a4:	f023 020f 	bic.w	r2, r3, #15
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	4947      	ldr	r1, [pc, #284]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 80086ae:	4313      	orrs	r3, r2
 80086b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f003 0301 	and.w	r3, r3, #1
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d055      	beq.n	800876a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80086be:	4b43      	ldr	r3, [pc, #268]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	4940      	ldr	r1, [pc, #256]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 80086cc:	4313      	orrs	r3, r2
 80086ce:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d107      	bne.n	80086e8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80086d8:	4b3c      	ldr	r3, [pc, #240]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d121      	bne.n	8008728 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	e0f6      	b.n	80088d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	2b03      	cmp	r3, #3
 80086ee:	d107      	bne.n	8008700 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80086f0:	4b36      	ldr	r3, [pc, #216]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d115      	bne.n	8008728 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	e0ea      	b.n	80088d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	2b01      	cmp	r3, #1
 8008706:	d107      	bne.n	8008718 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008708:	4b30      	ldr	r3, [pc, #192]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008710:	2b00      	cmp	r3, #0
 8008712:	d109      	bne.n	8008728 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	e0de      	b.n	80088d6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008718:	4b2c      	ldr	r3, [pc, #176]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 0304 	and.w	r3, r3, #4
 8008720:	2b00      	cmp	r3, #0
 8008722:	d101      	bne.n	8008728 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	e0d6      	b.n	80088d6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008728:	4b28      	ldr	r3, [pc, #160]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 800872a:	691b      	ldr	r3, [r3, #16]
 800872c:	f023 0207 	bic.w	r2, r3, #7
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	4925      	ldr	r1, [pc, #148]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 8008736:	4313      	orrs	r3, r2
 8008738:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800873a:	f7f9 faa9 	bl	8001c90 <HAL_GetTick>
 800873e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008740:	e00a      	b.n	8008758 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008742:	f7f9 faa5 	bl	8001c90 <HAL_GetTick>
 8008746:	4602      	mov	r2, r0
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	1ad3      	subs	r3, r2, r3
 800874c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008750:	4293      	cmp	r3, r2
 8008752:	d901      	bls.n	8008758 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008754:	2303      	movs	r3, #3
 8008756:	e0be      	b.n	80088d6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008758:	4b1c      	ldr	r3, [pc, #112]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	00db      	lsls	r3, r3, #3
 8008766:	429a      	cmp	r2, r3
 8008768:	d1eb      	bne.n	8008742 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 0302 	and.w	r3, r3, #2
 8008772:	2b00      	cmp	r3, #0
 8008774:	d010      	beq.n	8008798 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	68da      	ldr	r2, [r3, #12]
 800877a:	4b14      	ldr	r3, [pc, #80]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	f003 030f 	and.w	r3, r3, #15
 8008782:	429a      	cmp	r2, r3
 8008784:	d208      	bcs.n	8008798 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008786:	4b11      	ldr	r3, [pc, #68]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	f023 020f 	bic.w	r2, r3, #15
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	490e      	ldr	r1, [pc, #56]	@ (80087cc <HAL_RCC_ClockConfig+0x244>)
 8008794:	4313      	orrs	r3, r2
 8008796:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008798:	4b0b      	ldr	r3, [pc, #44]	@ (80087c8 <HAL_RCC_ClockConfig+0x240>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f003 030f 	and.w	r3, r3, #15
 80087a0:	683a      	ldr	r2, [r7, #0]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d214      	bcs.n	80087d0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087a6:	4b08      	ldr	r3, [pc, #32]	@ (80087c8 <HAL_RCC_ClockConfig+0x240>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f023 020f 	bic.w	r2, r3, #15
 80087ae:	4906      	ldr	r1, [pc, #24]	@ (80087c8 <HAL_RCC_ClockConfig+0x240>)
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80087b6:	4b04      	ldr	r3, [pc, #16]	@ (80087c8 <HAL_RCC_ClockConfig+0x240>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 030f 	and.w	r3, r3, #15
 80087be:	683a      	ldr	r2, [r7, #0]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d005      	beq.n	80087d0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	e086      	b.n	80088d6 <HAL_RCC_ClockConfig+0x34e>
 80087c8:	52002000 	.word	0x52002000
 80087cc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f003 0304 	and.w	r3, r3, #4
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d010      	beq.n	80087fe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	691a      	ldr	r2, [r3, #16]
 80087e0:	4b3f      	ldr	r3, [pc, #252]	@ (80088e0 <HAL_RCC_ClockConfig+0x358>)
 80087e2:	699b      	ldr	r3, [r3, #24]
 80087e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d208      	bcs.n	80087fe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80087ec:	4b3c      	ldr	r3, [pc, #240]	@ (80088e0 <HAL_RCC_ClockConfig+0x358>)
 80087ee:	699b      	ldr	r3, [r3, #24]
 80087f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	4939      	ldr	r1, [pc, #228]	@ (80088e0 <HAL_RCC_ClockConfig+0x358>)
 80087fa:	4313      	orrs	r3, r2
 80087fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 0308 	and.w	r3, r3, #8
 8008806:	2b00      	cmp	r3, #0
 8008808:	d010      	beq.n	800882c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	695a      	ldr	r2, [r3, #20]
 800880e:	4b34      	ldr	r3, [pc, #208]	@ (80088e0 <HAL_RCC_ClockConfig+0x358>)
 8008810:	69db      	ldr	r3, [r3, #28]
 8008812:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008816:	429a      	cmp	r2, r3
 8008818:	d208      	bcs.n	800882c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800881a:	4b31      	ldr	r3, [pc, #196]	@ (80088e0 <HAL_RCC_ClockConfig+0x358>)
 800881c:	69db      	ldr	r3, [r3, #28]
 800881e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	695b      	ldr	r3, [r3, #20]
 8008826:	492e      	ldr	r1, [pc, #184]	@ (80088e0 <HAL_RCC_ClockConfig+0x358>)
 8008828:	4313      	orrs	r3, r2
 800882a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 0310 	and.w	r3, r3, #16
 8008834:	2b00      	cmp	r3, #0
 8008836:	d010      	beq.n	800885a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	699a      	ldr	r2, [r3, #24]
 800883c:	4b28      	ldr	r3, [pc, #160]	@ (80088e0 <HAL_RCC_ClockConfig+0x358>)
 800883e:	69db      	ldr	r3, [r3, #28]
 8008840:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008844:	429a      	cmp	r2, r3
 8008846:	d208      	bcs.n	800885a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008848:	4b25      	ldr	r3, [pc, #148]	@ (80088e0 <HAL_RCC_ClockConfig+0x358>)
 800884a:	69db      	ldr	r3, [r3, #28]
 800884c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	699b      	ldr	r3, [r3, #24]
 8008854:	4922      	ldr	r1, [pc, #136]	@ (80088e0 <HAL_RCC_ClockConfig+0x358>)
 8008856:	4313      	orrs	r3, r2
 8008858:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f003 0320 	and.w	r3, r3, #32
 8008862:	2b00      	cmp	r3, #0
 8008864:	d010      	beq.n	8008888 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	69da      	ldr	r2, [r3, #28]
 800886a:	4b1d      	ldr	r3, [pc, #116]	@ (80088e0 <HAL_RCC_ClockConfig+0x358>)
 800886c:	6a1b      	ldr	r3, [r3, #32]
 800886e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008872:	429a      	cmp	r2, r3
 8008874:	d208      	bcs.n	8008888 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008876:	4b1a      	ldr	r3, [pc, #104]	@ (80088e0 <HAL_RCC_ClockConfig+0x358>)
 8008878:	6a1b      	ldr	r3, [r3, #32]
 800887a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	69db      	ldr	r3, [r3, #28]
 8008882:	4917      	ldr	r1, [pc, #92]	@ (80088e0 <HAL_RCC_ClockConfig+0x358>)
 8008884:	4313      	orrs	r3, r2
 8008886:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008888:	f000 f834 	bl	80088f4 <HAL_RCC_GetSysClockFreq>
 800888c:	4602      	mov	r2, r0
 800888e:	4b14      	ldr	r3, [pc, #80]	@ (80088e0 <HAL_RCC_ClockConfig+0x358>)
 8008890:	699b      	ldr	r3, [r3, #24]
 8008892:	0a1b      	lsrs	r3, r3, #8
 8008894:	f003 030f 	and.w	r3, r3, #15
 8008898:	4912      	ldr	r1, [pc, #72]	@ (80088e4 <HAL_RCC_ClockConfig+0x35c>)
 800889a:	5ccb      	ldrb	r3, [r1, r3]
 800889c:	f003 031f 	and.w	r3, r3, #31
 80088a0:	fa22 f303 	lsr.w	r3, r2, r3
 80088a4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80088a6:	4b0e      	ldr	r3, [pc, #56]	@ (80088e0 <HAL_RCC_ClockConfig+0x358>)
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	f003 030f 	and.w	r3, r3, #15
 80088ae:	4a0d      	ldr	r2, [pc, #52]	@ (80088e4 <HAL_RCC_ClockConfig+0x35c>)
 80088b0:	5cd3      	ldrb	r3, [r2, r3]
 80088b2:	f003 031f 	and.w	r3, r3, #31
 80088b6:	693a      	ldr	r2, [r7, #16]
 80088b8:	fa22 f303 	lsr.w	r3, r2, r3
 80088bc:	4a0a      	ldr	r2, [pc, #40]	@ (80088e8 <HAL_RCC_ClockConfig+0x360>)
 80088be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80088c0:	4a0a      	ldr	r2, [pc, #40]	@ (80088ec <HAL_RCC_ClockConfig+0x364>)
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80088c6:	4b0a      	ldr	r3, [pc, #40]	@ (80088f0 <HAL_RCC_ClockConfig+0x368>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7f9 f996 	bl	8001bfc <HAL_InitTick>
 80088d0:	4603      	mov	r3, r0
 80088d2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80088d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3718      	adds	r7, #24
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	58024400 	.word	0x58024400
 80088e4:	08012020 	.word	0x08012020
 80088e8:	2400005c 	.word	0x2400005c
 80088ec:	24000058 	.word	0x24000058
 80088f0:	24000060 	.word	0x24000060

080088f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b089      	sub	sp, #36	@ 0x24
 80088f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80088fa:	4bb3      	ldr	r3, [pc, #716]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008902:	2b18      	cmp	r3, #24
 8008904:	f200 8155 	bhi.w	8008bb2 <HAL_RCC_GetSysClockFreq+0x2be>
 8008908:	a201      	add	r2, pc, #4	@ (adr r2, 8008910 <HAL_RCC_GetSysClockFreq+0x1c>)
 800890a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890e:	bf00      	nop
 8008910:	08008975 	.word	0x08008975
 8008914:	08008bb3 	.word	0x08008bb3
 8008918:	08008bb3 	.word	0x08008bb3
 800891c:	08008bb3 	.word	0x08008bb3
 8008920:	08008bb3 	.word	0x08008bb3
 8008924:	08008bb3 	.word	0x08008bb3
 8008928:	08008bb3 	.word	0x08008bb3
 800892c:	08008bb3 	.word	0x08008bb3
 8008930:	0800899b 	.word	0x0800899b
 8008934:	08008bb3 	.word	0x08008bb3
 8008938:	08008bb3 	.word	0x08008bb3
 800893c:	08008bb3 	.word	0x08008bb3
 8008940:	08008bb3 	.word	0x08008bb3
 8008944:	08008bb3 	.word	0x08008bb3
 8008948:	08008bb3 	.word	0x08008bb3
 800894c:	08008bb3 	.word	0x08008bb3
 8008950:	080089a1 	.word	0x080089a1
 8008954:	08008bb3 	.word	0x08008bb3
 8008958:	08008bb3 	.word	0x08008bb3
 800895c:	08008bb3 	.word	0x08008bb3
 8008960:	08008bb3 	.word	0x08008bb3
 8008964:	08008bb3 	.word	0x08008bb3
 8008968:	08008bb3 	.word	0x08008bb3
 800896c:	08008bb3 	.word	0x08008bb3
 8008970:	080089a7 	.word	0x080089a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008974:	4b94      	ldr	r3, [pc, #592]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 0320 	and.w	r3, r3, #32
 800897c:	2b00      	cmp	r3, #0
 800897e:	d009      	beq.n	8008994 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008980:	4b91      	ldr	r3, [pc, #580]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	08db      	lsrs	r3, r3, #3
 8008986:	f003 0303 	and.w	r3, r3, #3
 800898a:	4a90      	ldr	r2, [pc, #576]	@ (8008bcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800898c:	fa22 f303 	lsr.w	r3, r2, r3
 8008990:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008992:	e111      	b.n	8008bb8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008994:	4b8d      	ldr	r3, [pc, #564]	@ (8008bcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008996:	61bb      	str	r3, [r7, #24]
      break;
 8008998:	e10e      	b.n	8008bb8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800899a:	4b8d      	ldr	r3, [pc, #564]	@ (8008bd0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800899c:	61bb      	str	r3, [r7, #24]
      break;
 800899e:	e10b      	b.n	8008bb8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80089a0:	4b8c      	ldr	r3, [pc, #560]	@ (8008bd4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80089a2:	61bb      	str	r3, [r7, #24]
      break;
 80089a4:	e108      	b.n	8008bb8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089a6:	4b88      	ldr	r3, [pc, #544]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089aa:	f003 0303 	and.w	r3, r3, #3
 80089ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80089b0:	4b85      	ldr	r3, [pc, #532]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089b4:	091b      	lsrs	r3, r3, #4
 80089b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80089ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80089bc:	4b82      	ldr	r3, [pc, #520]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089c0:	f003 0301 	and.w	r3, r3, #1
 80089c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80089c6:	4b80      	ldr	r3, [pc, #512]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089ca:	08db      	lsrs	r3, r3, #3
 80089cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	fb02 f303 	mul.w	r3, r2, r3
 80089d6:	ee07 3a90 	vmov	s15, r3
 80089da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	f000 80e1 	beq.w	8008bac <HAL_RCC_GetSysClockFreq+0x2b8>
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	2b02      	cmp	r3, #2
 80089ee:	f000 8083 	beq.w	8008af8 <HAL_RCC_GetSysClockFreq+0x204>
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	2b02      	cmp	r3, #2
 80089f6:	f200 80a1 	bhi.w	8008b3c <HAL_RCC_GetSysClockFreq+0x248>
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d003      	beq.n	8008a08 <HAL_RCC_GetSysClockFreq+0x114>
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d056      	beq.n	8008ab4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008a06:	e099      	b.n	8008b3c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a08:	4b6f      	ldr	r3, [pc, #444]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f003 0320 	and.w	r3, r3, #32
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d02d      	beq.n	8008a70 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a14:	4b6c      	ldr	r3, [pc, #432]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	08db      	lsrs	r3, r3, #3
 8008a1a:	f003 0303 	and.w	r3, r3, #3
 8008a1e:	4a6b      	ldr	r2, [pc, #428]	@ (8008bcc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008a20:	fa22 f303 	lsr.w	r3, r2, r3
 8008a24:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	ee07 3a90 	vmov	s15, r3
 8008a2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	ee07 3a90 	vmov	s15, r3
 8008a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a3e:	4b62      	ldr	r3, [pc, #392]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a46:	ee07 3a90 	vmov	s15, r3
 8008a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a52:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008bd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a6a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008a6e:	e087      	b.n	8008b80 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	ee07 3a90 	vmov	s15, r3
 8008a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a7a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008bdc <HAL_RCC_GetSysClockFreq+0x2e8>
 8008a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a82:	4b51      	ldr	r3, [pc, #324]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a8a:	ee07 3a90 	vmov	s15, r3
 8008a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a92:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a96:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008bd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008ab2:	e065      	b.n	8008b80 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	ee07 3a90 	vmov	s15, r3
 8008aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008abe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008be0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ac6:	4b40      	ldr	r3, [pc, #256]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ace:	ee07 3a90 	vmov	s15, r3
 8008ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ad6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ada:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008bd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ae6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008af2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008af6:	e043      	b.n	8008b80 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	ee07 3a90 	vmov	s15, r3
 8008afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b02:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008be4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b0a:	4b2f      	ldr	r3, [pc, #188]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b12:	ee07 3a90 	vmov	s15, r3
 8008b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b1e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008bd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b3a:	e021      	b.n	8008b80 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	ee07 3a90 	vmov	s15, r3
 8008b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b46:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008be0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b56:	ee07 3a90 	vmov	s15, r3
 8008b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b62:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008bd8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b7e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008b80:	4b11      	ldr	r3, [pc, #68]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b84:	0a5b      	lsrs	r3, r3, #9
 8008b86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	ee07 3a90 	vmov	s15, r3
 8008b94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008b98:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ba0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ba4:	ee17 3a90 	vmov	r3, s15
 8008ba8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008baa:	e005      	b.n	8008bb8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008bac:	2300      	movs	r3, #0
 8008bae:	61bb      	str	r3, [r7, #24]
      break;
 8008bb0:	e002      	b.n	8008bb8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008bb2:	4b07      	ldr	r3, [pc, #28]	@ (8008bd0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008bb4:	61bb      	str	r3, [r7, #24]
      break;
 8008bb6:	bf00      	nop
  }

  return sysclockfreq;
 8008bb8:	69bb      	ldr	r3, [r7, #24]
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3724      	adds	r7, #36	@ 0x24
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr
 8008bc6:	bf00      	nop
 8008bc8:	58024400 	.word	0x58024400
 8008bcc:	03d09000 	.word	0x03d09000
 8008bd0:	003d0900 	.word	0x003d0900
 8008bd4:	017d7840 	.word	0x017d7840
 8008bd8:	46000000 	.word	0x46000000
 8008bdc:	4c742400 	.word	0x4c742400
 8008be0:	4a742400 	.word	0x4a742400
 8008be4:	4bbebc20 	.word	0x4bbebc20

08008be8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008bee:	f7ff fe81 	bl	80088f4 <HAL_RCC_GetSysClockFreq>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	4b10      	ldr	r3, [pc, #64]	@ (8008c38 <HAL_RCC_GetHCLKFreq+0x50>)
 8008bf6:	699b      	ldr	r3, [r3, #24]
 8008bf8:	0a1b      	lsrs	r3, r3, #8
 8008bfa:	f003 030f 	and.w	r3, r3, #15
 8008bfe:	490f      	ldr	r1, [pc, #60]	@ (8008c3c <HAL_RCC_GetHCLKFreq+0x54>)
 8008c00:	5ccb      	ldrb	r3, [r1, r3]
 8008c02:	f003 031f 	and.w	r3, r3, #31
 8008c06:	fa22 f303 	lsr.w	r3, r2, r3
 8008c0a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8008c38 <HAL_RCC_GetHCLKFreq+0x50>)
 8008c0e:	699b      	ldr	r3, [r3, #24]
 8008c10:	f003 030f 	and.w	r3, r3, #15
 8008c14:	4a09      	ldr	r2, [pc, #36]	@ (8008c3c <HAL_RCC_GetHCLKFreq+0x54>)
 8008c16:	5cd3      	ldrb	r3, [r2, r3]
 8008c18:	f003 031f 	and.w	r3, r3, #31
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c22:	4a07      	ldr	r2, [pc, #28]	@ (8008c40 <HAL_RCC_GetHCLKFreq+0x58>)
 8008c24:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008c26:	4a07      	ldr	r2, [pc, #28]	@ (8008c44 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008c2c:	4b04      	ldr	r3, [pc, #16]	@ (8008c40 <HAL_RCC_GetHCLKFreq+0x58>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	58024400 	.word	0x58024400
 8008c3c:	08012020 	.word	0x08012020
 8008c40:	2400005c 	.word	0x2400005c
 8008c44:	24000058 	.word	0x24000058

08008c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008c4c:	f7ff ffcc 	bl	8008be8 <HAL_RCC_GetHCLKFreq>
 8008c50:	4602      	mov	r2, r0
 8008c52:	4b06      	ldr	r3, [pc, #24]	@ (8008c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c54:	69db      	ldr	r3, [r3, #28]
 8008c56:	091b      	lsrs	r3, r3, #4
 8008c58:	f003 0307 	and.w	r3, r3, #7
 8008c5c:	4904      	ldr	r1, [pc, #16]	@ (8008c70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008c5e:	5ccb      	ldrb	r3, [r1, r3]
 8008c60:	f003 031f 	and.w	r3, r3, #31
 8008c64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	58024400 	.word	0x58024400
 8008c70:	08012020 	.word	0x08012020

08008c74 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c78:	b0ca      	sub	sp, #296	@ 0x128
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008c80:	2300      	movs	r3, #0
 8008c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008c86:	2300      	movs	r3, #0
 8008c88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c94:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008c98:	2500      	movs	r5, #0
 8008c9a:	ea54 0305 	orrs.w	r3, r4, r5
 8008c9e:	d049      	beq.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ca4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ca6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008caa:	d02f      	beq.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008cac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008cb0:	d828      	bhi.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008cb2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008cb6:	d01a      	beq.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008cb8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008cbc:	d822      	bhi.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d003      	beq.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008cc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008cc6:	d007      	beq.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008cc8:	e01c      	b.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cca:	4bb8      	ldr	r3, [pc, #736]	@ (8008fac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cce:	4ab7      	ldr	r2, [pc, #732]	@ (8008fac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008cd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008cd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008cd6:	e01a      	b.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cdc:	3308      	adds	r3, #8
 8008cde:	2102      	movs	r1, #2
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f002 fb61 	bl	800b3a8 <RCCEx_PLL2_Config>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008cec:	e00f      	b.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cf2:	3328      	adds	r3, #40	@ 0x28
 8008cf4:	2102      	movs	r1, #2
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f002 fc08 	bl	800b50c <RCCEx_PLL3_Config>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d02:	e004      	b.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d0a:	e000      	b.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008d0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d10a      	bne.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008d16:	4ba5      	ldr	r3, [pc, #660]	@ (8008fac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d1a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d24:	4aa1      	ldr	r2, [pc, #644]	@ (8008fac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d26:	430b      	orrs	r3, r1
 8008d28:	6513      	str	r3, [r2, #80]	@ 0x50
 8008d2a:	e003      	b.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008d40:	f04f 0900 	mov.w	r9, #0
 8008d44:	ea58 0309 	orrs.w	r3, r8, r9
 8008d48:	d047      	beq.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d50:	2b04      	cmp	r3, #4
 8008d52:	d82a      	bhi.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008d54:	a201      	add	r2, pc, #4	@ (adr r2, 8008d5c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d5a:	bf00      	nop
 8008d5c:	08008d71 	.word	0x08008d71
 8008d60:	08008d7f 	.word	0x08008d7f
 8008d64:	08008d95 	.word	0x08008d95
 8008d68:	08008db3 	.word	0x08008db3
 8008d6c:	08008db3 	.word	0x08008db3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d70:	4b8e      	ldr	r3, [pc, #568]	@ (8008fac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d74:	4a8d      	ldr	r2, [pc, #564]	@ (8008fac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d7c:	e01a      	b.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d82:	3308      	adds	r3, #8
 8008d84:	2100      	movs	r1, #0
 8008d86:	4618      	mov	r0, r3
 8008d88:	f002 fb0e 	bl	800b3a8 <RCCEx_PLL2_Config>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d92:	e00f      	b.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d98:	3328      	adds	r3, #40	@ 0x28
 8008d9a:	2100      	movs	r1, #0
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f002 fbb5 	bl	800b50c <RCCEx_PLL3_Config>
 8008da2:	4603      	mov	r3, r0
 8008da4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008da8:	e004      	b.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008db0:	e000      	b.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008db2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008db4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d10a      	bne.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008dbc:	4b7b      	ldr	r3, [pc, #492]	@ (8008fac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008dbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dc0:	f023 0107 	bic.w	r1, r3, #7
 8008dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dca:	4a78      	ldr	r2, [pc, #480]	@ (8008fac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008dcc:	430b      	orrs	r3, r1
 8008dce:	6513      	str	r3, [r2, #80]	@ 0x50
 8008dd0:	e003      	b.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008de6:	f04f 0b00 	mov.w	fp, #0
 8008dea:	ea5a 030b 	orrs.w	r3, sl, fp
 8008dee:	d04c      	beq.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008df4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008df6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008dfa:	d030      	beq.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008dfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e00:	d829      	bhi.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008e02:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e04:	d02d      	beq.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008e06:	2bc0      	cmp	r3, #192	@ 0xc0
 8008e08:	d825      	bhi.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008e0a:	2b80      	cmp	r3, #128	@ 0x80
 8008e0c:	d018      	beq.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008e0e:	2b80      	cmp	r3, #128	@ 0x80
 8008e10:	d821      	bhi.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d002      	beq.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008e16:	2b40      	cmp	r3, #64	@ 0x40
 8008e18:	d007      	beq.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008e1a:	e01c      	b.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e1c:	4b63      	ldr	r3, [pc, #396]	@ (8008fac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e20:	4a62      	ldr	r2, [pc, #392]	@ (8008fac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008e28:	e01c      	b.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e2e:	3308      	adds	r3, #8
 8008e30:	2100      	movs	r1, #0
 8008e32:	4618      	mov	r0, r3
 8008e34:	f002 fab8 	bl	800b3a8 <RCCEx_PLL2_Config>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008e3e:	e011      	b.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e44:	3328      	adds	r3, #40	@ 0x28
 8008e46:	2100      	movs	r1, #0
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f002 fb5f 	bl	800b50c <RCCEx_PLL3_Config>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008e54:	e006      	b.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e5c:	e002      	b.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008e5e:	bf00      	nop
 8008e60:	e000      	b.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008e62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d10a      	bne.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008e6c:	4b4f      	ldr	r3, [pc, #316]	@ (8008fac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e70:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e7a:	4a4c      	ldr	r2, [pc, #304]	@ (8008fac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e7c:	430b      	orrs	r3, r1
 8008e7e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008e80:	e003      	b.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e92:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008e96:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008ea0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	d053      	beq.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008eb2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008eb6:	d035      	beq.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008eb8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008ebc:	d82e      	bhi.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008ebe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008ec2:	d031      	beq.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008ec4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008ec8:	d828      	bhi.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008eca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008ece:	d01a      	beq.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008ed0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008ed4:	d822      	bhi.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d003      	beq.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008eda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ede:	d007      	beq.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008ee0:	e01c      	b.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ee2:	4b32      	ldr	r3, [pc, #200]	@ (8008fac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee6:	4a31      	ldr	r2, [pc, #196]	@ (8008fac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ee8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008eec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008eee:	e01c      	b.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ef4:	3308      	adds	r3, #8
 8008ef6:	2100      	movs	r1, #0
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f002 fa55 	bl	800b3a8 <RCCEx_PLL2_Config>
 8008efe:	4603      	mov	r3, r0
 8008f00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008f04:	e011      	b.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f0a:	3328      	adds	r3, #40	@ 0x28
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f002 fafc 	bl	800b50c <RCCEx_PLL3_Config>
 8008f14:	4603      	mov	r3, r0
 8008f16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f1a:	e006      	b.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f22:	e002      	b.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008f24:	bf00      	nop
 8008f26:	e000      	b.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008f28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d10b      	bne.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008f32:	4b1e      	ldr	r3, [pc, #120]	@ (8008fac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f36:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008f42:	4a1a      	ldr	r2, [pc, #104]	@ (8008fac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f44:	430b      	orrs	r3, r1
 8008f46:	6593      	str	r3, [r2, #88]	@ 0x58
 8008f48:	e003      	b.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008f5e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008f62:	2300      	movs	r3, #0
 8008f64:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008f68:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	d056      	beq.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008f7a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008f7e:	d038      	beq.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008f80:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008f84:	d831      	bhi.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008f86:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008f8a:	d034      	beq.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008f8c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008f90:	d82b      	bhi.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008f92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f96:	d01d      	beq.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008f98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f9c:	d825      	bhi.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d006      	beq.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008fa2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008fa6:	d00a      	beq.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008fa8:	e01f      	b.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008faa:	bf00      	nop
 8008fac:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fb0:	4ba2      	ldr	r3, [pc, #648]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb4:	4aa1      	ldr	r2, [pc, #644]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008fb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008fba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008fbc:	e01c      	b.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fc2:	3308      	adds	r3, #8
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f002 f9ee 	bl	800b3a8 <RCCEx_PLL2_Config>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008fd2:	e011      	b.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fd8:	3328      	adds	r3, #40	@ 0x28
 8008fda:	2100      	movs	r1, #0
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f002 fa95 	bl	800b50c <RCCEx_PLL3_Config>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008fe8:	e006      	b.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ff0:	e002      	b.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008ff2:	bf00      	nop
 8008ff4:	e000      	b.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008ff6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ff8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d10b      	bne.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009000:	4b8e      	ldr	r3, [pc, #568]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009004:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800900c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009010:	4a8a      	ldr	r2, [pc, #552]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009012:	430b      	orrs	r3, r1
 8009014:	6593      	str	r3, [r2, #88]	@ 0x58
 8009016:	e003      	b.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009018:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800901c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009028:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800902c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009030:	2300      	movs	r3, #0
 8009032:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009036:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800903a:	460b      	mov	r3, r1
 800903c:	4313      	orrs	r3, r2
 800903e:	d03a      	beq.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009046:	2b30      	cmp	r3, #48	@ 0x30
 8009048:	d01f      	beq.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800904a:	2b30      	cmp	r3, #48	@ 0x30
 800904c:	d819      	bhi.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800904e:	2b20      	cmp	r3, #32
 8009050:	d00c      	beq.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009052:	2b20      	cmp	r3, #32
 8009054:	d815      	bhi.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009056:	2b00      	cmp	r3, #0
 8009058:	d019      	beq.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800905a:	2b10      	cmp	r3, #16
 800905c:	d111      	bne.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800905e:	4b77      	ldr	r3, [pc, #476]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009062:	4a76      	ldr	r2, [pc, #472]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009064:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009068:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800906a:	e011      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800906c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009070:	3308      	adds	r3, #8
 8009072:	2102      	movs	r1, #2
 8009074:	4618      	mov	r0, r3
 8009076:	f002 f997 	bl	800b3a8 <RCCEx_PLL2_Config>
 800907a:	4603      	mov	r3, r0
 800907c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009080:	e006      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009088:	e002      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800908a:	bf00      	nop
 800908c:	e000      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800908e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009090:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009094:	2b00      	cmp	r3, #0
 8009096:	d10a      	bne.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009098:	4b68      	ldr	r3, [pc, #416]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800909a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800909c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80090a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090a6:	4a65      	ldr	r2, [pc, #404]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80090a8:	430b      	orrs	r3, r1
 80090aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80090ac:	e003      	b.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80090b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090be:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80090c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80090c6:	2300      	movs	r3, #0
 80090c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80090cc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80090d0:	460b      	mov	r3, r1
 80090d2:	4313      	orrs	r3, r2
 80090d4:	d051      	beq.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80090d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80090e0:	d035      	beq.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80090e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80090e6:	d82e      	bhi.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80090e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80090ec:	d031      	beq.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80090ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80090f2:	d828      	bhi.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80090f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090f8:	d01a      	beq.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80090fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090fe:	d822      	bhi.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009100:	2b00      	cmp	r3, #0
 8009102:	d003      	beq.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009104:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009108:	d007      	beq.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800910a:	e01c      	b.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800910c:	4b4b      	ldr	r3, [pc, #300]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800910e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009110:	4a4a      	ldr	r2, [pc, #296]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009112:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009116:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009118:	e01c      	b.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800911a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800911e:	3308      	adds	r3, #8
 8009120:	2100      	movs	r1, #0
 8009122:	4618      	mov	r0, r3
 8009124:	f002 f940 	bl	800b3a8 <RCCEx_PLL2_Config>
 8009128:	4603      	mov	r3, r0
 800912a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800912e:	e011      	b.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009134:	3328      	adds	r3, #40	@ 0x28
 8009136:	2100      	movs	r1, #0
 8009138:	4618      	mov	r0, r3
 800913a:	f002 f9e7 	bl	800b50c <RCCEx_PLL3_Config>
 800913e:	4603      	mov	r3, r0
 8009140:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009144:	e006      	b.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800914c:	e002      	b.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800914e:	bf00      	nop
 8009150:	e000      	b.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009152:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009154:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009158:	2b00      	cmp	r3, #0
 800915a:	d10a      	bne.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800915c:	4b37      	ldr	r3, [pc, #220]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800915e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009160:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800916a:	4a34      	ldr	r2, [pc, #208]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800916c:	430b      	orrs	r3, r1
 800916e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009170:	e003      	b.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009172:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009176:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800917a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800917e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009182:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009186:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800918a:	2300      	movs	r3, #0
 800918c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009190:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009194:	460b      	mov	r3, r1
 8009196:	4313      	orrs	r3, r2
 8009198:	d056      	beq.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800919a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800919e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80091a4:	d033      	beq.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80091a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80091aa:	d82c      	bhi.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80091ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80091b0:	d02f      	beq.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80091b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80091b6:	d826      	bhi.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80091b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80091bc:	d02b      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80091be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80091c2:	d820      	bhi.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80091c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091c8:	d012      	beq.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80091ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091ce:	d81a      	bhi.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d022      	beq.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80091d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091d8:	d115      	bne.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80091da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091de:	3308      	adds	r3, #8
 80091e0:	2101      	movs	r1, #1
 80091e2:	4618      	mov	r0, r3
 80091e4:	f002 f8e0 	bl	800b3a8 <RCCEx_PLL2_Config>
 80091e8:	4603      	mov	r3, r0
 80091ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80091ee:	e015      	b.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80091f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091f4:	3328      	adds	r3, #40	@ 0x28
 80091f6:	2101      	movs	r1, #1
 80091f8:	4618      	mov	r0, r3
 80091fa:	f002 f987 	bl	800b50c <RCCEx_PLL3_Config>
 80091fe:	4603      	mov	r3, r0
 8009200:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009204:	e00a      	b.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009206:	2301      	movs	r3, #1
 8009208:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800920c:	e006      	b.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800920e:	bf00      	nop
 8009210:	e004      	b.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009212:	bf00      	nop
 8009214:	e002      	b.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009216:	bf00      	nop
 8009218:	e000      	b.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800921a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800921c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009220:	2b00      	cmp	r3, #0
 8009222:	d10d      	bne.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009224:	4b05      	ldr	r3, [pc, #20]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009228:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800922c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009230:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009232:	4a02      	ldr	r2, [pc, #8]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009234:	430b      	orrs	r3, r1
 8009236:	6513      	str	r3, [r2, #80]	@ 0x50
 8009238:	e006      	b.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800923a:	bf00      	nop
 800923c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009240:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009244:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800924c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009250:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009254:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009258:	2300      	movs	r3, #0
 800925a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800925e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009262:	460b      	mov	r3, r1
 8009264:	4313      	orrs	r3, r2
 8009266:	d055      	beq.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800926c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009270:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009274:	d033      	beq.n	80092de <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009276:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800927a:	d82c      	bhi.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800927c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009280:	d02f      	beq.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009286:	d826      	bhi.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009288:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800928c:	d02b      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800928e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009292:	d820      	bhi.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009294:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009298:	d012      	beq.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800929a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800929e:	d81a      	bhi.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d022      	beq.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x676>
 80092a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092a8:	d115      	bne.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80092aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092ae:	3308      	adds	r3, #8
 80092b0:	2101      	movs	r1, #1
 80092b2:	4618      	mov	r0, r3
 80092b4:	f002 f878 	bl	800b3a8 <RCCEx_PLL2_Config>
 80092b8:	4603      	mov	r3, r0
 80092ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80092be:	e015      	b.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80092c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092c4:	3328      	adds	r3, #40	@ 0x28
 80092c6:	2101      	movs	r1, #1
 80092c8:	4618      	mov	r0, r3
 80092ca:	f002 f91f 	bl	800b50c <RCCEx_PLL3_Config>
 80092ce:	4603      	mov	r3, r0
 80092d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80092d4:	e00a      	b.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80092dc:	e006      	b.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80092de:	bf00      	nop
 80092e0:	e004      	b.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80092e2:	bf00      	nop
 80092e4:	e002      	b.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80092e6:	bf00      	nop
 80092e8:	e000      	b.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80092ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d10b      	bne.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80092f4:	4ba3      	ldr	r3, [pc, #652]	@ (8009584 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092f8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80092fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009300:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009304:	4a9f      	ldr	r2, [pc, #636]	@ (8009584 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009306:	430b      	orrs	r3, r1
 8009308:	6593      	str	r3, [r2, #88]	@ 0x58
 800930a:	e003      	b.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800930c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009310:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009320:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009324:	2300      	movs	r3, #0
 8009326:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800932a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800932e:	460b      	mov	r3, r1
 8009330:	4313      	orrs	r3, r2
 8009332:	d037      	beq.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800933a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800933e:	d00e      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009340:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009344:	d816      	bhi.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009346:	2b00      	cmp	r3, #0
 8009348:	d018      	beq.n	800937c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800934a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800934e:	d111      	bne.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009350:	4b8c      	ldr	r3, [pc, #560]	@ (8009584 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009354:	4a8b      	ldr	r2, [pc, #556]	@ (8009584 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009356:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800935a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800935c:	e00f      	b.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800935e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009362:	3308      	adds	r3, #8
 8009364:	2101      	movs	r1, #1
 8009366:	4618      	mov	r0, r3
 8009368:	f002 f81e 	bl	800b3a8 <RCCEx_PLL2_Config>
 800936c:	4603      	mov	r3, r0
 800936e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009372:	e004      	b.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800937a:	e000      	b.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800937c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800937e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009382:	2b00      	cmp	r3, #0
 8009384:	d10a      	bne.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009386:	4b7f      	ldr	r3, [pc, #508]	@ (8009584 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009388:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800938a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800938e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009394:	4a7b      	ldr	r2, [pc, #492]	@ (8009584 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009396:	430b      	orrs	r3, r1
 8009398:	6513      	str	r3, [r2, #80]	@ 0x50
 800939a:	e003      	b.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800939c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80093a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ac:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80093b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80093b4:	2300      	movs	r3, #0
 80093b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80093ba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80093be:	460b      	mov	r3, r1
 80093c0:	4313      	orrs	r3, r2
 80093c2:	d039      	beq.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80093c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093ca:	2b03      	cmp	r3, #3
 80093cc:	d81c      	bhi.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80093ce:	a201      	add	r2, pc, #4	@ (adr r2, 80093d4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80093d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d4:	08009411 	.word	0x08009411
 80093d8:	080093e5 	.word	0x080093e5
 80093dc:	080093f3 	.word	0x080093f3
 80093e0:	08009411 	.word	0x08009411
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093e4:	4b67      	ldr	r3, [pc, #412]	@ (8009584 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093e8:	4a66      	ldr	r2, [pc, #408]	@ (8009584 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80093ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80093f0:	e00f      	b.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80093f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093f6:	3308      	adds	r3, #8
 80093f8:	2102      	movs	r1, #2
 80093fa:	4618      	mov	r0, r3
 80093fc:	f001 ffd4 	bl	800b3a8 <RCCEx_PLL2_Config>
 8009400:	4603      	mov	r3, r0
 8009402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009406:	e004      	b.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009408:	2301      	movs	r3, #1
 800940a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800940e:	e000      	b.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009410:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009412:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009416:	2b00      	cmp	r3, #0
 8009418:	d10a      	bne.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800941a:	4b5a      	ldr	r3, [pc, #360]	@ (8009584 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800941c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800941e:	f023 0103 	bic.w	r1, r3, #3
 8009422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009426:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009428:	4a56      	ldr	r2, [pc, #344]	@ (8009584 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800942a:	430b      	orrs	r3, r1
 800942c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800942e:	e003      	b.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009430:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009434:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800943c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009440:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009444:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009448:	2300      	movs	r3, #0
 800944a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800944e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009452:	460b      	mov	r3, r1
 8009454:	4313      	orrs	r3, r2
 8009456:	f000 809f 	beq.w	8009598 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800945a:	4b4b      	ldr	r3, [pc, #300]	@ (8009588 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a4a      	ldr	r2, [pc, #296]	@ (8009588 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009464:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009466:	f7f8 fc13 	bl	8001c90 <HAL_GetTick>
 800946a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800946e:	e00b      	b.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009470:	f7f8 fc0e 	bl	8001c90 <HAL_GetTick>
 8009474:	4602      	mov	r2, r0
 8009476:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800947a:	1ad3      	subs	r3, r2, r3
 800947c:	2b64      	cmp	r3, #100	@ 0x64
 800947e:	d903      	bls.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009480:	2303      	movs	r3, #3
 8009482:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009486:	e005      	b.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009488:	4b3f      	ldr	r3, [pc, #252]	@ (8009588 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009490:	2b00      	cmp	r3, #0
 8009492:	d0ed      	beq.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009494:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009498:	2b00      	cmp	r3, #0
 800949a:	d179      	bne.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800949c:	4b39      	ldr	r3, [pc, #228]	@ (8009584 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800949e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80094a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80094a8:	4053      	eors	r3, r2
 80094aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d015      	beq.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80094b2:	4b34      	ldr	r3, [pc, #208]	@ (8009584 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094ba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80094be:	4b31      	ldr	r3, [pc, #196]	@ (8009584 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094c2:	4a30      	ldr	r2, [pc, #192]	@ (8009584 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094c8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80094ca:	4b2e      	ldr	r3, [pc, #184]	@ (8009584 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094ce:	4a2d      	ldr	r2, [pc, #180]	@ (8009584 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80094d4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80094d6:	4a2b      	ldr	r2, [pc, #172]	@ (8009584 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80094dc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80094de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80094e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094ea:	d118      	bne.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094ec:	f7f8 fbd0 	bl	8001c90 <HAL_GetTick>
 80094f0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80094f4:	e00d      	b.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094f6:	f7f8 fbcb 	bl	8001c90 <HAL_GetTick>
 80094fa:	4602      	mov	r2, r0
 80094fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009500:	1ad2      	subs	r2, r2, r3
 8009502:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009506:	429a      	cmp	r2, r3
 8009508:	d903      	bls.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800950a:	2303      	movs	r3, #3
 800950c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8009510:	e005      	b.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009512:	4b1c      	ldr	r3, [pc, #112]	@ (8009584 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009516:	f003 0302 	and.w	r3, r3, #2
 800951a:	2b00      	cmp	r3, #0
 800951c:	d0eb      	beq.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800951e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009522:	2b00      	cmp	r3, #0
 8009524:	d129      	bne.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800952a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800952e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009532:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009536:	d10e      	bne.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009538:	4b12      	ldr	r3, [pc, #72]	@ (8009584 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800953a:	691b      	ldr	r3, [r3, #16]
 800953c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009544:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009548:	091a      	lsrs	r2, r3, #4
 800954a:	4b10      	ldr	r3, [pc, #64]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800954c:	4013      	ands	r3, r2
 800954e:	4a0d      	ldr	r2, [pc, #52]	@ (8009584 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009550:	430b      	orrs	r3, r1
 8009552:	6113      	str	r3, [r2, #16]
 8009554:	e005      	b.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009556:	4b0b      	ldr	r3, [pc, #44]	@ (8009584 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009558:	691b      	ldr	r3, [r3, #16]
 800955a:	4a0a      	ldr	r2, [pc, #40]	@ (8009584 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800955c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009560:	6113      	str	r3, [r2, #16]
 8009562:	4b08      	ldr	r3, [pc, #32]	@ (8009584 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009564:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800956a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800956e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009572:	4a04      	ldr	r2, [pc, #16]	@ (8009584 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009574:	430b      	orrs	r3, r1
 8009576:	6713      	str	r3, [r2, #112]	@ 0x70
 8009578:	e00e      	b.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800957a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800957e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8009582:	e009      	b.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009584:	58024400 	.word	0x58024400
 8009588:	58024800 	.word	0x58024800
 800958c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009590:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009594:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800959c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a0:	f002 0301 	and.w	r3, r2, #1
 80095a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80095a8:	2300      	movs	r3, #0
 80095aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80095ae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80095b2:	460b      	mov	r3, r1
 80095b4:	4313      	orrs	r3, r2
 80095b6:	f000 8089 	beq.w	80096cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80095ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80095c0:	2b28      	cmp	r3, #40	@ 0x28
 80095c2:	d86b      	bhi.n	800969c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80095c4:	a201      	add	r2, pc, #4	@ (adr r2, 80095cc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80095c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ca:	bf00      	nop
 80095cc:	080096a5 	.word	0x080096a5
 80095d0:	0800969d 	.word	0x0800969d
 80095d4:	0800969d 	.word	0x0800969d
 80095d8:	0800969d 	.word	0x0800969d
 80095dc:	0800969d 	.word	0x0800969d
 80095e0:	0800969d 	.word	0x0800969d
 80095e4:	0800969d 	.word	0x0800969d
 80095e8:	0800969d 	.word	0x0800969d
 80095ec:	08009671 	.word	0x08009671
 80095f0:	0800969d 	.word	0x0800969d
 80095f4:	0800969d 	.word	0x0800969d
 80095f8:	0800969d 	.word	0x0800969d
 80095fc:	0800969d 	.word	0x0800969d
 8009600:	0800969d 	.word	0x0800969d
 8009604:	0800969d 	.word	0x0800969d
 8009608:	0800969d 	.word	0x0800969d
 800960c:	08009687 	.word	0x08009687
 8009610:	0800969d 	.word	0x0800969d
 8009614:	0800969d 	.word	0x0800969d
 8009618:	0800969d 	.word	0x0800969d
 800961c:	0800969d 	.word	0x0800969d
 8009620:	0800969d 	.word	0x0800969d
 8009624:	0800969d 	.word	0x0800969d
 8009628:	0800969d 	.word	0x0800969d
 800962c:	080096a5 	.word	0x080096a5
 8009630:	0800969d 	.word	0x0800969d
 8009634:	0800969d 	.word	0x0800969d
 8009638:	0800969d 	.word	0x0800969d
 800963c:	0800969d 	.word	0x0800969d
 8009640:	0800969d 	.word	0x0800969d
 8009644:	0800969d 	.word	0x0800969d
 8009648:	0800969d 	.word	0x0800969d
 800964c:	080096a5 	.word	0x080096a5
 8009650:	0800969d 	.word	0x0800969d
 8009654:	0800969d 	.word	0x0800969d
 8009658:	0800969d 	.word	0x0800969d
 800965c:	0800969d 	.word	0x0800969d
 8009660:	0800969d 	.word	0x0800969d
 8009664:	0800969d 	.word	0x0800969d
 8009668:	0800969d 	.word	0x0800969d
 800966c:	080096a5 	.word	0x080096a5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009674:	3308      	adds	r3, #8
 8009676:	2101      	movs	r1, #1
 8009678:	4618      	mov	r0, r3
 800967a:	f001 fe95 	bl	800b3a8 <RCCEx_PLL2_Config>
 800967e:	4603      	mov	r3, r0
 8009680:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009684:	e00f      	b.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800968a:	3328      	adds	r3, #40	@ 0x28
 800968c:	2101      	movs	r1, #1
 800968e:	4618      	mov	r0, r3
 8009690:	f001 ff3c 	bl	800b50c <RCCEx_PLL3_Config>
 8009694:	4603      	mov	r3, r0
 8009696:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800969a:	e004      	b.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800969c:	2301      	movs	r3, #1
 800969e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80096a2:	e000      	b.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80096a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d10a      	bne.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80096ae:	4bbf      	ldr	r3, [pc, #764]	@ (80099ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80096b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096b2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80096b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80096bc:	4abb      	ldr	r2, [pc, #748]	@ (80099ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80096be:	430b      	orrs	r3, r1
 80096c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80096c2:	e003      	b.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80096cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d4:	f002 0302 	and.w	r3, r2, #2
 80096d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80096dc:	2300      	movs	r3, #0
 80096de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80096e2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80096e6:	460b      	mov	r3, r1
 80096e8:	4313      	orrs	r3, r2
 80096ea:	d041      	beq.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80096ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80096f2:	2b05      	cmp	r3, #5
 80096f4:	d824      	bhi.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80096f6:	a201      	add	r2, pc, #4	@ (adr r2, 80096fc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80096f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fc:	08009749 	.word	0x08009749
 8009700:	08009715 	.word	0x08009715
 8009704:	0800972b 	.word	0x0800972b
 8009708:	08009749 	.word	0x08009749
 800970c:	08009749 	.word	0x08009749
 8009710:	08009749 	.word	0x08009749
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009718:	3308      	adds	r3, #8
 800971a:	2101      	movs	r1, #1
 800971c:	4618      	mov	r0, r3
 800971e:	f001 fe43 	bl	800b3a8 <RCCEx_PLL2_Config>
 8009722:	4603      	mov	r3, r0
 8009724:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009728:	e00f      	b.n	800974a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800972a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800972e:	3328      	adds	r3, #40	@ 0x28
 8009730:	2101      	movs	r1, #1
 8009732:	4618      	mov	r0, r3
 8009734:	f001 feea 	bl	800b50c <RCCEx_PLL3_Config>
 8009738:	4603      	mov	r3, r0
 800973a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800973e:	e004      	b.n	800974a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009740:	2301      	movs	r3, #1
 8009742:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009746:	e000      	b.n	800974a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009748:	bf00      	nop
    }

    if (ret == HAL_OK)
 800974a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800974e:	2b00      	cmp	r3, #0
 8009750:	d10a      	bne.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009752:	4b96      	ldr	r3, [pc, #600]	@ (80099ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009756:	f023 0107 	bic.w	r1, r3, #7
 800975a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800975e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009760:	4a92      	ldr	r2, [pc, #584]	@ (80099ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009762:	430b      	orrs	r3, r1
 8009764:	6553      	str	r3, [r2, #84]	@ 0x54
 8009766:	e003      	b.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009768:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800976c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009778:	f002 0304 	and.w	r3, r2, #4
 800977c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009780:	2300      	movs	r3, #0
 8009782:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009786:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800978a:	460b      	mov	r3, r1
 800978c:	4313      	orrs	r3, r2
 800978e:	d044      	beq.n	800981a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009794:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009798:	2b05      	cmp	r3, #5
 800979a:	d825      	bhi.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800979c:	a201      	add	r2, pc, #4	@ (adr r2, 80097a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800979e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a2:	bf00      	nop
 80097a4:	080097f1 	.word	0x080097f1
 80097a8:	080097bd 	.word	0x080097bd
 80097ac:	080097d3 	.word	0x080097d3
 80097b0:	080097f1 	.word	0x080097f1
 80097b4:	080097f1 	.word	0x080097f1
 80097b8:	080097f1 	.word	0x080097f1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80097bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097c0:	3308      	adds	r3, #8
 80097c2:	2101      	movs	r1, #1
 80097c4:	4618      	mov	r0, r3
 80097c6:	f001 fdef 	bl	800b3a8 <RCCEx_PLL2_Config>
 80097ca:	4603      	mov	r3, r0
 80097cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80097d0:	e00f      	b.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80097d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097d6:	3328      	adds	r3, #40	@ 0x28
 80097d8:	2101      	movs	r1, #1
 80097da:	4618      	mov	r0, r3
 80097dc:	f001 fe96 	bl	800b50c <RCCEx_PLL3_Config>
 80097e0:	4603      	mov	r3, r0
 80097e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80097e6:	e004      	b.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097e8:	2301      	movs	r3, #1
 80097ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80097ee:	e000      	b.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80097f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d10b      	bne.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80097fa:	4b6c      	ldr	r3, [pc, #432]	@ (80099ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80097fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097fe:	f023 0107 	bic.w	r1, r3, #7
 8009802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009806:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800980a:	4a68      	ldr	r2, [pc, #416]	@ (80099ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800980c:	430b      	orrs	r3, r1
 800980e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009810:	e003      	b.n	800981a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009812:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009816:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800981a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800981e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009822:	f002 0320 	and.w	r3, r2, #32
 8009826:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800982a:	2300      	movs	r3, #0
 800982c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009830:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009834:	460b      	mov	r3, r1
 8009836:	4313      	orrs	r3, r2
 8009838:	d055      	beq.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800983a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800983e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009842:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009846:	d033      	beq.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009848:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800984c:	d82c      	bhi.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800984e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009852:	d02f      	beq.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009854:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009858:	d826      	bhi.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800985a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800985e:	d02b      	beq.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009860:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009864:	d820      	bhi.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009866:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800986a:	d012      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800986c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009870:	d81a      	bhi.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009872:	2b00      	cmp	r3, #0
 8009874:	d022      	beq.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009876:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800987a:	d115      	bne.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800987c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009880:	3308      	adds	r3, #8
 8009882:	2100      	movs	r1, #0
 8009884:	4618      	mov	r0, r3
 8009886:	f001 fd8f 	bl	800b3a8 <RCCEx_PLL2_Config>
 800988a:	4603      	mov	r3, r0
 800988c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009890:	e015      	b.n	80098be <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009896:	3328      	adds	r3, #40	@ 0x28
 8009898:	2102      	movs	r1, #2
 800989a:	4618      	mov	r0, r3
 800989c:	f001 fe36 	bl	800b50c <RCCEx_PLL3_Config>
 80098a0:	4603      	mov	r3, r0
 80098a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80098a6:	e00a      	b.n	80098be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098a8:	2301      	movs	r3, #1
 80098aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80098ae:	e006      	b.n	80098be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80098b0:	bf00      	nop
 80098b2:	e004      	b.n	80098be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80098b4:	bf00      	nop
 80098b6:	e002      	b.n	80098be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80098b8:	bf00      	nop
 80098ba:	e000      	b.n	80098be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80098bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d10b      	bne.n	80098de <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80098c6:	4b39      	ldr	r3, [pc, #228]	@ (80099ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80098c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098ca:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80098ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098d6:	4a35      	ldr	r2, [pc, #212]	@ (80099ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80098d8:	430b      	orrs	r3, r1
 80098da:	6553      	str	r3, [r2, #84]	@ 0x54
 80098dc:	e003      	b.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80098e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ee:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80098f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80098f6:	2300      	movs	r3, #0
 80098f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80098fc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009900:	460b      	mov	r3, r1
 8009902:	4313      	orrs	r3, r2
 8009904:	d058      	beq.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800990a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800990e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009912:	d033      	beq.n	800997c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009914:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009918:	d82c      	bhi.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800991a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800991e:	d02f      	beq.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009920:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009924:	d826      	bhi.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009926:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800992a:	d02b      	beq.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800992c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009930:	d820      	bhi.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009932:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009936:	d012      	beq.n	800995e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009938:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800993c:	d81a      	bhi.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800993e:	2b00      	cmp	r3, #0
 8009940:	d022      	beq.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009942:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009946:	d115      	bne.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800994c:	3308      	adds	r3, #8
 800994e:	2100      	movs	r1, #0
 8009950:	4618      	mov	r0, r3
 8009952:	f001 fd29 	bl	800b3a8 <RCCEx_PLL2_Config>
 8009956:	4603      	mov	r3, r0
 8009958:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800995c:	e015      	b.n	800998a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800995e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009962:	3328      	adds	r3, #40	@ 0x28
 8009964:	2102      	movs	r1, #2
 8009966:	4618      	mov	r0, r3
 8009968:	f001 fdd0 	bl	800b50c <RCCEx_PLL3_Config>
 800996c:	4603      	mov	r3, r0
 800996e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009972:	e00a      	b.n	800998a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009974:	2301      	movs	r3, #1
 8009976:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800997a:	e006      	b.n	800998a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800997c:	bf00      	nop
 800997e:	e004      	b.n	800998a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009980:	bf00      	nop
 8009982:	e002      	b.n	800998a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009984:	bf00      	nop
 8009986:	e000      	b.n	800998a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009988:	bf00      	nop
    }

    if (ret == HAL_OK)
 800998a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800998e:	2b00      	cmp	r3, #0
 8009990:	d10e      	bne.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009992:	4b06      	ldr	r3, [pc, #24]	@ (80099ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009996:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800999a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800999e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80099a2:	4a02      	ldr	r2, [pc, #8]	@ (80099ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80099a4:	430b      	orrs	r3, r1
 80099a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80099a8:	e006      	b.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80099aa:	bf00      	nop
 80099ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80099b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80099c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80099c8:	2300      	movs	r3, #0
 80099ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80099ce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80099d2:	460b      	mov	r3, r1
 80099d4:	4313      	orrs	r3, r2
 80099d6:	d055      	beq.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80099d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80099e0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80099e4:	d033      	beq.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80099e6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80099ea:	d82c      	bhi.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80099ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099f0:	d02f      	beq.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80099f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099f6:	d826      	bhi.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80099f8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80099fc:	d02b      	beq.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80099fe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009a02:	d820      	bhi.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009a04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009a08:	d012      	beq.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009a0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009a0e:	d81a      	bhi.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d022      	beq.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009a14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a18:	d115      	bne.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a1e:	3308      	adds	r3, #8
 8009a20:	2100      	movs	r1, #0
 8009a22:	4618      	mov	r0, r3
 8009a24:	f001 fcc0 	bl	800b3a8 <RCCEx_PLL2_Config>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009a2e:	e015      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a34:	3328      	adds	r3, #40	@ 0x28
 8009a36:	2102      	movs	r1, #2
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f001 fd67 	bl	800b50c <RCCEx_PLL3_Config>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009a44:	e00a      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a46:	2301      	movs	r3, #1
 8009a48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a4c:	e006      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009a4e:	bf00      	nop
 8009a50:	e004      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009a52:	bf00      	nop
 8009a54:	e002      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009a56:	bf00      	nop
 8009a58:	e000      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009a5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d10b      	bne.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009a64:	4ba1      	ldr	r3, [pc, #644]	@ (8009cec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a68:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009a74:	4a9d      	ldr	r2, [pc, #628]	@ (8009cec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a76:	430b      	orrs	r3, r1
 8009a78:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a7a:	e003      	b.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8c:	f002 0308 	and.w	r3, r2, #8
 8009a90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009a94:	2300      	movs	r3, #0
 8009a96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009a9a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	d01e      	beq.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009aac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ab0:	d10c      	bne.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ab6:	3328      	adds	r3, #40	@ 0x28
 8009ab8:	2102      	movs	r1, #2
 8009aba:	4618      	mov	r0, r3
 8009abc:	f001 fd26 	bl	800b50c <RCCEx_PLL3_Config>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d002      	beq.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009acc:	4b87      	ldr	r3, [pc, #540]	@ (8009cec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ad0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009adc:	4a83      	ldr	r2, [pc, #524]	@ (8009cec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ade:	430b      	orrs	r3, r1
 8009ae0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aea:	f002 0310 	and.w	r3, r2, #16
 8009aee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009af2:	2300      	movs	r3, #0
 8009af4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009af8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009afc:	460b      	mov	r3, r1
 8009afe:	4313      	orrs	r3, r2
 8009b00:	d01e      	beq.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009b0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b0e:	d10c      	bne.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b14:	3328      	adds	r3, #40	@ 0x28
 8009b16:	2102      	movs	r1, #2
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f001 fcf7 	bl	800b50c <RCCEx_PLL3_Config>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d002      	beq.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009b24:	2301      	movs	r3, #1
 8009b26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009b2a:	4b70      	ldr	r3, [pc, #448]	@ (8009cec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b2e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009b3a:	4a6c      	ldr	r2, [pc, #432]	@ (8009cec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b3c:	430b      	orrs	r3, r1
 8009b3e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b48:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009b4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009b50:	2300      	movs	r3, #0
 8009b52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009b56:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	d03e      	beq.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009b68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b6c:	d022      	beq.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009b6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b72:	d81b      	bhi.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d003      	beq.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009b78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b7c:	d00b      	beq.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009b7e:	e015      	b.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b84:	3308      	adds	r3, #8
 8009b86:	2100      	movs	r1, #0
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f001 fc0d 	bl	800b3a8 <RCCEx_PLL2_Config>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009b94:	e00f      	b.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b9a:	3328      	adds	r3, #40	@ 0x28
 8009b9c:	2102      	movs	r1, #2
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f001 fcb4 	bl	800b50c <RCCEx_PLL3_Config>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009baa:	e004      	b.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bac:	2301      	movs	r3, #1
 8009bae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009bb2:	e000      	b.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009bb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d10b      	bne.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009bbe:	4b4b      	ldr	r3, [pc, #300]	@ (8009cec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bc2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009bce:	4a47      	ldr	r2, [pc, #284]	@ (8009cec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009bd0:	430b      	orrs	r3, r1
 8009bd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8009bd4:	e003      	b.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009bea:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009bec:	2300      	movs	r3, #0
 8009bee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009bf0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	d03b      	beq.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c02:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009c06:	d01f      	beq.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009c08:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009c0c:	d818      	bhi.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009c0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c12:	d003      	beq.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009c14:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009c18:	d007      	beq.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009c1a:	e011      	b.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c1c:	4b33      	ldr	r3, [pc, #204]	@ (8009cec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c20:	4a32      	ldr	r2, [pc, #200]	@ (8009cec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009c28:	e00f      	b.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c2e:	3328      	adds	r3, #40	@ 0x28
 8009c30:	2101      	movs	r1, #1
 8009c32:	4618      	mov	r0, r3
 8009c34:	f001 fc6a 	bl	800b50c <RCCEx_PLL3_Config>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009c3e:	e004      	b.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c46:	e000      	b.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009c48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d10b      	bne.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009c52:	4b26      	ldr	r3, [pc, #152]	@ (8009cec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c56:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c62:	4a22      	ldr	r2, [pc, #136]	@ (8009cec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c64:	430b      	orrs	r3, r1
 8009c66:	6553      	str	r3, [r2, #84]	@ 0x54
 8009c68:	e003      	b.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009c7e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009c80:	2300      	movs	r3, #0
 8009c82:	677b      	str	r3, [r7, #116]	@ 0x74
 8009c84:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009c88:	460b      	mov	r3, r1
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	d034      	beq.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d003      	beq.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009c98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c9c:	d007      	beq.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009c9e:	e011      	b.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ca0:	4b12      	ldr	r3, [pc, #72]	@ (8009cec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ca4:	4a11      	ldr	r2, [pc, #68]	@ (8009cec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ca6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009caa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009cac:	e00e      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cb2:	3308      	adds	r3, #8
 8009cb4:	2102      	movs	r1, #2
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f001 fb76 	bl	800b3a8 <RCCEx_PLL2_Config>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009cc2:	e003      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009cca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ccc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d10d      	bne.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009cd4:	4b05      	ldr	r3, [pc, #20]	@ (8009cec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cd8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ce0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ce2:	4a02      	ldr	r2, [pc, #8]	@ (8009cec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ce4:	430b      	orrs	r3, r1
 8009ce6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009ce8:	e006      	b.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009cea:	bf00      	nop
 8009cec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cf4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d00:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009d04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009d06:	2300      	movs	r3, #0
 8009d08:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009d0a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009d0e:	460b      	mov	r3, r1
 8009d10:	4313      	orrs	r3, r2
 8009d12:	d00c      	beq.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d18:	3328      	adds	r3, #40	@ 0x28
 8009d1a:	2102      	movs	r1, #2
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f001 fbf5 	bl	800b50c <RCCEx_PLL3_Config>
 8009d22:	4603      	mov	r3, r0
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d002      	beq.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d36:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009d3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009d40:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009d44:	460b      	mov	r3, r1
 8009d46:	4313      	orrs	r3, r2
 8009d48:	d038      	beq.n	8009dbc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d56:	d018      	beq.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009d58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d5c:	d811      	bhi.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009d5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d62:	d014      	beq.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009d64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d68:	d80b      	bhi.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d011      	beq.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009d6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d72:	d106      	bne.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d74:	4bc3      	ldr	r3, [pc, #780]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d78:	4ac2      	ldr	r2, [pc, #776]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009d80:	e008      	b.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d82:	2301      	movs	r3, #1
 8009d84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d88:	e004      	b.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009d8a:	bf00      	nop
 8009d8c:	e002      	b.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009d8e:	bf00      	nop
 8009d90:	e000      	b.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009d92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d10b      	bne.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009d9c:	4bb9      	ldr	r3, [pc, #740]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009da0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009da8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dac:	4ab5      	ldr	r2, [pc, #724]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009dae:	430b      	orrs	r3, r1
 8009db0:	6553      	str	r3, [r2, #84]	@ 0x54
 8009db2:	e003      	b.n	8009dbc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009db4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009db8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009dc8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009dca:	2300      	movs	r3, #0
 8009dcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009dce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	d009      	beq.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009dd8:	4baa      	ldr	r3, [pc, #680]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009dda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ddc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009de4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009de6:	4aa7      	ldr	r2, [pc, #668]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009de8:	430b      	orrs	r3, r1
 8009dea:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009df8:	653b      	str	r3, [r7, #80]	@ 0x50
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	657b      	str	r3, [r7, #84]	@ 0x54
 8009dfe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009e02:	460b      	mov	r3, r1
 8009e04:	4313      	orrs	r3, r2
 8009e06:	d00a      	beq.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009e08:	4b9e      	ldr	r3, [pc, #632]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e0a:	691b      	ldr	r3, [r3, #16]
 8009e0c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e14:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009e18:	4a9a      	ldr	r2, [pc, #616]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e1a:	430b      	orrs	r3, r1
 8009e1c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e26:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009e2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e30:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009e34:	460b      	mov	r3, r1
 8009e36:	4313      	orrs	r3, r2
 8009e38:	d009      	beq.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009e3a:	4b92      	ldr	r3, [pc, #584]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e3e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e48:	4a8e      	ldr	r2, [pc, #568]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e4a:	430b      	orrs	r3, r1
 8009e4c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e56:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009e5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e60:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009e64:	460b      	mov	r3, r1
 8009e66:	4313      	orrs	r3, r2
 8009e68:	d00e      	beq.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009e6a:	4b86      	ldr	r3, [pc, #536]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e6c:	691b      	ldr	r3, [r3, #16]
 8009e6e:	4a85      	ldr	r2, [pc, #532]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e70:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009e74:	6113      	str	r3, [r2, #16]
 8009e76:	4b83      	ldr	r3, [pc, #524]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e78:	6919      	ldr	r1, [r3, #16]
 8009e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e7e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009e82:	4a80      	ldr	r2, [pc, #512]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e84:	430b      	orrs	r3, r1
 8009e86:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e90:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009e94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009e96:	2300      	movs	r3, #0
 8009e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e9a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	d009      	beq.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009ea4:	4b77      	ldr	r3, [pc, #476]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ea8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009eb2:	4a74      	ldr	r2, [pc, #464]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009eb4:	430b      	orrs	r3, r1
 8009eb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009ec4:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009eca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009ece:	460b      	mov	r3, r1
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	d00a      	beq.n	8009eea <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009ed4:	4b6b      	ldr	r3, [pc, #428]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ed8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009ee4:	4a67      	ldr	r2, [pc, #412]	@ (800a084 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ee6:	430b      	orrs	r3, r1
 8009ee8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef2:	2100      	movs	r1, #0
 8009ef4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009ef6:	f003 0301 	and.w	r3, r3, #1
 8009efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009efc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009f00:	460b      	mov	r3, r1
 8009f02:	4313      	orrs	r3, r2
 8009f04:	d011      	beq.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f0a:	3308      	adds	r3, #8
 8009f0c:	2100      	movs	r1, #0
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f001 fa4a 	bl	800b3a8 <RCCEx_PLL2_Config>
 8009f14:	4603      	mov	r3, r0
 8009f16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d003      	beq.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f32:	2100      	movs	r1, #0
 8009f34:	6239      	str	r1, [r7, #32]
 8009f36:	f003 0302 	and.w	r3, r3, #2
 8009f3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f3c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009f40:	460b      	mov	r3, r1
 8009f42:	4313      	orrs	r3, r2
 8009f44:	d011      	beq.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f4a:	3308      	adds	r3, #8
 8009f4c:	2101      	movs	r1, #1
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f001 fa2a 	bl	800b3a8 <RCCEx_PLL2_Config>
 8009f54:	4603      	mov	r3, r0
 8009f56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d003      	beq.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f72:	2100      	movs	r1, #0
 8009f74:	61b9      	str	r1, [r7, #24]
 8009f76:	f003 0304 	and.w	r3, r3, #4
 8009f7a:	61fb      	str	r3, [r7, #28]
 8009f7c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009f80:	460b      	mov	r3, r1
 8009f82:	4313      	orrs	r3, r2
 8009f84:	d011      	beq.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f8a:	3308      	adds	r3, #8
 8009f8c:	2102      	movs	r1, #2
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f001 fa0a 	bl	800b3a8 <RCCEx_PLL2_Config>
 8009f94:	4603      	mov	r3, r0
 8009f96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d003      	beq.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fa6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	6139      	str	r1, [r7, #16]
 8009fb6:	f003 0308 	and.w	r3, r3, #8
 8009fba:	617b      	str	r3, [r7, #20]
 8009fbc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	d011      	beq.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fca:	3328      	adds	r3, #40	@ 0x28
 8009fcc:	2100      	movs	r1, #0
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f001 fa9c 	bl	800b50c <RCCEx_PLL3_Config>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8009fda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d003      	beq.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fe2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fe6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff2:	2100      	movs	r1, #0
 8009ff4:	60b9      	str	r1, [r7, #8]
 8009ff6:	f003 0310 	and.w	r3, r3, #16
 8009ffa:	60fb      	str	r3, [r7, #12]
 8009ffc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a000:	460b      	mov	r3, r1
 800a002:	4313      	orrs	r3, r2
 800a004:	d011      	beq.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a00a:	3328      	adds	r3, #40	@ 0x28
 800a00c:	2101      	movs	r1, #1
 800a00e:	4618      	mov	r0, r3
 800a010:	f001 fa7c 	bl	800b50c <RCCEx_PLL3_Config>
 800a014:	4603      	mov	r3, r0
 800a016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a01a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d003      	beq.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a022:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a026:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a02a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a032:	2100      	movs	r1, #0
 800a034:	6039      	str	r1, [r7, #0]
 800a036:	f003 0320 	and.w	r3, r3, #32
 800a03a:	607b      	str	r3, [r7, #4]
 800a03c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a040:	460b      	mov	r3, r1
 800a042:	4313      	orrs	r3, r2
 800a044:	d011      	beq.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a04a:	3328      	adds	r3, #40	@ 0x28
 800a04c:	2102      	movs	r1, #2
 800a04e:	4618      	mov	r0, r3
 800a050:	f001 fa5c 	bl	800b50c <RCCEx_PLL3_Config>
 800a054:	4603      	mov	r3, r0
 800a056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a05a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d003      	beq.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a062:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a066:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a06a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d101      	bne.n	800a076 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a072:	2300      	movs	r3, #0
 800a074:	e000      	b.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a076:	2301      	movs	r3, #1
}
 800a078:	4618      	mov	r0, r3
 800a07a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a07e:	46bd      	mov	sp, r7
 800a080:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a084:	58024400 	.word	0x58024400

0800a088 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b090      	sub	sp, #64	@ 0x40
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a092:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a096:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a09a:	430b      	orrs	r3, r1
 800a09c:	f040 8094 	bne.w	800a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a0a0:	4b9e      	ldr	r3, [pc, #632]	@ (800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0a4:	f003 0307 	and.w	r3, r3, #7
 800a0a8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ac:	2b04      	cmp	r3, #4
 800a0ae:	f200 8087 	bhi.w	800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a0b2:	a201      	add	r2, pc, #4	@ (adr r2, 800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0b8:	0800a0cd 	.word	0x0800a0cd
 800a0bc:	0800a0f5 	.word	0x0800a0f5
 800a0c0:	0800a11d 	.word	0x0800a11d
 800a0c4:	0800a1b9 	.word	0x0800a1b9
 800a0c8:	0800a145 	.word	0x0800a145
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a0cc:	4b93      	ldr	r3, [pc, #588]	@ (800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a0d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a0d8:	d108      	bne.n	800a0ec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a0da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f001 f810 	bl	800b104 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a0e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0e8:	f000 bd45 	b.w	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0f0:	f000 bd41 	b.w	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a0f4:	4b89      	ldr	r3, [pc, #548]	@ (800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a0fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a100:	d108      	bne.n	800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a102:	f107 0318 	add.w	r3, r7, #24
 800a106:	4618      	mov	r0, r3
 800a108:	f000 fd54 	bl	800abb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a10c:	69bb      	ldr	r3, [r7, #24]
 800a10e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a110:	f000 bd31 	b.w	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a114:	2300      	movs	r3, #0
 800a116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a118:	f000 bd2d 	b.w	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a11c:	4b7f      	ldr	r3, [pc, #508]	@ (800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a124:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a128:	d108      	bne.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a12a:	f107 030c 	add.w	r3, r7, #12
 800a12e:	4618      	mov	r0, r3
 800a130:	f000 fe94 	bl	800ae5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a138:	f000 bd1d 	b.w	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a13c:	2300      	movs	r3, #0
 800a13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a140:	f000 bd19 	b.w	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a144:	4b75      	ldr	r3, [pc, #468]	@ (800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a148:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a14c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a14e:	4b73      	ldr	r3, [pc, #460]	@ (800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f003 0304 	and.w	r3, r3, #4
 800a156:	2b04      	cmp	r3, #4
 800a158:	d10c      	bne.n	800a174 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a15a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d109      	bne.n	800a174 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a160:	4b6e      	ldr	r3, [pc, #440]	@ (800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	08db      	lsrs	r3, r3, #3
 800a166:	f003 0303 	and.w	r3, r3, #3
 800a16a:	4a6d      	ldr	r2, [pc, #436]	@ (800a320 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a16c:	fa22 f303 	lsr.w	r3, r2, r3
 800a170:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a172:	e01f      	b.n	800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a174:	4b69      	ldr	r3, [pc, #420]	@ (800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a17c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a180:	d106      	bne.n	800a190 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a184:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a188:	d102      	bne.n	800a190 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a18a:	4b66      	ldr	r3, [pc, #408]	@ (800a324 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a18c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a18e:	e011      	b.n	800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a190:	4b62      	ldr	r3, [pc, #392]	@ (800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a198:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a19c:	d106      	bne.n	800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a19e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1a4:	d102      	bne.n	800a1ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a1a6:	4b60      	ldr	r3, [pc, #384]	@ (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a1a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1aa:	e003      	b.n	800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a1b0:	f000 bce1 	b.w	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a1b4:	f000 bcdf 	b.w	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a1b8:	4b5c      	ldr	r3, [pc, #368]	@ (800a32c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a1ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1bc:	f000 bcdb 	b.w	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1c4:	f000 bcd7 	b.w	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a1c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1cc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a1d0:	430b      	orrs	r3, r1
 800a1d2:	f040 80ad 	bne.w	800a330 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a1d6:	4b51      	ldr	r3, [pc, #324]	@ (800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a1d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1da:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a1de:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a1e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1e6:	d056      	beq.n	800a296 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a1e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1ee:	f200 8090 	bhi.w	800a312 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1f4:	2bc0      	cmp	r3, #192	@ 0xc0
 800a1f6:	f000 8088 	beq.w	800a30a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1fc:	2bc0      	cmp	r3, #192	@ 0xc0
 800a1fe:	f200 8088 	bhi.w	800a312 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a204:	2b80      	cmp	r3, #128	@ 0x80
 800a206:	d032      	beq.n	800a26e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a20a:	2b80      	cmp	r3, #128	@ 0x80
 800a20c:	f200 8081 	bhi.w	800a312 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a212:	2b00      	cmp	r3, #0
 800a214:	d003      	beq.n	800a21e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a218:	2b40      	cmp	r3, #64	@ 0x40
 800a21a:	d014      	beq.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a21c:	e079      	b.n	800a312 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a21e:	4b3f      	ldr	r3, [pc, #252]	@ (800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a226:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a22a:	d108      	bne.n	800a23e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a22c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a230:	4618      	mov	r0, r3
 800a232:	f000 ff67 	bl	800b104 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a238:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a23a:	f000 bc9c 	b.w	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a23e:	2300      	movs	r3, #0
 800a240:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a242:	f000 bc98 	b.w	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a246:	4b35      	ldr	r3, [pc, #212]	@ (800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a24e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a252:	d108      	bne.n	800a266 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a254:	f107 0318 	add.w	r3, r7, #24
 800a258:	4618      	mov	r0, r3
 800a25a:	f000 fcab 	bl	800abb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a25e:	69bb      	ldr	r3, [r7, #24]
 800a260:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a262:	f000 bc88 	b.w	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a266:	2300      	movs	r3, #0
 800a268:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a26a:	f000 bc84 	b.w	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a26e:	4b2b      	ldr	r3, [pc, #172]	@ (800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a276:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a27a:	d108      	bne.n	800a28e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a27c:	f107 030c 	add.w	r3, r7, #12
 800a280:	4618      	mov	r0, r3
 800a282:	f000 fdeb 	bl	800ae5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a28a:	f000 bc74 	b.w	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a28e:	2300      	movs	r3, #0
 800a290:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a292:	f000 bc70 	b.w	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a296:	4b21      	ldr	r3, [pc, #132]	@ (800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a29a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a29e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a2a0:	4b1e      	ldr	r3, [pc, #120]	@ (800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f003 0304 	and.w	r3, r3, #4
 800a2a8:	2b04      	cmp	r3, #4
 800a2aa:	d10c      	bne.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a2ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d109      	bne.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a2b2:	4b1a      	ldr	r3, [pc, #104]	@ (800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	08db      	lsrs	r3, r3, #3
 800a2b8:	f003 0303 	and.w	r3, r3, #3
 800a2bc:	4a18      	ldr	r2, [pc, #96]	@ (800a320 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a2be:	fa22 f303 	lsr.w	r3, r2, r3
 800a2c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2c4:	e01f      	b.n	800a306 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a2c6:	4b15      	ldr	r3, [pc, #84]	@ (800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2d2:	d106      	bne.n	800a2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a2d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2da:	d102      	bne.n	800a2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a2dc:	4b11      	ldr	r3, [pc, #68]	@ (800a324 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a2de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2e0:	e011      	b.n	800a306 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a2e2:	4b0e      	ldr	r3, [pc, #56]	@ (800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2ee:	d106      	bne.n	800a2fe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a2f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2f6:	d102      	bne.n	800a2fe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a2f8:	4b0b      	ldr	r3, [pc, #44]	@ (800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a2fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2fc:	e003      	b.n	800a306 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a2fe:	2300      	movs	r3, #0
 800a300:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a302:	f000 bc38 	b.w	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a306:	f000 bc36 	b.w	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a30a:	4b08      	ldr	r3, [pc, #32]	@ (800a32c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a30c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a30e:	f000 bc32 	b.w	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a312:	2300      	movs	r3, #0
 800a314:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a316:	f000 bc2e 	b.w	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a31a:	bf00      	nop
 800a31c:	58024400 	.word	0x58024400
 800a320:	03d09000 	.word	0x03d09000
 800a324:	003d0900 	.word	0x003d0900
 800a328:	017d7840 	.word	0x017d7840
 800a32c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a330:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a334:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a338:	430b      	orrs	r3, r1
 800a33a:	f040 809c 	bne.w	800a476 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a33e:	4b9e      	ldr	r3, [pc, #632]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a342:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a346:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a34a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a34e:	d054      	beq.n	800a3fa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a352:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a356:	f200 808b 	bhi.w	800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a35a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a35c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a360:	f000 8083 	beq.w	800a46a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a366:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a36a:	f200 8081 	bhi.w	800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a36e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a370:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a374:	d02f      	beq.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a378:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a37c:	d878      	bhi.n	800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a380:	2b00      	cmp	r3, #0
 800a382:	d004      	beq.n	800a38e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a386:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a38a:	d012      	beq.n	800a3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a38c:	e070      	b.n	800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a38e:	4b8a      	ldr	r3, [pc, #552]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a396:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a39a:	d107      	bne.n	800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a39c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f000 feaf 	bl	800b104 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a3a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3aa:	e3e4      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3b0:	e3e1      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a3b2:	4b81      	ldr	r3, [pc, #516]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a3be:	d107      	bne.n	800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3c0:	f107 0318 	add.w	r3, r7, #24
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f000 fbf5 	bl	800abb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a3ca:	69bb      	ldr	r3, [r7, #24]
 800a3cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3ce:	e3d2      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3d4:	e3cf      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a3d6:	4b78      	ldr	r3, [pc, #480]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a3de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3e2:	d107      	bne.n	800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3e4:	f107 030c 	add.w	r3, r7, #12
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f000 fd37 	bl	800ae5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3f2:	e3c0      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3f8:	e3bd      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a3fa:	4b6f      	ldr	r3, [pc, #444]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a402:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a404:	4b6c      	ldr	r3, [pc, #432]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f003 0304 	and.w	r3, r3, #4
 800a40c:	2b04      	cmp	r3, #4
 800a40e:	d10c      	bne.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a412:	2b00      	cmp	r3, #0
 800a414:	d109      	bne.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a416:	4b68      	ldr	r3, [pc, #416]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	08db      	lsrs	r3, r3, #3
 800a41c:	f003 0303 	and.w	r3, r3, #3
 800a420:	4a66      	ldr	r2, [pc, #408]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a422:	fa22 f303 	lsr.w	r3, r2, r3
 800a426:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a428:	e01e      	b.n	800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a42a:	4b63      	ldr	r3, [pc, #396]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a432:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a436:	d106      	bne.n	800a446 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a43a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a43e:	d102      	bne.n	800a446 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a440:	4b5f      	ldr	r3, [pc, #380]	@ (800a5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a442:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a444:	e010      	b.n	800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a446:	4b5c      	ldr	r3, [pc, #368]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a44e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a452:	d106      	bne.n	800a462 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a456:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a45a:	d102      	bne.n	800a462 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a45c:	4b59      	ldr	r3, [pc, #356]	@ (800a5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a45e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a460:	e002      	b.n	800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a462:	2300      	movs	r3, #0
 800a464:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a466:	e386      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a468:	e385      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a46a:	4b57      	ldr	r3, [pc, #348]	@ (800a5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a46c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a46e:	e382      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a470:	2300      	movs	r3, #0
 800a472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a474:	e37f      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a476:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a47a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a47e:	430b      	orrs	r3, r1
 800a480:	f040 80a7 	bne.w	800a5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a484:	4b4c      	ldr	r3, [pc, #304]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a488:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a48c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a48e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a490:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a494:	d055      	beq.n	800a542 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a498:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a49c:	f200 8096 	bhi.w	800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a4a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a4a6:	f000 8084 	beq.w	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a4b0:	f200 808c 	bhi.w	800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a4b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a4ba:	d030      	beq.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a4bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a4c2:	f200 8083 	bhi.w	800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d004      	beq.n	800a4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a4cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a4d2:	d012      	beq.n	800a4fa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a4d4:	e07a      	b.n	800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a4d6:	4b38      	ldr	r3, [pc, #224]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a4e2:	d107      	bne.n	800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a4e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f000 fe0b 	bl	800b104 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4f2:	e340      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4f8:	e33d      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a4fa:	4b2f      	ldr	r3, [pc, #188]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a502:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a506:	d107      	bne.n	800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a508:	f107 0318 	add.w	r3, r7, #24
 800a50c:	4618      	mov	r0, r3
 800a50e:	f000 fb51 	bl	800abb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a512:	69bb      	ldr	r3, [r7, #24]
 800a514:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a516:	e32e      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a518:	2300      	movs	r3, #0
 800a51a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a51c:	e32b      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a51e:	4b26      	ldr	r3, [pc, #152]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a526:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a52a:	d107      	bne.n	800a53c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a52c:	f107 030c 	add.w	r3, r7, #12
 800a530:	4618      	mov	r0, r3
 800a532:	f000 fc93 	bl	800ae5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a53a:	e31c      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a53c:	2300      	movs	r3, #0
 800a53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a540:	e319      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a542:	4b1d      	ldr	r3, [pc, #116]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a546:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a54a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a54c:	4b1a      	ldr	r3, [pc, #104]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f003 0304 	and.w	r3, r3, #4
 800a554:	2b04      	cmp	r3, #4
 800a556:	d10c      	bne.n	800a572 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d109      	bne.n	800a572 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a55e:	4b16      	ldr	r3, [pc, #88]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	08db      	lsrs	r3, r3, #3
 800a564:	f003 0303 	and.w	r3, r3, #3
 800a568:	4a14      	ldr	r2, [pc, #80]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a56a:	fa22 f303 	lsr.w	r3, r2, r3
 800a56e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a570:	e01e      	b.n	800a5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a572:	4b11      	ldr	r3, [pc, #68]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a57a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a57e:	d106      	bne.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a582:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a586:	d102      	bne.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a588:	4b0d      	ldr	r3, [pc, #52]	@ (800a5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a58a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a58c:	e010      	b.n	800a5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a58e:	4b0a      	ldr	r3, [pc, #40]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a596:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a59a:	d106      	bne.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a59c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a59e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5a2:	d102      	bne.n	800a5aa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a5a4:	4b07      	ldr	r3, [pc, #28]	@ (800a5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a5a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5a8:	e002      	b.n	800a5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a5ae:	e2e2      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a5b0:	e2e1      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a5b2:	4b05      	ldr	r3, [pc, #20]	@ (800a5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a5b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5b6:	e2de      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a5b8:	58024400 	.word	0x58024400
 800a5bc:	03d09000 	.word	0x03d09000
 800a5c0:	003d0900 	.word	0x003d0900
 800a5c4:	017d7840 	.word	0x017d7840
 800a5c8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5d0:	e2d1      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a5d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5d6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a5da:	430b      	orrs	r3, r1
 800a5dc:	f040 809c 	bne.w	800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a5e0:	4b93      	ldr	r3, [pc, #588]	@ (800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a5e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5e4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a5e8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a5ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a5f0:	d054      	beq.n	800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a5f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a5f8:	f200 808b 	bhi.w	800a712 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a5fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a602:	f000 8083 	beq.w	800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a608:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a60c:	f200 8081 	bhi.w	800a712 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a612:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a616:	d02f      	beq.n	800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a61a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a61e:	d878      	bhi.n	800a712 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a622:	2b00      	cmp	r3, #0
 800a624:	d004      	beq.n	800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a628:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a62c:	d012      	beq.n	800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a62e:	e070      	b.n	800a712 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a630:	4b7f      	ldr	r3, [pc, #508]	@ (800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a638:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a63c:	d107      	bne.n	800a64e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a63e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a642:	4618      	mov	r0, r3
 800a644:	f000 fd5e 	bl	800b104 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a64a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a64c:	e293      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a64e:	2300      	movs	r3, #0
 800a650:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a652:	e290      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a654:	4b76      	ldr	r3, [pc, #472]	@ (800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a65c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a660:	d107      	bne.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a662:	f107 0318 	add.w	r3, r7, #24
 800a666:	4618      	mov	r0, r3
 800a668:	f000 faa4 	bl	800abb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a66c:	69bb      	ldr	r3, [r7, #24]
 800a66e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a670:	e281      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a672:	2300      	movs	r3, #0
 800a674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a676:	e27e      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a678:	4b6d      	ldr	r3, [pc, #436]	@ (800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a680:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a684:	d107      	bne.n	800a696 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a686:	f107 030c 	add.w	r3, r7, #12
 800a68a:	4618      	mov	r0, r3
 800a68c:	f000 fbe6 	bl	800ae5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a694:	e26f      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a696:	2300      	movs	r3, #0
 800a698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a69a:	e26c      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a69c:	4b64      	ldr	r3, [pc, #400]	@ (800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a69e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a6a4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a6a6:	4b62      	ldr	r3, [pc, #392]	@ (800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f003 0304 	and.w	r3, r3, #4
 800a6ae:	2b04      	cmp	r3, #4
 800a6b0:	d10c      	bne.n	800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a6b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d109      	bne.n	800a6cc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6b8:	4b5d      	ldr	r3, [pc, #372]	@ (800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	08db      	lsrs	r3, r3, #3
 800a6be:	f003 0303 	and.w	r3, r3, #3
 800a6c2:	4a5c      	ldr	r2, [pc, #368]	@ (800a834 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a6c4:	fa22 f303 	lsr.w	r3, r2, r3
 800a6c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6ca:	e01e      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a6cc:	4b58      	ldr	r3, [pc, #352]	@ (800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6d8:	d106      	bne.n	800a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a6da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6e0:	d102      	bne.n	800a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a6e2:	4b55      	ldr	r3, [pc, #340]	@ (800a838 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a6e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6e6:	e010      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a6e8:	4b51      	ldr	r3, [pc, #324]	@ (800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6f4:	d106      	bne.n	800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a6f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6fc:	d102      	bne.n	800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a6fe:	4b4f      	ldr	r3, [pc, #316]	@ (800a83c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a700:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a702:	e002      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a704:	2300      	movs	r3, #0
 800a706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a708:	e235      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a70a:	e234      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a70c:	4b4c      	ldr	r3, [pc, #304]	@ (800a840 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a70e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a710:	e231      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a712:	2300      	movs	r3, #0
 800a714:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a716:	e22e      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a71c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a720:	430b      	orrs	r3, r1
 800a722:	f040 808f 	bne.w	800a844 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a726:	4b42      	ldr	r3, [pc, #264]	@ (800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a72a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a72e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a732:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a736:	d06b      	beq.n	800a810 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a73a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a73e:	d874      	bhi.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a742:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a746:	d056      	beq.n	800a7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a74a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a74e:	d86c      	bhi.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a752:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a756:	d03b      	beq.n	800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a75a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a75e:	d864      	bhi.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a762:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a766:	d021      	beq.n	800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a76a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a76e:	d85c      	bhi.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a772:	2b00      	cmp	r3, #0
 800a774:	d004      	beq.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a77c:	d004      	beq.n	800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a77e:	e054      	b.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a780:	f7fe fa62 	bl	8008c48 <HAL_RCC_GetPCLK1Freq>
 800a784:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a786:	e1f6      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a788:	4b29      	ldr	r3, [pc, #164]	@ (800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a790:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a794:	d107      	bne.n	800a7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a796:	f107 0318 	add.w	r3, r7, #24
 800a79a:	4618      	mov	r0, r3
 800a79c:	f000 fa0a 	bl	800abb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a7a0:	69fb      	ldr	r3, [r7, #28]
 800a7a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7a4:	e1e7      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7aa:	e1e4      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7ac:	4b20      	ldr	r3, [pc, #128]	@ (800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7b8:	d107      	bne.n	800a7ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7ba:	f107 030c 	add.w	r3, r7, #12
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f000 fb4c 	bl	800ae5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7c8:	e1d5      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7ce:	e1d2      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a7d0:	4b17      	ldr	r3, [pc, #92]	@ (800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f003 0304 	and.w	r3, r3, #4
 800a7d8:	2b04      	cmp	r3, #4
 800a7da:	d109      	bne.n	800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7dc:	4b14      	ldr	r3, [pc, #80]	@ (800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	08db      	lsrs	r3, r3, #3
 800a7e2:	f003 0303 	and.w	r3, r3, #3
 800a7e6:	4a13      	ldr	r2, [pc, #76]	@ (800a834 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a7e8:	fa22 f303 	lsr.w	r3, r2, r3
 800a7ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7ee:	e1c2      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7f4:	e1bf      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a7f6:	4b0e      	ldr	r3, [pc, #56]	@ (800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a802:	d102      	bne.n	800a80a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a804:	4b0c      	ldr	r3, [pc, #48]	@ (800a838 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a808:	e1b5      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a80a:	2300      	movs	r3, #0
 800a80c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a80e:	e1b2      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a810:	4b07      	ldr	r3, [pc, #28]	@ (800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a818:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a81c:	d102      	bne.n	800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a81e:	4b07      	ldr	r3, [pc, #28]	@ (800a83c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a820:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a822:	e1a8      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a824:	2300      	movs	r3, #0
 800a826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a828:	e1a5      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a82a:	2300      	movs	r3, #0
 800a82c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a82e:	e1a2      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a830:	58024400 	.word	0x58024400
 800a834:	03d09000 	.word	0x03d09000
 800a838:	003d0900 	.word	0x003d0900
 800a83c:	017d7840 	.word	0x017d7840
 800a840:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a844:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a848:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a84c:	430b      	orrs	r3, r1
 800a84e:	d173      	bne.n	800a938 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a850:	4b9c      	ldr	r3, [pc, #624]	@ (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a854:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a858:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a85a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a85c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a860:	d02f      	beq.n	800a8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a864:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a868:	d863      	bhi.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a86a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d004      	beq.n	800a87a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a872:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a876:	d012      	beq.n	800a89e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a878:	e05b      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a87a:	4b92      	ldr	r3, [pc, #584]	@ (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a882:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a886:	d107      	bne.n	800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a888:	f107 0318 	add.w	r3, r7, #24
 800a88c:	4618      	mov	r0, r3
 800a88e:	f000 f991 	bl	800abb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a892:	69bb      	ldr	r3, [r7, #24]
 800a894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a896:	e16e      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a898:	2300      	movs	r3, #0
 800a89a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a89c:	e16b      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a89e:	4b89      	ldr	r3, [pc, #548]	@ (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a8a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8aa:	d107      	bne.n	800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8ac:	f107 030c 	add.w	r3, r7, #12
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f000 fad3 	bl	800ae5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8ba:	e15c      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8c0:	e159      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a8c2:	4b80      	ldr	r3, [pc, #512]	@ (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a8ca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a8cc:	4b7d      	ldr	r3, [pc, #500]	@ (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f003 0304 	and.w	r3, r3, #4
 800a8d4:	2b04      	cmp	r3, #4
 800a8d6:	d10c      	bne.n	800a8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a8d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d109      	bne.n	800a8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8de:	4b79      	ldr	r3, [pc, #484]	@ (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	08db      	lsrs	r3, r3, #3
 800a8e4:	f003 0303 	and.w	r3, r3, #3
 800a8e8:	4a77      	ldr	r2, [pc, #476]	@ (800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a8ea:	fa22 f303 	lsr.w	r3, r2, r3
 800a8ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8f0:	e01e      	b.n	800a930 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a8f2:	4b74      	ldr	r3, [pc, #464]	@ (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8fe:	d106      	bne.n	800a90e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a902:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a906:	d102      	bne.n	800a90e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a908:	4b70      	ldr	r3, [pc, #448]	@ (800aacc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a90a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a90c:	e010      	b.n	800a930 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a90e:	4b6d      	ldr	r3, [pc, #436]	@ (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a916:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a91a:	d106      	bne.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a91c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a91e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a922:	d102      	bne.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a924:	4b6a      	ldr	r3, [pc, #424]	@ (800aad0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a926:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a928:	e002      	b.n	800a930 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a92a:	2300      	movs	r3, #0
 800a92c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a92e:	e122      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a930:	e121      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a932:	2300      	movs	r3, #0
 800a934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a936:	e11e      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a938:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a93c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a940:	430b      	orrs	r3, r1
 800a942:	d133      	bne.n	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a944:	4b5f      	ldr	r3, [pc, #380]	@ (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a948:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a94c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a94e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a950:	2b00      	cmp	r3, #0
 800a952:	d004      	beq.n	800a95e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a956:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a95a:	d012      	beq.n	800a982 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a95c:	e023      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a95e:	4b59      	ldr	r3, [pc, #356]	@ (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a966:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a96a:	d107      	bne.n	800a97c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a96c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a970:	4618      	mov	r0, r3
 800a972:	f000 fbc7 	bl	800b104 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a978:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a97a:	e0fc      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a97c:	2300      	movs	r3, #0
 800a97e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a980:	e0f9      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a982:	4b50      	ldr	r3, [pc, #320]	@ (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a98a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a98e:	d107      	bne.n	800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a990:	f107 0318 	add.w	r3, r7, #24
 800a994:	4618      	mov	r0, r3
 800a996:	f000 f90d 	bl	800abb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a99a:	6a3b      	ldr	r3, [r7, #32]
 800a99c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a99e:	e0ea      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9a4:	e0e7      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9aa:	e0e4      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a9ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9b0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a9b4:	430b      	orrs	r3, r1
 800a9b6:	f040 808d 	bne.w	800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a9ba:	4b42      	ldr	r3, [pc, #264]	@ (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a9bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9be:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a9c2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a9c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a9ca:	d06b      	beq.n	800aaa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a9cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a9d2:	d874      	bhi.n	800aabe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a9d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9da:	d056      	beq.n	800aa8a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a9dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9e2:	d86c      	bhi.n	800aabe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a9e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a9ea:	d03b      	beq.n	800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a9ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a9f2:	d864      	bhi.n	800aabe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a9f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9fa:	d021      	beq.n	800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a9fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa02:	d85c      	bhi.n	800aabe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800aa04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d004      	beq.n	800aa14 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800aa0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa10:	d004      	beq.n	800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800aa12:	e054      	b.n	800aabe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800aa14:	f000 f8b8 	bl	800ab88 <HAL_RCCEx_GetD3PCLK1Freq>
 800aa18:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aa1a:	e0ac      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa1c:	4b29      	ldr	r3, [pc, #164]	@ (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa28:	d107      	bne.n	800aa3a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa2a:	f107 0318 	add.w	r3, r7, #24
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f000 f8c0 	bl	800abb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aa34:	69fb      	ldr	r3, [r7, #28]
 800aa36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa38:	e09d      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa3e:	e09a      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa40:	4b20      	ldr	r3, [pc, #128]	@ (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa4c:	d107      	bne.n	800aa5e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa4e:	f107 030c 	add.w	r3, r7, #12
 800aa52:	4618      	mov	r0, r3
 800aa54:	f000 fa02 	bl	800ae5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa5c:	e08b      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa62:	e088      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aa64:	4b17      	ldr	r3, [pc, #92]	@ (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f003 0304 	and.w	r3, r3, #4
 800aa6c:	2b04      	cmp	r3, #4
 800aa6e:	d109      	bne.n	800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa70:	4b14      	ldr	r3, [pc, #80]	@ (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	08db      	lsrs	r3, r3, #3
 800aa76:	f003 0303 	and.w	r3, r3, #3
 800aa7a:	4a13      	ldr	r2, [pc, #76]	@ (800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800aa7c:	fa22 f303 	lsr.w	r3, r2, r3
 800aa80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa82:	e078      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa84:	2300      	movs	r3, #0
 800aa86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa88:	e075      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aa8a:	4b0e      	ldr	r3, [pc, #56]	@ (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa96:	d102      	bne.n	800aa9e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800aa98:	4b0c      	ldr	r3, [pc, #48]	@ (800aacc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800aa9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa9c:	e06b      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaa2:	e068      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aaa4:	4b07      	ldr	r3, [pc, #28]	@ (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aaac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aab0:	d102      	bne.n	800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800aab2:	4b07      	ldr	r3, [pc, #28]	@ (800aad0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800aab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aab6:	e05e      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aab8:	2300      	movs	r3, #0
 800aaba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aabc:	e05b      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800aabe:	2300      	movs	r3, #0
 800aac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aac2:	e058      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aac4:	58024400 	.word	0x58024400
 800aac8:	03d09000 	.word	0x03d09000
 800aacc:	003d0900 	.word	0x003d0900
 800aad0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800aad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aad8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800aadc:	430b      	orrs	r3, r1
 800aade:	d148      	bne.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800aae0:	4b27      	ldr	r3, [pc, #156]	@ (800ab80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800aae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aae4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aae8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aaea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aaf0:	d02a      	beq.n	800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800aaf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aaf8:	d838      	bhi.n	800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800aafa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d004      	beq.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ab00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab06:	d00d      	beq.n	800ab24 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ab08:	e030      	b.n	800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ab0a:	4b1d      	ldr	r3, [pc, #116]	@ (800ab80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab16:	d102      	bne.n	800ab1e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ab18:	4b1a      	ldr	r3, [pc, #104]	@ (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ab1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab1c:	e02b      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab22:	e028      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab24:	4b16      	ldr	r3, [pc, #88]	@ (800ab80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab30:	d107      	bne.n	800ab42 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab36:	4618      	mov	r0, r3
 800ab38:	f000 fae4 	bl	800b104 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab40:	e019      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab42:	2300      	movs	r3, #0
 800ab44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab46:	e016      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab48:	4b0d      	ldr	r3, [pc, #52]	@ (800ab80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab54:	d107      	bne.n	800ab66 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab56:	f107 0318 	add.w	r3, r7, #24
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f000 f82a 	bl	800abb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ab60:	69fb      	ldr	r3, [r7, #28]
 800ab62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab64:	e007      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab66:	2300      	movs	r3, #0
 800ab68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab6a:	e004      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab70:	e001      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800ab72:	2300      	movs	r3, #0
 800ab74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800ab76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3740      	adds	r7, #64	@ 0x40
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	58024400 	.word	0x58024400
 800ab84:	017d7840 	.word	0x017d7840

0800ab88 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ab8c:	f7fe f82c 	bl	8008be8 <HAL_RCC_GetHCLKFreq>
 800ab90:	4602      	mov	r2, r0
 800ab92:	4b06      	ldr	r3, [pc, #24]	@ (800abac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ab94:	6a1b      	ldr	r3, [r3, #32]
 800ab96:	091b      	lsrs	r3, r3, #4
 800ab98:	f003 0307 	and.w	r3, r3, #7
 800ab9c:	4904      	ldr	r1, [pc, #16]	@ (800abb0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ab9e:	5ccb      	ldrb	r3, [r1, r3]
 800aba0:	f003 031f 	and.w	r3, r3, #31
 800aba4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	bd80      	pop	{r7, pc}
 800abac:	58024400 	.word	0x58024400
 800abb0:	08012020 	.word	0x08012020

0800abb4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b089      	sub	sp, #36	@ 0x24
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800abbc:	4ba1      	ldr	r3, [pc, #644]	@ (800ae44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abc0:	f003 0303 	and.w	r3, r3, #3
 800abc4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800abc6:	4b9f      	ldr	r3, [pc, #636]	@ (800ae44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abca:	0b1b      	lsrs	r3, r3, #12
 800abcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800abd0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800abd2:	4b9c      	ldr	r3, [pc, #624]	@ (800ae44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abd6:	091b      	lsrs	r3, r3, #4
 800abd8:	f003 0301 	and.w	r3, r3, #1
 800abdc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800abde:	4b99      	ldr	r3, [pc, #612]	@ (800ae44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abe2:	08db      	lsrs	r3, r3, #3
 800abe4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800abe8:	693a      	ldr	r2, [r7, #16]
 800abea:	fb02 f303 	mul.w	r3, r2, r3
 800abee:	ee07 3a90 	vmov	s15, r3
 800abf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abf6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	f000 8111 	beq.w	800ae24 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ac02:	69bb      	ldr	r3, [r7, #24]
 800ac04:	2b02      	cmp	r3, #2
 800ac06:	f000 8083 	beq.w	800ad10 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ac0a:	69bb      	ldr	r3, [r7, #24]
 800ac0c:	2b02      	cmp	r3, #2
 800ac0e:	f200 80a1 	bhi.w	800ad54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ac12:	69bb      	ldr	r3, [r7, #24]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d003      	beq.n	800ac20 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ac18:	69bb      	ldr	r3, [r7, #24]
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	d056      	beq.n	800accc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ac1e:	e099      	b.n	800ad54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac20:	4b88      	ldr	r3, [pc, #544]	@ (800ae44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f003 0320 	and.w	r3, r3, #32
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d02d      	beq.n	800ac88 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac2c:	4b85      	ldr	r3, [pc, #532]	@ (800ae44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	08db      	lsrs	r3, r3, #3
 800ac32:	f003 0303 	and.w	r3, r3, #3
 800ac36:	4a84      	ldr	r2, [pc, #528]	@ (800ae48 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ac38:	fa22 f303 	lsr.w	r3, r2, r3
 800ac3c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	ee07 3a90 	vmov	s15, r3
 800ac44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	ee07 3a90 	vmov	s15, r3
 800ac4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac56:	4b7b      	ldr	r3, [pc, #492]	@ (800ae44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac5e:	ee07 3a90 	vmov	s15, r3
 800ac62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac66:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac6a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ae4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ac86:	e087      	b.n	800ad98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	ee07 3a90 	vmov	s15, r3
 800ac8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac92:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ae50 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ac96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac9a:	4b6a      	ldr	r3, [pc, #424]	@ (800ae44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aca2:	ee07 3a90 	vmov	s15, r3
 800aca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800acae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ae4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800acb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acca:	e065      	b.n	800ad98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	ee07 3a90 	vmov	s15, r3
 800acd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acd6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800acda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acde:	4b59      	ldr	r3, [pc, #356]	@ (800ae44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ace0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ace2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ace6:	ee07 3a90 	vmov	s15, r3
 800acea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acee:	ed97 6a03 	vldr	s12, [r7, #12]
 800acf2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ae4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800acf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad0e:	e043      	b.n	800ad98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	ee07 3a90 	vmov	s15, r3
 800ad16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad1a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ae58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ad1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad22:	4b48      	ldr	r3, [pc, #288]	@ (800ae44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad2a:	ee07 3a90 	vmov	s15, r3
 800ad2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad32:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad36:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ae4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad52:	e021      	b.n	800ad98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	ee07 3a90 	vmov	s15, r3
 800ad5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad5e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ad62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad66:	4b37      	ldr	r3, [pc, #220]	@ (800ae44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad6e:	ee07 3a90 	vmov	s15, r3
 800ad72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad76:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad7a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ae4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad96:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ad98:	4b2a      	ldr	r3, [pc, #168]	@ (800ae44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad9c:	0a5b      	lsrs	r3, r3, #9
 800ad9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ada2:	ee07 3a90 	vmov	s15, r3
 800ada6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800adae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800adb2:	edd7 6a07 	vldr	s13, [r7, #28]
 800adb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adbe:	ee17 2a90 	vmov	r2, s15
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800adc6:	4b1f      	ldr	r3, [pc, #124]	@ (800ae44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adca:	0c1b      	lsrs	r3, r3, #16
 800adcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800add0:	ee07 3a90 	vmov	s15, r3
 800add4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800add8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800addc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ade0:	edd7 6a07 	vldr	s13, [r7, #28]
 800ade4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ade8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adec:	ee17 2a90 	vmov	r2, s15
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800adf4:	4b13      	ldr	r3, [pc, #76]	@ (800ae44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adf8:	0e1b      	lsrs	r3, r3, #24
 800adfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800adfe:	ee07 3a90 	vmov	s15, r3
 800ae02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae0e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae1a:	ee17 2a90 	vmov	r2, s15
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ae22:	e008      	b.n	800ae36 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2200      	movs	r2, #0
 800ae28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2200      	movs	r2, #0
 800ae34:	609a      	str	r2, [r3, #8]
}
 800ae36:	bf00      	nop
 800ae38:	3724      	adds	r7, #36	@ 0x24
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae40:	4770      	bx	lr
 800ae42:	bf00      	nop
 800ae44:	58024400 	.word	0x58024400
 800ae48:	03d09000 	.word	0x03d09000
 800ae4c:	46000000 	.word	0x46000000
 800ae50:	4c742400 	.word	0x4c742400
 800ae54:	4a742400 	.word	0x4a742400
 800ae58:	4bbebc20 	.word	0x4bbebc20

0800ae5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b089      	sub	sp, #36	@ 0x24
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae64:	4ba1      	ldr	r3, [pc, #644]	@ (800b0ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae68:	f003 0303 	and.w	r3, r3, #3
 800ae6c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ae6e:	4b9f      	ldr	r3, [pc, #636]	@ (800b0ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae72:	0d1b      	lsrs	r3, r3, #20
 800ae74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ae78:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ae7a:	4b9c      	ldr	r3, [pc, #624]	@ (800b0ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae7e:	0a1b      	lsrs	r3, r3, #8
 800ae80:	f003 0301 	and.w	r3, r3, #1
 800ae84:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ae86:	4b99      	ldr	r3, [pc, #612]	@ (800b0ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae8a:	08db      	lsrs	r3, r3, #3
 800ae8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae90:	693a      	ldr	r2, [r7, #16]
 800ae92:	fb02 f303 	mul.w	r3, r2, r3
 800ae96:	ee07 3a90 	vmov	s15, r3
 800ae9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	f000 8111 	beq.w	800b0cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800aeaa:	69bb      	ldr	r3, [r7, #24]
 800aeac:	2b02      	cmp	r3, #2
 800aeae:	f000 8083 	beq.w	800afb8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800aeb2:	69bb      	ldr	r3, [r7, #24]
 800aeb4:	2b02      	cmp	r3, #2
 800aeb6:	f200 80a1 	bhi.w	800affc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800aeba:	69bb      	ldr	r3, [r7, #24]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d003      	beq.n	800aec8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800aec0:	69bb      	ldr	r3, [r7, #24]
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d056      	beq.n	800af74 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800aec6:	e099      	b.n	800affc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aec8:	4b88      	ldr	r3, [pc, #544]	@ (800b0ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f003 0320 	and.w	r3, r3, #32
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d02d      	beq.n	800af30 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aed4:	4b85      	ldr	r3, [pc, #532]	@ (800b0ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	08db      	lsrs	r3, r3, #3
 800aeda:	f003 0303 	and.w	r3, r3, #3
 800aede:	4a84      	ldr	r2, [pc, #528]	@ (800b0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800aee0:	fa22 f303 	lsr.w	r3, r2, r3
 800aee4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	ee07 3a90 	vmov	s15, r3
 800aeec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	ee07 3a90 	vmov	s15, r3
 800aef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aefa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aefe:	4b7b      	ldr	r3, [pc, #492]	@ (800b0ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af06:	ee07 3a90 	vmov	s15, r3
 800af0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800af12:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800af2e:	e087      	b.n	800b040 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	ee07 3a90 	vmov	s15, r3
 800af36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af3a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800af3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af42:	4b6a      	ldr	r3, [pc, #424]	@ (800b0ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af4a:	ee07 3a90 	vmov	s15, r3
 800af4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af52:	ed97 6a03 	vldr	s12, [r7, #12]
 800af56:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af72:	e065      	b.n	800b040 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	ee07 3a90 	vmov	s15, r3
 800af7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af7e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b0fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800af82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af86:	4b59      	ldr	r3, [pc, #356]	@ (800b0ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af8e:	ee07 3a90 	vmov	s15, r3
 800af92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af96:	ed97 6a03 	vldr	s12, [r7, #12]
 800af9a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afb6:	e043      	b.n	800b040 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	ee07 3a90 	vmov	s15, r3
 800afbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afc2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b100 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800afc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afca:	4b48      	ldr	r3, [pc, #288]	@ (800b0ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afd2:	ee07 3a90 	vmov	s15, r3
 800afd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afda:	ed97 6a03 	vldr	s12, [r7, #12]
 800afde:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800afe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aff6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800affa:	e021      	b.n	800b040 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	ee07 3a90 	vmov	s15, r3
 800b002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b006:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b0fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b00a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b00e:	4b37      	ldr	r3, [pc, #220]	@ (800b0ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b016:	ee07 3a90 	vmov	s15, r3
 800b01a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b01e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b022:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b02a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b02e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b03a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b03e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b040:	4b2a      	ldr	r3, [pc, #168]	@ (800b0ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b044:	0a5b      	lsrs	r3, r3, #9
 800b046:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b04a:	ee07 3a90 	vmov	s15, r3
 800b04e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b052:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b056:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b05a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b05e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b062:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b066:	ee17 2a90 	vmov	r2, s15
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b06e:	4b1f      	ldr	r3, [pc, #124]	@ (800b0ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b072:	0c1b      	lsrs	r3, r3, #16
 800b074:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b078:	ee07 3a90 	vmov	s15, r3
 800b07c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b080:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b084:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b088:	edd7 6a07 	vldr	s13, [r7, #28]
 800b08c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b090:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b094:	ee17 2a90 	vmov	r2, s15
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b09c:	4b13      	ldr	r3, [pc, #76]	@ (800b0ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b09e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0a0:	0e1b      	lsrs	r3, r3, #24
 800b0a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0a6:	ee07 3a90 	vmov	s15, r3
 800b0aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b0b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0c2:	ee17 2a90 	vmov	r2, s15
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b0ca:	e008      	b.n	800b0de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	609a      	str	r2, [r3, #8]
}
 800b0de:	bf00      	nop
 800b0e0:	3724      	adds	r7, #36	@ 0x24
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e8:	4770      	bx	lr
 800b0ea:	bf00      	nop
 800b0ec:	58024400 	.word	0x58024400
 800b0f0:	03d09000 	.word	0x03d09000
 800b0f4:	46000000 	.word	0x46000000
 800b0f8:	4c742400 	.word	0x4c742400
 800b0fc:	4a742400 	.word	0x4a742400
 800b100:	4bbebc20 	.word	0x4bbebc20

0800b104 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b104:	b480      	push	{r7}
 800b106:	b089      	sub	sp, #36	@ 0x24
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b10c:	4ba0      	ldr	r3, [pc, #640]	@ (800b390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b10e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b110:	f003 0303 	and.w	r3, r3, #3
 800b114:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b116:	4b9e      	ldr	r3, [pc, #632]	@ (800b390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b11a:	091b      	lsrs	r3, r3, #4
 800b11c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b120:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b122:	4b9b      	ldr	r3, [pc, #620]	@ (800b390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b126:	f003 0301 	and.w	r3, r3, #1
 800b12a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b12c:	4b98      	ldr	r3, [pc, #608]	@ (800b390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b12e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b130:	08db      	lsrs	r3, r3, #3
 800b132:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b136:	693a      	ldr	r2, [r7, #16]
 800b138:	fb02 f303 	mul.w	r3, r2, r3
 800b13c:	ee07 3a90 	vmov	s15, r3
 800b140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b144:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	f000 8111 	beq.w	800b372 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b150:	69bb      	ldr	r3, [r7, #24]
 800b152:	2b02      	cmp	r3, #2
 800b154:	f000 8083 	beq.w	800b25e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b158:	69bb      	ldr	r3, [r7, #24]
 800b15a:	2b02      	cmp	r3, #2
 800b15c:	f200 80a1 	bhi.w	800b2a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b160:	69bb      	ldr	r3, [r7, #24]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d003      	beq.n	800b16e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b166:	69bb      	ldr	r3, [r7, #24]
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d056      	beq.n	800b21a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b16c:	e099      	b.n	800b2a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b16e:	4b88      	ldr	r3, [pc, #544]	@ (800b390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f003 0320 	and.w	r3, r3, #32
 800b176:	2b00      	cmp	r3, #0
 800b178:	d02d      	beq.n	800b1d6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b17a:	4b85      	ldr	r3, [pc, #532]	@ (800b390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	08db      	lsrs	r3, r3, #3
 800b180:	f003 0303 	and.w	r3, r3, #3
 800b184:	4a83      	ldr	r2, [pc, #524]	@ (800b394 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b186:	fa22 f303 	lsr.w	r3, r2, r3
 800b18a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	ee07 3a90 	vmov	s15, r3
 800b192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	ee07 3a90 	vmov	s15, r3
 800b19c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1a4:	4b7a      	ldr	r3, [pc, #488]	@ (800b390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1ac:	ee07 3a90 	vmov	s15, r3
 800b1b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1b4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1b8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b398 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b1bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1d0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b1d4:	e087      	b.n	800b2e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	ee07 3a90 	vmov	s15, r3
 800b1dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1e0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b39c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b1e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1e8:	4b69      	ldr	r3, [pc, #420]	@ (800b390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b1ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1f0:	ee07 3a90 	vmov	s15, r3
 800b1f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1f8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1fc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b398 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b200:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b204:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b208:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b20c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b210:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b214:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b218:	e065      	b.n	800b2e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	ee07 3a90 	vmov	s15, r3
 800b220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b224:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b3a0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b228:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b22c:	4b58      	ldr	r3, [pc, #352]	@ (800b390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b22e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b234:	ee07 3a90 	vmov	s15, r3
 800b238:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b23c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b240:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b398 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b244:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b248:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b24c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b250:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b254:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b258:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b25c:	e043      	b.n	800b2e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	ee07 3a90 	vmov	s15, r3
 800b264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b268:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b3a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b26c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b270:	4b47      	ldr	r3, [pc, #284]	@ (800b390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b278:	ee07 3a90 	vmov	s15, r3
 800b27c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b280:	ed97 6a03 	vldr	s12, [r7, #12]
 800b284:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b398 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b288:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b28c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b290:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b294:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b29c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2a0:	e021      	b.n	800b2e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	ee07 3a90 	vmov	s15, r3
 800b2a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2ac:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b39c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b2b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2b4:	4b36      	ldr	r3, [pc, #216]	@ (800b390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2bc:	ee07 3a90 	vmov	s15, r3
 800b2c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2c4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2c8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b398 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b2cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2e4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b2e6:	4b2a      	ldr	r3, [pc, #168]	@ (800b390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2ea:	0a5b      	lsrs	r3, r3, #9
 800b2ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2f0:	ee07 3a90 	vmov	s15, r3
 800b2f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b2fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b300:	edd7 6a07 	vldr	s13, [r7, #28]
 800b304:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b308:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b30c:	ee17 2a90 	vmov	r2, s15
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b314:	4b1e      	ldr	r3, [pc, #120]	@ (800b390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b318:	0c1b      	lsrs	r3, r3, #16
 800b31a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b31e:	ee07 3a90 	vmov	s15, r3
 800b322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b326:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b32a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b32e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b332:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b336:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b33a:	ee17 2a90 	vmov	r2, s15
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b342:	4b13      	ldr	r3, [pc, #76]	@ (800b390 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b346:	0e1b      	lsrs	r3, r3, #24
 800b348:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b34c:	ee07 3a90 	vmov	s15, r3
 800b350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b354:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b358:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b35c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b360:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b364:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b368:	ee17 2a90 	vmov	r2, s15
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b370:	e008      	b.n	800b384 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2200      	movs	r2, #0
 800b376:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2200      	movs	r2, #0
 800b382:	609a      	str	r2, [r3, #8]
}
 800b384:	bf00      	nop
 800b386:	3724      	adds	r7, #36	@ 0x24
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr
 800b390:	58024400 	.word	0x58024400
 800b394:	03d09000 	.word	0x03d09000
 800b398:	46000000 	.word	0x46000000
 800b39c:	4c742400 	.word	0x4c742400
 800b3a0:	4a742400 	.word	0x4a742400
 800b3a4:	4bbebc20 	.word	0x4bbebc20

0800b3a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b3b6:	4b53      	ldr	r3, [pc, #332]	@ (800b504 <RCCEx_PLL2_Config+0x15c>)
 800b3b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3ba:	f003 0303 	and.w	r3, r3, #3
 800b3be:	2b03      	cmp	r3, #3
 800b3c0:	d101      	bne.n	800b3c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	e099      	b.n	800b4fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b3c6:	4b4f      	ldr	r3, [pc, #316]	@ (800b504 <RCCEx_PLL2_Config+0x15c>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4a4e      	ldr	r2, [pc, #312]	@ (800b504 <RCCEx_PLL2_Config+0x15c>)
 800b3cc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b3d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3d2:	f7f6 fc5d 	bl	8001c90 <HAL_GetTick>
 800b3d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b3d8:	e008      	b.n	800b3ec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b3da:	f7f6 fc59 	bl	8001c90 <HAL_GetTick>
 800b3de:	4602      	mov	r2, r0
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	1ad3      	subs	r3, r2, r3
 800b3e4:	2b02      	cmp	r3, #2
 800b3e6:	d901      	bls.n	800b3ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b3e8:	2303      	movs	r3, #3
 800b3ea:	e086      	b.n	800b4fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b3ec:	4b45      	ldr	r3, [pc, #276]	@ (800b504 <RCCEx_PLL2_Config+0x15c>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d1f0      	bne.n	800b3da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b3f8:	4b42      	ldr	r3, [pc, #264]	@ (800b504 <RCCEx_PLL2_Config+0x15c>)
 800b3fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3fc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	031b      	lsls	r3, r3, #12
 800b406:	493f      	ldr	r1, [pc, #252]	@ (800b504 <RCCEx_PLL2_Config+0x15c>)
 800b408:	4313      	orrs	r3, r2
 800b40a:	628b      	str	r3, [r1, #40]	@ 0x28
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	3b01      	subs	r3, #1
 800b412:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	689b      	ldr	r3, [r3, #8]
 800b41a:	3b01      	subs	r3, #1
 800b41c:	025b      	lsls	r3, r3, #9
 800b41e:	b29b      	uxth	r3, r3
 800b420:	431a      	orrs	r2, r3
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	68db      	ldr	r3, [r3, #12]
 800b426:	3b01      	subs	r3, #1
 800b428:	041b      	lsls	r3, r3, #16
 800b42a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b42e:	431a      	orrs	r2, r3
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	691b      	ldr	r3, [r3, #16]
 800b434:	3b01      	subs	r3, #1
 800b436:	061b      	lsls	r3, r3, #24
 800b438:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b43c:	4931      	ldr	r1, [pc, #196]	@ (800b504 <RCCEx_PLL2_Config+0x15c>)
 800b43e:	4313      	orrs	r3, r2
 800b440:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b442:	4b30      	ldr	r3, [pc, #192]	@ (800b504 <RCCEx_PLL2_Config+0x15c>)
 800b444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b446:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	695b      	ldr	r3, [r3, #20]
 800b44e:	492d      	ldr	r1, [pc, #180]	@ (800b504 <RCCEx_PLL2_Config+0x15c>)
 800b450:	4313      	orrs	r3, r2
 800b452:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b454:	4b2b      	ldr	r3, [pc, #172]	@ (800b504 <RCCEx_PLL2_Config+0x15c>)
 800b456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b458:	f023 0220 	bic.w	r2, r3, #32
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	699b      	ldr	r3, [r3, #24]
 800b460:	4928      	ldr	r1, [pc, #160]	@ (800b504 <RCCEx_PLL2_Config+0x15c>)
 800b462:	4313      	orrs	r3, r2
 800b464:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b466:	4b27      	ldr	r3, [pc, #156]	@ (800b504 <RCCEx_PLL2_Config+0x15c>)
 800b468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b46a:	4a26      	ldr	r2, [pc, #152]	@ (800b504 <RCCEx_PLL2_Config+0x15c>)
 800b46c:	f023 0310 	bic.w	r3, r3, #16
 800b470:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b472:	4b24      	ldr	r3, [pc, #144]	@ (800b504 <RCCEx_PLL2_Config+0x15c>)
 800b474:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b476:	4b24      	ldr	r3, [pc, #144]	@ (800b508 <RCCEx_PLL2_Config+0x160>)
 800b478:	4013      	ands	r3, r2
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	69d2      	ldr	r2, [r2, #28]
 800b47e:	00d2      	lsls	r2, r2, #3
 800b480:	4920      	ldr	r1, [pc, #128]	@ (800b504 <RCCEx_PLL2_Config+0x15c>)
 800b482:	4313      	orrs	r3, r2
 800b484:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b486:	4b1f      	ldr	r3, [pc, #124]	@ (800b504 <RCCEx_PLL2_Config+0x15c>)
 800b488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b48a:	4a1e      	ldr	r2, [pc, #120]	@ (800b504 <RCCEx_PLL2_Config+0x15c>)
 800b48c:	f043 0310 	orr.w	r3, r3, #16
 800b490:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d106      	bne.n	800b4a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b498:	4b1a      	ldr	r3, [pc, #104]	@ (800b504 <RCCEx_PLL2_Config+0x15c>)
 800b49a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b49c:	4a19      	ldr	r2, [pc, #100]	@ (800b504 <RCCEx_PLL2_Config+0x15c>)
 800b49e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b4a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b4a4:	e00f      	b.n	800b4c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	2b01      	cmp	r3, #1
 800b4aa:	d106      	bne.n	800b4ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b4ac:	4b15      	ldr	r3, [pc, #84]	@ (800b504 <RCCEx_PLL2_Config+0x15c>)
 800b4ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4b0:	4a14      	ldr	r2, [pc, #80]	@ (800b504 <RCCEx_PLL2_Config+0x15c>)
 800b4b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b4b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b4b8:	e005      	b.n	800b4c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b4ba:	4b12      	ldr	r3, [pc, #72]	@ (800b504 <RCCEx_PLL2_Config+0x15c>)
 800b4bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4be:	4a11      	ldr	r2, [pc, #68]	@ (800b504 <RCCEx_PLL2_Config+0x15c>)
 800b4c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b4c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b4c6:	4b0f      	ldr	r3, [pc, #60]	@ (800b504 <RCCEx_PLL2_Config+0x15c>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4a0e      	ldr	r2, [pc, #56]	@ (800b504 <RCCEx_PLL2_Config+0x15c>)
 800b4cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b4d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4d2:	f7f6 fbdd 	bl	8001c90 <HAL_GetTick>
 800b4d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b4d8:	e008      	b.n	800b4ec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b4da:	f7f6 fbd9 	bl	8001c90 <HAL_GetTick>
 800b4de:	4602      	mov	r2, r0
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	1ad3      	subs	r3, r2, r3
 800b4e4:	2b02      	cmp	r3, #2
 800b4e6:	d901      	bls.n	800b4ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b4e8:	2303      	movs	r3, #3
 800b4ea:	e006      	b.n	800b4fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b4ec:	4b05      	ldr	r3, [pc, #20]	@ (800b504 <RCCEx_PLL2_Config+0x15c>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d0f0      	beq.n	800b4da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b4f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3710      	adds	r7, #16
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}
 800b502:	bf00      	nop
 800b504:	58024400 	.word	0x58024400
 800b508:	ffff0007 	.word	0xffff0007

0800b50c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b084      	sub	sp, #16
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b516:	2300      	movs	r3, #0
 800b518:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b51a:	4b53      	ldr	r3, [pc, #332]	@ (800b668 <RCCEx_PLL3_Config+0x15c>)
 800b51c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b51e:	f003 0303 	and.w	r3, r3, #3
 800b522:	2b03      	cmp	r3, #3
 800b524:	d101      	bne.n	800b52a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b526:	2301      	movs	r3, #1
 800b528:	e099      	b.n	800b65e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b52a:	4b4f      	ldr	r3, [pc, #316]	@ (800b668 <RCCEx_PLL3_Config+0x15c>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	4a4e      	ldr	r2, [pc, #312]	@ (800b668 <RCCEx_PLL3_Config+0x15c>)
 800b530:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b534:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b536:	f7f6 fbab 	bl	8001c90 <HAL_GetTick>
 800b53a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b53c:	e008      	b.n	800b550 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b53e:	f7f6 fba7 	bl	8001c90 <HAL_GetTick>
 800b542:	4602      	mov	r2, r0
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	1ad3      	subs	r3, r2, r3
 800b548:	2b02      	cmp	r3, #2
 800b54a:	d901      	bls.n	800b550 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b54c:	2303      	movs	r3, #3
 800b54e:	e086      	b.n	800b65e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b550:	4b45      	ldr	r3, [pc, #276]	@ (800b668 <RCCEx_PLL3_Config+0x15c>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d1f0      	bne.n	800b53e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b55c:	4b42      	ldr	r3, [pc, #264]	@ (800b668 <RCCEx_PLL3_Config+0x15c>)
 800b55e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b560:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	051b      	lsls	r3, r3, #20
 800b56a:	493f      	ldr	r1, [pc, #252]	@ (800b668 <RCCEx_PLL3_Config+0x15c>)
 800b56c:	4313      	orrs	r3, r2
 800b56e:	628b      	str	r3, [r1, #40]	@ 0x28
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	3b01      	subs	r3, #1
 800b576:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	689b      	ldr	r3, [r3, #8]
 800b57e:	3b01      	subs	r3, #1
 800b580:	025b      	lsls	r3, r3, #9
 800b582:	b29b      	uxth	r3, r3
 800b584:	431a      	orrs	r2, r3
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	68db      	ldr	r3, [r3, #12]
 800b58a:	3b01      	subs	r3, #1
 800b58c:	041b      	lsls	r3, r3, #16
 800b58e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b592:	431a      	orrs	r2, r3
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	691b      	ldr	r3, [r3, #16]
 800b598:	3b01      	subs	r3, #1
 800b59a:	061b      	lsls	r3, r3, #24
 800b59c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b5a0:	4931      	ldr	r1, [pc, #196]	@ (800b668 <RCCEx_PLL3_Config+0x15c>)
 800b5a2:	4313      	orrs	r3, r2
 800b5a4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b5a6:	4b30      	ldr	r3, [pc, #192]	@ (800b668 <RCCEx_PLL3_Config+0x15c>)
 800b5a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	695b      	ldr	r3, [r3, #20]
 800b5b2:	492d      	ldr	r1, [pc, #180]	@ (800b668 <RCCEx_PLL3_Config+0x15c>)
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b5b8:	4b2b      	ldr	r3, [pc, #172]	@ (800b668 <RCCEx_PLL3_Config+0x15c>)
 800b5ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5bc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	699b      	ldr	r3, [r3, #24]
 800b5c4:	4928      	ldr	r1, [pc, #160]	@ (800b668 <RCCEx_PLL3_Config+0x15c>)
 800b5c6:	4313      	orrs	r3, r2
 800b5c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b5ca:	4b27      	ldr	r3, [pc, #156]	@ (800b668 <RCCEx_PLL3_Config+0x15c>)
 800b5cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5ce:	4a26      	ldr	r2, [pc, #152]	@ (800b668 <RCCEx_PLL3_Config+0x15c>)
 800b5d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b5d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b5d6:	4b24      	ldr	r3, [pc, #144]	@ (800b668 <RCCEx_PLL3_Config+0x15c>)
 800b5d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b5da:	4b24      	ldr	r3, [pc, #144]	@ (800b66c <RCCEx_PLL3_Config+0x160>)
 800b5dc:	4013      	ands	r3, r2
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	69d2      	ldr	r2, [r2, #28]
 800b5e2:	00d2      	lsls	r2, r2, #3
 800b5e4:	4920      	ldr	r1, [pc, #128]	@ (800b668 <RCCEx_PLL3_Config+0x15c>)
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b5ea:	4b1f      	ldr	r3, [pc, #124]	@ (800b668 <RCCEx_PLL3_Config+0x15c>)
 800b5ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5ee:	4a1e      	ldr	r2, [pc, #120]	@ (800b668 <RCCEx_PLL3_Config+0x15c>)
 800b5f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b5f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d106      	bne.n	800b60a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b5fc:	4b1a      	ldr	r3, [pc, #104]	@ (800b668 <RCCEx_PLL3_Config+0x15c>)
 800b5fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b600:	4a19      	ldr	r2, [pc, #100]	@ (800b668 <RCCEx_PLL3_Config+0x15c>)
 800b602:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b606:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b608:	e00f      	b.n	800b62a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	2b01      	cmp	r3, #1
 800b60e:	d106      	bne.n	800b61e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b610:	4b15      	ldr	r3, [pc, #84]	@ (800b668 <RCCEx_PLL3_Config+0x15c>)
 800b612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b614:	4a14      	ldr	r2, [pc, #80]	@ (800b668 <RCCEx_PLL3_Config+0x15c>)
 800b616:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b61a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b61c:	e005      	b.n	800b62a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b61e:	4b12      	ldr	r3, [pc, #72]	@ (800b668 <RCCEx_PLL3_Config+0x15c>)
 800b620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b622:	4a11      	ldr	r2, [pc, #68]	@ (800b668 <RCCEx_PLL3_Config+0x15c>)
 800b624:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b628:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b62a:	4b0f      	ldr	r3, [pc, #60]	@ (800b668 <RCCEx_PLL3_Config+0x15c>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	4a0e      	ldr	r2, [pc, #56]	@ (800b668 <RCCEx_PLL3_Config+0x15c>)
 800b630:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b634:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b636:	f7f6 fb2b 	bl	8001c90 <HAL_GetTick>
 800b63a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b63c:	e008      	b.n	800b650 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b63e:	f7f6 fb27 	bl	8001c90 <HAL_GetTick>
 800b642:	4602      	mov	r2, r0
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	1ad3      	subs	r3, r2, r3
 800b648:	2b02      	cmp	r3, #2
 800b64a:	d901      	bls.n	800b650 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b64c:	2303      	movs	r3, #3
 800b64e:	e006      	b.n	800b65e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b650:	4b05      	ldr	r3, [pc, #20]	@ (800b668 <RCCEx_PLL3_Config+0x15c>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d0f0      	beq.n	800b63e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b65c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	58024400 	.word	0x58024400
 800b66c:	ffff0007 	.word	0xffff0007

0800b670 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b084      	sub	sp, #16
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d101      	bne.n	800b682 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b67e:	2301      	movs	r3, #1
 800b680:	e10f      	b.n	800b8a2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2200      	movs	r2, #0
 800b686:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4a87      	ldr	r2, [pc, #540]	@ (800b8ac <HAL_SPI_Init+0x23c>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d00f      	beq.n	800b6b2 <HAL_SPI_Init+0x42>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	4a86      	ldr	r2, [pc, #536]	@ (800b8b0 <HAL_SPI_Init+0x240>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d00a      	beq.n	800b6b2 <HAL_SPI_Init+0x42>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4a84      	ldr	r2, [pc, #528]	@ (800b8b4 <HAL_SPI_Init+0x244>)
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d005      	beq.n	800b6b2 <HAL_SPI_Init+0x42>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	68db      	ldr	r3, [r3, #12]
 800b6aa:	2b0f      	cmp	r3, #15
 800b6ac:	d901      	bls.n	800b6b2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	e0f7      	b.n	800b8a2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f000 fef6 	bl	800c4a4 <SPI_GetPacketSize>
 800b6b8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4a7b      	ldr	r2, [pc, #492]	@ (800b8ac <HAL_SPI_Init+0x23c>)
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d00c      	beq.n	800b6de <HAL_SPI_Init+0x6e>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	4a79      	ldr	r2, [pc, #484]	@ (800b8b0 <HAL_SPI_Init+0x240>)
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d007      	beq.n	800b6de <HAL_SPI_Init+0x6e>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	4a78      	ldr	r2, [pc, #480]	@ (800b8b4 <HAL_SPI_Init+0x244>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d002      	beq.n	800b6de <HAL_SPI_Init+0x6e>
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	2b08      	cmp	r3, #8
 800b6dc:	d811      	bhi.n	800b702 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b6e2:	4a72      	ldr	r2, [pc, #456]	@ (800b8ac <HAL_SPI_Init+0x23c>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d009      	beq.n	800b6fc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	4a70      	ldr	r2, [pc, #448]	@ (800b8b0 <HAL_SPI_Init+0x240>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d004      	beq.n	800b6fc <HAL_SPI_Init+0x8c>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	4a6f      	ldr	r2, [pc, #444]	@ (800b8b4 <HAL_SPI_Init+0x244>)
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d104      	bne.n	800b706 <HAL_SPI_Init+0x96>
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2b10      	cmp	r3, #16
 800b700:	d901      	bls.n	800b706 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b702:	2301      	movs	r3, #1
 800b704:	e0cd      	b.n	800b8a2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b70c:	b2db      	uxtb	r3, r3
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d106      	bne.n	800b720 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2200      	movs	r2, #0
 800b716:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f7f5 feae 	bl	800147c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2202      	movs	r2, #2
 800b724:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	681a      	ldr	r2, [r3, #0]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f022 0201 	bic.w	r2, r2, #1
 800b736:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	689b      	ldr	r3, [r3, #8]
 800b73e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b742:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	699b      	ldr	r3, [r3, #24]
 800b748:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b74c:	d119      	bne.n	800b782 <HAL_SPI_Init+0x112>
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b756:	d103      	bne.n	800b760 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d008      	beq.n	800b772 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b764:	2b00      	cmp	r3, #0
 800b766:	d10c      	bne.n	800b782 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b76c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b770:	d107      	bne.n	800b782 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	681a      	ldr	r2, [r3, #0]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b780:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d00f      	beq.n	800b7ae <HAL_SPI_Init+0x13e>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	68db      	ldr	r3, [r3, #12]
 800b792:	2b06      	cmp	r3, #6
 800b794:	d90b      	bls.n	800b7ae <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	430a      	orrs	r2, r1
 800b7aa:	601a      	str	r2, [r3, #0]
 800b7ac:	e007      	b.n	800b7be <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	681a      	ldr	r2, [r3, #0]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b7bc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	69da      	ldr	r2, [r3, #28]
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7c6:	431a      	orrs	r2, r3
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	431a      	orrs	r2, r3
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7d0:	ea42 0103 	orr.w	r1, r2, r3
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	68da      	ldr	r2, [r3, #12]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	430a      	orrs	r2, r1
 800b7de:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7e8:	431a      	orrs	r2, r3
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7ee:	431a      	orrs	r2, r3
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	699b      	ldr	r3, [r3, #24]
 800b7f4:	431a      	orrs	r2, r3
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	691b      	ldr	r3, [r3, #16]
 800b7fa:	431a      	orrs	r2, r3
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	695b      	ldr	r3, [r3, #20]
 800b800:	431a      	orrs	r2, r3
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6a1b      	ldr	r3, [r3, #32]
 800b806:	431a      	orrs	r2, r3
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	685b      	ldr	r3, [r3, #4]
 800b80c:	431a      	orrs	r2, r3
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b812:	431a      	orrs	r2, r3
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	689b      	ldr	r3, [r3, #8]
 800b818:	431a      	orrs	r2, r3
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b81e:	ea42 0103 	orr.w	r1, r2, r3
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	430a      	orrs	r2, r1
 800b82c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d113      	bne.n	800b85e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b848:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	689b      	ldr	r3, [r3, #8]
 800b850:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b85c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f022 0201 	bic.w	r2, r2, #1
 800b86c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b876:	2b00      	cmp	r3, #0
 800b878:	d00a      	beq.n	800b890 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	68db      	ldr	r3, [r3, #12]
 800b880:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	430a      	orrs	r2, r1
 800b88e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2200      	movs	r2, #0
 800b894:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2201      	movs	r2, #1
 800b89c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800b8a0:	2300      	movs	r3, #0
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3710      	adds	r7, #16
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
 800b8aa:	bf00      	nop
 800b8ac:	40013000 	.word	0x40013000
 800b8b0:	40003800 	.word	0x40003800
 800b8b4:	40003c00 	.word	0x40003c00

0800b8b8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b088      	sub	sp, #32
 800b8bc:	af02      	add	r7, sp, #8
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	60b9      	str	r1, [r7, #8]
 800b8c2:	603b      	str	r3, [r7, #0]
 800b8c4:	4613      	mov	r3, r2
 800b8c6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	3320      	adds	r3, #32
 800b8ce:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b8d0:	f7f6 f9de 	bl	8001c90 <HAL_GetTick>
 800b8d4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	2b01      	cmp	r3, #1
 800b8e0:	d001      	beq.n	800b8e6 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800b8e2:	2302      	movs	r3, #2
 800b8e4:	e1d1      	b.n	800bc8a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d002      	beq.n	800b8f2 <HAL_SPI_Transmit+0x3a>
 800b8ec:	88fb      	ldrh	r3, [r7, #6]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d101      	bne.n	800b8f6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	e1c9      	b.n	800bc8a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	d101      	bne.n	800b904 <HAL_SPI_Transmit+0x4c>
 800b900:	2302      	movs	r3, #2
 800b902:	e1c2      	b.n	800bc8a <HAL_SPI_Transmit+0x3d2>
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	2201      	movs	r2, #1
 800b908:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	2203      	movs	r2, #3
 800b910:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2200      	movs	r2, #0
 800b918:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	68ba      	ldr	r2, [r7, #8]
 800b920:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	88fa      	ldrh	r2, [r7, #6]
 800b926:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	88fa      	ldrh	r2, [r7, #6]
 800b92e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	2200      	movs	r2, #0
 800b936:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2200      	movs	r2, #0
 800b93c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2200      	movs	r2, #0
 800b944:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2200      	movs	r2, #0
 800b94c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2200      	movs	r2, #0
 800b952:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	689b      	ldr	r3, [r3, #8]
 800b958:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b95c:	d108      	bne.n	800b970 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b96c:	601a      	str	r2, [r3, #0]
 800b96e:	e009      	b.n	800b984 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	68db      	ldr	r3, [r3, #12]
 800b976:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b982:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	685a      	ldr	r2, [r3, #4]
 800b98a:	4b96      	ldr	r3, [pc, #600]	@ (800bbe4 <HAL_SPI_Transmit+0x32c>)
 800b98c:	4013      	ands	r3, r2
 800b98e:	88f9      	ldrh	r1, [r7, #6]
 800b990:	68fa      	ldr	r2, [r7, #12]
 800b992:	6812      	ldr	r2, [r2, #0]
 800b994:	430b      	orrs	r3, r1
 800b996:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	681a      	ldr	r2, [r3, #0]
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f042 0201 	orr.w	r2, r2, #1
 800b9a6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	685b      	ldr	r3, [r3, #4]
 800b9ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b9b0:	d107      	bne.n	800b9c2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	681a      	ldr	r2, [r3, #0]
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b9c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	68db      	ldr	r3, [r3, #12]
 800b9c6:	2b0f      	cmp	r3, #15
 800b9c8:	d947      	bls.n	800ba5a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b9ca:	e03f      	b.n	800ba4c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	695b      	ldr	r3, [r3, #20]
 800b9d2:	f003 0302 	and.w	r3, r3, #2
 800b9d6:	2b02      	cmp	r3, #2
 800b9d8:	d114      	bne.n	800ba04 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	6812      	ldr	r2, [r2, #0]
 800b9e4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9ea:	1d1a      	adds	r2, r3, #4
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b9f6:	b29b      	uxth	r3, r3
 800b9f8:	3b01      	subs	r3, #1
 800b9fa:	b29a      	uxth	r2, r3
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800ba02:	e023      	b.n	800ba4c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba04:	f7f6 f944 	bl	8001c90 <HAL_GetTick>
 800ba08:	4602      	mov	r2, r0
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	1ad3      	subs	r3, r2, r3
 800ba0e:	683a      	ldr	r2, [r7, #0]
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d803      	bhi.n	800ba1c <HAL_SPI_Transmit+0x164>
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba1a:	d102      	bne.n	800ba22 <HAL_SPI_Transmit+0x16a>
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d114      	bne.n	800ba4c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ba22:	68f8      	ldr	r0, [r7, #12]
 800ba24:	f000 fc70 	bl	800c308 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba2e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	2200      	movs	r2, #0
 800ba44:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ba48:	2303      	movs	r3, #3
 800ba4a:	e11e      	b.n	800bc8a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d1b9      	bne.n	800b9cc <HAL_SPI_Transmit+0x114>
 800ba58:	e0f1      	b.n	800bc3e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	68db      	ldr	r3, [r3, #12]
 800ba5e:	2b07      	cmp	r3, #7
 800ba60:	f240 80e6 	bls.w	800bc30 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ba64:	e05d      	b.n	800bb22 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	695b      	ldr	r3, [r3, #20]
 800ba6c:	f003 0302 	and.w	r3, r3, #2
 800ba70:	2b02      	cmp	r3, #2
 800ba72:	d132      	bne.n	800bada <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ba7a:	b29b      	uxth	r3, r3
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d918      	bls.n	800bab2 <HAL_SPI_Transmit+0x1fa>
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d014      	beq.n	800bab2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	6812      	ldr	r2, [r2, #0]
 800ba92:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba98:	1d1a      	adds	r2, r3, #4
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800baa4:	b29b      	uxth	r3, r3
 800baa6:	3b02      	subs	r3, #2
 800baa8:	b29a      	uxth	r2, r3
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bab0:	e037      	b.n	800bb22 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bab6:	881a      	ldrh	r2, [r3, #0]
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bac0:	1c9a      	adds	r2, r3, #2
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bacc:	b29b      	uxth	r3, r3
 800bace:	3b01      	subs	r3, #1
 800bad0:	b29a      	uxth	r2, r3
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bad8:	e023      	b.n	800bb22 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bada:	f7f6 f8d9 	bl	8001c90 <HAL_GetTick>
 800bade:	4602      	mov	r2, r0
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	1ad3      	subs	r3, r2, r3
 800bae4:	683a      	ldr	r2, [r7, #0]
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d803      	bhi.n	800baf2 <HAL_SPI_Transmit+0x23a>
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baf0:	d102      	bne.n	800baf8 <HAL_SPI_Transmit+0x240>
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d114      	bne.n	800bb22 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800baf8:	68f8      	ldr	r0, [r7, #12]
 800bafa:	f000 fc05 	bl	800c308 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb04:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2201      	movs	r2, #1
 800bb12:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bb1e:	2303      	movs	r3, #3
 800bb20:	e0b3      	b.n	800bc8a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bb28:	b29b      	uxth	r3, r3
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d19b      	bne.n	800ba66 <HAL_SPI_Transmit+0x1ae>
 800bb2e:	e086      	b.n	800bc3e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	695b      	ldr	r3, [r3, #20]
 800bb36:	f003 0302 	and.w	r3, r3, #2
 800bb3a:	2b02      	cmp	r3, #2
 800bb3c:	d154      	bne.n	800bbe8 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bb44:	b29b      	uxth	r3, r3
 800bb46:	2b03      	cmp	r3, #3
 800bb48:	d918      	bls.n	800bb7c <HAL_SPI_Transmit+0x2c4>
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb4e:	2b40      	cmp	r3, #64	@ 0x40
 800bb50:	d914      	bls.n	800bb7c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	6812      	ldr	r2, [r2, #0]
 800bb5c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb62:	1d1a      	adds	r2, r3, #4
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bb6e:	b29b      	uxth	r3, r3
 800bb70:	3b04      	subs	r3, #4
 800bb72:	b29a      	uxth	r2, r3
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bb7a:	e059      	b.n	800bc30 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	2b01      	cmp	r3, #1
 800bb86:	d917      	bls.n	800bbb8 <HAL_SPI_Transmit+0x300>
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d013      	beq.n	800bbb8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb94:	881a      	ldrh	r2, [r3, #0]
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb9e:	1c9a      	adds	r2, r3, #2
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bbaa:	b29b      	uxth	r3, r3
 800bbac:	3b02      	subs	r3, #2
 800bbae:	b29a      	uxth	r2, r3
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bbb6:	e03b      	b.n	800bc30 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	3320      	adds	r3, #32
 800bbc2:	7812      	ldrb	r2, [r2, #0]
 800bbc4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bbca:	1c5a      	adds	r2, r3, #1
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bbd6:	b29b      	uxth	r3, r3
 800bbd8:	3b01      	subs	r3, #1
 800bbda:	b29a      	uxth	r2, r3
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800bbe2:	e025      	b.n	800bc30 <HAL_SPI_Transmit+0x378>
 800bbe4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bbe8:	f7f6 f852 	bl	8001c90 <HAL_GetTick>
 800bbec:	4602      	mov	r2, r0
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	1ad3      	subs	r3, r2, r3
 800bbf2:	683a      	ldr	r2, [r7, #0]
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d803      	bhi.n	800bc00 <HAL_SPI_Transmit+0x348>
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbfe:	d102      	bne.n	800bc06 <HAL_SPI_Transmit+0x34e>
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d114      	bne.n	800bc30 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bc06:	68f8      	ldr	r0, [r7, #12]
 800bc08:	f000 fb7e 	bl	800c308 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc12:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2201      	movs	r2, #1
 800bc20:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2200      	movs	r2, #0
 800bc28:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bc2c:	2303      	movs	r3, #3
 800bc2e:	e02c      	b.n	800bc8a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bc36:	b29b      	uxth	r3, r3
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	f47f af79 	bne.w	800bb30 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	9300      	str	r3, [sp, #0]
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	2200      	movs	r2, #0
 800bc46:	2108      	movs	r1, #8
 800bc48:	68f8      	ldr	r0, [r7, #12]
 800bc4a:	f000 fbfd 	bl	800c448 <SPI_WaitOnFlagUntilTimeout>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d007      	beq.n	800bc64 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc5a:	f043 0220 	orr.w	r2, r3, #32
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bc64:	68f8      	ldr	r0, [r7, #12]
 800bc66:	f000 fb4f 	bl	800c308 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	2200      	movs	r2, #0
 800bc76:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d001      	beq.n	800bc88 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800bc84:	2301      	movs	r3, #1
 800bc86:	e000      	b.n	800bc8a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800bc88:	2300      	movs	r3, #0
  }
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3718      	adds	r7, #24
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	bf00      	nop

0800bc94 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b08e      	sub	sp, #56	@ 0x38
 800bc98:	af02      	add	r7, sp, #8
 800bc9a:	60f8      	str	r0, [r7, #12]
 800bc9c:	60b9      	str	r1, [r7, #8]
 800bc9e:	607a      	str	r2, [r7, #4]
 800bca0:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	3320      	adds	r3, #32
 800bca8:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	3330      	adds	r3, #48	@ 0x30
 800bcb0:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcb6:	095b      	lsrs	r3, r3, #5
 800bcb8:	b29b      	uxth	r3, r3
 800bcba:	3301      	adds	r3, #1
 800bcbc:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bcbe:	f7f5 ffe7 	bl	8001c90 <HAL_GetTick>
 800bcc2:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800bcc4:	887b      	ldrh	r3, [r7, #2]
 800bcc6:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800bcc8:	887b      	ldrh	r3, [r7, #2]
 800bcca:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bcd2:	b2db      	uxtb	r3, r3
 800bcd4:	2b01      	cmp	r3, #1
 800bcd6:	d001      	beq.n	800bcdc <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800bcd8:	2302      	movs	r3, #2
 800bcda:	e310      	b.n	800c2fe <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d005      	beq.n	800bcee <HAL_SPI_TransmitReceive+0x5a>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d002      	beq.n	800bcee <HAL_SPI_TransmitReceive+0x5a>
 800bce8:	887b      	ldrh	r3, [r7, #2]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d101      	bne.n	800bcf2 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800bcee:	2301      	movs	r3, #1
 800bcf0:	e305      	b.n	800c2fe <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	d101      	bne.n	800bd00 <HAL_SPI_TransmitReceive+0x6c>
 800bcfc:	2302      	movs	r3, #2
 800bcfe:	e2fe      	b.n	800c2fe <HAL_SPI_TransmitReceive+0x66a>
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	2201      	movs	r2, #1
 800bd04:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	2205      	movs	r2, #5
 800bd0c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	2200      	movs	r2, #0
 800bd14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	687a      	ldr	r2, [r7, #4]
 800bd1c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	887a      	ldrh	r2, [r7, #2]
 800bd22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	887a      	ldrh	r2, [r7, #2]
 800bd2a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	68ba      	ldr	r2, [r7, #8]
 800bd32:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	887a      	ldrh	r2, [r7, #2]
 800bd38:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	887a      	ldrh	r2, [r7, #2]
 800bd40:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2200      	movs	r2, #0
 800bd48:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	68da      	ldr	r2, [r3, #12]
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800bd5e:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	4a70      	ldr	r2, [pc, #448]	@ (800bf28 <HAL_SPI_TransmitReceive+0x294>)
 800bd66:	4293      	cmp	r3, r2
 800bd68:	d009      	beq.n	800bd7e <HAL_SPI_TransmitReceive+0xea>
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	4a6f      	ldr	r2, [pc, #444]	@ (800bf2c <HAL_SPI_TransmitReceive+0x298>)
 800bd70:	4293      	cmp	r3, r2
 800bd72:	d004      	beq.n	800bd7e <HAL_SPI_TransmitReceive+0xea>
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	4a6d      	ldr	r2, [pc, #436]	@ (800bf30 <HAL_SPI_TransmitReceive+0x29c>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d102      	bne.n	800bd84 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800bd7e:	2310      	movs	r3, #16
 800bd80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bd82:	e001      	b.n	800bd88 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800bd84:	2308      	movs	r3, #8
 800bd86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	685a      	ldr	r2, [r3, #4]
 800bd8e:	4b69      	ldr	r3, [pc, #420]	@ (800bf34 <HAL_SPI_TransmitReceive+0x2a0>)
 800bd90:	4013      	ands	r3, r2
 800bd92:	8879      	ldrh	r1, [r7, #2]
 800bd94:	68fa      	ldr	r2, [r7, #12]
 800bd96:	6812      	ldr	r2, [r2, #0]
 800bd98:	430b      	orrs	r3, r1
 800bd9a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	681a      	ldr	r2, [r3, #0]
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f042 0201 	orr.w	r2, r2, #1
 800bdaa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bdb4:	d107      	bne.n	800bdc6 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	681a      	ldr	r2, [r3, #0]
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bdc4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	68db      	ldr	r3, [r3, #12]
 800bdca:	2b0f      	cmp	r3, #15
 800bdcc:	f240 80a2 	bls.w	800bf14 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800bdd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdd2:	089b      	lsrs	r3, r3, #2
 800bdd4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bdd6:	e094      	b.n	800bf02 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	695b      	ldr	r3, [r3, #20]
 800bdde:	f003 0302 	and.w	r3, r3, #2
 800bde2:	2b02      	cmp	r3, #2
 800bde4:	d120      	bne.n	800be28 <HAL_SPI_TransmitReceive+0x194>
 800bde6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d01d      	beq.n	800be28 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800bdec:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800bdee:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800bdf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdf2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d217      	bcs.n	800be28 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	6812      	ldr	r2, [r2, #0]
 800be02:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be08:	1d1a      	adds	r2, r3, #4
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800be14:	b29b      	uxth	r3, r3
 800be16:	3b01      	subs	r3, #1
 800be18:	b29a      	uxth	r2, r3
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800be26:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	695b      	ldr	r3, [r3, #20]
 800be2e:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800be30:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800be32:	2b00      	cmp	r3, #0
 800be34:	d065      	beq.n	800bf02 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	695b      	ldr	r3, [r3, #20]
 800be3c:	f003 0301 	and.w	r3, r3, #1
 800be40:	2b01      	cmp	r3, #1
 800be42:	d118      	bne.n	800be76 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be4c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800be4e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be54:	1d1a      	adds	r2, r3, #4
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be60:	b29b      	uxth	r3, r3
 800be62:	3b01      	subs	r3, #1
 800be64:	b29a      	uxth	r2, r3
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be72:	853b      	strh	r3, [r7, #40]	@ 0x28
 800be74:	e045      	b.n	800bf02 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800be76:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800be78:	8bfb      	ldrh	r3, [r7, #30]
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d21d      	bcs.n	800beba <HAL_SPI_TransmitReceive+0x226>
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800be84:	2b00      	cmp	r3, #0
 800be86:	d018      	beq.n	800beba <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be90:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800be92:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be98:	1d1a      	adds	r2, r3, #4
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bea4:	b29b      	uxth	r3, r3
 800bea6:	3b01      	subs	r3, #1
 800bea8:	b29a      	uxth	r2, r3
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800beb6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800beb8:	e023      	b.n	800bf02 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800beba:	f7f5 fee9 	bl	8001c90 <HAL_GetTick>
 800bebe:	4602      	mov	r2, r0
 800bec0:	69bb      	ldr	r3, [r7, #24]
 800bec2:	1ad3      	subs	r3, r2, r3
 800bec4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d803      	bhi.n	800bed2 <HAL_SPI_TransmitReceive+0x23e>
 800beca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800becc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bed0:	d102      	bne.n	800bed8 <HAL_SPI_TransmitReceive+0x244>
 800bed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d114      	bne.n	800bf02 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800bed8:	68f8      	ldr	r0, [r7, #12]
 800beda:	f000 fa15 	bl	800c308 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bee4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2201      	movs	r2, #1
 800bef2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2200      	movs	r2, #0
 800befa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800befe:	2303      	movs	r3, #3
 800bf00:	e1fd      	b.n	800c2fe <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bf02:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	f47f af67 	bne.w	800bdd8 <HAL_SPI_TransmitReceive+0x144>
 800bf0a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	f47f af63 	bne.w	800bdd8 <HAL_SPI_TransmitReceive+0x144>
 800bf12:	e1ce      	b.n	800c2b2 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	68db      	ldr	r3, [r3, #12]
 800bf18:	2b07      	cmp	r3, #7
 800bf1a:	f240 81c2 	bls.w	800c2a2 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800bf1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf20:	085b      	lsrs	r3, r3, #1
 800bf22:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bf24:	e0c9      	b.n	800c0ba <HAL_SPI_TransmitReceive+0x426>
 800bf26:	bf00      	nop
 800bf28:	40013000 	.word	0x40013000
 800bf2c:	40003800 	.word	0x40003800
 800bf30:	40003c00 	.word	0x40003c00
 800bf34:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	695b      	ldr	r3, [r3, #20]
 800bf3e:	f003 0302 	and.w	r3, r3, #2
 800bf42:	2b02      	cmp	r3, #2
 800bf44:	d11f      	bne.n	800bf86 <HAL_SPI_TransmitReceive+0x2f2>
 800bf46:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d01c      	beq.n	800bf86 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800bf4c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800bf4e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800bf50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf52:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800bf54:	429a      	cmp	r2, r3
 800bf56:	d216      	bcs.n	800bf86 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bf5c:	881a      	ldrh	r2, [r3, #0]
 800bf5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf60:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bf66:	1c9a      	adds	r2, r3, #2
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bf72:	b29b      	uxth	r3, r3
 800bf74:	3b01      	subs	r3, #1
 800bf76:	b29a      	uxth	r2, r3
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bf84:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	695b      	ldr	r3, [r3, #20]
 800bf8c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800bf8e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	f000 8092 	beq.w	800c0ba <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	695b      	ldr	r3, [r3, #20]
 800bf9c:	f003 0301 	and.w	r3, r3, #1
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d118      	bne.n	800bfd6 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bfa8:	6a3a      	ldr	r2, [r7, #32]
 800bfaa:	8812      	ldrh	r2, [r2, #0]
 800bfac:	b292      	uxth	r2, r2
 800bfae:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bfb4:	1c9a      	adds	r2, r3, #2
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bfc0:	b29b      	uxth	r3, r3
 800bfc2:	3b01      	subs	r3, #1
 800bfc4:	b29a      	uxth	r2, r3
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bfd2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800bfd4:	e071      	b.n	800c0ba <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bfd6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800bfd8:	8bfb      	ldrh	r3, [r7, #30]
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d228      	bcs.n	800c030 <HAL_SPI_TransmitReceive+0x39c>
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d023      	beq.n	800c030 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bfec:	6a3a      	ldr	r2, [r7, #32]
 800bfee:	8812      	ldrh	r2, [r2, #0]
 800bff0:	b292      	uxth	r2, r2
 800bff2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bff8:	1c9a      	adds	r2, r3, #2
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c002:	6a3a      	ldr	r2, [r7, #32]
 800c004:	8812      	ldrh	r2, [r2, #0]
 800c006:	b292      	uxth	r2, r2
 800c008:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c00e:	1c9a      	adds	r2, r3, #2
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c01a:	b29b      	uxth	r3, r3
 800c01c:	3b02      	subs	r3, #2
 800c01e:	b29a      	uxth	r2, r3
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c02c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c02e:	e044      	b.n	800c0ba <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800c030:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c032:	2b01      	cmp	r3, #1
 800c034:	d11d      	bne.n	800c072 <HAL_SPI_TransmitReceive+0x3de>
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d018      	beq.n	800c072 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c044:	6a3a      	ldr	r2, [r7, #32]
 800c046:	8812      	ldrh	r2, [r2, #0]
 800c048:	b292      	uxth	r2, r2
 800c04a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c050:	1c9a      	adds	r2, r3, #2
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	3b01      	subs	r3, #1
 800c060:	b29a      	uxth	r2, r3
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c06e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c070:	e023      	b.n	800c0ba <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c072:	f7f5 fe0d 	bl	8001c90 <HAL_GetTick>
 800c076:	4602      	mov	r2, r0
 800c078:	69bb      	ldr	r3, [r7, #24]
 800c07a:	1ad3      	subs	r3, r2, r3
 800c07c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c07e:	429a      	cmp	r2, r3
 800c080:	d803      	bhi.n	800c08a <HAL_SPI_TransmitReceive+0x3f6>
 800c082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c084:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c088:	d102      	bne.n	800c090 <HAL_SPI_TransmitReceive+0x3fc>
 800c08a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d114      	bne.n	800c0ba <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800c090:	68f8      	ldr	r0, [r7, #12]
 800c092:	f000 f939 	bl	800c308 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c09c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800c0b6:	2303      	movs	r3, #3
 800c0b8:	e121      	b.n	800c2fe <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c0ba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	f47f af3b 	bne.w	800bf38 <HAL_SPI_TransmitReceive+0x2a4>
 800c0c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	f47f af37 	bne.w	800bf38 <HAL_SPI_TransmitReceive+0x2a4>
 800c0ca:	e0f2      	b.n	800c2b2 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	695b      	ldr	r3, [r3, #20]
 800c0d2:	f003 0302 	and.w	r3, r3, #2
 800c0d6:	2b02      	cmp	r3, #2
 800c0d8:	d121      	bne.n	800c11e <HAL_SPI_TransmitReceive+0x48a>
 800c0da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d01e      	beq.n	800c11e <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800c0e0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800c0e2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800c0e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0e6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d218      	bcs.n	800c11e <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	3320      	adds	r3, #32
 800c0f6:	7812      	ldrb	r2, [r2, #0]
 800c0f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c0fe:	1c5a      	adds	r2, r3, #1
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c10a:	b29b      	uxth	r3, r3
 800c10c:	3b01      	subs	r3, #1
 800c10e:	b29a      	uxth	r2, r3
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c11c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	695b      	ldr	r3, [r3, #20]
 800c124:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800c126:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c128:	2b00      	cmp	r3, #0
 800c12a:	f000 80ba 	beq.w	800c2a2 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	695b      	ldr	r3, [r3, #20]
 800c134:	f003 0301 	and.w	r3, r3, #1
 800c138:	2b01      	cmp	r3, #1
 800c13a:	d11b      	bne.n	800c174 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c148:	7812      	ldrb	r2, [r2, #0]
 800c14a:	b2d2      	uxtb	r2, r2
 800c14c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c152:	1c5a      	adds	r2, r3, #1
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c15e:	b29b      	uxth	r3, r3
 800c160:	3b01      	subs	r3, #1
 800c162:	b29a      	uxth	r2, r3
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c170:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c172:	e096      	b.n	800c2a2 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800c174:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800c176:	8bfb      	ldrh	r3, [r7, #30]
 800c178:	429a      	cmp	r2, r3
 800c17a:	d24a      	bcs.n	800c212 <HAL_SPI_TransmitReceive+0x57e>
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c182:	2b00      	cmp	r3, #0
 800c184:	d045      	beq.n	800c212 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c192:	7812      	ldrb	r2, [r2, #0]
 800c194:	b2d2      	uxtb	r2, r2
 800c196:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c19c:	1c5a      	adds	r2, r3, #1
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c1ae:	7812      	ldrb	r2, [r2, #0]
 800c1b0:	b2d2      	uxtb	r2, r2
 800c1b2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c1b8:	1c5a      	adds	r2, r3, #1
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c1ca:	7812      	ldrb	r2, [r2, #0]
 800c1cc:	b2d2      	uxtb	r2, r2
 800c1ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c1d4:	1c5a      	adds	r2, r3, #1
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c1e6:	7812      	ldrb	r2, [r2, #0]
 800c1e8:	b2d2      	uxtb	r2, r2
 800c1ea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c1f0:	1c5a      	adds	r2, r3, #1
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c1fc:	b29b      	uxth	r3, r3
 800c1fe:	3b04      	subs	r3, #4
 800c200:	b29a      	uxth	r2, r3
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c20e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c210:	e047      	b.n	800c2a2 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800c212:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c214:	2b03      	cmp	r3, #3
 800c216:	d820      	bhi.n	800c25a <HAL_SPI_TransmitReceive+0x5c6>
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d01b      	beq.n	800c25a <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c22e:	7812      	ldrb	r2, [r2, #0]
 800c230:	b2d2      	uxtb	r2, r2
 800c232:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c238:	1c5a      	adds	r2, r3, #1
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c244:	b29b      	uxth	r3, r3
 800c246:	3b01      	subs	r3, #1
 800c248:	b29a      	uxth	r2, r3
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c256:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c258:	e023      	b.n	800c2a2 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c25a:	f7f5 fd19 	bl	8001c90 <HAL_GetTick>
 800c25e:	4602      	mov	r2, r0
 800c260:	69bb      	ldr	r3, [r7, #24]
 800c262:	1ad3      	subs	r3, r2, r3
 800c264:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c266:	429a      	cmp	r2, r3
 800c268:	d803      	bhi.n	800c272 <HAL_SPI_TransmitReceive+0x5de>
 800c26a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c26c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c270:	d102      	bne.n	800c278 <HAL_SPI_TransmitReceive+0x5e4>
 800c272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c274:	2b00      	cmp	r3, #0
 800c276:	d114      	bne.n	800c2a2 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800c278:	68f8      	ldr	r0, [r7, #12]
 800c27a:	f000 f845 	bl	800c308 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c284:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	2201      	movs	r2, #1
 800c292:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	2200      	movs	r2, #0
 800c29a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800c29e:	2303      	movs	r3, #3
 800c2a0:	e02d      	b.n	800c2fe <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c2a2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	f47f af11 	bne.w	800c0cc <HAL_SPI_TransmitReceive+0x438>
 800c2aa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	f47f af0d 	bne.w	800c0cc <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800c2b2:	69bb      	ldr	r3, [r7, #24]
 800c2b4:	9300      	str	r3, [sp, #0]
 800c2b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	2108      	movs	r1, #8
 800c2bc:	68f8      	ldr	r0, [r7, #12]
 800c2be:	f000 f8c3 	bl	800c448 <SPI_WaitOnFlagUntilTimeout>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d007      	beq.n	800c2d8 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c2ce:	f043 0220 	orr.w	r2, r3, #32
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c2d8:	68f8      	ldr	r0, [r7, #12]
 800c2da:	f000 f815 	bl	800c308 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d001      	beq.n	800c2fc <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	e000      	b.n	800c2fe <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800c2fc:	2300      	movs	r3, #0
  }
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3730      	adds	r7, #48	@ 0x30
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop

0800c308 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c308:	b480      	push	{r7}
 800c30a:	b085      	sub	sp, #20
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	695b      	ldr	r3, [r3, #20]
 800c316:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	699a      	ldr	r2, [r3, #24]
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f042 0208 	orr.w	r2, r2, #8
 800c326:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	699a      	ldr	r2, [r3, #24]
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f042 0210 	orr.w	r2, r2, #16
 800c336:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	681a      	ldr	r2, [r3, #0]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f022 0201 	bic.w	r2, r2, #1
 800c346:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	6919      	ldr	r1, [r3, #16]
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681a      	ldr	r2, [r3, #0]
 800c352:	4b3c      	ldr	r3, [pc, #240]	@ (800c444 <SPI_CloseTransfer+0x13c>)
 800c354:	400b      	ands	r3, r1
 800c356:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	689a      	ldr	r2, [r3, #8]
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c366:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c36e:	b2db      	uxtb	r3, r3
 800c370:	2b04      	cmp	r3, #4
 800c372:	d014      	beq.n	800c39e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	f003 0320 	and.w	r3, r3, #32
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d00f      	beq.n	800c39e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c384:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	699a      	ldr	r2, [r3, #24]
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f042 0220 	orr.w	r2, r2, #32
 800c39c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c3a4:	b2db      	uxtb	r3, r3
 800c3a6:	2b03      	cmp	r3, #3
 800c3a8:	d014      	beq.n	800c3d4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d00f      	beq.n	800c3d4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c3ba:	f043 0204 	orr.w	r2, r3, #4
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	699a      	ldr	r2, [r3, #24]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c3d2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d00f      	beq.n	800c3fe <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c3e4:	f043 0201 	orr.w	r2, r3, #1
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	699a      	ldr	r2, [r3, #24]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c3fc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c404:	2b00      	cmp	r3, #0
 800c406:	d00f      	beq.n	800c428 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c40e:	f043 0208 	orr.w	r2, r3, #8
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	699a      	ldr	r2, [r3, #24]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c426:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2200      	movs	r2, #0
 800c42c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2200      	movs	r2, #0
 800c434:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800c438:	bf00      	nop
 800c43a:	3714      	adds	r7, #20
 800c43c:	46bd      	mov	sp, r7
 800c43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c442:	4770      	bx	lr
 800c444:	fffffc90 	.word	0xfffffc90

0800c448 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b084      	sub	sp, #16
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	60f8      	str	r0, [r7, #12]
 800c450:	60b9      	str	r1, [r7, #8]
 800c452:	603b      	str	r3, [r7, #0]
 800c454:	4613      	mov	r3, r2
 800c456:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c458:	e010      	b.n	800c47c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c45a:	f7f5 fc19 	bl	8001c90 <HAL_GetTick>
 800c45e:	4602      	mov	r2, r0
 800c460:	69bb      	ldr	r3, [r7, #24]
 800c462:	1ad3      	subs	r3, r2, r3
 800c464:	683a      	ldr	r2, [r7, #0]
 800c466:	429a      	cmp	r2, r3
 800c468:	d803      	bhi.n	800c472 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c470:	d102      	bne.n	800c478 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d101      	bne.n	800c47c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c478:	2303      	movs	r3, #3
 800c47a:	e00f      	b.n	800c49c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	695a      	ldr	r2, [r3, #20]
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	4013      	ands	r3, r2
 800c486:	68ba      	ldr	r2, [r7, #8]
 800c488:	429a      	cmp	r2, r3
 800c48a:	bf0c      	ite	eq
 800c48c:	2301      	moveq	r3, #1
 800c48e:	2300      	movne	r3, #0
 800c490:	b2db      	uxtb	r3, r3
 800c492:	461a      	mov	r2, r3
 800c494:	79fb      	ldrb	r3, [r7, #7]
 800c496:	429a      	cmp	r2, r3
 800c498:	d0df      	beq.n	800c45a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c49a:	2300      	movs	r3, #0
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	3710      	adds	r7, #16
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}

0800c4a4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b085      	sub	sp, #20
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4b0:	095b      	lsrs	r3, r3, #5
 800c4b2:	3301      	adds	r3, #1
 800c4b4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	68db      	ldr	r3, [r3, #12]
 800c4ba:	3301      	adds	r3, #1
 800c4bc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	3307      	adds	r3, #7
 800c4c2:	08db      	lsrs	r3, r3, #3
 800c4c4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	68fa      	ldr	r2, [r7, #12]
 800c4ca:	fb02 f303 	mul.w	r3, r2, r3
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3714      	adds	r7, #20
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d8:	4770      	bx	lr
	...

0800c4dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b086      	sub	sp, #24
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d101      	bne.n	800c4f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	e08f      	b.n	800c610 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c4f6:	b2db      	uxtb	r3, r3
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d106      	bne.n	800c50a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2200      	movs	r2, #0
 800c500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f7f5 f821 	bl	800154c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2202      	movs	r2, #2
 800c50e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	6899      	ldr	r1, [r3, #8]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681a      	ldr	r2, [r3, #0]
 800c51c:	4b3e      	ldr	r3, [pc, #248]	@ (800c618 <HAL_TIM_Encoder_Init+0x13c>)
 800c51e:	400b      	ands	r3, r1
 800c520:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681a      	ldr	r2, [r3, #0]
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	3304      	adds	r3, #4
 800c52a:	4619      	mov	r1, r3
 800c52c:	4610      	mov	r0, r2
 800c52e:	f000 f909 	bl	800c744 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	689b      	ldr	r3, [r3, #8]
 800c538:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	699b      	ldr	r3, [r3, #24]
 800c540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	6a1b      	ldr	r3, [r3, #32]
 800c548:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	697a      	ldr	r2, [r7, #20]
 800c550:	4313      	orrs	r3, r2
 800c552:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c554:	693a      	ldr	r2, [r7, #16]
 800c556:	4b31      	ldr	r3, [pc, #196]	@ (800c61c <HAL_TIM_Encoder_Init+0x140>)
 800c558:	4013      	ands	r3, r2
 800c55a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	689a      	ldr	r2, [r3, #8]
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	699b      	ldr	r3, [r3, #24]
 800c564:	021b      	lsls	r3, r3, #8
 800c566:	4313      	orrs	r3, r2
 800c568:	693a      	ldr	r2, [r7, #16]
 800c56a:	4313      	orrs	r3, r2
 800c56c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c56e:	693a      	ldr	r2, [r7, #16]
 800c570:	4b2b      	ldr	r3, [pc, #172]	@ (800c620 <HAL_TIM_Encoder_Init+0x144>)
 800c572:	4013      	ands	r3, r2
 800c574:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c576:	693a      	ldr	r2, [r7, #16]
 800c578:	4b2a      	ldr	r3, [pc, #168]	@ (800c624 <HAL_TIM_Encoder_Init+0x148>)
 800c57a:	4013      	ands	r3, r2
 800c57c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	68da      	ldr	r2, [r3, #12]
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	69db      	ldr	r3, [r3, #28]
 800c586:	021b      	lsls	r3, r3, #8
 800c588:	4313      	orrs	r3, r2
 800c58a:	693a      	ldr	r2, [r7, #16]
 800c58c:	4313      	orrs	r3, r2
 800c58e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	691b      	ldr	r3, [r3, #16]
 800c594:	011a      	lsls	r2, r3, #4
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	6a1b      	ldr	r3, [r3, #32]
 800c59a:	031b      	lsls	r3, r3, #12
 800c59c:	4313      	orrs	r3, r2
 800c59e:	693a      	ldr	r2, [r7, #16]
 800c5a0:	4313      	orrs	r3, r2
 800c5a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800c5aa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800c5b2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	685a      	ldr	r2, [r3, #4]
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	695b      	ldr	r3, [r3, #20]
 800c5bc:	011b      	lsls	r3, r3, #4
 800c5be:	4313      	orrs	r3, r2
 800c5c0:	68fa      	ldr	r2, [r7, #12]
 800c5c2:	4313      	orrs	r3, r2
 800c5c4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	697a      	ldr	r2, [r7, #20]
 800c5cc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	693a      	ldr	r2, [r7, #16]
 800c5d4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	68fa      	ldr	r2, [r7, #12]
 800c5dc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2201      	movs	r2, #1
 800c5e2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2201      	movs	r2, #1
 800c5ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2201      	movs	r2, #1
 800c5fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2201      	movs	r2, #1
 800c602:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2201      	movs	r2, #1
 800c60a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c60e:	2300      	movs	r3, #0
}
 800c610:	4618      	mov	r0, r3
 800c612:	3718      	adds	r7, #24
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}
 800c618:	fffebff8 	.word	0xfffebff8
 800c61c:	fffffcfc 	.word	0xfffffcfc
 800c620:	fffff3f3 	.word	0xfffff3f3
 800c624:	ffff0f0f 	.word	0xffff0f0f

0800c628 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b084      	sub	sp, #16
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
 800c630:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c638:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c640:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c648:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c650:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d110      	bne.n	800c67a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c658:	7bfb      	ldrb	r3, [r7, #15]
 800c65a:	2b01      	cmp	r3, #1
 800c65c:	d102      	bne.n	800c664 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800c65e:	7b7b      	ldrb	r3, [r7, #13]
 800c660:	2b01      	cmp	r3, #1
 800c662:	d001      	beq.n	800c668 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800c664:	2301      	movs	r3, #1
 800c666:	e069      	b.n	800c73c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2202      	movs	r2, #2
 800c66c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2202      	movs	r2, #2
 800c674:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c678:	e031      	b.n	800c6de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	2b04      	cmp	r3, #4
 800c67e:	d110      	bne.n	800c6a2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c680:	7bbb      	ldrb	r3, [r7, #14]
 800c682:	2b01      	cmp	r3, #1
 800c684:	d102      	bne.n	800c68c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c686:	7b3b      	ldrb	r3, [r7, #12]
 800c688:	2b01      	cmp	r3, #1
 800c68a:	d001      	beq.n	800c690 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800c68c:	2301      	movs	r3, #1
 800c68e:	e055      	b.n	800c73c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2202      	movs	r2, #2
 800c694:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2202      	movs	r2, #2
 800c69c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c6a0:	e01d      	b.n	800c6de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c6a2:	7bfb      	ldrb	r3, [r7, #15]
 800c6a4:	2b01      	cmp	r3, #1
 800c6a6:	d108      	bne.n	800c6ba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c6a8:	7bbb      	ldrb	r3, [r7, #14]
 800c6aa:	2b01      	cmp	r3, #1
 800c6ac:	d105      	bne.n	800c6ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c6ae:	7b7b      	ldrb	r3, [r7, #13]
 800c6b0:	2b01      	cmp	r3, #1
 800c6b2:	d102      	bne.n	800c6ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c6b4:	7b3b      	ldrb	r3, [r7, #12]
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	d001      	beq.n	800c6be <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	e03e      	b.n	800c73c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2202      	movs	r2, #2
 800c6c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2202      	movs	r2, #2
 800c6ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2202      	movs	r2, #2
 800c6d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2202      	movs	r2, #2
 800c6da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d003      	beq.n	800c6ec <HAL_TIM_Encoder_Start+0xc4>
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	2b04      	cmp	r3, #4
 800c6e8:	d008      	beq.n	800c6fc <HAL_TIM_Encoder_Start+0xd4>
 800c6ea:	e00f      	b.n	800c70c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	2201      	movs	r2, #1
 800c6f2:	2100      	movs	r1, #0
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f000 f8c5 	bl	800c884 <TIM_CCxChannelCmd>
      break;
 800c6fa:	e016      	b.n	800c72a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	2201      	movs	r2, #1
 800c702:	2104      	movs	r1, #4
 800c704:	4618      	mov	r0, r3
 800c706:	f000 f8bd 	bl	800c884 <TIM_CCxChannelCmd>
      break;
 800c70a:	e00e      	b.n	800c72a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	2201      	movs	r2, #1
 800c712:	2100      	movs	r1, #0
 800c714:	4618      	mov	r0, r3
 800c716:	f000 f8b5 	bl	800c884 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	2201      	movs	r2, #1
 800c720:	2104      	movs	r1, #4
 800c722:	4618      	mov	r0, r3
 800c724:	f000 f8ae 	bl	800c884 <TIM_CCxChannelCmd>
      break;
 800c728:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	681a      	ldr	r2, [r3, #0]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f042 0201 	orr.w	r2, r2, #1
 800c738:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c73a:	2300      	movs	r3, #0
}
 800c73c:	4618      	mov	r0, r3
 800c73e:	3710      	adds	r7, #16
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}

0800c744 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c744:	b480      	push	{r7}
 800c746:	b085      	sub	sp, #20
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
 800c74c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	4a43      	ldr	r2, [pc, #268]	@ (800c864 <TIM_Base_SetConfig+0x120>)
 800c758:	4293      	cmp	r3, r2
 800c75a:	d013      	beq.n	800c784 <TIM_Base_SetConfig+0x40>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c762:	d00f      	beq.n	800c784 <TIM_Base_SetConfig+0x40>
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	4a40      	ldr	r2, [pc, #256]	@ (800c868 <TIM_Base_SetConfig+0x124>)
 800c768:	4293      	cmp	r3, r2
 800c76a:	d00b      	beq.n	800c784 <TIM_Base_SetConfig+0x40>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	4a3f      	ldr	r2, [pc, #252]	@ (800c86c <TIM_Base_SetConfig+0x128>)
 800c770:	4293      	cmp	r3, r2
 800c772:	d007      	beq.n	800c784 <TIM_Base_SetConfig+0x40>
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	4a3e      	ldr	r2, [pc, #248]	@ (800c870 <TIM_Base_SetConfig+0x12c>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d003      	beq.n	800c784 <TIM_Base_SetConfig+0x40>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	4a3d      	ldr	r2, [pc, #244]	@ (800c874 <TIM_Base_SetConfig+0x130>)
 800c780:	4293      	cmp	r3, r2
 800c782:	d108      	bne.n	800c796 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c78a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	685b      	ldr	r3, [r3, #4]
 800c790:	68fa      	ldr	r2, [r7, #12]
 800c792:	4313      	orrs	r3, r2
 800c794:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	4a32      	ldr	r2, [pc, #200]	@ (800c864 <TIM_Base_SetConfig+0x120>)
 800c79a:	4293      	cmp	r3, r2
 800c79c:	d01f      	beq.n	800c7de <TIM_Base_SetConfig+0x9a>
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7a4:	d01b      	beq.n	800c7de <TIM_Base_SetConfig+0x9a>
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	4a2f      	ldr	r2, [pc, #188]	@ (800c868 <TIM_Base_SetConfig+0x124>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d017      	beq.n	800c7de <TIM_Base_SetConfig+0x9a>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	4a2e      	ldr	r2, [pc, #184]	@ (800c86c <TIM_Base_SetConfig+0x128>)
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d013      	beq.n	800c7de <TIM_Base_SetConfig+0x9a>
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	4a2d      	ldr	r2, [pc, #180]	@ (800c870 <TIM_Base_SetConfig+0x12c>)
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	d00f      	beq.n	800c7de <TIM_Base_SetConfig+0x9a>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	4a2c      	ldr	r2, [pc, #176]	@ (800c874 <TIM_Base_SetConfig+0x130>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d00b      	beq.n	800c7de <TIM_Base_SetConfig+0x9a>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	4a2b      	ldr	r2, [pc, #172]	@ (800c878 <TIM_Base_SetConfig+0x134>)
 800c7ca:	4293      	cmp	r3, r2
 800c7cc:	d007      	beq.n	800c7de <TIM_Base_SetConfig+0x9a>
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	4a2a      	ldr	r2, [pc, #168]	@ (800c87c <TIM_Base_SetConfig+0x138>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d003      	beq.n	800c7de <TIM_Base_SetConfig+0x9a>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	4a29      	ldr	r2, [pc, #164]	@ (800c880 <TIM_Base_SetConfig+0x13c>)
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d108      	bne.n	800c7f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c7e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	68db      	ldr	r3, [r3, #12]
 800c7ea:	68fa      	ldr	r2, [r7, #12]
 800c7ec:	4313      	orrs	r3, r2
 800c7ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	695b      	ldr	r3, [r3, #20]
 800c7fa:	4313      	orrs	r3, r2
 800c7fc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	689a      	ldr	r2, [r3, #8]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	681a      	ldr	r2, [r3, #0]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	4a14      	ldr	r2, [pc, #80]	@ (800c864 <TIM_Base_SetConfig+0x120>)
 800c812:	4293      	cmp	r3, r2
 800c814:	d00f      	beq.n	800c836 <TIM_Base_SetConfig+0xf2>
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	4a16      	ldr	r2, [pc, #88]	@ (800c874 <TIM_Base_SetConfig+0x130>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d00b      	beq.n	800c836 <TIM_Base_SetConfig+0xf2>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	4a15      	ldr	r2, [pc, #84]	@ (800c878 <TIM_Base_SetConfig+0x134>)
 800c822:	4293      	cmp	r3, r2
 800c824:	d007      	beq.n	800c836 <TIM_Base_SetConfig+0xf2>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	4a14      	ldr	r2, [pc, #80]	@ (800c87c <TIM_Base_SetConfig+0x138>)
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d003      	beq.n	800c836 <TIM_Base_SetConfig+0xf2>
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	4a13      	ldr	r2, [pc, #76]	@ (800c880 <TIM_Base_SetConfig+0x13c>)
 800c832:	4293      	cmp	r3, r2
 800c834:	d103      	bne.n	800c83e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	691a      	ldr	r2, [r3, #16]
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f043 0204 	orr.w	r2, r3, #4
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2201      	movs	r2, #1
 800c84e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	68fa      	ldr	r2, [r7, #12]
 800c854:	601a      	str	r2, [r3, #0]
}
 800c856:	bf00      	nop
 800c858:	3714      	adds	r7, #20
 800c85a:	46bd      	mov	sp, r7
 800c85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c860:	4770      	bx	lr
 800c862:	bf00      	nop
 800c864:	40010000 	.word	0x40010000
 800c868:	40000400 	.word	0x40000400
 800c86c:	40000800 	.word	0x40000800
 800c870:	40000c00 	.word	0x40000c00
 800c874:	40010400 	.word	0x40010400
 800c878:	40014000 	.word	0x40014000
 800c87c:	40014400 	.word	0x40014400
 800c880:	40014800 	.word	0x40014800

0800c884 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c884:	b480      	push	{r7}
 800c886:	b087      	sub	sp, #28
 800c888:	af00      	add	r7, sp, #0
 800c88a:	60f8      	str	r0, [r7, #12]
 800c88c:	60b9      	str	r1, [r7, #8]
 800c88e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	f003 031f 	and.w	r3, r3, #31
 800c896:	2201      	movs	r2, #1
 800c898:	fa02 f303 	lsl.w	r3, r2, r3
 800c89c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	6a1a      	ldr	r2, [r3, #32]
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	43db      	mvns	r3, r3
 800c8a6:	401a      	ands	r2, r3
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	6a1a      	ldr	r2, [r3, #32]
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	f003 031f 	and.w	r3, r3, #31
 800c8b6:	6879      	ldr	r1, [r7, #4]
 800c8b8:	fa01 f303 	lsl.w	r3, r1, r3
 800c8bc:	431a      	orrs	r2, r3
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	621a      	str	r2, [r3, #32]
}
 800c8c2:	bf00      	nop
 800c8c4:	371c      	adds	r7, #28
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8cc:	4770      	bx	lr
	...

0800c8d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b085      	sub	sp, #20
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	d101      	bne.n	800c8e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c8e4:	2302      	movs	r3, #2
 800c8e6:	e06d      	b.n	800c9c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2202      	movs	r2, #2
 800c8f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	685b      	ldr	r3, [r3, #4]
 800c8fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	689b      	ldr	r3, [r3, #8]
 800c906:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	4a30      	ldr	r2, [pc, #192]	@ (800c9d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c90e:	4293      	cmp	r3, r2
 800c910:	d004      	beq.n	800c91c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	4a2f      	ldr	r2, [pc, #188]	@ (800c9d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c918:	4293      	cmp	r3, r2
 800c91a:	d108      	bne.n	800c92e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c922:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	685b      	ldr	r3, [r3, #4]
 800c928:	68fa      	ldr	r2, [r7, #12]
 800c92a:	4313      	orrs	r3, r2
 800c92c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c934:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	68fa      	ldr	r2, [r7, #12]
 800c93c:	4313      	orrs	r3, r2
 800c93e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	68fa      	ldr	r2, [r7, #12]
 800c946:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	4a20      	ldr	r2, [pc, #128]	@ (800c9d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c94e:	4293      	cmp	r3, r2
 800c950:	d022      	beq.n	800c998 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c95a:	d01d      	beq.n	800c998 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4a1d      	ldr	r2, [pc, #116]	@ (800c9d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d018      	beq.n	800c998 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	4a1c      	ldr	r2, [pc, #112]	@ (800c9dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d013      	beq.n	800c998 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	4a1a      	ldr	r2, [pc, #104]	@ (800c9e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c976:	4293      	cmp	r3, r2
 800c978:	d00e      	beq.n	800c998 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	4a15      	ldr	r2, [pc, #84]	@ (800c9d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c980:	4293      	cmp	r3, r2
 800c982:	d009      	beq.n	800c998 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4a16      	ldr	r2, [pc, #88]	@ (800c9e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d004      	beq.n	800c998 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	4a15      	ldr	r2, [pc, #84]	@ (800c9e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c994:	4293      	cmp	r3, r2
 800c996:	d10c      	bne.n	800c9b2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c99e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	689b      	ldr	r3, [r3, #8]
 800c9a4:	68ba      	ldr	r2, [r7, #8]
 800c9a6:	4313      	orrs	r3, r2
 800c9a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	68ba      	ldr	r2, [r7, #8]
 800c9b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2201      	movs	r2, #1
 800c9b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c9c2:	2300      	movs	r3, #0
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	3714      	adds	r7, #20
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ce:	4770      	bx	lr
 800c9d0:	40010000 	.word	0x40010000
 800c9d4:	40010400 	.word	0x40010400
 800c9d8:	40000400 	.word	0x40000400
 800c9dc:	40000800 	.word	0x40000800
 800c9e0:	40000c00 	.word	0x40000c00
 800c9e4:	40001800 	.word	0x40001800
 800c9e8:	40014000 	.word	0x40014000

0800c9ec <ESC_download_pre_objecthandler>:
uint32_t ESC_download_pre_objecthandler (uint16_t index,
      uint8_t subindex,
      void * data,
      size_t size,
      uint16_t flags)
{
 800c9ec:	b590      	push	{r4, r7, lr}
 800c9ee:	b089      	sub	sp, #36	@ 0x24
 800c9f0:	af02      	add	r7, sp, #8
 800c9f2:	60ba      	str	r2, [r7, #8]
 800c9f4:	607b      	str	r3, [r7, #4]
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	81fb      	strh	r3, [r7, #14]
 800c9fa:	460b      	mov	r3, r1
 800c9fc:	737b      	strb	r3, [r7, #13]
   if (IS_RXPDO (index) ||
 800c9fe:	89fb      	ldrh	r3, [r7, #14]
 800ca00:	f5b3 5fb0 	cmp.w	r3, #5632	@ 0x1600
 800ca04:	d303      	bcc.n	800ca0e <ESC_download_pre_objecthandler+0x22>
 800ca06:	89fb      	ldrh	r3, [r7, #14]
 800ca08:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 800ca0c:	d311      	bcc.n	800ca32 <ESC_download_pre_objecthandler+0x46>
 800ca0e:	89fb      	ldrh	r3, [r7, #14]
 800ca10:	f5b3 5fd0 	cmp.w	r3, #6656	@ 0x1a00
 800ca14:	d303      	bcc.n	800ca1e <ESC_download_pre_objecthandler+0x32>
       IS_TXPDO (index) ||
 800ca16:	89fb      	ldrh	r3, [r7, #14]
 800ca18:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 800ca1c:	d309      	bcc.n	800ca32 <ESC_download_pre_objecthandler+0x46>
 800ca1e:	89fb      	ldrh	r3, [r7, #14]
 800ca20:	f641 4212 	movw	r2, #7186	@ 0x1c12
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d004      	beq.n	800ca32 <ESC_download_pre_objecthandler+0x46>
       index == RX_PDO_OBJIDX ||
 800ca28:	89fb      	ldrh	r3, [r7, #14]
 800ca2a:	f641 4213 	movw	r2, #7187	@ 0x1c13
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d112      	bne.n	800ca58 <ESC_download_pre_objecthandler+0x6c>
       index == TX_PDO_OBJIDX)
   {
      uint8_t minSub = ((flags & COMPLETE_ACCESS_FLAG) == 0) ? 0 : 1;
 800ca32:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800ca36:	b29b      	uxth	r3, r3
 800ca38:	0bdb      	lsrs	r3, r3, #15
 800ca3a:	b2db      	uxtb	r3, r3
 800ca3c:	75fb      	strb	r3, [r7, #23]
      if (subindex > minSub && COE_maxSub (index) != 0)
 800ca3e:	7b7a      	ldrb	r2, [r7, #13]
 800ca40:	7dfb      	ldrb	r3, [r7, #23]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d908      	bls.n	800ca58 <ESC_download_pre_objecthandler+0x6c>
 800ca46:	89fb      	ldrh	r3, [r7, #14]
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f004 f991 	bl	8010d70 <COE_maxSub>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d001      	beq.n	800ca58 <ESC_download_pre_objecthandler+0x6c>
      {
         return ABORT_SUBINDEX0_NOT_ZERO;
 800ca54:	4b0a      	ldr	r3, [pc, #40]	@ (800ca80 <ESC_download_pre_objecthandler+0x94>)
 800ca56:	e00f      	b.n	800ca78 <ESC_download_pre_objecthandler+0x8c>
      }
   }

   if (ESCvar.pre_object_download_hook)
 800ca58:	4b0a      	ldr	r3, [pc, #40]	@ (800ca84 <ESC_download_pre_objecthandler+0x98>)
 800ca5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d00a      	beq.n	800ca76 <ESC_download_pre_objecthandler+0x8a>
   {
      return (ESCvar.pre_object_download_hook) (index,
 800ca60:	4b08      	ldr	r3, [pc, #32]	@ (800ca84 <ESC_download_pre_objecthandler+0x98>)
 800ca62:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 800ca64:	7b79      	ldrb	r1, [r7, #13]
 800ca66:	89f8      	ldrh	r0, [r7, #14]
 800ca68:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ca6a:	9300      	str	r3, [sp, #0]
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	68ba      	ldr	r2, [r7, #8]
 800ca70:	47a0      	blx	r4
 800ca72:	4603      	mov	r3, r0
 800ca74:	e000      	b.n	800ca78 <ESC_download_pre_objecthandler+0x8c>
            data,
            size,
            flags);
   }

   return 0;
 800ca76:	2300      	movs	r3, #0
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	371c      	adds	r7, #28
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd90      	pop	{r4, r7, pc}
 800ca80:	06010003 	.word	0x06010003
 800ca84:	24000bb0 	.word	0x24000bb0

0800ca88 <ESC_download_post_objecthandler>:
 * @param[in] index      = index of SDO download request to handle
 * @param[in] sub-index  = sub-index of SDO download request to handle
 * @return SDO abort code, or 0 on success
 */
uint32_t ESC_download_post_objecthandler (uint16_t index, uint8_t subindex, uint16_t flags)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b082      	sub	sp, #8
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	4603      	mov	r3, r0
 800ca90:	80fb      	strh	r3, [r7, #6]
 800ca92:	460b      	mov	r3, r1
 800ca94:	717b      	strb	r3, [r7, #5]
 800ca96:	4613      	mov	r3, r2
 800ca98:	807b      	strh	r3, [r7, #2]
   if (ESCvar.post_object_download_hook != NULL)
 800ca9a:	4b08      	ldr	r3, [pc, #32]	@ (800cabc <ESC_download_post_objecthandler+0x34>)
 800ca9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d007      	beq.n	800cab2 <ESC_download_post_objecthandler+0x2a>
   {
      return (ESCvar.post_object_download_hook)(index, subindex, flags);
 800caa2:	4b06      	ldr	r3, [pc, #24]	@ (800cabc <ESC_download_post_objecthandler+0x34>)
 800caa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caa6:	887a      	ldrh	r2, [r7, #2]
 800caa8:	7979      	ldrb	r1, [r7, #5]
 800caaa:	88f8      	ldrh	r0, [r7, #6]
 800caac:	4798      	blx	r3
 800caae:	4603      	mov	r3, r0
 800cab0:	e000      	b.n	800cab4 <ESC_download_post_objecthandler+0x2c>
   }

   return 0;
 800cab2:	2300      	movs	r3, #0
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3708      	adds	r7, #8
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}
 800cabc:	24000bb0 	.word	0x24000bb0

0800cac0 <ESC_upload_pre_objecthandler>:
uint32_t ESC_upload_pre_objecthandler (uint16_t index,
      uint8_t subindex,
      void * data,
      size_t *size,
      uint16_t flags)
{
 800cac0:	b590      	push	{r4, r7, lr}
 800cac2:	b087      	sub	sp, #28
 800cac4:	af02      	add	r7, sp, #8
 800cac6:	60ba      	str	r2, [r7, #8]
 800cac8:	607b      	str	r3, [r7, #4]
 800caca:	4603      	mov	r3, r0
 800cacc:	81fb      	strh	r3, [r7, #14]
 800cace:	460b      	mov	r3, r1
 800cad0:	737b      	strb	r3, [r7, #13]
   if (ESCvar.pre_object_upload_hook != NULL)
 800cad2:	4b0a      	ldr	r3, [pc, #40]	@ (800cafc <ESC_upload_pre_objecthandler+0x3c>)
 800cad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d00a      	beq.n	800caf0 <ESC_upload_pre_objecthandler+0x30>
   {
      return (ESCvar.pre_object_upload_hook) (index,
 800cada:	4b08      	ldr	r3, [pc, #32]	@ (800cafc <ESC_upload_pre_objecthandler+0x3c>)
 800cadc:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 800cade:	7b79      	ldrb	r1, [r7, #13]
 800cae0:	89f8      	ldrh	r0, [r7, #14]
 800cae2:	8c3b      	ldrh	r3, [r7, #32]
 800cae4:	9300      	str	r3, [sp, #0]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	68ba      	ldr	r2, [r7, #8]
 800caea:	47a0      	blx	r4
 800caec:	4603      	mov	r3, r0
 800caee:	e000      	b.n	800caf2 <ESC_upload_pre_objecthandler+0x32>
            data,
            size,
            flags);
   }

   return 0;
 800caf0:	2300      	movs	r3, #0
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	3714      	adds	r7, #20
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd90      	pop	{r4, r7, pc}
 800cafa:	bf00      	nop
 800cafc:	24000bb0 	.word	0x24000bb0

0800cb00 <ESC_upload_post_objecthandler>:
 * @param[in] index      = index of SDO upload request to handle
 * @param[in] sub-index  = sub-index of SDO upload request to handle
 * @return SDO abort code, or 0 on success
 */
uint32_t ESC_upload_post_objecthandler (uint16_t index, uint8_t subindex, uint16_t flags)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b082      	sub	sp, #8
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	4603      	mov	r3, r0
 800cb08:	80fb      	strh	r3, [r7, #6]
 800cb0a:	460b      	mov	r3, r1
 800cb0c:	717b      	strb	r3, [r7, #5]
 800cb0e:	4613      	mov	r3, r2
 800cb10:	807b      	strh	r3, [r7, #2]
   if (ESCvar.post_object_upload_hook != NULL)
 800cb12:	4b08      	ldr	r3, [pc, #32]	@ (800cb34 <ESC_upload_post_objecthandler+0x34>)
 800cb14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d007      	beq.n	800cb2a <ESC_upload_post_objecthandler+0x2a>
   {
      return (ESCvar.post_object_upload_hook)(index, subindex, flags);
 800cb1a:	4b06      	ldr	r3, [pc, #24]	@ (800cb34 <ESC_upload_post_objecthandler+0x34>)
 800cb1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cb1e:	887a      	ldrh	r2, [r7, #2]
 800cb20:	7979      	ldrb	r1, [r7, #5]
 800cb22:	88f8      	ldrh	r0, [r7, #6]
 800cb24:	4798      	blx	r3
 800cb26:	4603      	mov	r3, r0
 800cb28:	e000      	b.n	800cb2c <ESC_upload_post_objecthandler+0x2c>
   }

   return 0;
 800cb2a:	2300      	movs	r3, #0
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3708      	adds	r7, #8
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}
 800cb34:	24000bb0 	.word	0x24000bb0

0800cb38 <APP_safeoutput>:

/** Hook called from the slave stack ESC_stopoutputs to act on state changes
 * forcing us to stop outputs. Here we can set them to a safe state.
 */
void APP_safeoutput (void)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	af00      	add	r7, sp, #0
   DPRINT ("APP_safeoutput\n");

   if(ESCvar.safeoutput_override != NULL)
 800cb3c:	4b04      	ldr	r3, [pc, #16]	@ (800cb50 <APP_safeoutput+0x18>)
 800cb3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d002      	beq.n	800cb4a <APP_safeoutput+0x12>
   {
      (ESCvar.safeoutput_override)();
 800cb44:	4b02      	ldr	r3, [pc, #8]	@ (800cb50 <APP_safeoutput+0x18>)
 800cb46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb48:	4798      	blx	r3
   }
}
 800cb4a:	bf00      	nop
 800cb4c:	bd80      	pop	{r7, pc}
 800cb4e:	bf00      	nop
 800cb50:	24000bb0 	.word	0x24000bb0

0800cb54 <TXPDO_update>:

/** Write local process data to Sync Manager 3, Master Inputs.
 */
void TXPDO_update (void)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	af00      	add	r7, sp, #0
   if(ESCvar.txpdo_override != NULL)
 800cb58:	4b0d      	ldr	r3, [pc, #52]	@ (800cb90 <TXPDO_update+0x3c>)
 800cb5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d003      	beq.n	800cb68 <TXPDO_update+0x14>
   {
      (ESCvar.txpdo_override)();
 800cb60:	4b0b      	ldr	r3, [pc, #44]	@ (800cb90 <TXPDO_update+0x3c>)
 800cb62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb64:	4798      	blx	r3
      {
         COE_pdoPack (txpdo, ESCvar.sm3mappings, SMmap3);
      }
      ESC_write (ESC_SM3_sma, txpdo, ESCvar.ESC_SM3_sml);
   }
}
 800cb66:	e010      	b.n	800cb8a <TXPDO_update+0x36>
         COE_pdoPack (txpdo, ESCvar.sm3mappings, SMmap3);
 800cb68:	4b09      	ldr	r3, [pc, #36]	@ (800cb90 <TXPDO_update+0x3c>)
 800cb6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cb6e:	4a09      	ldr	r2, [pc, #36]	@ (800cb94 <TXPDO_update+0x40>)
 800cb70:	4619      	mov	r1, r3
 800cb72:	4809      	ldr	r0, [pc, #36]	@ (800cb98 <TXPDO_update+0x44>)
 800cb74:	f004 f83c 	bl	8010bf0 <COE_pdoPack>
      ESC_write (ESC_SM3_sma, txpdo, ESCvar.ESC_SM3_sml);
 800cb78:	4b05      	ldr	r3, [pc, #20]	@ (800cb90 <TXPDO_update+0x3c>)
 800cb7a:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 800cb7e:	461a      	mov	r2, r3
 800cb80:	4905      	ldr	r1, [pc, #20]	@ (800cb98 <TXPDO_update+0x44>)
 800cb82:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 800cb86:	f004 f98b 	bl	8010ea0 <ESC_write>
}
 800cb8a:	bf00      	nop
 800cb8c:	bd80      	pop	{r7, pc}
 800cb8e:	bf00      	nop
 800cb90:	24000bb0 	.word	0x24000bb0
 800cb94:	24000b14 	.word	0x24000b14
 800cb98:	240014a0 	.word	0x240014a0

0800cb9c <RXPDO_update>:

/** Read Sync Manager 2 to local process data, Master Outputs.
 */
void RXPDO_update (void)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	af00      	add	r7, sp, #0
   if(ESCvar.rxpdo_override != NULL)
 800cba0:	4b0d      	ldr	r3, [pc, #52]	@ (800cbd8 <RXPDO_update+0x3c>)
 800cba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d003      	beq.n	800cbb0 <RXPDO_update+0x14>
   {
      (ESCvar.rxpdo_override)();
 800cba8:	4b0b      	ldr	r3, [pc, #44]	@ (800cbd8 <RXPDO_update+0x3c>)
 800cbaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cbac:	4798      	blx	r3
      if (MAX_MAPPINGS_SM2 > 0)
      {
         COE_pdoUnpack (rxpdo, ESCvar.sm2mappings, SMmap2);
      }
   }
}
 800cbae:	e010      	b.n	800cbd2 <RXPDO_update+0x36>
      ESC_read (ESC_SM2_sma, rxpdo, ESCvar.ESC_SM2_sml);
 800cbb0:	4b09      	ldr	r3, [pc, #36]	@ (800cbd8 <RXPDO_update+0x3c>)
 800cbb2:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800cbb6:	461a      	mov	r2, r3
 800cbb8:	4908      	ldr	r1, [pc, #32]	@ (800cbdc <RXPDO_update+0x40>)
 800cbba:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 800cbbe:	f004 f93b 	bl	8010e38 <ESC_read>
         COE_pdoUnpack (rxpdo, ESCvar.sm2mappings, SMmap2);
 800cbc2:	4b05      	ldr	r3, [pc, #20]	@ (800cbd8 <RXPDO_update+0x3c>)
 800cbc4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800cbc8:	4a05      	ldr	r2, [pc, #20]	@ (800cbe0 <RXPDO_update+0x44>)
 800cbca:	4619      	mov	r1, r3
 800cbcc:	4803      	ldr	r0, [pc, #12]	@ (800cbdc <RXPDO_update+0x40>)
 800cbce:	f004 f871 	bl	8010cb4 <COE_pdoUnpack>
}
 800cbd2:	bf00      	nop
 800cbd4:	bd80      	pop	{r7, pc}
 800cbd6:	bf00      	nop
 800cbd8:	24000bb0 	.word	0x24000bb0
 800cbdc:	240012a0 	.word	0x240012a0
 800cbe0:	24000af0 	.word	0x24000af0

0800cbe4 <DIG_process>:
/* Function to update local I/O, call read ethercat outputs, call
 * write ethercat inputs. Implement watch-dog counter to count-out if we have
 * made state change affecting the App.state.
 */
void DIG_process (uint8_t flags)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b082      	sub	sp, #8
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	4603      	mov	r3, r0
 800cbec:	71fb      	strb	r3, [r7, #7]
   /* Handle watchdog */
   if((flags & DIG_PROCESS_WD_FLAG) > 0)
 800cbee:	79fb      	ldrb	r3, [r7, #7]
 800cbf0:	f003 0304 	and.w	r3, r3, #4
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	dd46      	ble.n	800cc86 <DIG_process+0xa2>
   {
      if (CC_ATOMIC_GET(watchdog) > 0)
 800cbf8:	4b4f      	ldr	r3, [pc, #316]	@ (800cd38 <DIG_process+0x154>)
 800cbfa:	f3bf 8f5b 	dmb	ish
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	f3bf 8f5b 	dmb	ish
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	dd0c      	ble.n	800cc22 <DIG_process+0x3e>
      {
         CC_ATOMIC_SUB(watchdog, 1);
 800cc08:	4b4b      	ldr	r3, [pc, #300]	@ (800cd38 <DIG_process+0x154>)
 800cc0a:	f3bf 8f5b 	dmb	ish
 800cc0e:	e853 1f00 	ldrex	r1, [r3]
 800cc12:	f101 31ff 	add.w	r1, r1, #4294967295
 800cc16:	e843 1200 	strex	r2, r1, [r3]
 800cc1a:	2a00      	cmp	r2, #0
 800cc1c:	d1f7      	bne.n	800cc0e <DIG_process+0x2a>
 800cc1e:	f3bf 8f5b 	dmb	ish
      }

      if ((CC_ATOMIC_GET(watchdog) <= 0) &&
 800cc22:	4b45      	ldr	r3, [pc, #276]	@ (800cd38 <DIG_process+0x154>)
 800cc24:	f3bf 8f5b 	dmb	ish
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f3bf 8f5b 	dmb	ish
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	dc14      	bgt.n	800cc5c <DIG_process+0x78>
          ((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 800cc32:	4b42      	ldr	r3, [pc, #264]	@ (800cd3c <DIG_process+0x158>)
 800cc34:	f3bf 8f5b 	dmb	ish
 800cc38:	781b      	ldrb	r3, [r3, #0]
 800cc3a:	f3bf 8f5b 	dmb	ish
 800cc3e:	b2db      	uxtb	r3, r3
 800cc40:	f003 0302 	and.w	r3, r3, #2
      if ((CC_ATOMIC_GET(watchdog) <= 0) &&
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	dd09      	ble.n	800cc5c <DIG_process+0x78>
           (ESCvar.ESC_SM2_sml > 0))
 800cc48:	4b3d      	ldr	r3, [pc, #244]	@ (800cd40 <DIG_process+0x15c>)
 800cc4a:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
          ((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d004      	beq.n	800cc5c <DIG_process+0x78>
      {
         DPRINT("DIG_process watchdog expired\n");
         ESC_ALstatusgotoerror((ESCsafeop | ESCerror), ALERR_WATCHDOG);
 800cc52:	211b      	movs	r1, #27
 800cc54:	2014      	movs	r0, #20
 800cc56:	f000 f919 	bl	800ce8c <ESC_ALstatusgotoerror>
 800cc5a:	e014      	b.n	800cc86 <DIG_process+0xa2>
      }
      else if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) == 0))
 800cc5c:	4b37      	ldr	r3, [pc, #220]	@ (800cd3c <DIG_process+0x158>)
 800cc5e:	f3bf 8f5b 	dmb	ish
 800cc62:	781b      	ldrb	r3, [r3, #0]
 800cc64:	f3bf 8f5b 	dmb	ish
 800cc68:	b2db      	uxtb	r3, r3
 800cc6a:	f003 0302 	and.w	r3, r3, #2
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d109      	bne.n	800cc86 <DIG_process+0xa2>
      {
         CC_ATOMIC_SET(watchdog, ESCvar.watchdogcnt);
 800cc72:	4b33      	ldr	r3, [pc, #204]	@ (800cd40 <DIG_process+0x15c>)
 800cc74:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800cc78:	461a      	mov	r2, r3
 800cc7a:	4b2f      	ldr	r3, [pc, #188]	@ (800cd38 <DIG_process+0x154>)
 800cc7c:	f3bf 8f5b 	dmb	ish
 800cc80:	601a      	str	r2, [r3, #0]
 800cc82:	f3bf 8f5b 	dmb	ish
      }
   }

   /* Handle Outputs */
   if ((flags & DIG_PROCESS_OUTPUTS_FLAG) > 0)
 800cc86:	79fb      	ldrb	r3, [r7, #7]
 800cc88:	f003 0302 	and.w	r3, r3, #2
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	dd30      	ble.n	800ccf2 <DIG_process+0x10e>
   {
      if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 800cc90:	4b2a      	ldr	r3, [pc, #168]	@ (800cd3c <DIG_process+0x158>)
 800cc92:	f3bf 8f5b 	dmb	ish
 800cc96:	781b      	ldrb	r3, [r3, #0]
 800cc98:	f3bf 8f5b 	dmb	ish
 800cc9c:	b2db      	uxtb	r3, r3
 800cc9e:	f003 0302 	and.w	r3, r3, #2
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	dd15      	ble.n	800ccd2 <DIG_process+0xee>
         (ESCvar.ALevent & ESCREG_ALEVENT_SM2))
 800cca6:	4b26      	ldr	r3, [pc, #152]	@ (800cd40 <DIG_process+0x15c>)
 800cca8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ccac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0) &&
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d00e      	beq.n	800ccd2 <DIG_process+0xee>
      {
         RXPDO_update();
 800ccb4:	f7ff ff72 	bl	800cb9c <RXPDO_update>
         CC_ATOMIC_SET(watchdog, ESCvar.watchdogcnt);
 800ccb8:	4b21      	ldr	r3, [pc, #132]	@ (800cd40 <DIG_process+0x15c>)
 800ccba:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800ccbe:	461a      	mov	r2, r3
 800ccc0:	4b1d      	ldr	r3, [pc, #116]	@ (800cd38 <DIG_process+0x154>)
 800ccc2:	f3bf 8f5b 	dmb	ish
 800ccc6:	601a      	str	r2, [r3, #0]
 800ccc8:	f3bf 8f5b 	dmb	ish
         /* Set outputs */
         cb_set_outputs();
 800cccc:	f7f4 f93a 	bl	8000f44 <cb_set_outputs>
 800ccd0:	e00f      	b.n	800ccf2 <DIG_process+0x10e>
      }
      else if (ESCvar.ALevent & ESCREG_ALEVENT_SM2)
 800ccd2:	4b1b      	ldr	r3, [pc, #108]	@ (800cd40 <DIG_process+0x15c>)
 800ccd4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ccd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d008      	beq.n	800ccf2 <DIG_process+0x10e>
      {
         ESC_read (ESC_SM2_sma, rxpdo, ESCvar.ESC_SM2_sml);
 800cce0:	4b17      	ldr	r3, [pc, #92]	@ (800cd40 <DIG_process+0x15c>)
 800cce2:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800cce6:	461a      	mov	r2, r3
 800cce8:	4916      	ldr	r1, [pc, #88]	@ (800cd44 <DIG_process+0x160>)
 800ccea:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 800ccee:	f004 f8a3 	bl	8010e38 <ESC_read>
      }
   }

   /* Call application */
   if ((flags & DIG_PROCESS_APP_HOOK_FLAG) > 0)
 800ccf2:	79fb      	ldrb	r3, [r7, #7]
 800ccf4:	f003 0308 	and.w	r3, r3, #8
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	dd06      	ble.n	800cd0a <DIG_process+0x126>
   {
      /* Call application callback if set */
      if (ESCvar.application_hook != NULL)
 800ccfc:	4b10      	ldr	r3, [pc, #64]	@ (800cd40 <DIG_process+0x15c>)
 800ccfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d002      	beq.n	800cd0a <DIG_process+0x126>
      {
         (ESCvar.application_hook)();
 800cd04:	4b0e      	ldr	r3, [pc, #56]	@ (800cd40 <DIG_process+0x15c>)
 800cd06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd08:	4798      	blx	r3
      }
   }

   /* Handle Inputs */
   if ((flags & DIG_PROCESS_INPUTS_FLAG) > 0)
 800cd0a:	79fb      	ldrb	r3, [r7, #7]
 800cd0c:	f003 0301 	and.w	r3, r3, #1
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	dd0c      	ble.n	800cd2e <DIG_process+0x14a>
   {
      if(CC_ATOMIC_GET(ESCvar.App.state) > 0)
 800cd14:	4b09      	ldr	r3, [pc, #36]	@ (800cd3c <DIG_process+0x158>)
 800cd16:	f3bf 8f5b 	dmb	ish
 800cd1a:	781b      	ldrb	r3, [r3, #0]
 800cd1c:	f3bf 8f5b 	dmb	ish
 800cd20:	b2db      	uxtb	r3, r3
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d003      	beq.n	800cd2e <DIG_process+0x14a>
      {
         /* Update inputs */
         cb_get_inputs();
 800cd26:	f7f4 f935 	bl	8000f94 <cb_get_inputs>
         TXPDO_update();
 800cd2a:	f7ff ff13 	bl	800cb54 <TXPDO_update>
      }
   }
}
 800cd2e:	bf00      	nop
 800cd30:	3708      	adds	r7, #8
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
 800cd36:	bf00      	nop
 800cd38:	2400129c 	.word	0x2400129c
 800cd3c:	24000c99 	.word	0x24000c99
 800cd40:	24000bb0 	.word	0x24000bb0
 800cd44:	240012a0 	.word	0x240012a0

0800cd48 <ecat_slv_poll>:
 * Polling function. It should be called periodically for an application 
 * when only SM2/DC interrupt is active.
 * Read and handle events for the EtherCAT state, status, mailbox and eeprom.
 */
void ecat_slv_poll (void)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	af00      	add	r7, sp, #0
   /* Read local time from ESC*/
   ESC_read (ESCREG_LOCALTIME, (void *) &ESCvar.Time, sizeof (ESCvar.Time));
 800cd4c:	2204      	movs	r2, #4
 800cd4e:	4910      	ldr	r1, [pc, #64]	@ (800cd90 <ecat_slv_poll+0x48>)
 800cd50:	f44f 6011 	mov.w	r0, #2320	@ 0x910
 800cd54:	f004 f870 	bl	8010e38 <ESC_read>
   ESCvar.Time = etohl (ESCvar.Time);
 800cd58:	4b0e      	ldr	r3, [pc, #56]	@ (800cd94 <ecat_slv_poll+0x4c>)
 800cd5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cd5e:	4a0d      	ldr	r2, [pc, #52]	@ (800cd94 <ecat_slv_poll+0x4c>)
 800cd60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

   /* Check the state machine */
   ESC_state();
 800cd64:	f001 f86e 	bl	800de44 <ESC_state>
   /* Check the SM activation event */
   ESC_sm_act_event();
 800cd68:	f000 ff5e 	bl	800dc28 <ESC_sm_act_event>

   /* Check mailboxes */
   if (ESC_mbxprocess())
 800cd6c:	f000 fc88 	bl	800d680 <ESC_mbxprocess>
 800cd70:	4603      	mov	r3, r0
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d003      	beq.n	800cd7e <ecat_slv_poll+0x36>
   {
      ESC_coeprocess();
 800cd76:	f003 fae1 	bl	801033c <ESC_coeprocess>
      ESC_foeprocess();
#endif
#if USE_EOE
      ESC_eoeprocess();
#endif
      ESC_xoeprocess();
 800cd7a:	f000 fdb9 	bl	800d8f0 <ESC_xoeprocess>
#if USE_EOE
   ESC_eoeprocess_tx();
#endif

   /* Call emulated eeprom handler if set */
   if (ESCvar.esc_hw_eep_handler != NULL)
 800cd7e:	4b05      	ldr	r3, [pc, #20]	@ (800cd94 <ecat_slv_poll+0x4c>)
 800cd80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d002      	beq.n	800cd8c <ecat_slv_poll+0x44>
   {
      (ESCvar.esc_hw_eep_handler)();
 800cd86:	4b03      	ldr	r3, [pc, #12]	@ (800cd94 <ecat_slv_poll+0x4c>)
 800cd88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd8a:	4798      	blx	r3
   }
}
 800cd8c:	bf00      	nop
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	24000c90 	.word	0x24000c90
 800cd94:	24000bb0 	.word	0x24000bb0

0800cd98 <ecat_slv>:

/*
 * Poll all events in a free-run application
 */
void ecat_slv (void)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	af00      	add	r7, sp, #0
   ecat_slv_poll();
 800cd9c:	f7ff ffd4 	bl	800cd48 <ecat_slv_poll>
   DIG_process(DIG_PROCESS_WD_FLAG | DIG_PROCESS_OUTPUTS_FLAG |
 800cda0:	200f      	movs	r0, #15
 800cda2:	f7ff ff1f 	bl	800cbe4 <DIG_process>
         DIG_PROCESS_APP_HOOK_FLAG | DIG_PROCESS_INPUTS_FLAG);
}
 800cda6:	bf00      	nop
 800cda8:	bd80      	pop	{r7, pc}
	...

0800cdac <ecat_slv_init>:

/*
 * Initialize the slave stack.
 */
void ecat_slv_init (esc_cfg_t * config)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b082      	sub	sp, #8
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
   DPRINT ("Slave stack init started\n");

   /* Init watchdog */
   watchdog = config->watchdog_cnt;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	689b      	ldr	r3, [r3, #8]
 800cdb8:	4a16      	ldr	r2, [pc, #88]	@ (800ce14 <ecat_slv_init+0x68>)
 800cdba:	6013      	str	r3, [r2, #0]

   /* Call stack configuration */
   ESC_config (config);
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f001 faab 	bl	800e318 <ESC_config>
   /* Call HW init */
   ESC_init (config);
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f004 f894 	bl	8010ef0 <ESC_init>

   /*  wait until ESC is started up */
   while ((ESCvar.DLstatus & 0x0001) == 0)
 800cdc8:	e00b      	b.n	800cde2 <ecat_slv_init+0x36>
   {
      ESC_read (ESCREG_DLSTATUS, (void *) &ESCvar.DLstatus,
 800cdca:	2202      	movs	r2, #2
 800cdcc:	4912      	ldr	r1, [pc, #72]	@ (800ce18 <ecat_slv_init+0x6c>)
 800cdce:	f44f 7088 	mov.w	r0, #272	@ 0x110
 800cdd2:	f004 f831 	bl	8010e38 <ESC_read>
                sizeof (ESCvar.DLstatus));
      ESCvar.DLstatus = etohs (ESCvar.DLstatus);
 800cdd6:	4b11      	ldr	r3, [pc, #68]	@ (800ce1c <ecat_slv_init+0x70>)
 800cdd8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	@ 0x86
 800cddc:	4b0f      	ldr	r3, [pc, #60]	@ (800ce1c <ecat_slv_init+0x70>)
 800cdde:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
   while ((ESCvar.DLstatus & 0x0001) == 0)
 800cde2:	4b0e      	ldr	r3, [pc, #56]	@ (800ce1c <ecat_slv_init+0x70>)
 800cde4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 800cde8:	f003 0301 	and.w	r3, r3, #1
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d0ec      	beq.n	800cdca <ecat_slv_init+0x1e>
   /* Init EoE */
   EOE_init ();
#endif

   /* reset ESC to init state */
   ESC_ALstatus (ESCinit);
 800cdf0:	2001      	movs	r0, #1
 800cdf2:	f000 f82f 	bl	800ce54 <ESC_ALstatus>
   ESC_ALerror (ALERR_NONE);
 800cdf6:	2000      	movs	r0, #0
 800cdf8:	f000 f812 	bl	800ce20 <ESC_ALerror>
   ESC_stopmbx ();
 800cdfc:	f000 fa88 	bl	800d310 <ESC_stopmbx>
   ESC_stopinput ();
 800ce00:	f000 feb4 	bl	800db6c <ESC_stopinput>
   ESC_stopoutput ();
 800ce04:	f000 fef8 	bl	800dbf8 <ESC_stopoutput>
   /* Init Object Dictionary default values */
   COE_initDefaultValues ();
 800ce08:	f003 fe86 	bl	8010b18 <COE_initDefaultValues>
}
 800ce0c:	bf00      	nop
 800ce0e:	3708      	adds	r7, #8
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}
 800ce14:	2400129c 	.word	0x2400129c
 800ce18:	24000c36 	.word	0x24000c36
 800ce1c:	24000bb0 	.word	0x24000bb0

0800ce20 <ESC_ALerror>:
/** Write AL Status Code to the ESC.
 *
 * @param[in] errornumber   = Write an by EtherCAT specified Error number register 0x134 AL Status Code
 */
void ESC_ALerror (uint16_t errornumber)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b084      	sub	sp, #16
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	4603      	mov	r3, r0
 800ce28:	80fb      	strh	r3, [r7, #6]
   uint16_t dummy;
   ESCvar.ALerror = errornumber;
 800ce2a:	4a09      	ldr	r2, [pc, #36]	@ (800ce50 <ESC_ALerror+0x30>)
 800ce2c:	88fb      	ldrh	r3, [r7, #6]
 800ce2e:	f8a2 3084 	strh.w	r3, [r2, #132]	@ 0x84
   dummy = htoes (errornumber);
 800ce32:	88fb      	ldrh	r3, [r7, #6]
 800ce34:	81fb      	strh	r3, [r7, #14]
   ESC_write (ESCREG_ALERROR, &dummy, sizeof (dummy));
 800ce36:	f107 030e 	add.w	r3, r7, #14
 800ce3a:	2202      	movs	r2, #2
 800ce3c:	4619      	mov	r1, r3
 800ce3e:	f44f 709a 	mov.w	r0, #308	@ 0x134
 800ce42:	f004 f82d 	bl	8010ea0 <ESC_write>
}
 800ce46:	bf00      	nop
 800ce48:	3710      	adds	r7, #16
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}
 800ce4e:	bf00      	nop
 800ce50:	24000bb0 	.word	0x24000bb0

0800ce54 <ESC_ALstatus>:
 *
 * @param[in] status   = Write current slave status to register 0x130 AL Status
 * reflecting actual state and error indication if present
 */
void ESC_ALstatus (uint8_t status)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b084      	sub	sp, #16
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	71fb      	strb	r3, [r7, #7]
   uint16_t dummy;
   ESCvar.ALstatus = status;
 800ce5e:	79fb      	ldrb	r3, [r7, #7]
 800ce60:	b29a      	uxth	r2, r3
 800ce62:	4b09      	ldr	r3, [pc, #36]	@ (800ce88 <ESC_ALstatus+0x34>)
 800ce64:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
   dummy = htoes ((uint16_t) status);
 800ce68:	79fb      	ldrb	r3, [r7, #7]
 800ce6a:	b29b      	uxth	r3, r3
 800ce6c:	81fb      	strh	r3, [r7, #14]
   ESC_write (ESCREG_ALSTATUS, &dummy, sizeof (dummy));
 800ce6e:	f107 030e 	add.w	r3, r7, #14
 800ce72:	2202      	movs	r2, #2
 800ce74:	4619      	mov	r1, r3
 800ce76:	f44f 7098 	mov.w	r0, #304	@ 0x130
 800ce7a:	f004 f811 	bl	8010ea0 <ESC_write>
}
 800ce7e:	bf00      	nop
 800ce80:	3710      	adds	r7, #16
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}
 800ce86:	bf00      	nop
 800ce88:	24000bb0 	.word	0x24000bb0

0800ce8c <ESC_ALstatusgotoerror>:
 * reflecting actual state and error indication if present
 * @param[in] errornumber   = Write an by EtherCAT specified Error number
 * register 0x134 AL Status Code
 */
void ESC_ALstatusgotoerror (uint8_t status, uint16_t errornumber)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b084      	sub	sp, #16
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	4603      	mov	r3, r0
 800ce94:	460a      	mov	r2, r1
 800ce96:	71fb      	strb	r3, [r7, #7]
 800ce98:	4613      	mov	r3, r2
 800ce9a:	80bb      	strh	r3, [r7, #4]
   uint8_t an, as;

   if(status & ESCop)
 800ce9c:	79fb      	ldrb	r3, [r7, #7]
 800ce9e:	f003 0308 	and.w	r3, r3, #8
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d145      	bne.n	800cf32 <ESC_ALstatusgotoerror+0xa6>
   {
      /* Erroneous input, ignore */
      return;
   }
   /* Mask error ack of current state */
   as = ESCvar.ALstatus & ESCREG_AL_ERRACKMASK;
 800cea6:	4b25      	ldr	r3, [pc, #148]	@ (800cf3c <ESC_ALstatusgotoerror+0xb0>)
 800cea8:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 800ceac:	b2db      	uxtb	r3, r3
 800ceae:	f003 030f 	and.w	r3, r3, #15
 800ceb2:	b2db      	uxtb	r3, r3
 800ceb4:	73bb      	strb	r3, [r7, #14]
   an = as;
 800ceb6:	7bbb      	ldrb	r3, [r7, #14]
 800ceb8:	73fb      	strb	r3, [r7, #15]
   /* Set the state transition, new state in high bits and old in bits  */
   as = (uint8_t)(((status & ESCREG_AL_ERRACKMASK) << 4) | (as & 0x0f));
 800ceba:	79fb      	ldrb	r3, [r7, #7]
 800cebc:	011b      	lsls	r3, r3, #4
 800cebe:	b25a      	sxtb	r2, r3
 800cec0:	7bbb      	ldrb	r3, [r7, #14]
 800cec2:	b25b      	sxtb	r3, r3
 800cec4:	f003 030f 	and.w	r3, r3, #15
 800cec8:	b25b      	sxtb	r3, r3
 800ceca:	4313      	orrs	r3, r2
 800cecc:	b25b      	sxtb	r3, r3
 800cece:	b2db      	uxtb	r3, r3
 800ced0:	73bb      	strb	r3, [r7, #14]
   /* Call post state change hook case it have been configured  */
   if (ESCvar.pre_state_change_hook != NULL)
 800ced2:	4b1a      	ldr	r3, [pc, #104]	@ (800cf3c <ESC_ALstatusgotoerror+0xb0>)
 800ced4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d007      	beq.n	800ceea <ESC_ALstatusgotoerror+0x5e>
   {
      ESCvar.pre_state_change_hook (&as, &an);
 800ceda:	4b18      	ldr	r3, [pc, #96]	@ (800cf3c <ESC_ALstatusgotoerror+0xb0>)
 800cedc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cede:	f107 010f 	add.w	r1, r7, #15
 800cee2:	f107 020e 	add.w	r2, r7, #14
 800cee6:	4610      	mov	r0, r2
 800cee8:	4798      	blx	r3
   }
   /* Stop outputs if active */
   if ((CC_ATOMIC_GET(ESCvar.App.state) & APPSTATE_OUTPUT) > 0)
 800ceea:	4b15      	ldr	r3, [pc, #84]	@ (800cf40 <ESC_ALstatusgotoerror+0xb4>)
 800ceec:	f3bf 8f5b 	dmb	ish
 800cef0:	781b      	ldrb	r3, [r3, #0]
 800cef2:	f3bf 8f5b 	dmb	ish
 800cef6:	b2db      	uxtb	r3, r3
 800cef8:	f003 0302 	and.w	r3, r3, #2
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	dd01      	ble.n	800cf04 <ESC_ALstatusgotoerror+0x78>
   {
      ESC_stopoutput();
 800cf00:	f000 fe7a 	bl	800dbf8 <ESC_stopoutput>
   }
   ESC_ALerror(errornumber);
 800cf04:	88bb      	ldrh	r3, [r7, #4]
 800cf06:	4618      	mov	r0, r3
 800cf08:	f7ff ff8a 	bl	800ce20 <ESC_ALerror>
   ESC_ALstatus(status);
 800cf0c:	79fb      	ldrb	r3, [r7, #7]
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f7ff ffa0 	bl	800ce54 <ESC_ALstatus>
   an = status;
 800cf14:	79fb      	ldrb	r3, [r7, #7]
 800cf16:	73fb      	strb	r3, [r7, #15]
   /* Call post state change hook case it have been configured  */
   if (ESCvar.post_state_change_hook != NULL)
 800cf18:	4b08      	ldr	r3, [pc, #32]	@ (800cf3c <ESC_ALstatusgotoerror+0xb0>)
 800cf1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d009      	beq.n	800cf34 <ESC_ALstatusgotoerror+0xa8>
   {
      ESCvar.post_state_change_hook (&as, &an);
 800cf20:	4b06      	ldr	r3, [pc, #24]	@ (800cf3c <ESC_ALstatusgotoerror+0xb0>)
 800cf22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf24:	f107 010f 	add.w	r1, r7, #15
 800cf28:	f107 020e 	add.w	r2, r7, #14
 800cf2c:	4610      	mov	r0, r2
 800cf2e:	4798      	blx	r3
 800cf30:	e000      	b.n	800cf34 <ESC_ALstatusgotoerror+0xa8>
      return;
 800cf32:	bf00      	nop
   }
}
 800cf34:	3710      	adds	r7, #16
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}
 800cf3a:	bf00      	nop
 800cf3c:	24000bb0 	.word	0x24000bb0
 800cf40:	24000c99 	.word	0x24000c99

0800cf44 <ESC_SMack>:
 * Sync Manager event Bit 3 in ALevent. The result is not used.
 *
 * @param[in] n   = Read Sync Manager no. n
 */
void ESC_SMack (uint8_t n)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b084      	sub	sp, #16
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	71fb      	strb	r3, [r7, #7]
   uint8_t dummy;
   ESC_read ((uint16_t)(ESCREG_SM0ACTIVATE + (n << 3)), &dummy, 1);
 800cf4e:	79fb      	ldrb	r3, [r7, #7]
 800cf50:	b29b      	uxth	r3, r3
 800cf52:	00db      	lsls	r3, r3, #3
 800cf54:	b29b      	uxth	r3, r3
 800cf56:	f603 0306 	addw	r3, r3, #2054	@ 0x806
 800cf5a:	b29b      	uxth	r3, r3
 800cf5c:	f107 010f 	add.w	r1, r7, #15
 800cf60:	2201      	movs	r2, #1
 800cf62:	4618      	mov	r0, r3
 800cf64:	f003 ff68 	bl	8010e38 <ESC_read>
}
 800cf68:	bf00      	nop
 800cf6a:	3710      	adds	r7, #16
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}

0800cf70 <ESC_SMstatus>:
 * result in global variable ESCvar.SM[n].
 *
 * @param[in] n   = Read Sync Manager no. n
 */
void ESC_SMstatus (uint8_t n)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b084      	sub	sp, #16
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	4603      	mov	r3, r0
 800cf78:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 800cf7a:	79fb      	ldrb	r3, [r7, #7]
 800cf7c:	3317      	adds	r3, #23
 800cf7e:	00db      	lsls	r3, r3, #3
 800cf80:	4a0a      	ldr	r2, [pc, #40]	@ (800cfac <ESC_SMstatus+0x3c>)
 800cf82:	4413      	add	r3, r2
 800cf84:	3304      	adds	r3, #4
 800cf86:	60fb      	str	r3, [r7, #12]
   ESC_read ((uint16_t)(ESCREG_SM0STATUS + (n << 3)), &(sm->Status), 1);
 800cf88:	79fb      	ldrb	r3, [r7, #7]
 800cf8a:	b29b      	uxth	r3, r3
 800cf8c:	00db      	lsls	r3, r3, #3
 800cf8e:	b29b      	uxth	r3, r3
 800cf90:	f603 0305 	addw	r3, r3, #2053	@ 0x805
 800cf94:	b298      	uxth	r0, r3
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	3305      	adds	r3, #5
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	4619      	mov	r1, r3
 800cf9e:	f003 ff4b 	bl	8010e38 <ESC_read>
}
 800cfa2:	bf00      	nop
 800cfa4:	3710      	adds	r7, #16
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	bf00      	nop
 800cfac:	24000bb0 	.word	0x24000bb0

0800cfb0 <ESC_SMwritepdi>:
/** Write ESCvar.SM[n] data to ESC PDI control register 0x807(+ offset to SyncManager n).
 *
 * @param[in] n   = Write to Sync Manager no. n
 */
void ESC_SMwritepdi (uint8_t n)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b084      	sub	sp, #16
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 800cfba:	79fb      	ldrb	r3, [r7, #7]
 800cfbc:	3317      	adds	r3, #23
 800cfbe:	00db      	lsls	r3, r3, #3
 800cfc0:	4a0a      	ldr	r2, [pc, #40]	@ (800cfec <ESC_SMwritepdi+0x3c>)
 800cfc2:	4413      	add	r3, r2
 800cfc4:	3304      	adds	r3, #4
 800cfc6:	60fb      	str	r3, [r7, #12]
   ESC_write ((uint16_t)(ESCREG_SM0PDI + (n << 3)), &(sm->ActPDI), 1);
 800cfc8:	79fb      	ldrb	r3, [r7, #7]
 800cfca:	b29b      	uxth	r3, r3
 800cfcc:	00db      	lsls	r3, r3, #3
 800cfce:	b29b      	uxth	r3, r3
 800cfd0:	f603 0307 	addw	r3, r3, #2055	@ 0x807
 800cfd4:	b298      	uxth	r0, r3
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	3307      	adds	r3, #7
 800cfda:	2201      	movs	r2, #1
 800cfdc:	4619      	mov	r1, r3
 800cfde:	f003 ff5f 	bl	8010ea0 <ESC_write>
}
 800cfe2:	bf00      	nop
 800cfe4:	3710      	adds	r7, #16
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
 800cfea:	bf00      	nop
 800cfec:	24000bb0 	.word	0x24000bb0

0800cff0 <ESC_SMenable>:
/** Write 0 to Bit0 in SM PDI control register 0x807(+ offset to SyncManager n) to Activate the Sync Manager n.
 *
 * @param[in] n   = Write to Sync Manager no. n
 */
void ESC_SMenable (uint8_t n)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b084      	sub	sp, #16
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	4603      	mov	r3, r0
 800cff8:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 800cffa:	79fb      	ldrb	r3, [r7, #7]
 800cffc:	3317      	adds	r3, #23
 800cffe:	00db      	lsls	r3, r3, #3
 800d000:	4a09      	ldr	r2, [pc, #36]	@ (800d028 <ESC_SMenable+0x38>)
 800d002:	4413      	add	r3, r2
 800d004:	3304      	adds	r3, #4
 800d006:	60fb      	str	r3, [r7, #12]
   sm->ActPDI &= (uint8_t)~ESCREG_SMENABLE_BIT;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	79db      	ldrb	r3, [r3, #7]
 800d00c:	f023 0301 	bic.w	r3, r3, #1
 800d010:	b2da      	uxtb	r2, r3
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	71da      	strb	r2, [r3, #7]
   ESC_SMwritepdi (n);
 800d016:	79fb      	ldrb	r3, [r7, #7]
 800d018:	4618      	mov	r0, r3
 800d01a:	f7ff ffc9 	bl	800cfb0 <ESC_SMwritepdi>
}
 800d01e:	bf00      	nop
 800d020:	3710      	adds	r7, #16
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}
 800d026:	bf00      	nop
 800d028:	24000bb0 	.word	0x24000bb0

0800d02c <ESC_SMdisable>:
/** Write 1 to Bit0 in SM PDI control register 0x807(+ offset to SyncManager n) to De-activte the Sync Manager n.
 *
 * @param[in] n   = Write to Sync Manager no. n
 */
void ESC_SMdisable (uint8_t n)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b084      	sub	sp, #16
 800d030:	af00      	add	r7, sp, #0
 800d032:	4603      	mov	r3, r0
 800d034:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *sm;
   sm = (_ESCsm2 *)&ESCvar.SM[n];
 800d036:	79fb      	ldrb	r3, [r7, #7]
 800d038:	3317      	adds	r3, #23
 800d03a:	00db      	lsls	r3, r3, #3
 800d03c:	4a09      	ldr	r2, [pc, #36]	@ (800d064 <ESC_SMdisable+0x38>)
 800d03e:	4413      	add	r3, r2
 800d040:	3304      	adds	r3, #4
 800d042:	60fb      	str	r3, [r7, #12]
   sm->ActPDI |= ESCREG_SMENABLE_BIT;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	79db      	ldrb	r3, [r3, #7]
 800d048:	f043 0301 	orr.w	r3, r3, #1
 800d04c:	b2da      	uxtb	r2, r3
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	71da      	strb	r2, [r3, #7]
   ESC_SMwritepdi (n);
 800d052:	79fb      	ldrb	r3, [r7, #7]
 800d054:	4618      	mov	r0, r3
 800d056:	f7ff ffab 	bl	800cfb0 <ESC_SMwritepdi>
}
 800d05a:	bf00      	nop
 800d05c:	3710      	adds	r7, #16
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop
 800d064:	24000bb0 	.word	0x24000bb0

0800d068 <ESC_address>:
/** Read Configured Station Address register 0x010 assigned by the Master.
 *
 */
void ESC_address (void)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	af00      	add	r7, sp, #0
   ESC_read (ESCREG_ADDRESS, (void *) &ESCvar.address, sizeof (ESCvar.address));
 800d06c:	2202      	movs	r2, #2
 800d06e:	4906      	ldr	r1, [pc, #24]	@ (800d088 <ESC_address+0x20>)
 800d070:	2010      	movs	r0, #16
 800d072:	f003 fee1 	bl	8010e38 <ESC_read>
   ESCvar.address = etohs (ESCvar.address);
 800d076:	4b05      	ldr	r3, [pc, #20]	@ (800d08c <ESC_address+0x24>)
 800d078:	f8b3 2088 	ldrh.w	r2, [r3, #136]	@ 0x88
 800d07c:	4b03      	ldr	r3, [pc, #12]	@ (800d08c <ESC_address+0x24>)
 800d07e:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
}
 800d082:	bf00      	nop
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop
 800d088:	24000c38 	.word	0x24000c38
 800d08c:	24000bb0 	.word	0x24000bb0

0800d090 <ESC_SYNCactivation>:
/** Read SYNC Out Unit activation registers 0x981
 *
 * @return value of register Activation.
 */
uint8_t ESC_SYNCactivation (void)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b082      	sub	sp, #8
 800d094:	af00      	add	r7, sp, #0
   uint8_t activation;
   ESC_read (ESCREG_SYNC_ACT, &activation, sizeof(activation));
 800d096:	1dfb      	adds	r3, r7, #7
 800d098:	2201      	movs	r2, #1
 800d09a:	4619      	mov	r1, r3
 800d09c:	f640 1081 	movw	r0, #2433	@ 0x981
 800d0a0:	f003 feca 	bl	8010e38 <ESC_read>
   return activation;
 800d0a4:	79fb      	ldrb	r3, [r7, #7]
}
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	3708      	adds	r7, #8
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}
	...

0800d0b0 <ESC_checkDC>:
/** Validate the DC values if the SYNC unit is activated.
 *
 * @return = 0 if OK, else ERROR code to be set by caller.
 */
uint16_t ESC_checkDC (void)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b082      	sub	sp, #8
 800d0b4:	af00      	add	r7, sp, #0
   uint16_t ret = 0;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	80fb      	strh	r3, [r7, #6]

   uint8_t sync_act = ESC_SYNCactivation();
 800d0ba:	f7ff ffe9 	bl	800d090 <ESC_SYNCactivation>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	717b      	strb	r3, [r7, #5]
   /* Do we need to check sync settings? */
   if((sync_act & (ESCREG_SYNC_ACT_ACTIVATED | ESCREG_SYNC_AUTO_ACTIVATED)) > 0)
 800d0c2:	797b      	ldrb	r3, [r7, #5]
 800d0c4:	f003 0309 	and.w	r3, r3, #9
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	dd0b      	ble.n	800d0e4 <ESC_checkDC+0x34>
   {
      /* Trigger a by the application given DC check handler, return error if
       *  non is given
       */
      ret = ALERR_DCINVALIDSYNCCFG;
 800d0cc:	2330      	movs	r3, #48	@ 0x30
 800d0ce:	80fb      	strh	r3, [r7, #6]
      if(ESCvar.esc_check_dc_handler != NULL)
 800d0d0:	4b0b      	ldr	r3, [pc, #44]	@ (800d100 <ESC_checkDC+0x50>)
 800d0d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d00d      	beq.n	800d0f4 <ESC_checkDC+0x44>
      {
         ret = (ESCvar.esc_check_dc_handler)();
 800d0d8:	4b09      	ldr	r3, [pc, #36]	@ (800d100 <ESC_checkDC+0x50>)
 800d0da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d0dc:	4798      	blx	r3
 800d0de:	4603      	mov	r3, r0
 800d0e0:	80fb      	strh	r3, [r7, #6]
 800d0e2:	e007      	b.n	800d0f4 <ESC_checkDC+0x44>
      }
   }
   else
   {
      ESCvar.dcsync = 0;
 800d0e4:	4b06      	ldr	r3, [pc, #24]	@ (800d100 <ESC_checkDC+0x50>)
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      ESCvar.synccounter = 0;
 800d0ec:	4b04      	ldr	r3, [pc, #16]	@ (800d100 <ESC_checkDC+0x50>)
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
   }

   return ret;
 800d0f4:	88fb      	ldrh	r3, [r7, #6]
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	3708      	adds	r7, #8
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
 800d0fe:	bf00      	nop
 800d100:	24000bb0 	.word	0x24000bb0

0800d104 <ESC_checkmbx>:
 * @param[in] state   = Current state request read from ALControl 0x0120
 * @return if all Mailbox values is correct we return incoming state request, otherwise
 * we return state Init with Error flag set.
 */
uint8_t ESC_checkmbx (uint8_t state)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b084      	sub	sp, #16
 800d108:	af00      	add	r7, sp, #0
 800d10a:	4603      	mov	r3, r0
 800d10c:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *SM;
   ESC_read (ESCREG_SM0, (void *) &ESCvar.SM[0], sizeof (ESCvar.SM[0]));
 800d10e:	2208      	movs	r2, #8
 800d110:	4934      	ldr	r1, [pc, #208]	@ (800d1e4 <ESC_checkmbx+0xe0>)
 800d112:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800d116:	f003 fe8f 	bl	8010e38 <ESC_read>
   ESC_read (ESCREG_SM1, (void *) &ESCvar.SM[1], sizeof (ESCvar.SM[1]));
 800d11a:	2208      	movs	r2, #8
 800d11c:	4932      	ldr	r1, [pc, #200]	@ (800d1e8 <ESC_checkmbx+0xe4>)
 800d11e:	f640 0008 	movw	r0, #2056	@ 0x808
 800d122:	f003 fe89 	bl	8010e38 <ESC_read>
   SM = (_ESCsm2 *) & ESCvar.SM[0];
 800d126:	4b2f      	ldr	r3, [pc, #188]	@ (800d1e4 <ESC_checkmbx+0xe0>)
 800d128:	60fb      	str	r3, [r7, #12]
   if ((etohs (SM->PSA) != ESC_MBX0_sma) || (etohs (SM->Length) != ESC_MBX0_sml)
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	881b      	ldrh	r3, [r3, #0]
 800d12e:	b29a      	uxth	r2, r3
 800d130:	4b2e      	ldr	r3, [pc, #184]	@ (800d1ec <ESC_checkmbx+0xe8>)
 800d132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d134:	881b      	ldrh	r3, [r3, #0]
 800d136:	429a      	cmp	r2, r3
 800d138:	d116      	bne.n	800d168 <ESC_checkmbx+0x64>
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	885b      	ldrh	r3, [r3, #2]
 800d13e:	b29a      	uxth	r2, r3
 800d140:	4b2a      	ldr	r3, [pc, #168]	@ (800d1ec <ESC_checkmbx+0xe8>)
 800d142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d144:	885b      	ldrh	r3, [r3, #2]
 800d146:	429a      	cmp	r2, r3
 800d148:	d10e      	bne.n	800d168 <ESC_checkmbx+0x64>
       || (SM->Command != ESC_MBX0_smc) || (ESCvar.SM[0].ECsm == 0))
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	791a      	ldrb	r2, [r3, #4]
 800d14e:	4b27      	ldr	r3, [pc, #156]	@ (800d1ec <ESC_checkmbx+0xe8>)
 800d150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d152:	799b      	ldrb	r3, [r3, #6]
 800d154:	429a      	cmp	r2, r3
 800d156:	d107      	bne.n	800d168 <ESC_checkmbx+0x64>
 800d158:	4b24      	ldr	r3, [pc, #144]	@ (800d1ec <ESC_checkmbx+0xe8>)
 800d15a:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 800d15e:	f003 0301 	and.w	r3, r3, #1
 800d162:	b2db      	uxtb	r3, r3
 800d164:	2b00      	cmp	r3, #0
 800d166:	d10b      	bne.n	800d180 <ESC_checkmbx+0x7c>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM0;
 800d168:	4b20      	ldr	r3, [pc, #128]	@ (800d1ec <ESC_checkmbx+0xe8>)
 800d16a:	2201      	movs	r2, #1
 800d16c:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
      ESC_SMdisable (0);
 800d170:	2000      	movs	r0, #0
 800d172:	f7ff ff5b 	bl	800d02c <ESC_SMdisable>
      ESC_SMdisable (1);
 800d176:	2001      	movs	r0, #1
 800d178:	f7ff ff58 	bl	800d02c <ESC_SMdisable>
      return (uint8_t) (ESCinit | ESCerror);      //fail state change
 800d17c:	2311      	movs	r3, #17
 800d17e:	e02d      	b.n	800d1dc <ESC_checkmbx+0xd8>
   }
   SM = (_ESCsm2 *) & ESCvar.SM[1];
 800d180:	4b19      	ldr	r3, [pc, #100]	@ (800d1e8 <ESC_checkmbx+0xe4>)
 800d182:	60fb      	str	r3, [r7, #12]
   if ((etohs (SM->PSA) != ESC_MBX1_sma) || (etohs (SM->Length) != ESC_MBX1_sml)
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	881b      	ldrh	r3, [r3, #0]
 800d188:	b29a      	uxth	r2, r3
 800d18a:	4b18      	ldr	r3, [pc, #96]	@ (800d1ec <ESC_checkmbx+0xe8>)
 800d18c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d18e:	881b      	ldrh	r3, [r3, #0]
 800d190:	429a      	cmp	r2, r3
 800d192:	d116      	bne.n	800d1c2 <ESC_checkmbx+0xbe>
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	885b      	ldrh	r3, [r3, #2]
 800d198:	b29a      	uxth	r2, r3
 800d19a:	4b14      	ldr	r3, [pc, #80]	@ (800d1ec <ESC_checkmbx+0xe8>)
 800d19c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d19e:	885b      	ldrh	r3, [r3, #2]
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d10e      	bne.n	800d1c2 <ESC_checkmbx+0xbe>
       || (SM->Command != ESC_MBX1_smc) || (ESCvar.SM[1].ECsm == 0))
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	791a      	ldrb	r2, [r3, #4]
 800d1a8:	4b10      	ldr	r3, [pc, #64]	@ (800d1ec <ESC_checkmbx+0xe8>)
 800d1aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d1ac:	799b      	ldrb	r3, [r3, #6]
 800d1ae:	429a      	cmp	r2, r3
 800d1b0:	d107      	bne.n	800d1c2 <ESC_checkmbx+0xbe>
 800d1b2:	4b0e      	ldr	r3, [pc, #56]	@ (800d1ec <ESC_checkmbx+0xe8>)
 800d1b4:	f893 30ca 	ldrb.w	r3, [r3, #202]	@ 0xca
 800d1b8:	f003 0301 	and.w	r3, r3, #1
 800d1bc:	b2db      	uxtb	r3, r3
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d10b      	bne.n	800d1da <ESC_checkmbx+0xd6>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM1;
 800d1c2:	4b0a      	ldr	r3, [pc, #40]	@ (800d1ec <ESC_checkmbx+0xe8>)
 800d1c4:	2202      	movs	r2, #2
 800d1c6:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
      ESC_SMdisable (0);
 800d1ca:	2000      	movs	r0, #0
 800d1cc:	f7ff ff2e 	bl	800d02c <ESC_SMdisable>
      ESC_SMdisable (1);
 800d1d0:	2001      	movs	r0, #1
 800d1d2:	f7ff ff2b 	bl	800d02c <ESC_SMdisable>
      return ESCinit | ESCerror;        //fail state change
 800d1d6:	2311      	movs	r3, #17
 800d1d8:	e000      	b.n	800d1dc <ESC_checkmbx+0xd8>
   }
   return state;
 800d1da:	79fb      	ldrb	r3, [r7, #7]
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	3710      	adds	r7, #16
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}
 800d1e4:	24000c6c 	.word	0x24000c6c
 800d1e8:	24000c74 	.word	0x24000c74
 800d1ec:	24000bb0 	.word	0x24000bb0

0800d1f0 <ESC_startmbx>:
 * @param[in] state   = Current state request read from ALControl 0x0120
 * @return if all Mailbox values is correct we return incoming state, otherwise
 * we return state Init with Error flag set.
 */
uint8_t ESC_startmbx (uint8_t state)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b082      	sub	sp, #8
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	71fb      	strb	r3, [r7, #7]
   /* Assign SM settings */
   ESCvar.activembxsize = MBXSIZE;
 800d1fa:	4b1e      	ldr	r3, [pc, #120]	@ (800d274 <ESC_startmbx+0x84>)
 800d1fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d200:	66da      	str	r2, [r3, #108]	@ 0x6c
   ESCvar.activemb0 = &ESCvar.mb[0];
 800d202:	4b1c      	ldr	r3, [pc, #112]	@ (800d274 <ESC_startmbx+0x84>)
 800d204:	4a1c      	ldr	r2, [pc, #112]	@ (800d278 <ESC_startmbx+0x88>)
 800d206:	671a      	str	r2, [r3, #112]	@ 0x70
   ESCvar.activemb1 = &ESCvar.mb[1];
 800d208:	4b1a      	ldr	r3, [pc, #104]	@ (800d274 <ESC_startmbx+0x84>)
 800d20a:	4a1c      	ldr	r2, [pc, #112]	@ (800d27c <ESC_startmbx+0x8c>)
 800d20c:	675a      	str	r2, [r3, #116]	@ 0x74


   ESC_SMenable (0);
 800d20e:	2000      	movs	r0, #0
 800d210:	f7ff feee 	bl	800cff0 <ESC_SMenable>
   ESC_SMenable (1);
 800d214:	2001      	movs	r0, #1
 800d216:	f7ff feeb 	bl	800cff0 <ESC_SMenable>
   ESC_SMstatus (0);
 800d21a:	2000      	movs	r0, #0
 800d21c:	f7ff fea8 	bl	800cf70 <ESC_SMstatus>
   ESC_SMstatus (1);
 800d220:	2001      	movs	r0, #1
 800d222:	f7ff fea5 	bl	800cf70 <ESC_SMstatus>
   if ((state = ESC_checkmbx (state)) & ESCerror)
 800d226:	79fb      	ldrb	r3, [r7, #7]
 800d228:	4618      	mov	r0, r3
 800d22a:	f7ff ff6b 	bl	800d104 <ESC_checkmbx>
 800d22e:	4603      	mov	r3, r0
 800d230:	71fb      	strb	r3, [r7, #7]
 800d232:	79fb      	ldrb	r3, [r7, #7]
 800d234:	f003 0310 	and.w	r3, r3, #16
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d007      	beq.n	800d24c <ESC_startmbx+0x5c>
   {
      ESC_ALerror (ALERR_INVALIDMBXCONFIG);
 800d23c:	2016      	movs	r0, #22
 800d23e:	f7ff fdef 	bl	800ce20 <ESC_ALerror>
      ESCvar.MBXrun = 0;
 800d242:	4b0c      	ldr	r3, [pc, #48]	@ (800d274 <ESC_startmbx+0x84>)
 800d244:	2200      	movs	r2, #0
 800d246:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
 800d24a:	e00d      	b.n	800d268 <ESC_startmbx+0x78>
   }
   else
   {
      ESCvar.toggle = ESCvar.SM[1].ECrep;       //sync repeat request toggle state
 800d24c:	4b09      	ldr	r3, [pc, #36]	@ (800d274 <ESC_startmbx+0x84>)
 800d24e:	f893 30ca 	ldrb.w	r3, [r3, #202]	@ 0xca
 800d252:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d256:	b2db      	uxtb	r3, r3
 800d258:	461a      	mov	r2, r3
 800d25a:	4b06      	ldr	r3, [pc, #24]	@ (800d274 <ESC_startmbx+0x84>)
 800d25c:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
      ESCvar.MBXrun = 1;
 800d260:	4b04      	ldr	r3, [pc, #16]	@ (800d274 <ESC_startmbx+0x84>)
 800d262:	2201      	movs	r2, #1
 800d264:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
   }
   return state;
 800d268:	79fb      	ldrb	r3, [r7, #7]
}
 800d26a:	4618      	mov	r0, r3
 800d26c:	3708      	adds	r7, #8
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}
 800d272:	bf00      	nop
 800d274:	24000bb0 	.word	0x24000bb0
 800d278:	24000bb4 	.word	0x24000bb4
 800d27c:	24000bbc 	.word	0x24000bbc

0800d280 <ESC_startmbxboot>:
 * @param[in] state   = Current state request read from ALControl 0x0120
 * @return if all Mailbox values is correct we return incoming state, otherwise
 * we return state Init with Error flag set.
 */
uint8_t ESC_startmbxboot (uint8_t state)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	4603      	mov	r3, r0
 800d288:	71fb      	strb	r3, [r7, #7]
   /* Assign SM settings */
   ESCvar.activembxsize = MBXSIZEBOOT;
 800d28a:	4b1e      	ldr	r3, [pc, #120]	@ (800d304 <ESC_startmbxboot+0x84>)
 800d28c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d290:	66da      	str	r2, [r3, #108]	@ 0x6c
   ESCvar.activemb0 = &ESCvar.mbboot[0];
 800d292:	4b1c      	ldr	r3, [pc, #112]	@ (800d304 <ESC_startmbxboot+0x84>)
 800d294:	4a1c      	ldr	r2, [pc, #112]	@ (800d308 <ESC_startmbxboot+0x88>)
 800d296:	671a      	str	r2, [r3, #112]	@ 0x70
   ESCvar.activemb1 = &ESCvar.mbboot[1];
 800d298:	4b1a      	ldr	r3, [pc, #104]	@ (800d304 <ESC_startmbxboot+0x84>)
 800d29a:	4a1c      	ldr	r2, [pc, #112]	@ (800d30c <ESC_startmbxboot+0x8c>)
 800d29c:	675a      	str	r2, [r3, #116]	@ 0x74

   ESC_SMenable (0);
 800d29e:	2000      	movs	r0, #0
 800d2a0:	f7ff fea6 	bl	800cff0 <ESC_SMenable>
   ESC_SMenable (1);
 800d2a4:	2001      	movs	r0, #1
 800d2a6:	f7ff fea3 	bl	800cff0 <ESC_SMenable>
   ESC_SMstatus (0);
 800d2aa:	2000      	movs	r0, #0
 800d2ac:	f7ff fe60 	bl	800cf70 <ESC_SMstatus>
   ESC_SMstatus (1);
 800d2b0:	2001      	movs	r0, #1
 800d2b2:	f7ff fe5d 	bl	800cf70 <ESC_SMstatus>
   if ((state = ESC_checkmbx (state)) & ESCerror)
 800d2b6:	79fb      	ldrb	r3, [r7, #7]
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f7ff ff23 	bl	800d104 <ESC_checkmbx>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	71fb      	strb	r3, [r7, #7]
 800d2c2:	79fb      	ldrb	r3, [r7, #7]
 800d2c4:	f003 0310 	and.w	r3, r3, #16
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d007      	beq.n	800d2dc <ESC_startmbxboot+0x5c>
   {
      ESC_ALerror (ALERR_INVALIDBOOTMBXCONFIG);
 800d2cc:	2015      	movs	r0, #21
 800d2ce:	f7ff fda7 	bl	800ce20 <ESC_ALerror>
      ESCvar.MBXrun = 0;
 800d2d2:	4b0c      	ldr	r3, [pc, #48]	@ (800d304 <ESC_startmbxboot+0x84>)
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
 800d2da:	e00d      	b.n	800d2f8 <ESC_startmbxboot+0x78>
   }
   else
   {
      ESCvar.toggle = ESCvar.SM[1].ECrep;       //sync repeat request toggle state
 800d2dc:	4b09      	ldr	r3, [pc, #36]	@ (800d304 <ESC_startmbxboot+0x84>)
 800d2de:	f893 30ca 	ldrb.w	r3, [r3, #202]	@ 0xca
 800d2e2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d2e6:	b2db      	uxtb	r3, r3
 800d2e8:	461a      	mov	r2, r3
 800d2ea:	4b06      	ldr	r3, [pc, #24]	@ (800d304 <ESC_startmbxboot+0x84>)
 800d2ec:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
      ESCvar.MBXrun = 1;
 800d2f0:	4b04      	ldr	r3, [pc, #16]	@ (800d304 <ESC_startmbxboot+0x84>)
 800d2f2:	2201      	movs	r2, #1
 800d2f4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
   }
   return state;
 800d2f8:	79fb      	ldrb	r3, [r7, #7]
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3708      	adds	r7, #8
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}
 800d302:	bf00      	nop
 800d304:	24000bb0 	.word	0x24000bb0
 800d308:	24000bc4 	.word	0x24000bc4
 800d30c:	24000bcc 	.word	0x24000bcc

0800d310 <ESC_stopmbx>:

/** Stop mailboxes by disabling SyncManager 0 and 1. Clear local mailbox variables
 * stored in ESCvar.
 */
void ESC_stopmbx (void)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b082      	sub	sp, #8
 800d314:	af00      	add	r7, sp, #0
   uint8_t n;
   ESCvar.MBXrun = 0;
 800d316:	4b27      	ldr	r3, [pc, #156]	@ (800d3b4 <ESC_stopmbx+0xa4>)
 800d318:	2200      	movs	r2, #0
 800d31a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
   ESC_SMdisable (0);
 800d31e:	2000      	movs	r0, #0
 800d320:	f7ff fe84 	bl	800d02c <ESC_SMdisable>
   ESC_SMdisable (1);
 800d324:	2001      	movs	r0, #1
 800d326:	f7ff fe81 	bl	800d02c <ESC_SMdisable>
   for (n = 0; n < ESC_MBXBUFFERS; n++)
 800d32a:	2300      	movs	r3, #0
 800d32c:	71fb      	strb	r3, [r7, #7]
 800d32e:	e006      	b.n	800d33e <ESC_stopmbx+0x2e>
   {
      MBXcontrol[n].state = MBXstate_idle;
 800d330:	79fb      	ldrb	r3, [r7, #7]
 800d332:	4a21      	ldr	r2, [pc, #132]	@ (800d3b8 <ESC_stopmbx+0xa8>)
 800d334:	2100      	movs	r1, #0
 800d336:	54d1      	strb	r1, [r2, r3]
   for (n = 0; n < ESC_MBXBUFFERS; n++)
 800d338:	79fb      	ldrb	r3, [r7, #7]
 800d33a:	3301      	adds	r3, #1
 800d33c:	71fb      	strb	r3, [r7, #7]
 800d33e:	79fb      	ldrb	r3, [r7, #7]
 800d340:	2b02      	cmp	r3, #2
 800d342:	d9f5      	bls.n	800d330 <ESC_stopmbx+0x20>
   }
   ESCvar.mbxoutpost = 0;
 800d344:	4b1b      	ldr	r3, [pc, #108]	@ (800d3b4 <ESC_stopmbx+0xa4>)
 800d346:	2200      	movs	r2, #0
 800d348:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
   ESCvar.mbxbackup = 0;
 800d34c:	4b19      	ldr	r3, [pc, #100]	@ (800d3b4 <ESC_stopmbx+0xa4>)
 800d34e:	2200      	movs	r2, #0
 800d350:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
   ESCvar.xoe = 0;
 800d354:	4b17      	ldr	r3, [pc, #92]	@ (800d3b4 <ESC_stopmbx+0xa4>)
 800d356:	2200      	movs	r2, #0
 800d358:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
   ESCvar.mbxfree = 1;
 800d35c:	4b15      	ldr	r3, [pc, #84]	@ (800d3b4 <ESC_stopmbx+0xa4>)
 800d35e:	2201      	movs	r2, #1
 800d360:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
   ESCvar.toggle = 0;
 800d364:	4b13      	ldr	r3, [pc, #76]	@ (800d3b4 <ESC_stopmbx+0xa4>)
 800d366:	2200      	movs	r2, #0
 800d368:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
   ESCvar.mbxincnt = 0;
 800d36c:	4b11      	ldr	r3, [pc, #68]	@ (800d3b4 <ESC_stopmbx+0xa4>)
 800d36e:	2200      	movs	r2, #0
 800d370:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
   ESCvar.segmented = 0;
 800d374:	4b0f      	ldr	r3, [pc, #60]	@ (800d3b4 <ESC_stopmbx+0xa4>)
 800d376:	2200      	movs	r2, #0
 800d378:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
   ESCvar.frags = 0;
 800d37c:	4b0d      	ldr	r3, [pc, #52]	@ (800d3b4 <ESC_stopmbx+0xa4>)
 800d37e:	2200      	movs	r2, #0
 800d380:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
   ESCvar.fragsleft = 0;
 800d384:	4b0b      	ldr	r3, [pc, #44]	@ (800d3b4 <ESC_stopmbx+0xa4>)
 800d386:	2200      	movs	r2, #0
 800d388:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
   ESCvar.txcue = 0;
 800d38c:	4b09      	ldr	r3, [pc, #36]	@ (800d3b4 <ESC_stopmbx+0xa4>)
 800d38e:	2200      	movs	r2, #0
 800d390:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
   ESCvar.index = 0;
 800d394:	4b07      	ldr	r3, [pc, #28]	@ (800d3b4 <ESC_stopmbx+0xa4>)
 800d396:	2200      	movs	r2, #0
 800d398:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
   ESCvar.subindex = 0;
 800d39c:	4b05      	ldr	r3, [pc, #20]	@ (800d3b4 <ESC_stopmbx+0xa4>)
 800d39e:	2200      	movs	r2, #0
 800d3a0:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
   ESCvar.flags = 0;
 800d3a4:	4b03      	ldr	r3, [pc, #12]	@ (800d3b4 <ESC_stopmbx+0xa4>)
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
}
 800d3ac:	bf00      	nop
 800d3ae:	3708      	adds	r7, #8
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}
 800d3b4:	24000bb0 	.word	0x24000bb0
 800d3b8:	24000aec 	.word	0x24000aec

0800d3bc <ESC_readmbx>:
/** Read Receive mailbox and store data in local ESCvar.MBX variable.
 * Combined function for bootstrap and other states. State check decides
 * which one to read.
 */
void ESC_readmbx (void)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b082      	sub	sp, #8
 800d3c0:	af00      	add	r7, sp, #0
   _MBX *MB = (_MBX *)&MBX[0];
 800d3c2:	4b1e      	ldr	r3, [pc, #120]	@ (800d43c <ESC_readmbx+0x80>)
 800d3c4:	607b      	str	r3, [r7, #4]
   uint16_t length;

   ESC_read (ESC_MBX0_sma, MB, ESC_MBXHSIZE);
 800d3c6:	4b1e      	ldr	r3, [pc, #120]	@ (800d440 <ESC_readmbx+0x84>)
 800d3c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3ca:	881b      	ldrh	r3, [r3, #0]
 800d3cc:	2206      	movs	r2, #6
 800d3ce:	6879      	ldr	r1, [r7, #4]
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f003 fd31 	bl	8010e38 <ESC_read>
   length = etohs (MB->header.length);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	881b      	ldrh	r3, [r3, #0]
 800d3da:	b29b      	uxth	r3, r3
 800d3dc:	807b      	strh	r3, [r7, #2]

   if (length > (ESC_MBX0_sml - ESC_MBXHSIZE))
 800d3de:	887b      	ldrh	r3, [r7, #2]
 800d3e0:	461a      	mov	r2, r3
 800d3e2:	4b17      	ldr	r3, [pc, #92]	@ (800d440 <ESC_readmbx+0x84>)
 800d3e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3e6:	885b      	ldrh	r3, [r3, #2]
 800d3e8:	3b06      	subs	r3, #6
 800d3ea:	429a      	cmp	r2, r3
 800d3ec:	d905      	bls.n	800d3fa <ESC_readmbx+0x3e>
   {
      length = (uint16_t)(ESC_MBX0_sml - ESC_MBXHSIZE);
 800d3ee:	4b14      	ldr	r3, [pc, #80]	@ (800d440 <ESC_readmbx+0x84>)
 800d3f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3f2:	885b      	ldrh	r3, [r3, #2]
 800d3f4:	3b06      	subs	r3, #6
 800d3f6:	b29b      	uxth	r3, r3
 800d3f8:	807b      	strh	r3, [r7, #2]
   }
   ESC_read ((uint16_t)(ESC_MBX0_sma + ESC_MBXHSIZE), MB->b, length);
 800d3fa:	4b11      	ldr	r3, [pc, #68]	@ (800d440 <ESC_readmbx+0x84>)
 800d3fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3fe:	881b      	ldrh	r3, [r3, #0]
 800d400:	3306      	adds	r3, #6
 800d402:	b298      	uxth	r0, r3
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	3306      	adds	r3, #6
 800d408:	887a      	ldrh	r2, [r7, #2]
 800d40a:	4619      	mov	r1, r3
 800d40c:	f003 fd14 	bl	8010e38 <ESC_read>
   if (length + ESC_MBXHSIZE < ESC_MBX0_sml)
 800d410:	887b      	ldrh	r3, [r7, #2]
 800d412:	3306      	adds	r3, #6
 800d414:	4a0a      	ldr	r2, [pc, #40]	@ (800d440 <ESC_readmbx+0x84>)
 800d416:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 800d418:	8852      	ldrh	r2, [r2, #2]
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d207      	bcs.n	800d42e <ESC_readmbx+0x72>
   {
      ESC_read (ESC_MBX0_sme, &length, 1);
 800d41e:	4b08      	ldr	r3, [pc, #32]	@ (800d440 <ESC_readmbx+0x84>)
 800d420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d422:	889b      	ldrh	r3, [r3, #4]
 800d424:	1cb9      	adds	r1, r7, #2
 800d426:	2201      	movs	r2, #1
 800d428:	4618      	mov	r0, r3
 800d42a:	f003 fd05 	bl	8010e38 <ESC_read>
   }

   MBXcontrol[0].state = MBXstate_inclaim;
 800d42e:	4b05      	ldr	r3, [pc, #20]	@ (800d444 <ESC_readmbx+0x88>)
 800d430:	2201      	movs	r2, #1
 800d432:	701a      	strb	r2, [r3, #0]
}
 800d434:	bf00      	nop
 800d436:	3708      	adds	r7, #8
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}
 800d43c:	240004ec 	.word	0x240004ec
 800d440:	24000bb0 	.word	0x24000bb0
 800d444:	24000aec 	.word	0x24000aec

0800d448 <ESC_writembx>:
 * which one to write.
 *
 * @param[in] n   = Which local mailbox buffer n to send.
 */
void ESC_writembx (uint8_t n)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b086      	sub	sp, #24
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	4603      	mov	r3, r0
 800d450:	71fb      	strb	r3, [r7, #7]
   _MBXh *MBh = (_MBXh *)&MBX[n * ESC_MBXSIZE];
 800d452:	79fb      	ldrb	r3, [r7, #7]
 800d454:	4a1e      	ldr	r2, [pc, #120]	@ (800d4d0 <ESC_writembx+0x88>)
 800d456:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800d458:	fb02 f303 	mul.w	r3, r2, r3
 800d45c:	4a1d      	ldr	r2, [pc, #116]	@ (800d4d4 <ESC_writembx+0x8c>)
 800d45e:	4413      	add	r3, r2
 800d460:	613b      	str	r3, [r7, #16]
   uint8_t dummy = 0;
 800d462:	2300      	movs	r3, #0
 800d464:	73fb      	strb	r3, [r7, #15]
   uint16_t length;
   length = etohs (MBh->length);
 800d466:	693b      	ldr	r3, [r7, #16]
 800d468:	781a      	ldrb	r2, [r3, #0]
 800d46a:	785b      	ldrb	r3, [r3, #1]
 800d46c:	021b      	lsls	r3, r3, #8
 800d46e:	4313      	orrs	r3, r2
 800d470:	82fb      	strh	r3, [r7, #22]

   if (length > (ESC_MBX1_sml - ESC_MBXHSIZE))
 800d472:	8afa      	ldrh	r2, [r7, #22]
 800d474:	4b16      	ldr	r3, [pc, #88]	@ (800d4d0 <ESC_writembx+0x88>)
 800d476:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d478:	885b      	ldrh	r3, [r3, #2]
 800d47a:	3b06      	subs	r3, #6
 800d47c:	429a      	cmp	r2, r3
 800d47e:	d904      	bls.n	800d48a <ESC_writembx+0x42>
   {
      length = (uint16_t)(ESC_MBX1_sml - ESC_MBXHSIZE);
 800d480:	4b13      	ldr	r3, [pc, #76]	@ (800d4d0 <ESC_writembx+0x88>)
 800d482:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d484:	885b      	ldrh	r3, [r3, #2]
 800d486:	3b06      	subs	r3, #6
 800d488:	82fb      	strh	r3, [r7, #22]
   }
   ESC_write (ESC_MBX1_sma, MBh, (uint16_t)(ESC_MBXHSIZE + length));
 800d48a:	4b11      	ldr	r3, [pc, #68]	@ (800d4d0 <ESC_writembx+0x88>)
 800d48c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d48e:	8818      	ldrh	r0, [r3, #0]
 800d490:	8afb      	ldrh	r3, [r7, #22]
 800d492:	3306      	adds	r3, #6
 800d494:	b29b      	uxth	r3, r3
 800d496:	461a      	mov	r2, r3
 800d498:	6939      	ldr	r1, [r7, #16]
 800d49a:	f003 fd01 	bl	8010ea0 <ESC_write>
   if (length + ESC_MBXHSIZE < ESC_MBX1_sml)
 800d49e:	8afb      	ldrh	r3, [r7, #22]
 800d4a0:	3306      	adds	r3, #6
 800d4a2:	4a0b      	ldr	r2, [pc, #44]	@ (800d4d0 <ESC_writembx+0x88>)
 800d4a4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800d4a6:	8852      	ldrh	r2, [r2, #2]
 800d4a8:	4293      	cmp	r3, r2
 800d4aa:	d208      	bcs.n	800d4be <ESC_writembx+0x76>
   {
      ESC_write (ESC_MBX1_sme, &dummy, 1);
 800d4ac:	4b08      	ldr	r3, [pc, #32]	@ (800d4d0 <ESC_writembx+0x88>)
 800d4ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d4b0:	889b      	ldrh	r3, [r3, #4]
 800d4b2:	f107 010f 	add.w	r1, r7, #15
 800d4b6:	2201      	movs	r2, #1
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f003 fcf1 	bl	8010ea0 <ESC_write>
   }

   ESCvar.mbxfree = 0;
 800d4be:	4b04      	ldr	r3, [pc, #16]	@ (800d4d0 <ESC_writembx+0x88>)
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
}
 800d4c6:	bf00      	nop
 800d4c8:	3718      	adds	r7, #24
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}
 800d4ce:	bf00      	nop
 800d4d0:	24000bb0 	.word	0x24000bb0
 800d4d4:	240004ec 	.word	0x240004ec

0800d4d8 <ESC_ackmbxread>:

/** TBD
 */
void ESC_ackmbxread (void)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b082      	sub	sp, #8
 800d4dc:	af00      	add	r7, sp, #0
   uint8_t dummy = 0;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	71fb      	strb	r3, [r7, #7]

   ESC_write (ESC_MBX1_sma, &dummy, 1);
 800d4e2:	4b08      	ldr	r3, [pc, #32]	@ (800d504 <ESC_ackmbxread+0x2c>)
 800d4e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d4e6:	881b      	ldrh	r3, [r3, #0]
 800d4e8:	1df9      	adds	r1, r7, #7
 800d4ea:	2201      	movs	r2, #1
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f003 fcd7 	bl	8010ea0 <ESC_write>
   ESCvar.mbxfree = 1;
 800d4f2:	4b04      	ldr	r3, [pc, #16]	@ (800d504 <ESC_ackmbxread+0x2c>)
 800d4f4:	2201      	movs	r2, #1
 800d4f6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
}
 800d4fa:	bf00      	nop
 800d4fc:	3708      	adds	r7, #8
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}
 800d502:	bf00      	nop
 800d504:	24000bb0 	.word	0x24000bb0

0800d508 <ESC_claimbuffer>:
 * address master and mailbox next CNT value between 1-7.
 *
 * @return The index of Mailbox buffer prepared for outbox. IF no buffer is available return 0.
 */
uint8_t ESC_claimbuffer (void)
{
 800d508:	b480      	push	{r7}
 800d50a:	b083      	sub	sp, #12
 800d50c:	af00      	add	r7, sp, #0
   _MBXh *MBh;
   uint8_t n = ESC_MBXBUFFERS - 1;
 800d50e:	2302      	movs	r3, #2
 800d510:	71fb      	strb	r3, [r7, #7]
   while ((n > 0) && (MBXcontrol[n].state))
 800d512:	e002      	b.n	800d51a <ESC_claimbuffer+0x12>
   {
      n--;
 800d514:	79fb      	ldrb	r3, [r7, #7]
 800d516:	3b01      	subs	r3, #1
 800d518:	71fb      	strb	r3, [r7, #7]
   while ((n > 0) && (MBXcontrol[n].state))
 800d51a:	79fb      	ldrb	r3, [r7, #7]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d004      	beq.n	800d52a <ESC_claimbuffer+0x22>
 800d520:	79fb      	ldrb	r3, [r7, #7]
 800d522:	4a2b      	ldr	r2, [pc, #172]	@ (800d5d0 <ESC_claimbuffer+0xc8>)
 800d524:	5cd3      	ldrb	r3, [r2, r3]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d1f4      	bne.n	800d514 <ESC_claimbuffer+0xc>
   }
   if (n)
 800d52a:	79fb      	ldrb	r3, [r7, #7]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d047      	beq.n	800d5c0 <ESC_claimbuffer+0xb8>
   {
      MBXcontrol[n].state = MBXstate_outclaim;
 800d530:	79fb      	ldrb	r3, [r7, #7]
 800d532:	4a27      	ldr	r2, [pc, #156]	@ (800d5d0 <ESC_claimbuffer+0xc8>)
 800d534:	2102      	movs	r1, #2
 800d536:	54d1      	strb	r1, [r2, r3]
      MBh = (_MBXh *)&MBX[n * ESC_MBXSIZE];
 800d538:	79fb      	ldrb	r3, [r7, #7]
 800d53a:	4a26      	ldr	r2, [pc, #152]	@ (800d5d4 <ESC_claimbuffer+0xcc>)
 800d53c:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800d53e:	fb02 f303 	mul.w	r3, r2, r3
 800d542:	4a25      	ldr	r2, [pc, #148]	@ (800d5d8 <ESC_claimbuffer+0xd0>)
 800d544:	4413      	add	r3, r2
 800d546:	603b      	str	r3, [r7, #0]
      ESCvar.mbxcnt++;
 800d548:	4b22      	ldr	r3, [pc, #136]	@ (800d5d4 <ESC_claimbuffer+0xcc>)
 800d54a:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 800d54e:	3301      	adds	r3, #1
 800d550:	b2da      	uxtb	r2, r3
 800d552:	4b20      	ldr	r3, [pc, #128]	@ (800d5d4 <ESC_claimbuffer+0xcc>)
 800d554:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
      ESCvar.mbxcnt = (ESCvar.mbxcnt & 0x07);
 800d558:	4b1e      	ldr	r3, [pc, #120]	@ (800d5d4 <ESC_claimbuffer+0xcc>)
 800d55a:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 800d55e:	f003 0307 	and.w	r3, r3, #7
 800d562:	b2da      	uxtb	r2, r3
 800d564:	4b1b      	ldr	r3, [pc, #108]	@ (800d5d4 <ESC_claimbuffer+0xcc>)
 800d566:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
      if (ESCvar.mbxcnt == 0)
 800d56a:	4b1a      	ldr	r3, [pc, #104]	@ (800d5d4 <ESC_claimbuffer+0xcc>)
 800d56c:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 800d570:	2b00      	cmp	r3, #0
 800d572:	d103      	bne.n	800d57c <ESC_claimbuffer+0x74>
      {
         ESCvar.mbxcnt = 1;
 800d574:	4b17      	ldr	r3, [pc, #92]	@ (800d5d4 <ESC_claimbuffer+0xcc>)
 800d576:	2201      	movs	r2, #1
 800d578:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
      }
      MBh->address = htoes (0x0000);      // destination is master
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	2200      	movs	r2, #0
 800d580:	709a      	strb	r2, [r3, #2]
 800d582:	2200      	movs	r2, #0
 800d584:	70da      	strb	r2, [r3, #3]
      MBh->channel = 0;
 800d586:	683a      	ldr	r2, [r7, #0]
 800d588:	7913      	ldrb	r3, [r2, #4]
 800d58a:	f36f 0305 	bfc	r3, #0, #6
 800d58e:	7113      	strb	r3, [r2, #4]
      MBh->priority = 0;
 800d590:	683a      	ldr	r2, [r7, #0]
 800d592:	7913      	ldrb	r3, [r2, #4]
 800d594:	f36f 1387 	bfc	r3, #6, #2
 800d598:	7113      	strb	r3, [r2, #4]
      MBh->mbxcnt = ESCvar.mbxcnt & 0xFU;
 800d59a:	4b0e      	ldr	r3, [pc, #56]	@ (800d5d4 <ESC_claimbuffer+0xcc>)
 800d59c:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 800d5a0:	f003 030f 	and.w	r3, r3, #15
 800d5a4:	b2d9      	uxtb	r1, r3
 800d5a6:	683a      	ldr	r2, [r7, #0]
 800d5a8:	7953      	ldrb	r3, [r2, #5]
 800d5aa:	f361 1307 	bfi	r3, r1, #4, #4
 800d5ae:	7153      	strb	r3, [r2, #5]
      ESCvar.txcue++;
 800d5b0:	4b08      	ldr	r3, [pc, #32]	@ (800d5d4 <ESC_claimbuffer+0xcc>)
 800d5b2:	f893 308f 	ldrb.w	r3, [r3, #143]	@ 0x8f
 800d5b6:	3301      	adds	r3, #1
 800d5b8:	b2da      	uxtb	r2, r3
 800d5ba:	4b06      	ldr	r3, [pc, #24]	@ (800d5d4 <ESC_claimbuffer+0xcc>)
 800d5bc:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
   }
   return n;
 800d5c0:	79fb      	ldrb	r3, [r7, #7]
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	370c      	adds	r7, #12
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5cc:	4770      	bx	lr
 800d5ce:	bf00      	nop
 800d5d0:	24000aec 	.word	0x24000aec
 800d5d4:	24000bb0 	.word	0x24000bb0
 800d5d8:	240004ec 	.word	0x240004ec

0800d5dc <ESC_outreqbuffer>:
/** Look for any present requests for posting to the outbox.
 *
 * @return the index of Mailbox buffer ready to be posted.
 */
uint8_t ESC_outreqbuffer (void)
{
 800d5dc:	b480      	push	{r7}
 800d5de:	b083      	sub	sp, #12
 800d5e0:	af00      	add	r7, sp, #0
   uint8_t n = ESC_MBXBUFFERS - 1;
 800d5e2:	2302      	movs	r3, #2
 800d5e4:	71fb      	strb	r3, [r7, #7]
   while ((n > 0) && (MBXcontrol[n].state != MBXstate_outreq))
 800d5e6:	e002      	b.n	800d5ee <ESC_outreqbuffer+0x12>
   {
      n--;
 800d5e8:	79fb      	ldrb	r3, [r7, #7]
 800d5ea:	3b01      	subs	r3, #1
 800d5ec:	71fb      	strb	r3, [r7, #7]
   while ((n > 0) && (MBXcontrol[n].state != MBXstate_outreq))
 800d5ee:	79fb      	ldrb	r3, [r7, #7]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d004      	beq.n	800d5fe <ESC_outreqbuffer+0x22>
 800d5f4:	79fb      	ldrb	r3, [r7, #7]
 800d5f6:	4a05      	ldr	r2, [pc, #20]	@ (800d60c <ESC_outreqbuffer+0x30>)
 800d5f8:	5cd3      	ldrb	r3, [r2, r3]
 800d5fa:	2b03      	cmp	r3, #3
 800d5fc:	d1f4      	bne.n	800d5e8 <ESC_outreqbuffer+0xc>
   }
   return n;
 800d5fe:	79fb      	ldrb	r3, [r7, #7]
}
 800d600:	4618      	mov	r0, r3
 800d602:	370c      	adds	r7, #12
 800d604:	46bd      	mov	sp, r7
 800d606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60a:	4770      	bx	lr
 800d60c:	24000aec 	.word	0x24000aec

0800d610 <MBX_error>:
 * buffer with error information.
 *
 * @param[in] n   = Error number to be sent in mailbox error message.
 */
void MBX_error (uint16_t error)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b084      	sub	sp, #16
 800d614:	af00      	add	r7, sp, #0
 800d616:	4603      	mov	r3, r0
 800d618:	80fb      	strh	r3, [r7, #6]
   uint8_t MBXout;
   _MBXerr *mbxerr;
   MBXout = ESC_claimbuffer ();
 800d61a:	f7ff ff75 	bl	800d508 <ESC_claimbuffer>
 800d61e:	4603      	mov	r3, r0
 800d620:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 800d622:	7bfb      	ldrb	r3, [r7, #15]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d021      	beq.n	800d66c <MBX_error+0x5c>
   {
      mbxerr = (_MBXerr *) &MBX[MBXout * ESC_MBXSIZE];
 800d628:	7bfb      	ldrb	r3, [r7, #15]
 800d62a:	4a12      	ldr	r2, [pc, #72]	@ (800d674 <MBX_error+0x64>)
 800d62c:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800d62e:	fb02 f303 	mul.w	r3, r2, r3
 800d632:	4a11      	ldr	r2, [pc, #68]	@ (800d678 <MBX_error+0x68>)
 800d634:	4413      	add	r3, r2
 800d636:	60bb      	str	r3, [r7, #8]
      mbxerr->mbxheader.length = htoes ((uint16_t) 0x04);
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	2200      	movs	r2, #0
 800d63c:	f042 0204 	orr.w	r2, r2, #4
 800d640:	701a      	strb	r2, [r3, #0]
 800d642:	2200      	movs	r2, #0
 800d644:	705a      	strb	r2, [r3, #1]
      mbxerr->mbxheader.mbxtype = MBXERR;
 800d646:	68ba      	ldr	r2, [r7, #8]
 800d648:	7953      	ldrb	r3, [r2, #5]
 800d64a:	f36f 0303 	bfc	r3, #0, #4
 800d64e:	7153      	strb	r3, [r2, #5]
      mbxerr->type = htoes ((uint16_t) 0x01);
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	2200      	movs	r2, #0
 800d654:	f042 0201 	orr.w	r2, r2, #1
 800d658:	719a      	strb	r2, [r3, #6]
 800d65a:	2200      	movs	r2, #0
 800d65c:	71da      	strb	r2, [r3, #7]
      mbxerr->detail = htoes (error);
 800d65e:	68bb      	ldr	r3, [r7, #8]
 800d660:	88fa      	ldrh	r2, [r7, #6]
 800d662:	811a      	strh	r2, [r3, #8]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800d664:	7bfb      	ldrb	r3, [r7, #15]
 800d666:	4a05      	ldr	r2, [pc, #20]	@ (800d67c <MBX_error+0x6c>)
 800d668:	2103      	movs	r1, #3
 800d66a:	54d1      	strb	r1, [r2, r3]
   }
}
 800d66c:	bf00      	nop
 800d66e:	3710      	adds	r7, #16
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}
 800d674:	24000bb0 	.word	0x24000bb0
 800d678:	240004ec 	.word	0x240004ec
 800d67c:	24000aec 	.word	0x24000aec

0800d680 <ESC_mbxprocess>:
 * a mailbox, re-sending a mailbox, reading a mailbox and handles a mailbox full event.
 *
 * @return =0 if nothing to do. =1 if something to be handled by mailbox protocols.
 */
uint8_t ESC_mbxprocess (void)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b082      	sub	sp, #8
 800d684:	af00      	add	r7, sp, #0
   uint8_t mbxhandle = 0;
 800d686:	2300      	movs	r3, #0
 800d688:	71fb      	strb	r3, [r7, #7]
   _MBXh *MBh = (_MBXh *)&MBX[0];
 800d68a:	4b96      	ldr	r3, [pc, #600]	@ (800d8e4 <ESC_mbxprocess+0x264>)
 800d68c:	603b      	str	r3, [r7, #0]

   if (ESCvar.MBXrun == 0)
 800d68e:	4b96      	ldr	r3, [pc, #600]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d690:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800d694:	2b00      	cmp	r3, #0
 800d696:	d101      	bne.n	800d69c <ESC_mbxprocess+0x1c>
   {
      /* nothing to do */
      return 0;
 800d698:	2300      	movs	r3, #0
 800d69a:	e11f      	b.n	800d8dc <ESC_mbxprocess+0x25c>
   }

   /* SM0/1 access */
   if (ESCvar.ALevent & (ESCREG_ALEVENT_SM0 | ESCREG_ALEVENT_SM1))
 800d69c:	4b92      	ldr	r3, [pc, #584]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d69e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d6a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d005      	beq.n	800d6b6 <ESC_mbxprocess+0x36>
   {
      ESC_SMstatus (0);
 800d6aa:	2000      	movs	r0, #0
 800d6ac:	f7ff fc60 	bl	800cf70 <ESC_SMstatus>
      ESC_SMstatus (1);
 800d6b0:	2001      	movs	r0, #1
 800d6b2:	f7ff fc5d 	bl	800cf70 <ESC_SMstatus>
   }

   /* outmbx read by master */
   if (ESCvar.mbxoutpost && (ESCvar.ALevent & ESCREG_ALEVENT_SM1))
 800d6b6:	4b8c      	ldr	r3, [pc, #560]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d6b8:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d03c      	beq.n	800d73a <ESC_mbxprocess+0xba>
 800d6c0:	4b89      	ldr	r3, [pc, #548]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d6c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d6c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d035      	beq.n	800d73a <ESC_mbxprocess+0xba>
   {
      ESC_ackmbxread ();
 800d6ce:	f7ff ff03 	bl	800d4d8 <ESC_ackmbxread>
      /* dispose old backup */
      if (ESCvar.mbxbackup)
 800d6d2:	4b85      	ldr	r3, [pc, #532]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d6d4:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d006      	beq.n	800d6ea <ESC_mbxprocess+0x6a>
      {
         MBXcontrol[ESCvar.mbxbackup].state = MBXstate_idle;
 800d6dc:	4b82      	ldr	r3, [pc, #520]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d6de:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 800d6e2:	461a      	mov	r2, r3
 800d6e4:	4b81      	ldr	r3, [pc, #516]	@ (800d8ec <ESC_mbxprocess+0x26c>)
 800d6e6:	2100      	movs	r1, #0
 800d6e8:	5499      	strb	r1, [r3, r2]
      }
      /* if still to do */
      if (MBXcontrol[ESCvar.mbxoutpost].state == MBXstate_again)
 800d6ea:	4b7f      	ldr	r3, [pc, #508]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d6ec:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800d6f0:	461a      	mov	r2, r3
 800d6f2:	4b7e      	ldr	r3, [pc, #504]	@ (800d8ec <ESC_mbxprocess+0x26c>)
 800d6f4:	5c9b      	ldrb	r3, [r3, r2]
 800d6f6:	2b06      	cmp	r3, #6
 800d6f8:	d105      	bne.n	800d706 <ESC_mbxprocess+0x86>
      {
         ESC_writembx (ESCvar.mbxoutpost);
 800d6fa:	4b7b      	ldr	r3, [pc, #492]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d6fc:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800d700:	4618      	mov	r0, r3
 800d702:	f7ff fea1 	bl	800d448 <ESC_writembx>
      }
      /* create new backup */
      MBXcontrol[ESCvar.mbxoutpost].state = MBXstate_backup;
 800d706:	4b78      	ldr	r3, [pc, #480]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d708:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800d70c:	461a      	mov	r2, r3
 800d70e:	4b77      	ldr	r3, [pc, #476]	@ (800d8ec <ESC_mbxprocess+0x26c>)
 800d710:	2105      	movs	r1, #5
 800d712:	5499      	strb	r1, [r3, r2]
      ESCvar.mbxbackup = ESCvar.mbxoutpost;
 800d714:	4b74      	ldr	r3, [pc, #464]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d716:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800d71a:	4b73      	ldr	r3, [pc, #460]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d71c:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
      ESCvar.mbxoutpost = 0;
 800d720:	4b71      	ldr	r3, [pc, #452]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d722:	2200      	movs	r2, #0
 800d724:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      /* Do we have any ongoing protocol transfers, return 1 */
      if(ESCvar.xoe > 0)
 800d728:	4b6f      	ldr	r3, [pc, #444]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d72a:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d001      	beq.n	800d736 <ESC_mbxprocess+0xb6>
      {
         return 1;
 800d732:	2301      	movs	r3, #1
 800d734:	e0d2      	b.n	800d8dc <ESC_mbxprocess+0x25c>
      }
      return 0;
 800d736:	2300      	movs	r3, #0
 800d738:	e0d0      	b.n	800d8dc <ESC_mbxprocess+0x25c>
   }

   /* repeat request */
   if (ESCvar.SM[1].ECrep != ESCvar.toggle)
 800d73a:	4b6b      	ldr	r3, [pc, #428]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d73c:	f893 30ca 	ldrb.w	r3, [r3, #202]	@ 0xca
 800d740:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d744:	b2db      	uxtb	r3, r3
 800d746:	461a      	mov	r2, r3
 800d748:	4b67      	ldr	r3, [pc, #412]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d74a:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 800d74e:	429a      	cmp	r2, r3
 800d750:	d044      	beq.n	800d7dc <ESC_mbxprocess+0x15c>
   {
      if (ESCvar.mbxoutpost || ESCvar.mbxbackup)
 800d752:	4b65      	ldr	r3, [pc, #404]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d754:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d104      	bne.n	800d766 <ESC_mbxprocess+0xe6>
 800d75c:	4b62      	ldr	r3, [pc, #392]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d75e:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 800d762:	2b00      	cmp	r3, #0
 800d764:	d038      	beq.n	800d7d8 <ESC_mbxprocess+0x158>
      {
         /* if outmbx empty */
         if (ESCvar.mbxoutpost == 0)
 800d766:	4b60      	ldr	r3, [pc, #384]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d768:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d106      	bne.n	800d77e <ESC_mbxprocess+0xfe>
         {
            /* use backup mbx */
            ESC_writembx (ESCvar.mbxbackup);
 800d770:	4b5d      	ldr	r3, [pc, #372]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d772:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 800d776:	4618      	mov	r0, r3
 800d778:	f7ff fe66 	bl	800d448 <ESC_writembx>
 800d77c:	e012      	b.n	800d7a4 <ESC_mbxprocess+0x124>
         }
         else
         {
            /* reset mailbox */
            ESC_SMdisable (1);
 800d77e:	2001      	movs	r0, #1
 800d780:	f7ff fc54 	bl	800d02c <ESC_SMdisable>
            /* have to resend later */
            MBXcontrol[ESCvar.mbxoutpost].state = MBXstate_again;
 800d784:	4b58      	ldr	r3, [pc, #352]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d786:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800d78a:	461a      	mov	r2, r3
 800d78c:	4b57      	ldr	r3, [pc, #348]	@ (800d8ec <ESC_mbxprocess+0x26c>)
 800d78e:	2106      	movs	r1, #6
 800d790:	5499      	strb	r1, [r3, r2]
            /* activate mailbox */
            ESC_SMenable (1);
 800d792:	2001      	movs	r0, #1
 800d794:	f7ff fc2c 	bl	800cff0 <ESC_SMenable>
            /* use backup mbx */
            ESC_writembx (ESCvar.mbxbackup);
 800d798:	4b53      	ldr	r3, [pc, #332]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d79a:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f7ff fe52 	bl	800d448 <ESC_writembx>
         }
         ESCvar.toggle = ESCvar.SM[1].ECrep;
 800d7a4:	4b50      	ldr	r3, [pc, #320]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d7a6:	f893 30ca 	ldrb.w	r3, [r3, #202]	@ 0xca
 800d7aa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d7ae:	b2db      	uxtb	r3, r3
 800d7b0:	461a      	mov	r2, r3
 800d7b2:	4b4d      	ldr	r3, [pc, #308]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d7b4:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
         ESCvar.SM[1].PDIrep = ESCvar.toggle & 0x1U;
 800d7b8:	4b4b      	ldr	r3, [pc, #300]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d7ba:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 800d7be:	f003 0301 	and.w	r3, r3, #1
 800d7c2:	b2d9      	uxtb	r1, r3
 800d7c4:	4a48      	ldr	r2, [pc, #288]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d7c6:	f892 30cb 	ldrb.w	r3, [r2, #203]	@ 0xcb
 800d7ca:	f361 0341 	bfi	r3, r1, #1, #1
 800d7ce:	f882 30cb 	strb.w	r3, [r2, #203]	@ 0xcb
         ESC_SMwritepdi (1);
 800d7d2:	2001      	movs	r0, #1
 800d7d4:	f7ff fbec 	bl	800cfb0 <ESC_SMwritepdi>
      }
      return 0;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	e07f      	b.n	800d8dc <ESC_mbxprocess+0x25c>
   }

   /* if the outmailbox is free check if we have something to send */
   if (ESCvar.txcue && (ESCvar.mbxfree || !ESCvar.SM[1].MBXstat))
 800d7dc:	4b42      	ldr	r3, [pc, #264]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d7de:	f893 308f 	ldrb.w	r3, [r3, #143]	@ 0x8f
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d02f      	beq.n	800d846 <ESC_mbxprocess+0x1c6>
 800d7e6:	4b40      	ldr	r3, [pc, #256]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d7e8:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d107      	bne.n	800d800 <ESC_mbxprocess+0x180>
 800d7f0:	4b3d      	ldr	r3, [pc, #244]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d7f2:	f893 30c9 	ldrb.w	r3, [r3, #201]	@ 0xc9
 800d7f6:	f003 0308 	and.w	r3, r3, #8
 800d7fa:	b2db      	uxtb	r3, r3
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d122      	bne.n	800d846 <ESC_mbxprocess+0x1c6>
   {
      /* check out request mbx */
      mbxhandle = ESC_outreqbuffer ();
 800d800:	f7ff feec 	bl	800d5dc <ESC_outreqbuffer>
 800d804:	4603      	mov	r3, r0
 800d806:	71fb      	strb	r3, [r7, #7]
      /* outmbx empty and outreq mbx available */
      if (mbxhandle)
 800d808:	79fb      	ldrb	r3, [r7, #7]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d01b      	beq.n	800d846 <ESC_mbxprocess+0x1c6>
      {
         ESC_writembx (mbxhandle);
 800d80e:	79fb      	ldrb	r3, [r7, #7]
 800d810:	4618      	mov	r0, r3
 800d812:	f7ff fe19 	bl	800d448 <ESC_writembx>
         /* Refresh SM status */
         ESC_SMstatus (1);
 800d816:	2001      	movs	r0, #1
 800d818:	f7ff fbaa 	bl	800cf70 <ESC_SMstatus>
         /* change state */
         MBXcontrol[mbxhandle].state = MBXstate_outpost;
 800d81c:	79fb      	ldrb	r3, [r7, #7]
 800d81e:	4a33      	ldr	r2, [pc, #204]	@ (800d8ec <ESC_mbxprocess+0x26c>)
 800d820:	2104      	movs	r1, #4
 800d822:	54d1      	strb	r1, [r2, r3]
         ESCvar.mbxoutpost = mbxhandle;
 800d824:	4a30      	ldr	r2, [pc, #192]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d826:	79fb      	ldrb	r3, [r7, #7]
 800d828:	f882 308c 	strb.w	r3, [r2, #140]	@ 0x8c
         if (ESCvar.txcue)
 800d82c:	4b2e      	ldr	r3, [pc, #184]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d82e:	f893 308f 	ldrb.w	r3, [r3, #143]	@ 0x8f
 800d832:	2b00      	cmp	r3, #0
 800d834:	d007      	beq.n	800d846 <ESC_mbxprocess+0x1c6>
         {
            ESCvar.txcue--;
 800d836:	4b2c      	ldr	r3, [pc, #176]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d838:	f893 308f 	ldrb.w	r3, [r3, #143]	@ 0x8f
 800d83c:	3b01      	subs	r3, #1
 800d83e:	b2da      	uxtb	r2, r3
 800d840:	4b29      	ldr	r3, [pc, #164]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d842:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
         }
      }
   }

   /* read mailbox if full and no xoe in progress */
   if ((ESCvar.SM[0].MBXstat != 0) && (MBXcontrol[0].state == 0)
 800d846:	4b28      	ldr	r3, [pc, #160]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d848:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800d84c:	f003 0308 	and.w	r3, r3, #8
 800d850:	b2db      	uxtb	r3, r3
 800d852:	2b00      	cmp	r3, #0
 800d854:	d041      	beq.n	800d8da <ESC_mbxprocess+0x25a>
 800d856:	4b25      	ldr	r3, [pc, #148]	@ (800d8ec <ESC_mbxprocess+0x26c>)
 800d858:	781b      	ldrb	r3, [r3, #0]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d13d      	bne.n	800d8da <ESC_mbxprocess+0x25a>
         && (ESCvar.mbxoutpost == 0) && (ESCvar.xoe == 0))
 800d85e:	4b22      	ldr	r3, [pc, #136]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d860:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800d864:	2b00      	cmp	r3, #0
 800d866:	d138      	bne.n	800d8da <ESC_mbxprocess+0x25a>
 800d868:	4b1f      	ldr	r3, [pc, #124]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d86a:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d133      	bne.n	800d8da <ESC_mbxprocess+0x25a>
   {
      ESC_readmbx ();
 800d872:	f7ff fda3 	bl	800d3bc <ESC_readmbx>
      ESCvar.SM[0].MBXstat = 0;
 800d876:	4a1c      	ldr	r2, [pc, #112]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d878:	f892 30c1 	ldrb.w	r3, [r2, #193]	@ 0xc1
 800d87c:	f36f 03c3 	bfc	r3, #3, #1
 800d880:	f882 30c1 	strb.w	r3, [r2, #193]	@ 0xc1
      if (etohs (MBh->length) == 0)
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	881b      	ldrh	r3, [r3, #0]
 800d888:	b29b      	uxth	r3, r3
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d105      	bne.n	800d89a <ESC_mbxprocess+0x21a>
      {
         MBX_error (MBXERR_INVALIDHEADER);
 800d88e:	2005      	movs	r0, #5
 800d890:	f7ff febe 	bl	800d610 <MBX_error>
         /* drop mailbox */
         MBXcontrol[0].state = MBXstate_idle;
 800d894:	4b15      	ldr	r3, [pc, #84]	@ (800d8ec <ESC_mbxprocess+0x26c>)
 800d896:	2200      	movs	r2, #0
 800d898:	701a      	strb	r2, [r3, #0]
      }
      if ((MBh->mbxcnt != 0) && (MBh->mbxcnt == ESCvar.mbxincnt))
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	795b      	ldrb	r3, [r3, #5]
 800d89e:	f023 030f 	bic.w	r3, r3, #15
 800d8a2:	b2db      	uxtb	r3, r3
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d00d      	beq.n	800d8c4 <ESC_mbxprocess+0x244>
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	795b      	ldrb	r3, [r3, #5]
 800d8ac:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800d8b0:	b2db      	uxtb	r3, r3
 800d8b2:	461a      	mov	r2, r3
 800d8b4:	4b0c      	ldr	r3, [pc, #48]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d8b6:	f893 308b 	ldrb.w	r3, [r3, #139]	@ 0x8b
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	d102      	bne.n	800d8c4 <ESC_mbxprocess+0x244>
      {
         /* drop mailbox */
         MBXcontrol[0].state = MBXstate_idle;
 800d8be:	4b0b      	ldr	r3, [pc, #44]	@ (800d8ec <ESC_mbxprocess+0x26c>)
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	701a      	strb	r2, [r3, #0]
      }
      ESCvar.mbxincnt = MBh->mbxcnt;
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	795b      	ldrb	r3, [r3, #5]
 800d8c8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800d8cc:	b2db      	uxtb	r3, r3
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	4b05      	ldr	r3, [pc, #20]	@ (800d8e8 <ESC_mbxprocess+0x268>)
 800d8d2:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
      return 1;
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	e000      	b.n	800d8dc <ESC_mbxprocess+0x25c>
   }

   return 0;
 800d8da:	2300      	movs	r3, #0
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3708      	adds	r7, #8
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}
 800d8e4:	240004ec 	.word	0x240004ec
 800d8e8:	24000bb0 	.word	0x24000bb0
 800d8ec:	24000aec 	.word	0x24000aec

0800d8f0 <ESC_xoeprocess>:
/** Handler for incorrect or unsupported mailbox data. Write error response
 * in Mailbox.
 */
void ESC_xoeprocess (void)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b082      	sub	sp, #8
 800d8f4:	af00      	add	r7, sp, #0
   _MBXh *mbh;
   if (ESCvar.MBXrun == 0)
 800d8f6:	4b15      	ldr	r3, [pc, #84]	@ (800d94c <ESC_xoeprocess+0x5c>)
 800d8f8:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d021      	beq.n	800d944 <ESC_xoeprocess+0x54>
   {
      return;
   }
   if ((ESCvar.xoe == 0) && (MBXcontrol[0].state == MBXstate_inclaim))
 800d900:	4b12      	ldr	r3, [pc, #72]	@ (800d94c <ESC_xoeprocess+0x5c>)
 800d902:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 800d906:	2b00      	cmp	r3, #0
 800d908:	d11d      	bne.n	800d946 <ESC_xoeprocess+0x56>
 800d90a:	4b11      	ldr	r3, [pc, #68]	@ (800d950 <ESC_xoeprocess+0x60>)
 800d90c:	781b      	ldrb	r3, [r3, #0]
 800d90e:	2b01      	cmp	r3, #1
 800d910:	d119      	bne.n	800d946 <ESC_xoeprocess+0x56>
   {
      mbh = (_MBXh *) &MBX[0];
 800d912:	4b10      	ldr	r3, [pc, #64]	@ (800d954 <ESC_xoeprocess+0x64>)
 800d914:	607b      	str	r3, [r7, #4]
      if ((mbh->mbxtype == 0) || (etohs (mbh->length) == 0))
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	795b      	ldrb	r3, [r3, #5]
 800d91a:	f003 030f 	and.w	r3, r3, #15
 800d91e:	b2db      	uxtb	r3, r3
 800d920:	2b00      	cmp	r3, #0
 800d922:	d004      	beq.n	800d92e <ESC_xoeprocess+0x3e>
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	881b      	ldrh	r3, [r3, #0]
 800d928:	b29b      	uxth	r3, r3
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d103      	bne.n	800d936 <ESC_xoeprocess+0x46>
      {
         MBX_error (MBXERR_INVALIDHEADER);
 800d92e:	2005      	movs	r0, #5
 800d930:	f7ff fe6e 	bl	800d610 <MBX_error>
 800d934:	e002      	b.n	800d93c <ESC_xoeprocess+0x4c>
      }
      else
      {
         MBX_error (MBXERR_UNSUPPORTEDPROTOCOL);
 800d936:	2002      	movs	r0, #2
 800d938:	f7ff fe6a 	bl	800d610 <MBX_error>
      }
      /* mailbox type not supported, drop mailbox */
      MBXcontrol[0].state = MBXstate_idle;
 800d93c:	4b04      	ldr	r3, [pc, #16]	@ (800d950 <ESC_xoeprocess+0x60>)
 800d93e:	2200      	movs	r2, #0
 800d940:	701a      	strb	r2, [r3, #0]
 800d942:	e000      	b.n	800d946 <ESC_xoeprocess+0x56>
      return;
 800d944:	bf00      	nop
   }
}
 800d946:	3708      	adds	r7, #8
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}
 800d94c:	24000bb0 	.word	0x24000bb0
 800d950:	24000aec 	.word	0x24000aec
 800d954:	240004ec 	.word	0x240004ec

0800d958 <ESC_checkSM23>:
 *
 * @param[in] state   = Requested state.
 * @return = incoming state request if every thing checks out OK. = state (PREOP | ERROR)  if something isn't correct.
 */
uint8_t ESC_checkSM23 (uint8_t state)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b084      	sub	sp, #16
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	4603      	mov	r3, r0
 800d960:	71fb      	strb	r3, [r7, #7]
   _ESCsm2 *SM;
   ESC_read (ESCREG_SM2, (void *) &ESCvar.SM[2], sizeof (ESCvar.SM[2]));
 800d962:	2208      	movs	r2, #8
 800d964:	4940      	ldr	r1, [pc, #256]	@ (800da68 <ESC_checkSM23+0x110>)
 800d966:	f44f 6001 	mov.w	r0, #2064	@ 0x810
 800d96a:	f003 fa65 	bl	8010e38 <ESC_read>
   SM = (_ESCsm2 *) & ESCvar.SM[2];
 800d96e:	4b3e      	ldr	r3, [pc, #248]	@ (800da68 <ESC_checkSM23+0x110>)
 800d970:	60fb      	str	r3, [r7, #12]
   
   /* Check SM settings */
   if ((etohs (SM->PSA) != ESC_SM2_sma) ||
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	881b      	ldrh	r3, [r3, #0]
 800d976:	b29b      	uxth	r3, r3
 800d978:	f5b3 5fb0 	cmp.w	r3, #5632	@ 0x1600
 800d97c:	d103      	bne.n	800d986 <ESC_checkSM23+0x2e>
       (SM->Command != ESC_SM2_smc))
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	791b      	ldrb	r3, [r3, #4]
   if ((etohs (SM->PSA) != ESC_SM2_sma) ||
 800d982:	2b24      	cmp	r3, #36	@ 0x24
 800d984:	d005      	beq.n	800d992 <ESC_checkSM23+0x3a>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 800d986:	4b39      	ldr	r3, [pc, #228]	@ (800da6c <ESC_checkSM23+0x114>)
 800d988:	2204      	movs	r2, #4
 800d98a:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
      /* fail state change */
      return (ESCpreop | ESCerror);
 800d98e:	2312      	movs	r3, #18
 800d990:	e066      	b.n	800da60 <ESC_checkSM23+0x108>
   }
   /* Check run-time settings */
   /* Check length */
   else if (etohs (SM->Length) != ESCvar.ESC_SM2_sml)
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	885b      	ldrh	r3, [r3, #2]
 800d996:	b29a      	uxth	r2, r3
 800d998:	4b34      	ldr	r3, [pc, #208]	@ (800da6c <ESC_checkSM23+0x114>)
 800d99a:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	d005      	beq.n	800d9ae <ESC_checkSM23+0x56>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 800d9a2:	4b32      	ldr	r3, [pc, #200]	@ (800da6c <ESC_checkSM23+0x114>)
 800d9a4:	2204      	movs	r2, #4
 800d9a6:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
      /* fail state change */
      return (ESCpreop | ESCerror);
 800d9aa:	2312      	movs	r3, #18
 800d9ac:	e058      	b.n	800da60 <ESC_checkSM23+0x108>
      /* fail state change */
      return (ESCpreop | ESCerror);
   }
   /* SM enabled and (length > 0 but SM disabled) set by master */
   else if (((ESC_SM2_act & ESCREG_SYNC_ACT_ACTIVATED) > 0) &&
            ((SM->ActESC & ESCREG_SYNC_ACT_ACTIVATED) == 0) &&
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	799b      	ldrb	r3, [r3, #6]
 800d9b2:	f003 0301 	and.w	r3, r3, #1
   else if (((ESC_SM2_act & ESCREG_SYNC_ACT_ACTIVATED) > 0) &&
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d10a      	bne.n	800d9d0 <ESC_checkSM23+0x78>
            (ESCvar.ESC_SM2_sml > 0))
 800d9ba:	4b2c      	ldr	r3, [pc, #176]	@ (800da6c <ESC_checkSM23+0x114>)
 800d9bc:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
            ((SM->ActESC & ESCREG_SYNC_ACT_ACTIVATED) == 0) &&
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d005      	beq.n	800d9d0 <ESC_checkSM23+0x78>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 800d9c4:	4b29      	ldr	r3, [pc, #164]	@ (800da6c <ESC_checkSM23+0x114>)
 800d9c6:	2204      	movs	r2, #4
 800d9c8:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
      /* fail state change */
      return (ESCpreop | ESCerror);
 800d9cc:	2312      	movs	r3, #18
 800d9ce:	e047      	b.n	800da60 <ESC_checkSM23+0x108>
   }

   if ((ESC_SM2_sma + (etohs (SM->Length) * 3)) > ESC_SM3_sma)
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	885b      	ldrh	r3, [r3, #2]
 800d9d4:	b29b      	uxth	r3, r3
 800d9d6:	461a      	mov	r2, r3
 800d9d8:	4613      	mov	r3, r2
 800d9da:	005b      	lsls	r3, r3, #1
 800d9dc:	4413      	add	r3, r2
 800d9de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d9e2:	dd05      	ble.n	800d9f0 <ESC_checkSM23+0x98>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM2;
 800d9e4:	4b21      	ldr	r3, [pc, #132]	@ (800da6c <ESC_checkSM23+0x114>)
 800d9e6:	2204      	movs	r2, #4
 800d9e8:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
      /* SM2 overlaps SM3, fail state change */
      return (ESCpreop | ESCerror);
 800d9ec:	2312      	movs	r3, #18
 800d9ee:	e037      	b.n	800da60 <ESC_checkSM23+0x108>
   }

   ESC_read (ESCREG_SM3, (void *) &ESCvar.SM[3], sizeof (ESCvar.SM[3]));
 800d9f0:	2208      	movs	r2, #8
 800d9f2:	491f      	ldr	r1, [pc, #124]	@ (800da70 <ESC_checkSM23+0x118>)
 800d9f4:	f640 0018 	movw	r0, #2072	@ 0x818
 800d9f8:	f003 fa1e 	bl	8010e38 <ESC_read>
   SM = (_ESCsm2 *) & ESCvar.SM[3];
 800d9fc:	4b1c      	ldr	r3, [pc, #112]	@ (800da70 <ESC_checkSM23+0x118>)
 800d9fe:	60fb      	str	r3, [r7, #12]
   /* Check SM settings */
   if ((etohs (SM->PSA) != ESC_SM3_sma) ||
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	881b      	ldrh	r3, [r3, #0]
 800da04:	b29b      	uxth	r3, r3
 800da06:	f5b3 5fd0 	cmp.w	r3, #6656	@ 0x1a00
 800da0a:	d103      	bne.n	800da14 <ESC_checkSM23+0xbc>
       (SM->Command != ESC_SM3_smc))
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	791b      	ldrb	r3, [r3, #4]
   if ((etohs (SM->PSA) != ESC_SM3_sma) ||
 800da10:	2b20      	cmp	r3, #32
 800da12:	d005      	beq.n	800da20 <ESC_checkSM23+0xc8>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM3;
 800da14:	4b15      	ldr	r3, [pc, #84]	@ (800da6c <ESC_checkSM23+0x114>)
 800da16:	2208      	movs	r2, #8
 800da18:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
      /* fail state change */
      return (ESCpreop | ESCerror);
 800da1c:	2312      	movs	r3, #18
 800da1e:	e01f      	b.n	800da60 <ESC_checkSM23+0x108>
   }
   /* Check run-time settings */
   /* Check length */
   else if (etohs (SM->Length) != ESCvar.ESC_SM3_sml)
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	885b      	ldrh	r3, [r3, #2]
 800da24:	b29a      	uxth	r2, r3
 800da26:	4b11      	ldr	r3, [pc, #68]	@ (800da6c <ESC_checkSM23+0x114>)
 800da28:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 800da2c:	429a      	cmp	r2, r3
 800da2e:	d005      	beq.n	800da3c <ESC_checkSM23+0xe4>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM3;
 800da30:	4b0e      	ldr	r3, [pc, #56]	@ (800da6c <ESC_checkSM23+0x114>)
 800da32:	2208      	movs	r2, #8
 800da34:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
      /* fail state change */
      return (ESCpreop | ESCerror);
 800da38:	2312      	movs	r3, #18
 800da3a:	e011      	b.n	800da60 <ESC_checkSM23+0x108>
      /* fail state change */
      return (ESCpreop | ESCerror);
   }
   /* SM enabled and (length > 0 but SM disabled) set by master */
   else if (((ESC_SM3_act & ESCREG_SYNC_ACT_ACTIVATED) > 0) &&
            ((SM->ActESC & ESCREG_SYNC_ACT_ACTIVATED) == 0) &&
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	799b      	ldrb	r3, [r3, #6]
 800da40:	f003 0301 	and.w	r3, r3, #1
   else if (((ESC_SM3_act & ESCREG_SYNC_ACT_ACTIVATED) > 0) &&
 800da44:	2b00      	cmp	r3, #0
 800da46:	d10a      	bne.n	800da5e <ESC_checkSM23+0x106>
            (ESCvar.ESC_SM3_sml > 0))
 800da48:	4b08      	ldr	r3, [pc, #32]	@ (800da6c <ESC_checkSM23+0x114>)
 800da4a:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
            ((SM->ActESC & ESCREG_SYNC_ACT_ACTIVATED) == 0) &&
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d005      	beq.n	800da5e <ESC_checkSM23+0x106>
   {
      ESCvar.SMtestresult = SMRESULT_ERRSM3;
 800da52:	4b06      	ldr	r3, [pc, #24]	@ (800da6c <ESC_checkSM23+0x114>)
 800da54:	2208      	movs	r2, #8
 800da56:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
      /* fail state change */
      return (ESCpreop | ESCerror);
 800da5a:	2312      	movs	r3, #18
 800da5c:	e000      	b.n	800da60 <ESC_checkSM23+0x108>
   }
   return state;
 800da5e:	79fb      	ldrb	r3, [r7, #7]
}
 800da60:	4618      	mov	r0, r3
 800da62:	3710      	adds	r7, #16
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}
 800da68:	24000c7c 	.word	0x24000c7c
 800da6c:	24000bb0 	.word	0x24000bb0
 800da70:	24000c84 	.word	0x24000c84

0800da74 <ESC_startinput>:
 *
 * @param[in] state   = Requested state.
 * @return = state, incoming state request if every thing checks out OK. =state (PREOP | ERROR) if something isn't correct.
 */
uint8_t ESC_startinput (uint8_t state)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b084      	sub	sp, #16
 800da78:	af00      	add	r7, sp, #0
 800da7a:	4603      	mov	r3, r0
 800da7c:	71fb      	strb	r3, [r7, #7]

   state = ESC_checkSM23 (state);
 800da7e:	79fb      	ldrb	r3, [r7, #7]
 800da80:	4618      	mov	r0, r3
 800da82:	f7ff ff69 	bl	800d958 <ESC_checkSM23>
 800da86:	4603      	mov	r3, r0
 800da88:	71fb      	strb	r3, [r7, #7]

   if (state != (ESCpreop | ESCerror))
 800da8a:	79fb      	ldrb	r3, [r7, #7]
 800da8c:	2b12      	cmp	r3, #18
 800da8e:	d00f      	beq.n	800dab0 <ESC_startinput+0x3c>
   {
   	  /* If inputs > 0 , enable SM3 */
      if (ESCvar.ESC_SM3_sml > 0)
 800da90:	4b34      	ldr	r3, [pc, #208]	@ (800db64 <ESC_startinput+0xf0>)
 800da92:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 800da96:	2b00      	cmp	r3, #0
 800da98:	d002      	beq.n	800daa0 <ESC_startinput+0x2c>
      {
         ESC_SMenable (3);
 800da9a:	2003      	movs	r0, #3
 800da9c:	f7ff faa8 	bl	800cff0 <ESC_SMenable>
      }
      /* Go to state input regardless of any inputs present */
      CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_INPUT);
 800daa0:	4b31      	ldr	r3, [pc, #196]	@ (800db68 <ESC_startinput+0xf4>)
 800daa2:	f3bf 8f5b 	dmb	ish
 800daa6:	2201      	movs	r2, #1
 800daa8:	701a      	strb	r2, [r3, #0]
 800daaa:	f3bf 8f5b 	dmb	ish
 800daae:	e013      	b.n	800dad8 <ESC_startinput+0x64>
   }
   else
   {
      ESC_SMdisable (2);
 800dab0:	2002      	movs	r0, #2
 800dab2:	f7ff fabb 	bl	800d02c <ESC_SMdisable>
      ESC_SMdisable (3);
 800dab6:	2003      	movs	r0, #3
 800dab8:	f7ff fab8 	bl	800d02c <ESC_SMdisable>
      if (ESCvar.SMtestresult & SMRESULT_ERRSM3)
 800dabc:	4b29      	ldr	r3, [pc, #164]	@ (800db64 <ESC_startinput+0xf0>)
 800dabe:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800dac2:	f003 0308 	and.w	r3, r3, #8
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d003      	beq.n	800dad2 <ESC_startinput+0x5e>
      {
         ESC_ALerror (ALERR_INVALIDINPUTSM);
 800daca:	201e      	movs	r0, #30
 800dacc:	f7ff f9a8 	bl	800ce20 <ESC_ALerror>
 800dad0:	e002      	b.n	800dad8 <ESC_startinput+0x64>
      }
      else
      {
         ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 800dad2:	201d      	movs	r0, #29
 800dad4:	f7ff f9a4 	bl	800ce20 <ESC_ALerror>
      }
   }

   /* Exit here if polling */
   if (ESCvar.use_interrupt == 0)
 800dad8:	4b22      	ldr	r3, [pc, #136]	@ (800db64 <ESC_startinput+0xf0>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d101      	bne.n	800dae4 <ESC_startinput+0x70>
   {
      return state;
 800dae0:	79fb      	ldrb	r3, [r7, #7]
 800dae2:	e03b      	b.n	800db5c <ESC_startinput+0xe8>
   }

   if (state != (ESCpreop | ESCerror))
 800dae4:	79fb      	ldrb	r3, [r7, #7]
 800dae6:	2b12      	cmp	r3, #18
 800dae8:	d037      	beq.n	800db5a <ESC_startinput+0xe6>
   {
      uint16_t dc_check_result;
      dc_check_result = ESC_checkDC();
 800daea:	f7ff fae1 	bl	800d0b0 <ESC_checkDC>
 800daee:	4603      	mov	r3, r0
 800daf0:	817b      	strh	r3, [r7, #10]
      if(dc_check_result > 0)
 800daf2:	897b      	ldrh	r3, [r7, #10]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d013      	beq.n	800db20 <ESC_startinput+0xac>
      {
         ESC_ALerror (dc_check_result);
 800daf8:	897b      	ldrh	r3, [r7, #10]
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7ff f990 	bl	800ce20 <ESC_ALerror>
         state = (ESCpreop | ESCerror);
 800db00:	2312      	movs	r3, #18
 800db02:	71fb      	strb	r3, [r7, #7]

         ESC_SMdisable (2);
 800db04:	2002      	movs	r0, #2
 800db06:	f7ff fa91 	bl	800d02c <ESC_SMdisable>
         ESC_SMdisable (3);
 800db0a:	2003      	movs	r0, #3
 800db0c:	f7ff fa8e 	bl	800d02c <ESC_SMdisable>
         CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_IDLE);
 800db10:	4b15      	ldr	r3, [pc, #84]	@ (800db68 <ESC_startinput+0xf4>)
 800db12:	f3bf 8f5b 	dmb	ish
 800db16:	2200      	movs	r2, #0
 800db18:	701a      	strb	r2, [r3, #0]
 800db1a:	f3bf 8f5b 	dmb	ish
 800db1e:	e01c      	b.n	800db5a <ESC_startinput+0xe6>
      }
      else
      {
         if (ESCvar.esc_hw_interrupt_enable != NULL)
 800db20:	4b10      	ldr	r3, [pc, #64]	@ (800db64 <ESC_startinput+0xf0>)
 800db22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db24:	2b00      	cmp	r3, #0
 800db26:	d018      	beq.n	800db5a <ESC_startinput+0xe6>
         {
            uint32_t int_mask;

            if (ESCvar.ESC_SM2_sml == 0)
 800db28:	4b0e      	ldr	r3, [pc, #56]	@ (800db64 <ESC_startinput+0xf0>)
 800db2a:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d103      	bne.n	800db3a <ESC_startinput+0xc6>
            {
               int_mask = ESCREG_ALEVENT_SM3;
 800db32:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800db36:	60fb      	str	r3, [r7, #12]
 800db38:	e002      	b.n	800db40 <ESC_startinput+0xcc>
            }
            else
            {
               int_mask = ESCREG_ALEVENT_SM2;
 800db3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800db3e:	60fb      	str	r3, [r7, #12]
            }

            if (ESCvar.dcsync > 0)
 800db40:	4b08      	ldr	r3, [pc, #32]	@ (800db64 <ESC_startinput+0xf0>)
 800db42:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800db46:	2b00      	cmp	r3, #0
 800db48:	d003      	beq.n	800db52 <ESC_startinput+0xde>
            {
               int_mask |= ESCREG_ALEVENT_DC_SYNC0;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	f043 0304 	orr.w	r3, r3, #4
 800db50:	60fb      	str	r3, [r7, #12]
            }
            ESCvar.esc_hw_interrupt_enable (int_mask);
 800db52:	4b04      	ldr	r3, [pc, #16]	@ (800db64 <ESC_startinput+0xf0>)
 800db54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db56:	68f8      	ldr	r0, [r7, #12]
 800db58:	4798      	blx	r3
         }
      }
   }

   return state;
 800db5a:	79fb      	ldrb	r3, [r7, #7]
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3710      	adds	r7, #16
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}
 800db64:	24000bb0 	.word	0x24000bb0
 800db68:	24000c99 	.word	0x24000c99

0800db6c <ESC_stopinput>:
/** Unconditional stop of updating inputs by disabling Sync Manager 2 & 3.
 * Set the App.state to APPSTATE_IDLE.
 *
 */
void ESC_stopinput (void)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	af00      	add	r7, sp, #0
   CC_ATOMIC_SET(ESCvar.App.state, APPSTATE_IDLE);
 800db70:	4b0d      	ldr	r3, [pc, #52]	@ (800dba8 <ESC_stopinput+0x3c>)
 800db72:	f3bf 8f5b 	dmb	ish
 800db76:	2200      	movs	r2, #0
 800db78:	701a      	strb	r2, [r3, #0]
 800db7a:	f3bf 8f5b 	dmb	ish
   ESC_SMdisable (3);
 800db7e:	2003      	movs	r0, #3
 800db80:	f7ff fa54 	bl	800d02c <ESC_SMdisable>
   ESC_SMdisable (2);
 800db84:	2002      	movs	r0, #2
 800db86:	f7ff fa51 	bl	800d02c <ESC_SMdisable>

   /* Call interrupt disable hook case it have been configured  */
   if ((ESCvar.use_interrupt != 0) &&
 800db8a:	4b08      	ldr	r3, [pc, #32]	@ (800dbac <ESC_stopinput+0x40>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d008      	beq.n	800dba4 <ESC_stopinput+0x38>
         (ESCvar.esc_hw_interrupt_disable != NULL))
 800db92:	4b06      	ldr	r3, [pc, #24]	@ (800dbac <ESC_stopinput+0x40>)
 800db94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
   if ((ESCvar.use_interrupt != 0) &&
 800db96:	2b00      	cmp	r3, #0
 800db98:	d004      	beq.n	800dba4 <ESC_stopinput+0x38>
   {
      ESCvar.esc_hw_interrupt_disable (ESCREG_ALEVENT_DC_SYNC0 |
 800db9a:	4b04      	ldr	r3, [pc, #16]	@ (800dbac <ESC_stopinput+0x40>)
 800db9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800db9e:	f640 4004 	movw	r0, #3076	@ 0xc04
 800dba2:	4798      	blx	r3
            ESCREG_ALEVENT_SM2 |
            ESCREG_ALEVENT_SM3);
   }
}
 800dba4:	bf00      	nop
 800dba6:	bd80      	pop	{r7, pc}
 800dba8:	24000c99 	.word	0x24000c99
 800dbac:	24000bb0 	.word	0x24000bb0

0800dbb0 <ESC_startoutput>:
 * @param[in] state   = Not used.
 * @return = state unchanged.
 *
 */
uint8_t ESC_startoutput (uint8_t state)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b082      	sub	sp, #8
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	71fb      	strb	r3, [r7, #7]
	
   /* If outputs > 0 , enable SM2 */
   if (ESCvar.ESC_SM2_sml > 0)
 800dbba:	4b0d      	ldr	r3, [pc, #52]	@ (800dbf0 <ESC_startoutput+0x40>)
 800dbbc:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d002      	beq.n	800dbca <ESC_startoutput+0x1a>
   {
      ESC_SMenable (2);
 800dbc4:	2002      	movs	r0, #2
 800dbc6:	f7ff fa13 	bl	800cff0 <ESC_SMenable>
   }
   /* Go to state output regardless of any outputs present */
   CC_ATOMIC_OR(ESCvar.App.state, APPSTATE_OUTPUT);
 800dbca:	4b0a      	ldr	r3, [pc, #40]	@ (800dbf4 <ESC_startoutput+0x44>)
 800dbcc:	f3bf 8f5b 	dmb	ish
 800dbd0:	e8d3 1f4f 	ldrexb	r1, [r3]
 800dbd4:	f041 0102 	orr.w	r1, r1, #2
 800dbd8:	e8c3 1f42 	strexb	r2, r1, [r3]
 800dbdc:	2a00      	cmp	r2, #0
 800dbde:	d1f7      	bne.n	800dbd0 <ESC_startoutput+0x20>
 800dbe0:	f3bf 8f5b 	dmb	ish
   return state;
 800dbe4:	79fb      	ldrb	r3, [r7, #7]

}
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	3708      	adds	r7, #8
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}
 800dbee:	bf00      	nop
 800dbf0:	24000bb0 	.word	0x24000bb0
 800dbf4:	24000c99 	.word	0x24000c99

0800dbf8 <ESC_stopoutput>:
 * Set the App.state to APPSTATE_INPUT. Call application hook APP_safeoutput
 * letting the user to set safe state values on outputs.
 *
 */
void ESC_stopoutput (void)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	af00      	add	r7, sp, #0
   CC_ATOMIC_AND(ESCvar.App.state, APPSTATE_INPUT);
 800dbfc:	4b09      	ldr	r3, [pc, #36]	@ (800dc24 <ESC_stopoutput+0x2c>)
 800dbfe:	f3bf 8f5b 	dmb	ish
 800dc02:	e8d3 1f4f 	ldrexb	r1, [r3]
 800dc06:	f001 0101 	and.w	r1, r1, #1
 800dc0a:	e8c3 1f42 	strexb	r2, r1, [r3]
 800dc0e:	2a00      	cmp	r2, #0
 800dc10:	d1f7      	bne.n	800dc02 <ESC_stopoutput+0xa>
 800dc12:	f3bf 8f5b 	dmb	ish
   ESC_SMdisable (2);
 800dc16:	2002      	movs	r0, #2
 800dc18:	f7ff fa08 	bl	800d02c <ESC_SMdisable>
   APP_safeoutput ();
 800dc1c:	f7fe ff8c 	bl	800cb38 <APP_safeoutput>
}
 800dc20:	bf00      	nop
 800dc22:	bd80      	pop	{r7, pc}
 800dc24:	24000c99 	.word	0x24000c99

0800dc28 <ESC_sm_act_event>:
/** The state handler acting on SyncManager Activation BIT(4)
 * events in the Al Event Request register 0x220.
 *
 */
void ESC_sm_act_event (void)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b082      	sub	sp, #8
 800dc2c:	af00      	add	r7, sp, #0
   uint8_t ac, an, as, ax, ax23;

   /* Have at least on Sync Manager  changed */
   if ((ESCvar.ALevent & ESCREG_ALEVENT_SMCHANGE) == 0)
 800dc2e:	4b56      	ldr	r3, [pc, #344]	@ (800dd88 <ESC_sm_act_event+0x160>)
 800dc30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800dc34:	f003 0310 	and.w	r3, r3, #16
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	f000 809e 	beq.w	800dd7a <ESC_sm_act_event+0x152>
      /* nothing to do */
      return;
   }

   /* Mask state request bits + Error ACK */
   ac = ESCvar.ALcontrol & ESCREG_AL_STATEMASK;
 800dc3e:	4b52      	ldr	r3, [pc, #328]	@ (800dd88 <ESC_sm_act_event+0x160>)
 800dc40:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 800dc44:	b2db      	uxtb	r3, r3
 800dc46:	f003 031f 	and.w	r3, r3, #31
 800dc4a:	71fb      	strb	r3, [r7, #7]
   as = ESCvar.ALstatus & ESCREG_AL_STATEMASK;
 800dc4c:	4b4e      	ldr	r3, [pc, #312]	@ (800dd88 <ESC_sm_act_event+0x160>)
 800dc4e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 800dc52:	b2db      	uxtb	r3, r3
 800dc54:	f003 031f 	and.w	r3, r3, #31
 800dc58:	717b      	strb	r3, [r7, #5]
   an = as;
 800dc5a:	797b      	ldrb	r3, [r7, #5]
 800dc5c:	71bb      	strb	r3, [r7, #6]
   if (((ac & ESCerror) || (ac == ESCinit)))
 800dc5e:	79fb      	ldrb	r3, [r7, #7]
 800dc60:	f003 0310 	and.w	r3, r3, #16
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d102      	bne.n	800dc6e <ESC_sm_act_event+0x46>
 800dc68:	79fb      	ldrb	r3, [r7, #7]
 800dc6a:	2b01      	cmp	r3, #1
 800dc6c:	d107      	bne.n	800dc7e <ESC_sm_act_event+0x56>
   {
      /* if error bit confirmed reset */
      ac &= ESCREG_AL_ERRACKMASK;
 800dc6e:	79fb      	ldrb	r3, [r7, #7]
 800dc70:	f003 030f 	and.w	r3, r3, #15
 800dc74:	71fb      	strb	r3, [r7, #7]
      an &= ESCREG_AL_ERRACKMASK;
 800dc76:	79bb      	ldrb	r3, [r7, #6]
 800dc78:	f003 030f 	and.w	r3, r3, #15
 800dc7c:	71bb      	strb	r3, [r7, #6]
   }
   /* Enter SM changed handling for all steps but Init and Boot when Mailboxes
    * is up and running
    */
   if ((as & ESCREG_AL_ALLBUTINITMASK) &&
 800dc7e:	797b      	ldrb	r3, [r7, #5]
 800dc80:	f003 030e 	and.w	r3, r3, #14
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d05f      	beq.n	800dd48 <ESC_sm_act_event+0x120>
 800dc88:	797b      	ldrb	r3, [r7, #5]
 800dc8a:	2b03      	cmp	r3, #3
 800dc8c:	d05c      	beq.n	800dd48 <ESC_sm_act_event+0x120>
       ((as == ESCboot) == 0) && ESCvar.MBXrun)
 800dc8e:	4b3e      	ldr	r3, [pc, #248]	@ (800dd88 <ESC_sm_act_event+0x160>)
 800dc90:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d057      	beq.n	800dd48 <ESC_sm_act_event+0x120>
   {
      /* Validate Sync Managers, reading the Activation register will
       * acknowledge the SyncManager Activation event making us enter
       * this execution path.
       */
      ax = ESC_checkmbx (as);
 800dc98:	797b      	ldrb	r3, [r7, #5]
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f7ff fa32 	bl	800d104 <ESC_checkmbx>
 800dca0:	4603      	mov	r3, r0
 800dca2:	713b      	strb	r3, [r7, #4]
      ax23 = ESC_checkSM23 (as);
 800dca4:	797b      	ldrb	r3, [r7, #5]
 800dca6:	4618      	mov	r0, r3
 800dca8:	f7ff fe56 	bl	800d958 <ESC_checkSM23>
 800dcac:	4603      	mov	r3, r0
 800dcae:	70fb      	strb	r3, [r7, #3]
      if ((an & ESCerror) && ((ac & ESCerror) == 0))
 800dcb0:	79bb      	ldrb	r3, [r7, #6]
 800dcb2:	f003 0310 	and.w	r3, r3, #16
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d004      	beq.n	800dcc4 <ESC_sm_act_event+0x9c>
 800dcba:	79fb      	ldrb	r3, [r7, #7]
 800dcbc:	f003 0310 	and.w	r3, r3, #16
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d040      	beq.n	800dd46 <ESC_sm_act_event+0x11e>
         /* if in error then stay there */
      }
      /* Have we been forced to step down to INIT we will stop mailboxes,
       * update AL Status Code and exit ESC_state
       */
      else if (ax == (ESCinit | ESCerror))
 800dcc4:	793b      	ldrb	r3, [r7, #4]
 800dcc6:	2b11      	cmp	r3, #17
 800dcc8:	d11a      	bne.n	800dd00 <ESC_sm_act_event+0xd8>
      {
         /* If we have activated Inputs and Outputs we need to disable them */
         if (CC_ATOMIC_GET(ESCvar.App.state))
 800dcca:	4b30      	ldr	r3, [pc, #192]	@ (800dd8c <ESC_sm_act_event+0x164>)
 800dccc:	f3bf 8f5b 	dmb	ish
 800dcd0:	781b      	ldrb	r3, [r3, #0]
 800dcd2:	f3bf 8f5b 	dmb	ish
 800dcd6:	b2db      	uxtb	r3, r3
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d003      	beq.n	800dce4 <ESC_sm_act_event+0xbc>
         {
            ESC_stopoutput ();
 800dcdc:	f7ff ff8c 	bl	800dbf8 <ESC_stopoutput>
            ESC_stopinput ();
 800dce0:	f7ff ff44 	bl	800db6c <ESC_stopinput>
         }
         /* Stop mailboxes and update ALStatus code */
         ESC_stopmbx ();
 800dce4:	f7ff fb14 	bl	800d310 <ESC_stopmbx>
         ESC_ALerror (ALERR_INVALIDMBXCONFIG);
 800dce8:	2016      	movs	r0, #22
 800dcea:	f7ff f899 	bl	800ce20 <ESC_ALerror>
         ESCvar.MBXrun = 0;
 800dcee:	4b26      	ldr	r3, [pc, #152]	@ (800dd88 <ESC_sm_act_event+0x160>)
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
         ESC_ALstatus (ax);
 800dcf6:	793b      	ldrb	r3, [r7, #4]
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f7ff f8ab 	bl	800ce54 <ESC_ALstatus>
         return;
 800dcfe:	e03f      	b.n	800dd80 <ESC_sm_act_event+0x158>
      }
      /* Have we been forced to step down to PREOP we will stop inputs
       * and outputs, update AL Status Code and exit ESC_state
       */
      else if (CC_ATOMIC_GET(ESCvar.App.state) && (ax23 == (ESCpreop | ESCerror)))
 800dd00:	4b22      	ldr	r3, [pc, #136]	@ (800dd8c <ESC_sm_act_event+0x164>)
 800dd02:	f3bf 8f5b 	dmb	ish
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	f3bf 8f5b 	dmb	ish
 800dd0c:	b2db      	uxtb	r3, r3
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d035      	beq.n	800dd7e <ESC_sm_act_event+0x156>
 800dd12:	78fb      	ldrb	r3, [r7, #3]
 800dd14:	2b12      	cmp	r3, #18
 800dd16:	d132      	bne.n	800dd7e <ESC_sm_act_event+0x156>
      {
         ESC_stopoutput ();
 800dd18:	f7ff ff6e 	bl	800dbf8 <ESC_stopoutput>
         ESC_stopinput ();
 800dd1c:	f7ff ff26 	bl	800db6c <ESC_stopinput>
         if (ESCvar.SMtestresult & SMRESULT_ERRSM3)
 800dd20:	4b19      	ldr	r3, [pc, #100]	@ (800dd88 <ESC_sm_act_event+0x160>)
 800dd22:	f893 30b4 	ldrb.w	r3, [r3, #180]	@ 0xb4
 800dd26:	f003 0308 	and.w	r3, r3, #8
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d003      	beq.n	800dd36 <ESC_sm_act_event+0x10e>
         {
            ESC_ALerror (ALERR_INVALIDINPUTSM);
 800dd2e:	201e      	movs	r0, #30
 800dd30:	f7ff f876 	bl	800ce20 <ESC_ALerror>
 800dd34:	e002      	b.n	800dd3c <ESC_sm_act_event+0x114>
         }
         else
         {
            ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 800dd36:	201d      	movs	r0, #29
 800dd38:	f7ff f872 	bl	800ce20 <ESC_ALerror>
         }
         ESC_ALstatus (ax23);
 800dd3c:	78fb      	ldrb	r3, [r7, #3]
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f7ff f888 	bl	800ce54 <ESC_ALstatus>
      if ((an & ESCerror) && ((ac & ESCerror) == 0))
 800dd44:	e01b      	b.n	800dd7e <ESC_sm_act_event+0x156>
 800dd46:	e01a      	b.n	800dd7e <ESC_sm_act_event+0x156>
      }
   }
   else
   {
      ESC_SMack (0);
 800dd48:	2000      	movs	r0, #0
 800dd4a:	f7ff f8fb 	bl	800cf44 <ESC_SMack>
      ESC_SMack (1);
 800dd4e:	2001      	movs	r0, #1
 800dd50:	f7ff f8f8 	bl	800cf44 <ESC_SMack>
      ESC_SMack (2);
 800dd54:	2002      	movs	r0, #2
 800dd56:	f7ff f8f5 	bl	800cf44 <ESC_SMack>
      ESC_SMack (3);
 800dd5a:	2003      	movs	r0, #3
 800dd5c:	f7ff f8f2 	bl	800cf44 <ESC_SMack>
      ESC_SMack (4);
 800dd60:	2004      	movs	r0, #4
 800dd62:	f7ff f8ef 	bl	800cf44 <ESC_SMack>
      ESC_SMack (5);
 800dd66:	2005      	movs	r0, #5
 800dd68:	f7ff f8ec 	bl	800cf44 <ESC_SMack>
      ESC_SMack (6);
 800dd6c:	2006      	movs	r0, #6
 800dd6e:	f7ff f8e9 	bl	800cf44 <ESC_SMack>
      ESC_SMack (7);
 800dd72:	2007      	movs	r0, #7
 800dd74:	f7ff f8e6 	bl	800cf44 <ESC_SMack>
 800dd78:	e002      	b.n	800dd80 <ESC_sm_act_event+0x158>
      return;
 800dd7a:	bf00      	nop
 800dd7c:	e000      	b.n	800dd80 <ESC_sm_act_event+0x158>
      if ((an & ESCerror) && ((ac & ESCerror) == 0))
 800dd7e:	bf00      	nop
   }
}
 800dd80:	3708      	adds	r7, #8
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}
 800dd86:	bf00      	nop
 800dd88:	24000bb0 	.word	0x24000bb0
 800dd8c:	24000c99 	.word	0x24000c99

0800dd90 <ESC_check_id_request>:

static bool ESC_check_id_request (uint16_t ALcontrol, uint8_t * an)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b084      	sub	sp, #16
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	4603      	mov	r3, r0
 800dd98:	6039      	str	r1, [r7, #0]
 800dd9a:	80fb      	strh	r3, [r7, #6]
   if ((ALcontrol & ESCREG_AL_ID_REQUEST) != 0)
 800dd9c:	88fb      	ldrh	r3, [r7, #6]
 800dd9e:	f003 0320 	and.w	r3, r3, #32
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d021      	beq.n	800ddea <ESC_check_id_request+0x5a>
   {
      uint8_t state = ALcontrol & ESCREG_AL_ERRACKMASK;
 800dda6:	88fb      	ldrh	r3, [r7, #6]
 800dda8:	b2db      	uxtb	r3, r3
 800ddaa:	f003 030f 	and.w	r3, r3, #15
 800ddae:	73fb      	strb	r3, [r7, #15]

      if ((state != ESCboot) &&
 800ddb0:	7bfb      	ldrb	r3, [r7, #15]
 800ddb2:	2b03      	cmp	r3, #3
 800ddb4:	d019      	beq.n	800ddea <ESC_check_id_request+0x5a>
 800ddb6:	7bfb      	ldrb	r3, [r7, #15]
 800ddb8:	2b03      	cmp	r3, #3
 800ddba:	d907      	bls.n	800ddcc <ESC_check_id_request+0x3c>
          ((state < ESCsafeop) || (*an == ESCsafeop) || (*an == ESCop)))
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	781b      	ldrb	r3, [r3, #0]
 800ddc0:	2b04      	cmp	r3, #4
 800ddc2:	d003      	beq.n	800ddcc <ESC_check_id_request+0x3c>
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	781b      	ldrb	r3, [r3, #0]
 800ddc8:	2b08      	cmp	r3, #8
 800ddca:	d10e      	bne.n	800ddea <ESC_check_id_request+0x5a>
      {
         uint16_t ALstatuscode;

         ESC_read (ESCREG_ALERROR,
 800ddcc:	f107 030c 	add.w	r3, r7, #12
 800ddd0:	2202      	movs	r2, #2
 800ddd2:	4619      	mov	r1, r3
 800ddd4:	f44f 709a 	mov.w	r0, #308	@ 0x134
 800ddd8:	f003 f82e 	bl	8010e38 <ESC_read>
                   (void *)&ALstatuscode,
                   sizeof (ALstatuscode));

         return (ALstatuscode == ALERR_NONE);
 800dddc:	89bb      	ldrh	r3, [r7, #12]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	bf0c      	ite	eq
 800dde2:	2301      	moveq	r3, #1
 800dde4:	2300      	movne	r3, #0
 800dde6:	b2db      	uxtb	r3, r3
 800dde8:	e000      	b.n	800ddec <ESC_check_id_request+0x5c>
      }
   }

   return false;
 800ddea:	2300      	movs	r3, #0
}
 800ddec:	4618      	mov	r0, r3
 800ddee:	3710      	adds	r7, #16
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}

0800ddf4 <ESC_load_device_id>:

static uint8_t ESC_load_device_id (void)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b082      	sub	sp, #8
 800ddf8:	af00      	add	r7, sp, #0
   uint16_t device_id;

   if (ESCvar.get_device_id != NULL)
 800ddfa:	4b11      	ldr	r3, [pc, #68]	@ (800de40 <ESC_load_device_id+0x4c>)
 800ddfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d00a      	beq.n	800de18 <ESC_load_device_id+0x24>
   {
      if (ESCvar.get_device_id (&device_id) != 0)
 800de02:	4b0f      	ldr	r3, [pc, #60]	@ (800de40 <ESC_load_device_id+0x4c>)
 800de04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800de06:	1dba      	adds	r2, r7, #6
 800de08:	4610      	mov	r0, r2
 800de0a:	4798      	blx	r3
 800de0c:	4603      	mov	r3, r0
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d008      	beq.n	800de24 <ESC_load_device_id+0x30>
      {
         device_id = 0;
 800de12:	2300      	movs	r3, #0
 800de14:	80fb      	strh	r3, [r7, #6]
 800de16:	e005      	b.n	800de24 <ESC_load_device_id+0x30>
      }
   }
   else
   {
      ESC_read (ESCREG_CONF_STATION_ALIAS,
 800de18:	1dbb      	adds	r3, r7, #6
 800de1a:	2202      	movs	r2, #2
 800de1c:	4619      	mov	r1, r3
 800de1e:	2012      	movs	r0, #18
 800de20:	f003 f80a 	bl	8010e38 <ESC_read>
                (void *)&device_id,
                sizeof (device_id));
   }

   if (device_id != 0)
 800de24:	88fb      	ldrh	r3, [r7, #6]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d005      	beq.n	800de36 <ESC_load_device_id+0x42>
   {
      /* Load the Device Identification Value to the AL Status Code register */
      ESC_ALerror (device_id);
 800de2a:	88fb      	ldrh	r3, [r7, #6]
 800de2c:	4618      	mov	r0, r3
 800de2e:	f7fe fff7 	bl	800ce20 <ESC_ALerror>

      return ESCREG_AL_ID_REQUEST;
 800de32:	2320      	movs	r3, #32
 800de34:	e000      	b.n	800de38 <ESC_load_device_id+0x44>
   }

   return 0;
 800de36:	2300      	movs	r3, #0
}
 800de38:	4618      	mov	r0, r3
 800de3a:	3708      	adds	r7, #8
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bd80      	pop	{r7, pc}
 800de40:	24000bb0 	.word	0x24000bb0

0800de44 <ESC_state>:
/** The state handler acting on ALControl Bit(0)
 * events in the Al Event Request register 0x220.
 *
 */
void ESC_state (void)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b082      	sub	sp, #8
 800de48:	af00      	add	r7, sp, #0
   uint8_t ac, an, as;

   /* Do we have a state change request pending */
   if (ESCvar.ALevent & ESCREG_ALEVENT_CONTROL)
 800de4a:	4bda      	ldr	r3, [pc, #872]	@ (800e1b4 <ESC_state+0x370>)
 800de4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800de50:	f003 0301 	and.w	r3, r3, #1
 800de54:	2b00      	cmp	r3, #0
 800de56:	f000 8256 	beq.w	800e306 <ESC_state+0x4c2>
   {
      ESC_read (ESCREG_ALCONTROL, (void *) &ESCvar.ALcontrol,
 800de5a:	2202      	movs	r2, #2
 800de5c:	49d6      	ldr	r1, [pc, #856]	@ (800e1b8 <ESC_state+0x374>)
 800de5e:	f44f 7090 	mov.w	r0, #288	@ 0x120
 800de62:	f002 ffe9 	bl	8010e38 <ESC_read>
                sizeof (ESCvar.ALcontrol));
      ESCvar.ALcontrol = etohs (ESCvar.ALcontrol);
 800de66:	4bd3      	ldr	r3, [pc, #844]	@ (800e1b4 <ESC_state+0x370>)
 800de68:	f8b3 2082 	ldrh.w	r2, [r3, #130]	@ 0x82
 800de6c:	4bd1      	ldr	r3, [pc, #836]	@ (800e1b4 <ESC_state+0x370>)
 800de6e:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
   {
      /* nothing to do */
      return;
   }
   /* Mask state request bits + Error ACK */
   ac = ESCvar.ALcontrol & ESCREG_AL_STATEMASK;
 800de72:	4bd0      	ldr	r3, [pc, #832]	@ (800e1b4 <ESC_state+0x370>)
 800de74:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 800de78:	b2db      	uxtb	r3, r3
 800de7a:	f003 031f 	and.w	r3, r3, #31
 800de7e:	71fb      	strb	r3, [r7, #7]
   as = ESCvar.ALstatus & ESCREG_AL_STATEMASK;
 800de80:	4bcc      	ldr	r3, [pc, #816]	@ (800e1b4 <ESC_state+0x370>)
 800de82:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 800de86:	b2db      	uxtb	r3, r3
 800de88:	f003 031f 	and.w	r3, r3, #31
 800de8c:	b2db      	uxtb	r3, r3
 800de8e:	717b      	strb	r3, [r7, #5]
   an = as;
 800de90:	797b      	ldrb	r3, [r7, #5]
 800de92:	71bb      	strb	r3, [r7, #6]
   if (((ac & ESCerror) || (ac == ESCinit)))
 800de94:	79fb      	ldrb	r3, [r7, #7]
 800de96:	f003 0310 	and.w	r3, r3, #16
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d102      	bne.n	800dea4 <ESC_state+0x60>
 800de9e:	79fb      	ldrb	r3, [r7, #7]
 800dea0:	2b01      	cmp	r3, #1
 800dea2:	d108      	bne.n	800deb6 <ESC_state+0x72>
   {
      /* if error bit confirmed reset */
      ac &= ESCREG_AL_ERRACKMASK;
 800dea4:	79fb      	ldrb	r3, [r7, #7]
 800dea6:	f003 030f 	and.w	r3, r3, #15
 800deaa:	71fb      	strb	r3, [r7, #7]
      an &= ESCREG_AL_ERRACKMASK;
 800deac:	79bb      	ldrb	r3, [r7, #6]
 800deae:	f003 030f 	and.w	r3, r3, #15
 800deb2:	b2db      	uxtb	r3, r3
 800deb4:	71bb      	strb	r3, [r7, #6]
   }

   /* Error state not acked, leave original */
   if ((an & ESCerror) && ((ac & ESCerror) == 0))
 800deb6:	79bb      	ldrb	r3, [r7, #6]
 800deb8:	f003 0310 	and.w	r3, r3, #16
 800debc:	2b00      	cmp	r3, #0
 800debe:	d005      	beq.n	800decc <ESC_state+0x88>
 800dec0:	79fb      	ldrb	r3, [r7, #7]
 800dec2:	f003 0310 	and.w	r3, r3, #16
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	f000 821f 	beq.w	800e30a <ESC_state+0x4c6>
   {
      return;
   }

   /* Mask high bits ALcommand, low bits ALstatus */
   as = (uint8_t)((ac << 4) | (as & 0x0f));
 800decc:	79fb      	ldrb	r3, [r7, #7]
 800dece:	011b      	lsls	r3, r3, #4
 800ded0:	b25a      	sxtb	r2, r3
 800ded2:	797b      	ldrb	r3, [r7, #5]
 800ded4:	b25b      	sxtb	r3, r3
 800ded6:	f003 030f 	and.w	r3, r3, #15
 800deda:	b25b      	sxtb	r3, r3
 800dedc:	4313      	orrs	r3, r2
 800dede:	b25b      	sxtb	r3, r3
 800dee0:	b2db      	uxtb	r3, r3
 800dee2:	717b      	strb	r3, [r7, #5]

   /* Call post state change hook case it have been configured  */
   if (ESCvar.pre_state_change_hook != NULL)
 800dee4:	4bb3      	ldr	r3, [pc, #716]	@ (800e1b4 <ESC_state+0x370>)
 800dee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d005      	beq.n	800def8 <ESC_state+0xb4>
   {
      ESCvar.pre_state_change_hook (&as, &an);
 800deec:	4bb1      	ldr	r3, [pc, #708]	@ (800e1b4 <ESC_state+0x370>)
 800deee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800def0:	1db9      	adds	r1, r7, #6
 800def2:	1d7a      	adds	r2, r7, #5
 800def4:	4610      	mov	r0, r2
 800def6:	4798      	blx	r3
   }

   /* Switch through the state change requested via AlControl from
    * current state read in AL status
    */
   switch (as)
 800def8:	797b      	ldrb	r3, [r7, #5]
 800defa:	3b11      	subs	r3, #17
 800defc:	2b77      	cmp	r3, #119	@ 0x77
 800defe:	f200 81ac 	bhi.w	800e25a <ESC_state+0x416>
 800df02:	a201      	add	r2, pc, #4	@ (adr r2, 800df08 <ESC_state+0xc4>)
 800df04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df08:	0800e29f 	.word	0x0800e29f
 800df0c:	0800e139 	.word	0x0800e139
 800df10:	0800e143 	.word	0x0800e143
 800df14:	0800e12b 	.word	0x0800e12b
 800df18:	0800e25b 	.word	0x0800e25b
 800df1c:	0800e25b 	.word	0x0800e25b
 800df20:	0800e25b 	.word	0x0800e25b
 800df24:	0800e119 	.word	0x0800e119
 800df28:	0800e25b 	.word	0x0800e25b
 800df2c:	0800e25b 	.word	0x0800e25b
 800df30:	0800e25b 	.word	0x0800e25b
 800df34:	0800e25b 	.word	0x0800e25b
 800df38:	0800e25b 	.word	0x0800e25b
 800df3c:	0800e25b 	.word	0x0800e25b
 800df40:	0800e25b 	.word	0x0800e25b
 800df44:	0800e25b 	.word	0x0800e25b
 800df48:	0800e0e9 	.word	0x0800e0e9
 800df4c:	0800e29f 	.word	0x0800e29f
 800df50:	0800e14d 	.word	0x0800e14d
 800df54:	0800e203 	.word	0x0800e203
 800df58:	0800e25b 	.word	0x0800e25b
 800df5c:	0800e25b 	.word	0x0800e25b
 800df60:	0800e25b 	.word	0x0800e25b
 800df64:	0800e1f5 	.word	0x0800e1f5
 800df68:	0800e25b 	.word	0x0800e25b
 800df6c:	0800e25b 	.word	0x0800e25b
 800df70:	0800e25b 	.word	0x0800e25b
 800df74:	0800e25b 	.word	0x0800e25b
 800df78:	0800e25b 	.word	0x0800e25b
 800df7c:	0800e25b 	.word	0x0800e25b
 800df80:	0800e25b 	.word	0x0800e25b
 800df84:	0800e25b 	.word	0x0800e25b
 800df88:	0800e0fb 	.word	0x0800e0fb
 800df8c:	0800e14d 	.word	0x0800e14d
 800df90:	0800e0fb 	.word	0x0800e0fb
 800df94:	0800e20d 	.word	0x0800e20d
 800df98:	0800e25b 	.word	0x0800e25b
 800df9c:	0800e25b 	.word	0x0800e25b
 800dfa0:	0800e25b 	.word	0x0800e25b
 800dfa4:	0800e227 	.word	0x0800e227
 800dfa8:	0800e25b 	.word	0x0800e25b
 800dfac:	0800e25b 	.word	0x0800e25b
 800dfb0:	0800e25b 	.word	0x0800e25b
 800dfb4:	0800e25b 	.word	0x0800e25b
 800dfb8:	0800e25b 	.word	0x0800e25b
 800dfbc:	0800e25b 	.word	0x0800e25b
 800dfc0:	0800e25b 	.word	0x0800e25b
 800dfc4:	0800e25b 	.word	0x0800e25b
 800dfc8:	0800e10d 	.word	0x0800e10d
 800dfcc:	0800e159 	.word	0x0800e159
 800dfd0:	0800e14d 	.word	0x0800e14d
 800dfd4:	0800e159 	.word	0x0800e159
 800dfd8:	0800e25b 	.word	0x0800e25b
 800dfdc:	0800e25b 	.word	0x0800e25b
 800dfe0:	0800e25b 	.word	0x0800e25b
 800dfe4:	0800e251 	.word	0x0800e251
 800dfe8:	0800e25b 	.word	0x0800e25b
 800dfec:	0800e25b 	.word	0x0800e25b
 800dff0:	0800e25b 	.word	0x0800e25b
 800dff4:	0800e25b 	.word	0x0800e25b
 800dff8:	0800e25b 	.word	0x0800e25b
 800dffc:	0800e25b 	.word	0x0800e25b
 800e000:	0800e25b 	.word	0x0800e25b
 800e004:	0800e25b 	.word	0x0800e25b
 800e008:	0800e25b 	.word	0x0800e25b
 800e00c:	0800e25b 	.word	0x0800e25b
 800e010:	0800e25b 	.word	0x0800e25b
 800e014:	0800e25b 	.word	0x0800e25b
 800e018:	0800e25b 	.word	0x0800e25b
 800e01c:	0800e25b 	.word	0x0800e25b
 800e020:	0800e25b 	.word	0x0800e25b
 800e024:	0800e25b 	.word	0x0800e25b
 800e028:	0800e25b 	.word	0x0800e25b
 800e02c:	0800e25b 	.word	0x0800e25b
 800e030:	0800e25b 	.word	0x0800e25b
 800e034:	0800e25b 	.word	0x0800e25b
 800e038:	0800e25b 	.word	0x0800e25b
 800e03c:	0800e25b 	.word	0x0800e25b
 800e040:	0800e25b 	.word	0x0800e25b
 800e044:	0800e25b 	.word	0x0800e25b
 800e048:	0800e25b 	.word	0x0800e25b
 800e04c:	0800e25b 	.word	0x0800e25b
 800e050:	0800e25b 	.word	0x0800e25b
 800e054:	0800e25b 	.word	0x0800e25b
 800e058:	0800e25b 	.word	0x0800e25b
 800e05c:	0800e25b 	.word	0x0800e25b
 800e060:	0800e25b 	.word	0x0800e25b
 800e064:	0800e25b 	.word	0x0800e25b
 800e068:	0800e25b 	.word	0x0800e25b
 800e06c:	0800e25b 	.word	0x0800e25b
 800e070:	0800e25b 	.word	0x0800e25b
 800e074:	0800e25b 	.word	0x0800e25b
 800e078:	0800e25b 	.word	0x0800e25b
 800e07c:	0800e25b 	.word	0x0800e25b
 800e080:	0800e25b 	.word	0x0800e25b
 800e084:	0800e25b 	.word	0x0800e25b
 800e088:	0800e25b 	.word	0x0800e25b
 800e08c:	0800e25b 	.word	0x0800e25b
 800e090:	0800e25b 	.word	0x0800e25b
 800e094:	0800e25b 	.word	0x0800e25b
 800e098:	0800e25b 	.word	0x0800e25b
 800e09c:	0800e25b 	.word	0x0800e25b
 800e0a0:	0800e25b 	.word	0x0800e25b
 800e0a4:	0800e25b 	.word	0x0800e25b
 800e0a8:	0800e25b 	.word	0x0800e25b
 800e0ac:	0800e25b 	.word	0x0800e25b
 800e0b0:	0800e25b 	.word	0x0800e25b
 800e0b4:	0800e25b 	.word	0x0800e25b
 800e0b8:	0800e25b 	.word	0x0800e25b
 800e0bc:	0800e25b 	.word	0x0800e25b
 800e0c0:	0800e25b 	.word	0x0800e25b
 800e0c4:	0800e25b 	.word	0x0800e25b
 800e0c8:	0800e10d 	.word	0x0800e10d
 800e0cc:	0800e1e9 	.word	0x0800e1e9
 800e0d0:	0800e14d 	.word	0x0800e14d
 800e0d4:	0800e219 	.word	0x0800e219
 800e0d8:	0800e25b 	.word	0x0800e25b
 800e0dc:	0800e25b 	.word	0x0800e25b
 800e0e0:	0800e25b 	.word	0x0800e25b
 800e0e4:	0800e29f 	.word	0x0800e29f
         break;
      }
      case INIT_TO_PREOP:
      {
         /* get station address */
         ESC_address ();
 800e0e8:	f7fe ffbe 	bl	800d068 <ESC_address>
         an = ESC_startmbx (ac);
 800e0ec:	79fb      	ldrb	r3, [r7, #7]
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	f7ff f87e 	bl	800d1f0 <ESC_startmbx>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	71bb      	strb	r3, [r7, #6]
         break;
 800e0f8:	e0d6      	b.n	800e2a8 <ESC_state+0x464>
      }
      case INIT_TO_BOOT:
      case BOOT_TO_BOOT:
      {
         /* get station address */
         ESC_address ();
 800e0fa:	f7fe ffb5 	bl	800d068 <ESC_address>
         an = ESC_startmbxboot (ac);
 800e0fe:	79fb      	ldrb	r3, [r7, #7]
 800e100:	4618      	mov	r0, r3
 800e102:	f7ff f8bd 	bl	800d280 <ESC_startmbxboot>
 800e106:	4603      	mov	r3, r0
 800e108:	71bb      	strb	r3, [r7, #6]
         break;
 800e10a:	e0cd      	b.n	800e2a8 <ESC_state+0x464>
      }
      case INIT_TO_SAFEOP:
      case INIT_TO_OP:
      {
         an = ESCinit | ESCerror;
 800e10c:	2311      	movs	r3, #17
 800e10e:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 800e110:	2011      	movs	r0, #17
 800e112:	f7fe fe85 	bl	800ce20 <ESC_ALerror>
         break;
 800e116:	e0c7      	b.n	800e2a8 <ESC_state+0x464>
      }
      case OP_TO_INIT:
      {
         ESC_stopoutput ();
 800e118:	f7ff fd6e 	bl	800dbf8 <ESC_stopoutput>
         ESC_stopinput ();
 800e11c:	f7ff fd26 	bl	800db6c <ESC_stopinput>
         ESC_stopmbx ();
 800e120:	f7ff f8f6 	bl	800d310 <ESC_stopmbx>
         an = ESCinit;
 800e124:	2301      	movs	r3, #1
 800e126:	71bb      	strb	r3, [r7, #6]
         break;
 800e128:	e0be      	b.n	800e2a8 <ESC_state+0x464>
      }
      case SAFEOP_TO_INIT:
      {
         ESC_stopinput ();
 800e12a:	f7ff fd1f 	bl	800db6c <ESC_stopinput>
         ESC_stopmbx ();
 800e12e:	f7ff f8ef 	bl	800d310 <ESC_stopmbx>
         an = ESCinit;
 800e132:	2301      	movs	r3, #1
 800e134:	71bb      	strb	r3, [r7, #6]
         break;
 800e136:	e0b7      	b.n	800e2a8 <ESC_state+0x464>
      }
      case PREOP_TO_INIT:
      {
         ESC_stopmbx ();
 800e138:	f7ff f8ea 	bl	800d310 <ESC_stopmbx>
         an = ESCinit;
 800e13c:	2301      	movs	r3, #1
 800e13e:	71bb      	strb	r3, [r7, #6]
         break;
 800e140:	e0b2      	b.n	800e2a8 <ESC_state+0x464>
      }
      case BOOT_TO_INIT:
      {
         ESC_stopmbx ();
 800e142:	f7ff f8e5 	bl	800d310 <ESC_stopmbx>
         an = ESCinit;
 800e146:	2301      	movs	r3, #1
 800e148:	71bb      	strb	r3, [r7, #6]
         break;
 800e14a:	e0ad      	b.n	800e2a8 <ESC_state+0x464>
      case PREOP_TO_BOOT:
      case BOOT_TO_PREOP:
      case BOOT_TO_SAFEOP:
      case BOOT_TO_OP:
      {
         an = ESCpreop | ESCerror;
 800e14c:	2312      	movs	r3, #18
 800e14e:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 800e150:	2011      	movs	r0, #17
 800e152:	f7fe fe65 	bl	800ce20 <ESC_ALerror>
         break;
 800e156:	e0a7      	b.n	800e2a8 <ESC_state+0x464>
      }
      case PREOP_TO_SAFEOP:
      case SAFEOP_TO_SAFEOP:
      {
         ESCvar.ESC_SM2_sml = sizeOfPDO (RX_PDO_OBJIDX, &ESCvar.sm2mappings,
 800e158:	2303      	movs	r3, #3
 800e15a:	4a18      	ldr	r2, [pc, #96]	@ (800e1bc <ESC_state+0x378>)
 800e15c:	4918      	ldr	r1, [pc, #96]	@ (800e1c0 <ESC_state+0x37c>)
 800e15e:	f641 4012 	movw	r0, #7186	@ 0x1c12
 800e162:	f000 f9dd 	bl	800e520 <sizeOfPDO>
 800e166:	4603      	mov	r3, r0
 800e168:	461a      	mov	r2, r3
 800e16a:	4b12      	ldr	r3, [pc, #72]	@ (800e1b4 <ESC_state+0x370>)
 800e16c:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
                                         SMmap2, MAX_MAPPINGS_SM2);
         if (ESCvar.sm2mappings < 0)
 800e170:	4b10      	ldr	r3, [pc, #64]	@ (800e1b4 <ESC_state+0x370>)
 800e172:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e176:	2b00      	cmp	r3, #0
 800e178:	da05      	bge.n	800e186 <ESC_state+0x342>
         {
            an = ESCpreop | ESCerror;
 800e17a:	2312      	movs	r3, #18
 800e17c:	71bb      	strb	r3, [r7, #6]
            ESC_ALerror (ALERR_INVALIDOUTPUTSM);
 800e17e:	201d      	movs	r0, #29
 800e180:	f7fe fe4e 	bl	800ce20 <ESC_ALerror>
            break;
 800e184:	e090      	b.n	800e2a8 <ESC_state+0x464>
         }

         ESCvar.ESC_SM3_sml = sizeOfPDO (TX_PDO_OBJIDX, &ESCvar.sm3mappings,
 800e186:	230d      	movs	r3, #13
 800e188:	4a0e      	ldr	r2, [pc, #56]	@ (800e1c4 <ESC_state+0x380>)
 800e18a:	490f      	ldr	r1, [pc, #60]	@ (800e1c8 <ESC_state+0x384>)
 800e18c:	f641 4013 	movw	r0, #7187	@ 0x1c13
 800e190:	f000 f9c6 	bl	800e520 <sizeOfPDO>
 800e194:	4603      	mov	r3, r0
 800e196:	461a      	mov	r2, r3
 800e198:	4b06      	ldr	r3, [pc, #24]	@ (800e1b4 <ESC_state+0x370>)
 800e19a:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a
                                         SMmap3, MAX_MAPPINGS_SM3);
         if (ESCvar.sm3mappings < 0)
 800e19e:	4b05      	ldr	r3, [pc, #20]	@ (800e1b4 <ESC_state+0x370>)
 800e1a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	da11      	bge.n	800e1cc <ESC_state+0x388>
         {
            an = ESCpreop | ESCerror;
 800e1a8:	2312      	movs	r3, #18
 800e1aa:	71bb      	strb	r3, [r7, #6]
            ESC_ALerror (ALERR_INVALIDINPUTSM);
 800e1ac:	201e      	movs	r0, #30
 800e1ae:	f7fe fe37 	bl	800ce20 <ESC_ALerror>
            break;
 800e1b2:	e079      	b.n	800e2a8 <ESC_state+0x464>
 800e1b4:	24000bb0 	.word	0x24000bb0
 800e1b8:	24000c32 	.word	0x24000c32
 800e1bc:	24000af0 	.word	0x24000af0
 800e1c0:	24000c5c 	.word	0x24000c5c
 800e1c4:	24000b14 	.word	0x24000b14
 800e1c8:	24000c60 	.word	0x24000c60
         }

         an = ESC_startinput (ac);
 800e1cc:	79fb      	ldrb	r3, [r7, #7]
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f7ff fc50 	bl	800da74 <ESC_startinput>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	71bb      	strb	r3, [r7, #6]
         if (an == ac)
 800e1d8:	79bb      	ldrb	r3, [r7, #6]
 800e1da:	79fa      	ldrb	r2, [r7, #7]
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d160      	bne.n	800e2a2 <ESC_state+0x45e>
         {
            ESC_SMenable (2);
 800e1e0:	2002      	movs	r0, #2
 800e1e2:	f7fe ff05 	bl	800cff0 <ESC_SMenable>
         }
         break;
 800e1e6:	e05c      	b.n	800e2a2 <ESC_state+0x45e>
      }
      case PREOP_TO_OP:
      {
         an = ESCpreop | ESCerror;
 800e1e8:	2312      	movs	r3, #18
 800e1ea:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 800e1ec:	2011      	movs	r0, #17
 800e1ee:	f7fe fe17 	bl	800ce20 <ESC_ALerror>
         break;
 800e1f2:	e059      	b.n	800e2a8 <ESC_state+0x464>
      }
      case OP_TO_PREOP:
      {
         ESC_stopoutput ();
 800e1f4:	f7ff fd00 	bl	800dbf8 <ESC_stopoutput>
         ESC_stopinput ();
 800e1f8:	f7ff fcb8 	bl	800db6c <ESC_stopinput>
         an = ESCpreop;
 800e1fc:	2302      	movs	r3, #2
 800e1fe:	71bb      	strb	r3, [r7, #6]
         break;
 800e200:	e052      	b.n	800e2a8 <ESC_state+0x464>
      }
      case SAFEOP_TO_PREOP:
      {
         ESC_stopinput ();
 800e202:	f7ff fcb3 	bl	800db6c <ESC_stopinput>
         an = ESCpreop;
 800e206:	2302      	movs	r3, #2
 800e208:	71bb      	strb	r3, [r7, #6]
         break;
 800e20a:	e04d      	b.n	800e2a8 <ESC_state+0x464>
      }
      case SAFEOP_TO_BOOT:
      {
         an = ESCsafeop | ESCerror;
 800e20c:	2314      	movs	r3, #20
 800e20e:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 800e210:	2011      	movs	r0, #17
 800e212:	f7fe fe05 	bl	800ce20 <ESC_ALerror>
         break;
 800e216:	e047      	b.n	800e2a8 <ESC_state+0x464>
      }
      case SAFEOP_TO_OP:
      {
         an = ESC_startoutput (ac);
 800e218:	79fb      	ldrb	r3, [r7, #7]
 800e21a:	4618      	mov	r0, r3
 800e21c:	f7ff fcc8 	bl	800dbb0 <ESC_startoutput>
 800e220:	4603      	mov	r3, r0
 800e222:	71bb      	strb	r3, [r7, #6]
         break;
 800e224:	e040      	b.n	800e2a8 <ESC_state+0x464>
      }
      case OP_TO_BOOT:
      {
         an = ESCsafeop | ESCerror;
 800e226:	2314      	movs	r3, #20
 800e228:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_INVALIDSTATECHANGE);
 800e22a:	2011      	movs	r0, #17
 800e22c:	f7fe fdf8 	bl	800ce20 <ESC_ALerror>
         ESC_stopoutput ();
 800e230:	f7ff fce2 	bl	800dbf8 <ESC_stopoutput>
         /* If no outputs present, we need to flag error using SM3 */
         if (ESCvar.ESC_SM2_sml == 0 && ESCvar.ESC_SM3_sml > 0)
 800e234:	4b37      	ldr	r3, [pc, #220]	@ (800e314 <ESC_state+0x4d0>)
 800e236:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d133      	bne.n	800e2a6 <ESC_state+0x462>
 800e23e:	4b35      	ldr	r3, [pc, #212]	@ (800e314 <ESC_state+0x4d0>)
 800e240:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 800e244:	2b00      	cmp	r3, #0
 800e246:	d02e      	beq.n	800e2a6 <ESC_state+0x462>
         {
            ESC_SMdisable (3);
 800e248:	2003      	movs	r0, #3
 800e24a:	f7fe feef 	bl	800d02c <ESC_SMdisable>
         }
         break;
 800e24e:	e02a      	b.n	800e2a6 <ESC_state+0x462>
      }
      case OP_TO_SAFEOP:
      {
         an = ESCsafeop;
 800e250:	2304      	movs	r3, #4
 800e252:	71bb      	strb	r3, [r7, #6]
         ESC_stopoutput ();
 800e254:	f7ff fcd0 	bl	800dbf8 <ESC_stopoutput>
         break;
 800e258:	e026      	b.n	800e2a8 <ESC_state+0x464>
      }
      default:
      {
         if (an == ESCop)
 800e25a:	79bb      	ldrb	r3, [r7, #6]
 800e25c:	2b08      	cmp	r3, #8
 800e25e:	d110      	bne.n	800e282 <ESC_state+0x43e>
         {
            ESC_stopoutput ();
 800e260:	f7ff fcca 	bl	800dbf8 <ESC_stopoutput>
            /* If no outputs present, we need to flag error using SM3 */
            if (ESCvar.ESC_SM2_sml == 0 && ESCvar.ESC_SM3_sml > 0)
 800e264:	4b2b      	ldr	r3, [pc, #172]	@ (800e314 <ESC_state+0x4d0>)
 800e266:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d107      	bne.n	800e27e <ESC_state+0x43a>
 800e26e:	4b29      	ldr	r3, [pc, #164]	@ (800e314 <ESC_state+0x4d0>)
 800e270:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 800e274:	2b00      	cmp	r3, #0
 800e276:	d002      	beq.n	800e27e <ESC_state+0x43a>
            {
               ESC_SMdisable (3);
 800e278:	2003      	movs	r0, #3
 800e27a:	f7fe fed7 	bl	800d02c <ESC_SMdisable>
            }
            an = ESCsafeop;
 800e27e:	2304      	movs	r3, #4
 800e280:	71bb      	strb	r3, [r7, #6]
         }
         if (as == ESCsafeop)
 800e282:	797b      	ldrb	r3, [r7, #5]
 800e284:	2b04      	cmp	r3, #4
 800e286:	d101      	bne.n	800e28c <ESC_state+0x448>
         {
            ESC_stopinput ();
 800e288:	f7ff fc70 	bl	800db6c <ESC_stopinput>
         }
         an |= ESCerror;
 800e28c:	79bb      	ldrb	r3, [r7, #6]
 800e28e:	f043 0310 	orr.w	r3, r3, #16
 800e292:	b2db      	uxtb	r3, r3
 800e294:	71bb      	strb	r3, [r7, #6]
         ESC_ALerror (ALERR_UNKNOWNSTATE);
 800e296:	2012      	movs	r0, #18
 800e298:	f7fe fdc2 	bl	800ce20 <ESC_ALerror>
         break;
 800e29c:	e004      	b.n	800e2a8 <ESC_state+0x464>
         break;
 800e29e:	bf00      	nop
 800e2a0:	e002      	b.n	800e2a8 <ESC_state+0x464>
         break;
 800e2a2:	bf00      	nop
 800e2a4:	e000      	b.n	800e2a8 <ESC_state+0x464>
         break;
 800e2a6:	bf00      	nop
      }
   }

   /* Call post state change hook case it have been configured  */
   if (ESCvar.post_state_change_hook != NULL)
 800e2a8:	4b1a      	ldr	r3, [pc, #104]	@ (800e314 <ESC_state+0x4d0>)
 800e2aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d005      	beq.n	800e2bc <ESC_state+0x478>
   {
      ESCvar.post_state_change_hook (&as, &an);
 800e2b0:	4b18      	ldr	r3, [pc, #96]	@ (800e314 <ESC_state+0x4d0>)
 800e2b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2b4:	1db9      	adds	r1, r7, #6
 800e2b6:	1d7a      	adds	r2, r7, #5
 800e2b8:	4610      	mov	r0, r2
 800e2ba:	4798      	blx	r3
   }

   if (!(an & ESCerror) && (ESCvar.ALerror))
 800e2bc:	79bb      	ldrb	r3, [r7, #6]
 800e2be:	f003 0310 	and.w	r3, r3, #16
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d107      	bne.n	800e2d6 <ESC_state+0x492>
 800e2c6:	4b13      	ldr	r3, [pc, #76]	@ (800e314 <ESC_state+0x4d0>)
 800e2c8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d002      	beq.n	800e2d6 <ESC_state+0x492>
   {
      /* clear error */
      ESC_ALerror (ALERR_NONE);
 800e2d0:	2000      	movs	r0, #0
 800e2d2:	f7fe fda5 	bl	800ce20 <ESC_ALerror>
   }

   if (ESC_check_id_request (ESCvar.ALcontrol, &an))
 800e2d6:	4b0f      	ldr	r3, [pc, #60]	@ (800e314 <ESC_state+0x4d0>)
 800e2d8:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 800e2dc:	1dba      	adds	r2, r7, #6
 800e2de:	4611      	mov	r1, r2
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f7ff fd55 	bl	800dd90 <ESC_check_id_request>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d007      	beq.n	800e2fc <ESC_state+0x4b8>
   {
      an |= ESC_load_device_id ();
 800e2ec:	f7ff fd82 	bl	800ddf4 <ESC_load_device_id>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	461a      	mov	r2, r3
 800e2f4:	79bb      	ldrb	r3, [r7, #6]
 800e2f6:	4313      	orrs	r3, r2
 800e2f8:	b2db      	uxtb	r3, r3
 800e2fa:	71bb      	strb	r3, [r7, #6]
   }

   ESC_ALstatus (an);
 800e2fc:	79bb      	ldrb	r3, [r7, #6]
 800e2fe:	4618      	mov	r0, r3
 800e300:	f7fe fda8 	bl	800ce54 <ESC_ALstatus>
 800e304:	e002      	b.n	800e30c <ESC_state+0x4c8>
      return;
 800e306:	bf00      	nop
 800e308:	e000      	b.n	800e30c <ESC_state+0x4c8>
      return;
 800e30a:	bf00      	nop

#ifdef ESC_DEBUG
   DPRINT ("state %s\n", ESC_state_to_string (an & 0xF));
#endif
}
 800e30c:	3708      	adds	r7, #8
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}
 800e312:	bf00      	nop
 800e314:	24000bb0 	.word	0x24000bb0

0800e318 <ESC_config>:
 *
 * @param[in] cfg   = Pointer to the Application configuration variable
 * holding application specific details. Data is copied.
 */
void ESC_config (esc_cfg_t * cfg)
{
 800e318:	b480      	push	{r7}
 800e31a:	b083      	sub	sp, #12
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
   static sm_cfg_t mb1 = {MBX1_sma, MBX1_sml, MBX1_sme, MBX1_smc, 0};
   static sm_cfg_t mbboot0 = {MBX0_sma_b, MBX0_sml_b, MBX0_sme_b, MBX0_smc_b, 0};
   static sm_cfg_t mbboot1 = {MBX1_sma_b, MBX1_sml_b, MBX1_sme_b, MBX1_smc_b, 0};

   /* Configure stack */
   ESCvar.use_interrupt = cfg->use_interrupt;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	685b      	ldr	r3, [r3, #4]
 800e324:	4a36      	ldr	r2, [pc, #216]	@ (800e400 <ESC_config+0xe8>)
 800e326:	6013      	str	r3, [r2, #0]
   ESCvar.watchdogcnt = cfg->watchdog_cnt;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	689b      	ldr	r3, [r3, #8]
 800e32c:	4a34      	ldr	r2, [pc, #208]	@ (800e400 <ESC_config+0xe8>)
 800e32e:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc

   ESCvar.mb[0] = mb0;
 800e332:	4b33      	ldr	r3, [pc, #204]	@ (800e400 <ESC_config+0xe8>)
 800e334:	4a33      	ldr	r2, [pc, #204]	@ (800e404 <ESC_config+0xec>)
 800e336:	3304      	adds	r3, #4
 800e338:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e33c:	e883 0003 	stmia.w	r3, {r0, r1}
   ESCvar.mb[1] = mb1;
 800e340:	4b2f      	ldr	r3, [pc, #188]	@ (800e400 <ESC_config+0xe8>)
 800e342:	4a31      	ldr	r2, [pc, #196]	@ (800e408 <ESC_config+0xf0>)
 800e344:	330c      	adds	r3, #12
 800e346:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e34a:	e883 0003 	stmia.w	r3, {r0, r1}
   ESCvar.mbboot[0] = mbboot0;
 800e34e:	4b2c      	ldr	r3, [pc, #176]	@ (800e400 <ESC_config+0xe8>)
 800e350:	4a2e      	ldr	r2, [pc, #184]	@ (800e40c <ESC_config+0xf4>)
 800e352:	3314      	adds	r3, #20
 800e354:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e358:	e883 0003 	stmia.w	r3, {r0, r1}
   ESCvar.mbboot[1] = mbboot1;
 800e35c:	4b28      	ldr	r3, [pc, #160]	@ (800e400 <ESC_config+0xe8>)
 800e35e:	4a2c      	ldr	r2, [pc, #176]	@ (800e410 <ESC_config+0xf8>)
 800e360:	331c      	adds	r3, #28
 800e362:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e366:	e883 0003 	stmia.w	r3, {r0, r1}

   ESCvar.skip_default_initialization = cfg->skip_default_initialization;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	7b1a      	ldrb	r2, [r3, #12]
 800e36e:	4b24      	ldr	r3, [pc, #144]	@ (800e400 <ESC_config+0xe8>)
 800e370:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   ESCvar.set_defaults_hook = cfg->set_defaults_hook;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	691b      	ldr	r3, [r3, #16]
 800e378:	4a21      	ldr	r2, [pc, #132]	@ (800e400 <ESC_config+0xe8>)
 800e37a:	6293      	str	r3, [r2, #40]	@ 0x28
   ESCvar.pre_state_change_hook = cfg->pre_state_change_hook;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	695b      	ldr	r3, [r3, #20]
 800e380:	4a1f      	ldr	r2, [pc, #124]	@ (800e400 <ESC_config+0xe8>)
 800e382:	62d3      	str	r3, [r2, #44]	@ 0x2c
   ESCvar.post_state_change_hook = cfg->post_state_change_hook;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	699b      	ldr	r3, [r3, #24]
 800e388:	4a1d      	ldr	r2, [pc, #116]	@ (800e400 <ESC_config+0xe8>)
 800e38a:	6313      	str	r3, [r2, #48]	@ 0x30
   ESCvar.application_hook = cfg->application_hook;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	69db      	ldr	r3, [r3, #28]
 800e390:	4a1b      	ldr	r2, [pc, #108]	@ (800e400 <ESC_config+0xe8>)
 800e392:	6353      	str	r3, [r2, #52]	@ 0x34
   ESCvar.safeoutput_override = cfg->safeoutput_override;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	6a1b      	ldr	r3, [r3, #32]
 800e398:	4a19      	ldr	r2, [pc, #100]	@ (800e400 <ESC_config+0xe8>)
 800e39a:	6393      	str	r3, [r2, #56]	@ 0x38
   ESCvar.pre_object_download_hook = cfg->pre_object_download_hook;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3a0:	4a17      	ldr	r2, [pc, #92]	@ (800e400 <ESC_config+0xe8>)
 800e3a2:	63d3      	str	r3, [r2, #60]	@ 0x3c
   ESCvar.post_object_download_hook = cfg->post_object_download_hook;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3a8:	4a15      	ldr	r2, [pc, #84]	@ (800e400 <ESC_config+0xe8>)
 800e3aa:	6413      	str	r3, [r2, #64]	@ 0x40
   ESCvar.pre_object_upload_hook = cfg->pre_object_upload_hook;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3b0:	4a13      	ldr	r2, [pc, #76]	@ (800e400 <ESC_config+0xe8>)
 800e3b2:	6453      	str	r3, [r2, #68]	@ 0x44
   ESCvar.post_object_upload_hook = cfg->post_object_upload_hook;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3b8:	4a11      	ldr	r2, [pc, #68]	@ (800e400 <ESC_config+0xe8>)
 800e3ba:	6493      	str	r3, [r2, #72]	@ 0x48
   ESCvar.rxpdo_override = cfg->rxpdo_override;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3c0:	4a0f      	ldr	r2, [pc, #60]	@ (800e400 <ESC_config+0xe8>)
 800e3c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
   ESCvar.txpdo_override = cfg->txpdo_override;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3c8:	4a0d      	ldr	r2, [pc, #52]	@ (800e400 <ESC_config+0xe8>)
 800e3ca:	6513      	str	r3, [r2, #80]	@ 0x50
   ESCvar.esc_hw_interrupt_enable = cfg->esc_hw_interrupt_enable;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e3d0:	4a0b      	ldr	r2, [pc, #44]	@ (800e400 <ESC_config+0xe8>)
 800e3d2:	6553      	str	r3, [r2, #84]	@ 0x54
   ESCvar.esc_hw_interrupt_disable = cfg->esc_hw_interrupt_disable;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3d8:	4a09      	ldr	r2, [pc, #36]	@ (800e400 <ESC_config+0xe8>)
 800e3da:	6593      	str	r3, [r2, #88]	@ 0x58
   ESCvar.esc_hw_eep_handler = cfg->esc_hw_eep_handler;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e3e0:	4a07      	ldr	r2, [pc, #28]	@ (800e400 <ESC_config+0xe8>)
 800e3e2:	65d3      	str	r3, [r2, #92]	@ 0x5c
   ESCvar.esc_check_dc_handler = cfg->esc_check_dc_handler;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e3e8:	4a05      	ldr	r2, [pc, #20]	@ (800e400 <ESC_config+0xe8>)
 800e3ea:	6613      	str	r3, [r2, #96]	@ 0x60
   ESCvar.get_device_id = cfg->get_device_id;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3f0:	4a03      	ldr	r2, [pc, #12]	@ (800e400 <ESC_config+0xe8>)
 800e3f2:	6653      	str	r3, [r2, #100]	@ 0x64
}
 800e3f4:	bf00      	nop
 800e3f6:	370c      	adds	r7, #12
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fe:	4770      	bx	lr
 800e400:	24000bb0 	.word	0x24000bb0
 800e404:	24000068 	.word	0x24000068
 800e408:	24000070 	.word	0x24000070
 800e40c:	24000078 	.word	0x24000078
 800e410:	24000080 	.word	0x24000080

0800e414 <SDO_findsubindex>:
 * @param[in] nidx   = local array index of object we want to find sub-index to
 * @param[in] subindex   = value on sub-index of object we want to locate
 * @return local array index if we succeed, -1 if we didn't find the index.
 */
int16_t SDO_findsubindex (int32_t nidx, uint8_t subindex)
{
 800e414:	b480      	push	{r7}
 800e416:	b087      	sub	sp, #28
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
 800e41c:	460b      	mov	r3, r1
 800e41e:	70fb      	strb	r3, [r7, #3]
   const _objd *objd;
   int16_t n = 0;
 800e420:	2300      	movs	r3, #0
 800e422:	82fb      	strh	r3, [r7, #22]
   uint8_t maxsub;
   objd = SDOobjects[nidx].objdesc;
 800e424:	4a29      	ldr	r2, [pc, #164]	@ (800e4cc <SDO_findsubindex+0xb8>)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	011b      	lsls	r3, r3, #4
 800e42a:	4413      	add	r3, r2
 800e42c:	330c      	adds	r3, #12
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	613b      	str	r3, [r7, #16]
   maxsub = SDOobjects[nidx].maxsub;
 800e432:	4a26      	ldr	r2, [pc, #152]	@ (800e4cc <SDO_findsubindex+0xb8>)
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	011b      	lsls	r3, r3, #4
 800e438:	4413      	add	r3, r2
 800e43a:	3304      	adds	r3, #4
 800e43c:	781b      	ldrb	r3, [r3, #0]
 800e43e:	73fb      	strb	r3, [r7, #15]

   /* Since most objects contain all subindexes (i.e. are not sparse),
    * check the most likely scenario first
    */
   if ((subindex <= maxsub) && ((objd + subindex)->subindex == subindex))
 800e440:	78fa      	ldrb	r2, [r7, #3]
 800e442:	7bfb      	ldrb	r3, [r7, #15]
 800e444:	429a      	cmp	r2, r3
 800e446:	d815      	bhi.n	800e474 <SDO_findsubindex+0x60>
 800e448:	78fa      	ldrb	r2, [r7, #3]
 800e44a:	4613      	mov	r3, r2
 800e44c:	009b      	lsls	r3, r3, #2
 800e44e:	4413      	add	r3, r2
 800e450:	009b      	lsls	r3, r3, #2
 800e452:	461a      	mov	r2, r3
 800e454:	693b      	ldr	r3, [r7, #16]
 800e456:	4413      	add	r3, r2
 800e458:	881a      	ldrh	r2, [r3, #0]
 800e45a:	78fb      	ldrb	r3, [r7, #3]
 800e45c:	b29b      	uxth	r3, r3
 800e45e:	429a      	cmp	r2, r3
 800e460:	d108      	bne.n	800e474 <SDO_findsubindex+0x60>
   {
      return subindex;
 800e462:	78fb      	ldrb	r3, [r7, #3]
 800e464:	b21b      	sxth	r3, r3
 800e466:	e02b      	b.n	800e4c0 <SDO_findsubindex+0xac>
   }

   while (((objd + n)->subindex < subindex) && (n < maxsub))
   {
      n++;
 800e468:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e46c:	b29b      	uxth	r3, r3
 800e46e:	3301      	adds	r3, #1
 800e470:	b29b      	uxth	r3, r3
 800e472:	82fb      	strh	r3, [r7, #22]
   while (((objd + n)->subindex < subindex) && (n < maxsub))
 800e474:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e478:	4613      	mov	r3, r2
 800e47a:	009b      	lsls	r3, r3, #2
 800e47c:	4413      	add	r3, r2
 800e47e:	009b      	lsls	r3, r3, #2
 800e480:	461a      	mov	r2, r3
 800e482:	693b      	ldr	r3, [r7, #16]
 800e484:	4413      	add	r3, r2
 800e486:	881a      	ldrh	r2, [r3, #0]
 800e488:	78fb      	ldrb	r3, [r7, #3]
 800e48a:	b29b      	uxth	r3, r3
 800e48c:	429a      	cmp	r2, r3
 800e48e:	d204      	bcs.n	800e49a <SDO_findsubindex+0x86>
 800e490:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e494:	7bfb      	ldrb	r3, [r7, #15]
 800e496:	429a      	cmp	r2, r3
 800e498:	dbe6      	blt.n	800e468 <SDO_findsubindex+0x54>
   }
   if ((objd + n)->subindex != subindex)
 800e49a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e49e:	4613      	mov	r3, r2
 800e4a0:	009b      	lsls	r3, r3, #2
 800e4a2:	4413      	add	r3, r2
 800e4a4:	009b      	lsls	r3, r3, #2
 800e4a6:	461a      	mov	r2, r3
 800e4a8:	693b      	ldr	r3, [r7, #16]
 800e4aa:	4413      	add	r3, r2
 800e4ac:	881a      	ldrh	r2, [r3, #0]
 800e4ae:	78fb      	ldrb	r3, [r7, #3]
 800e4b0:	b29b      	uxth	r3, r3
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d002      	beq.n	800e4bc <SDO_findsubindex+0xa8>
   {
      return -1;
 800e4b6:	f04f 33ff 	mov.w	r3, #4294967295
 800e4ba:	e001      	b.n	800e4c0 <SDO_findsubindex+0xac>
   }
   return n;
 800e4bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	371c      	adds	r7, #28
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ca:	4770      	bx	lr
 800e4cc:	08012848 	.word	0x08012848

0800e4d0 <SDO_findobject>:
 *
 * @param[in] index   = value on index of object we want to locate
 * @return local array index if we succeed, -1 if we didn't find the index.
 */
int32_t SDO_findobject (uint16_t index)
{
 800e4d0:	b480      	push	{r7}
 800e4d2:	b085      	sub	sp, #20
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	80fb      	strh	r3, [r7, #6]
   int32_t n = 0;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	60fb      	str	r3, [r7, #12]
   while (SDOobjects[n].index < index)
 800e4de:	e002      	b.n	800e4e6 <SDO_findobject+0x16>
   {
      n++;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	60fb      	str	r3, [r7, #12]
   while (SDOobjects[n].index < index)
 800e4e6:	4a0d      	ldr	r2, [pc, #52]	@ (800e51c <SDO_findobject+0x4c>)
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	011b      	lsls	r3, r3, #4
 800e4ec:	4413      	add	r3, r2
 800e4ee:	881b      	ldrh	r3, [r3, #0]
 800e4f0:	88fa      	ldrh	r2, [r7, #6]
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d8f4      	bhi.n	800e4e0 <SDO_findobject+0x10>
   }
   if (SDOobjects[n].index != index)
 800e4f6:	4a09      	ldr	r2, [pc, #36]	@ (800e51c <SDO_findobject+0x4c>)
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	011b      	lsls	r3, r3, #4
 800e4fc:	4413      	add	r3, r2
 800e4fe:	881b      	ldrh	r3, [r3, #0]
 800e500:	88fa      	ldrh	r2, [r7, #6]
 800e502:	429a      	cmp	r2, r3
 800e504:	d002      	beq.n	800e50c <SDO_findobject+0x3c>
   {
      return -1;
 800e506:	f04f 33ff 	mov.w	r3, #4294967295
 800e50a:	e000      	b.n	800e50e <SDO_findobject+0x3e>
   }
   return n;
 800e50c:	68fb      	ldr	r3, [r7, #12]
}
 800e50e:	4618      	mov	r0, r3
 800e510:	3714      	adds	r7, #20
 800e512:	46bd      	mov	sp, r7
 800e514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e518:	4770      	bx	lr
 800e51a:	bf00      	nop
 800e51c:	08012848 	.word	0x08012848

0800e520 <sizeOfPDO>:
 * @param[out] max_mappings = max number of mapped objects in SM
 * @return size of RxPDO or TxPDOs in Bytes.
 */
uint16_t sizeOfPDO (uint16_t index, int * nmappings, _SMmap * mappings,
                    int max_mappings)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b090      	sub	sp, #64	@ 0x40
 800e524:	af00      	add	r7, sp, #0
 800e526:	60b9      	str	r1, [r7, #8]
 800e528:	607a      	str	r2, [r7, #4]
 800e52a:	603b      	str	r3, [r7, #0]
 800e52c:	4603      	mov	r3, r0
 800e52e:	81fb      	strh	r3, [r7, #14]
   uint32_t offset = 0;
 800e530:	2300      	movs	r3, #0
 800e532:	63fb      	str	r3, [r7, #60]	@ 0x3c
   uint16_t hobj;
   uint8_t si, sic, c;
   int32_t nidx;
   const _objd *objd;
   const _objd *objd1c1x;
   int mapIx = 0;
 800e534:	2300      	movs	r3, #0
 800e536:	633b      	str	r3, [r7, #48]	@ 0x30

   if ((index != RX_PDO_OBJIDX) && (index != TX_PDO_OBJIDX))
 800e538:	89fb      	ldrh	r3, [r7, #14]
 800e53a:	f641 4212 	movw	r2, #7186	@ 0x1c12
 800e53e:	4293      	cmp	r3, r2
 800e540:	d006      	beq.n	800e550 <sizeOfPDO+0x30>
 800e542:	89fb      	ldrh	r3, [r7, #14]
 800e544:	f641 4213 	movw	r2, #7187	@ 0x1c13
 800e548:	4293      	cmp	r3, r2
 800e54a:	d001      	beq.n	800e550 <sizeOfPDO+0x30>
   {
      return 0;
 800e54c:	2300      	movs	r3, #0
 800e54e:	e134      	b.n	800e7ba <sizeOfPDO+0x29a>
   }

   nidx = SDO_findobject (index);
 800e550:	89fb      	ldrh	r3, [r7, #14]
 800e552:	4618      	mov	r0, r3
 800e554:	f7ff ffbc 	bl	800e4d0 <SDO_findobject>
 800e558:	6378      	str	r0, [r7, #52]	@ 0x34
   if(nidx < 0)
 800e55a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	da01      	bge.n	800e564 <sizeOfPDO+0x44>
   {
      return 0;
 800e560:	2300      	movs	r3, #0
 800e562:	e12a      	b.n	800e7ba <sizeOfPDO+0x29a>
   }

   objd1c1x = SDOobjects[nidx].objdesc;
 800e564:	4a97      	ldr	r2, [pc, #604]	@ (800e7c4 <sizeOfPDO+0x2a4>)
 800e566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e568:	011b      	lsls	r3, r3, #4
 800e56a:	4413      	add	r3, r2
 800e56c:	330c      	adds	r3, #12
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	62bb      	str	r3, [r7, #40]	@ 0x28

   si = OBJ_VALUE_FETCH (si, objd1c1x[0]);
 800e572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e574:	691b      	ldr	r3, [r3, #16]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d003      	beq.n	800e582 <sizeOfPDO+0x62>
 800e57a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e57c:	691b      	ldr	r3, [r3, #16]
 800e57e:	781b      	ldrb	r3, [r3, #0]
 800e580:	e002      	b.n	800e588 <sizeOfPDO+0x68>
 800e582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e584:	68db      	ldr	r3, [r3, #12]
 800e586:	b2db      	uxtb	r3, r3
 800e588:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
   if (si)
 800e58c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e590:	2b00      	cmp	r3, #0
 800e592:	f000 8104 	beq.w	800e79e <sizeOfPDO+0x27e>
   {
      for (sic = 1; sic <= si; sic++)
 800e596:	2301      	movs	r3, #1
 800e598:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800e59c:	e0f8      	b.n	800e790 <sizeOfPDO+0x270>
      {
         hobj = OBJ_VALUE_FETCH (hobj, objd1c1x[sic]);
 800e59e:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800e5a2:	4613      	mov	r3, r2
 800e5a4:	009b      	lsls	r3, r3, #2
 800e5a6:	4413      	add	r3, r2
 800e5a8:	009b      	lsls	r3, r3, #2
 800e5aa:	461a      	mov	r2, r3
 800e5ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5ae:	4413      	add	r3, r2
 800e5b0:	691b      	ldr	r3, [r3, #16]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d00b      	beq.n	800e5ce <sizeOfPDO+0xae>
 800e5b6:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800e5ba:	4613      	mov	r3, r2
 800e5bc:	009b      	lsls	r3, r3, #2
 800e5be:	4413      	add	r3, r2
 800e5c0:	009b      	lsls	r3, r3, #2
 800e5c2:	461a      	mov	r2, r3
 800e5c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5c6:	4413      	add	r3, r2
 800e5c8:	691b      	ldr	r3, [r3, #16]
 800e5ca:	881b      	ldrh	r3, [r3, #0]
 800e5cc:	e00a      	b.n	800e5e4 <sizeOfPDO+0xc4>
 800e5ce:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800e5d2:	4613      	mov	r3, r2
 800e5d4:	009b      	lsls	r3, r3, #2
 800e5d6:	4413      	add	r3, r2
 800e5d8:	009b      	lsls	r3, r3, #2
 800e5da:	461a      	mov	r2, r3
 800e5dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5de:	4413      	add	r3, r2
 800e5e0:	68db      	ldr	r3, [r3, #12]
 800e5e2:	b29b      	uxth	r3, r3
 800e5e4:	84bb      	strh	r3, [r7, #36]	@ 0x24
         nidx = SDO_findobject (hobj);
 800e5e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f7ff ff71 	bl	800e4d0 <SDO_findobject>
 800e5ee:	6378      	str	r0, [r7, #52]	@ 0x34
         if (nidx >= 0)
 800e5f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	f2c0 80c7 	blt.w	800e786 <sizeOfPDO+0x266>
         {
            uint8_t maxsub;

            objd = SDOobjects[nidx].objdesc;
 800e5f8:	4a72      	ldr	r2, [pc, #456]	@ (800e7c4 <sizeOfPDO+0x2a4>)
 800e5fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5fc:	011b      	lsls	r3, r3, #4
 800e5fe:	4413      	add	r3, r2
 800e600:	330c      	adds	r3, #12
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	623b      	str	r3, [r7, #32]
            maxsub = OBJ_VALUE_FETCH (maxsub, objd[0]);
 800e606:	6a3b      	ldr	r3, [r7, #32]
 800e608:	691b      	ldr	r3, [r3, #16]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d003      	beq.n	800e616 <sizeOfPDO+0xf6>
 800e60e:	6a3b      	ldr	r3, [r7, #32]
 800e610:	691b      	ldr	r3, [r3, #16]
 800e612:	781b      	ldrb	r3, [r3, #0]
 800e614:	e002      	b.n	800e61c <sizeOfPDO+0xfc>
 800e616:	6a3b      	ldr	r3, [r7, #32]
 800e618:	68db      	ldr	r3, [r3, #12]
 800e61a:	b2db      	uxtb	r3, r3
 800e61c:	77fb      	strb	r3, [r7, #31]

            for (c = 1; c <= maxsub; c++)
 800e61e:	2301      	movs	r3, #1
 800e620:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 800e624:	e0a9      	b.n	800e77a <sizeOfPDO+0x25a>
            {
               uint32_t value = OBJ_VALUE_FETCH (value, objd[c]);
 800e626:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800e62a:	4613      	mov	r3, r2
 800e62c:	009b      	lsls	r3, r3, #2
 800e62e:	4413      	add	r3, r2
 800e630:	009b      	lsls	r3, r3, #2
 800e632:	461a      	mov	r2, r3
 800e634:	6a3b      	ldr	r3, [r7, #32]
 800e636:	4413      	add	r3, r2
 800e638:	691b      	ldr	r3, [r3, #16]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d00b      	beq.n	800e656 <sizeOfPDO+0x136>
 800e63e:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800e642:	4613      	mov	r3, r2
 800e644:	009b      	lsls	r3, r3, #2
 800e646:	4413      	add	r3, r2
 800e648:	009b      	lsls	r3, r3, #2
 800e64a:	461a      	mov	r2, r3
 800e64c:	6a3b      	ldr	r3, [r7, #32]
 800e64e:	4413      	add	r3, r2
 800e650:	691b      	ldr	r3, [r3, #16]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	e009      	b.n	800e66a <sizeOfPDO+0x14a>
 800e656:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800e65a:	4613      	mov	r3, r2
 800e65c:	009b      	lsls	r3, r3, #2
 800e65e:	4413      	add	r3, r2
 800e660:	009b      	lsls	r3, r3, #2
 800e662:	461a      	mov	r2, r3
 800e664:	6a3b      	ldr	r3, [r7, #32]
 800e666:	4413      	add	r3, r2
 800e668:	68db      	ldr	r3, [r3, #12]
 800e66a:	61bb      	str	r3, [r7, #24]
               uint8_t bitlength = value & 0xFF;
 800e66c:	69bb      	ldr	r3, [r7, #24]
 800e66e:	75fb      	strb	r3, [r7, #23]

               if (max_mappings > 0)
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	2b00      	cmp	r3, #0
 800e674:	dd78      	ble.n	800e768 <sizeOfPDO+0x248>
               {
                  uint16_t index = (uint16_t)(value >> 16);
 800e676:	69bb      	ldr	r3, [r7, #24]
 800e678:	0c1b      	lsrs	r3, r3, #16
 800e67a:	82bb      	strh	r3, [r7, #20]
                  uint8_t subindex = (value >> 8) & 0xFF;
 800e67c:	69bb      	ldr	r3, [r7, #24]
 800e67e:	0a1b      	lsrs	r3, r3, #8
 800e680:	74fb      	strb	r3, [r7, #19]
                  const _objd * mapping;

                  if (mapIx == max_mappings)
 800e682:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	429a      	cmp	r2, r3
 800e688:	d105      	bne.n	800e696 <sizeOfPDO+0x176>
                  {
                     /* Too many mapped objects */
                     *nmappings = -1;
 800e68a:	68bb      	ldr	r3, [r7, #8]
 800e68c:	f04f 32ff 	mov.w	r2, #4294967295
 800e690:	601a      	str	r2, [r3, #0]
                     return 0;
 800e692:	2300      	movs	r3, #0
 800e694:	e091      	b.n	800e7ba <sizeOfPDO+0x29a>
                  DPRINT ("%04"PRIx32":%02"PRIx32" @ %"PRIu32"\n",
                        index,
                        subindex,
                        offset);

                  if (index == 0 && subindex == 0)
 800e696:	8abb      	ldrh	r3, [r7, #20]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d105      	bne.n	800e6a8 <sizeOfPDO+0x188>
 800e69c:	7cfb      	ldrb	r3, [r7, #19]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d102      	bne.n	800e6a8 <sizeOfPDO+0x188>
                  {
                     /* Padding element */
                     mapping = NULL;
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e6a6:	e02d      	b.n	800e704 <sizeOfPDO+0x1e4>
                  }
                  else
                  {
                     nidx = SDO_findobject (index);
 800e6a8:	8abb      	ldrh	r3, [r7, #20]
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7ff ff10 	bl	800e4d0 <SDO_findobject>
 800e6b0:	6378      	str	r0, [r7, #52]	@ 0x34
                     if (nidx >= 0)
 800e6b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	db1f      	blt.n	800e6f8 <sizeOfPDO+0x1d8>
                     {
                        int16_t nsub;

                        nsub = SDO_findsubindex (nidx, subindex);
 800e6b8:	7cfb      	ldrb	r3, [r7, #19]
 800e6ba:	4619      	mov	r1, r3
 800e6bc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e6be:	f7ff fea9 	bl	800e414 <SDO_findsubindex>
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	823b      	strh	r3, [r7, #16]
                        if (nsub < 0)
 800e6c6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	da05      	bge.n	800e6da <sizeOfPDO+0x1ba>
                        {
                           /* Mapped subindex does not exist */
                           *nmappings = -1;
 800e6ce:	68bb      	ldr	r3, [r7, #8]
 800e6d0:	f04f 32ff 	mov.w	r2, #4294967295
 800e6d4:	601a      	str	r2, [r3, #0]
                           return 0;
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	e06f      	b.n	800e7ba <sizeOfPDO+0x29a>
                        }

                        mapping = &SDOobjects[nidx].objdesc[nsub];
 800e6da:	4a3a      	ldr	r2, [pc, #232]	@ (800e7c4 <sizeOfPDO+0x2a4>)
 800e6dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6de:	011b      	lsls	r3, r3, #4
 800e6e0:	4413      	add	r3, r2
 800e6e2:	330c      	adds	r3, #12
 800e6e4:	6819      	ldr	r1, [r3, #0]
 800e6e6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800e6ea:	4613      	mov	r3, r2
 800e6ec:	009b      	lsls	r3, r3, #2
 800e6ee:	4413      	add	r3, r2
 800e6f0:	009b      	lsls	r3, r3, #2
 800e6f2:	440b      	add	r3, r1
 800e6f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e6f6:	e005      	b.n	800e704 <sizeOfPDO+0x1e4>
                     }
                     else
                     {
                        /* Mapped index does not exist */
                        *nmappings = -1;
 800e6f8:	68bb      	ldr	r3, [r7, #8]
 800e6fa:	f04f 32ff 	mov.w	r2, #4294967295
 800e6fe:	601a      	str	r2, [r3, #0]
                        return 0;
 800e700:	2300      	movs	r3, #0
 800e702:	e05a      	b.n	800e7ba <sizeOfPDO+0x29a>
                     }
                  }

                  mappings[mapIx].obj = mapping;
 800e704:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e706:	4613      	mov	r3, r2
 800e708:	005b      	lsls	r3, r3, #1
 800e70a:	4413      	add	r3, r2
 800e70c:	009b      	lsls	r3, r3, #2
 800e70e:	461a      	mov	r2, r3
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	4413      	add	r3, r2
 800e714:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e716:	601a      	str	r2, [r3, #0]
                  /* Save object list reference */
                  if(mapping != NULL)
 800e718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d00d      	beq.n	800e73a <sizeOfPDO+0x21a>
                  {
                     mappings[mapIx].objectlistitem = &SDOobjects[nidx];
 800e71e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e720:	4613      	mov	r3, r2
 800e722:	005b      	lsls	r3, r3, #1
 800e724:	4413      	add	r3, r2
 800e726:	009b      	lsls	r3, r3, #2
 800e728:	461a      	mov	r2, r3
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	4413      	add	r3, r2
 800e72e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e730:	0112      	lsls	r2, r2, #4
 800e732:	4924      	ldr	r1, [pc, #144]	@ (800e7c4 <sizeOfPDO+0x2a4>)
 800e734:	440a      	add	r2, r1
 800e736:	605a      	str	r2, [r3, #4]
 800e738:	e009      	b.n	800e74e <sizeOfPDO+0x22e>
                  }
                  else
                  {
                     mappings[mapIx].objectlistitem = NULL;
 800e73a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e73c:	4613      	mov	r3, r2
 800e73e:	005b      	lsls	r3, r3, #1
 800e740:	4413      	add	r3, r2
 800e742:	009b      	lsls	r3, r3, #2
 800e744:	461a      	mov	r2, r3
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	4413      	add	r3, r2
 800e74a:	2200      	movs	r2, #0
 800e74c:	605a      	str	r2, [r3, #4]
                  }
                  mappings[mapIx++].offset = offset;
 800e74e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e750:	1c5a      	adds	r2, r3, #1
 800e752:	633a      	str	r2, [r7, #48]	@ 0x30
 800e754:	461a      	mov	r2, r3
 800e756:	4613      	mov	r3, r2
 800e758:	005b      	lsls	r3, r3, #1
 800e75a:	4413      	add	r3, r2
 800e75c:	009b      	lsls	r3, r3, #2
 800e75e:	461a      	mov	r2, r3
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	4413      	add	r3, r2
 800e764:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e766:	609a      	str	r2, [r3, #8]
               }

               offset += bitlength;
 800e768:	7dfb      	ldrb	r3, [r7, #23]
 800e76a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e76c:	4413      	add	r3, r2
 800e76e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            for (c = 1; c <= maxsub; c++)
 800e770:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800e774:	3301      	adds	r3, #1
 800e776:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 800e77a:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800e77e:	7ffb      	ldrb	r3, [r7, #31]
 800e780:	429a      	cmp	r2, r3
 800e782:	f67f af50 	bls.w	800e626 <sizeOfPDO+0x106>
      for (sic = 1; sic <= si; sic++)
 800e786:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800e78a:	3301      	adds	r3, #1
 800e78c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800e790:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800e794:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e798:	429a      	cmp	r2, r3
 800e79a:	f67f af00 	bls.w	800e59e <sizeOfPDO+0x7e>
            }
         }
      }
   }

   if (max_mappings > 0)
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	dd03      	ble.n	800e7ac <sizeOfPDO+0x28c>
   {
      *nmappings = mapIx;
 800e7a4:	68bb      	ldr	r3, [r7, #8]
 800e7a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e7a8:	601a      	str	r2, [r3, #0]
 800e7aa:	e002      	b.n	800e7b2 <sizeOfPDO+0x292>
   }
   else
   {
      *nmappings = 0;
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	601a      	str	r2, [r3, #0]
   }

   return BITS2BYTES (offset) & 0xFFFF;
 800e7b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e7b4:	3307      	adds	r3, #7
 800e7b6:	08db      	lsrs	r3, r3, #3
 800e7b8:	b29b      	uxth	r3, r3
}
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	3740      	adds	r7, #64	@ 0x40
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}
 800e7c2:	bf00      	nop
 800e7c4:	08012848 	.word	0x08012848

0800e7c8 <copy2mbx>:
 * @param[in] source = pointer to source
 * @param[in] dest   = pointer to destination
 * @param[in] size   = Size to copy
 */
static void copy2mbx (void *source, void *dest, size_t size)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b084      	sub	sp, #16
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	60f8      	str	r0, [r7, #12]
 800e7d0:	60b9      	str	r1, [r7, #8]
 800e7d2:	607a      	str	r2, [r7, #4]
   memcpy (dest, source, size);
 800e7d4:	687a      	ldr	r2, [r7, #4]
 800e7d6:	68f9      	ldr	r1, [r7, #12]
 800e7d8:	68b8      	ldr	r0, [r7, #8]
 800e7da:	f002 fdd2 	bl	8011382 <memcpy>
}
 800e7de:	bf00      	nop
 800e7e0:	3710      	adds	r7, #16
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
	...

0800e7e8 <SDO_abort>:
 * @param[in] index      = index of object causing abort reply
 * @param[in] sub-index  = sub-index of object causing abort reply
 * @param[in] abortcode  = abort code to send in reply
 */
static void SDO_abort (uint8_t reusembx, uint16_t index, uint8_t subindex, uint32_t abortcode)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b084      	sub	sp, #16
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	603b      	str	r3, [r7, #0]
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	71fb      	strb	r3, [r7, #7]
 800e7f4:	460b      	mov	r3, r1
 800e7f6:	80bb      	strh	r3, [r7, #4]
 800e7f8:	4613      	mov	r3, r2
 800e7fa:	71bb      	strb	r3, [r7, #6]
   uint8_t MBXout;
   _COEsdo *coeres;
   if (reusembx)
 800e7fc:	79fb      	ldrb	r3, [r7, #7]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d002      	beq.n	800e808 <SDO_abort+0x20>
      MBXout = reusembx;
 800e802:	79fb      	ldrb	r3, [r7, #7]
 800e804:	73fb      	strb	r3, [r7, #15]
 800e806:	e003      	b.n	800e810 <SDO_abort+0x28>
   else
      MBXout = ESC_claimbuffer ();
 800e808:	f7fe fe7e 	bl	800d508 <ESC_claimbuffer>
 800e80c:	4603      	mov	r3, r0
 800e80e:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 800e810:	7bfb      	ldrb	r3, [r7, #15]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d025      	beq.n	800e862 <SDO_abort+0x7a>
   {
      coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800e816:	7bfb      	ldrb	r3, [r7, #15]
 800e818:	4a14      	ldr	r2, [pc, #80]	@ (800e86c <SDO_abort+0x84>)
 800e81a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800e81c:	fb02 f303 	mul.w	r3, r2, r3
 800e820:	4a13      	ldr	r2, [pc, #76]	@ (800e870 <SDO_abort+0x88>)
 800e822:	4413      	add	r3, r2
 800e824:	60bb      	str	r3, [r7, #8]
      coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	220a      	movs	r2, #10
 800e82a:	801a      	strh	r2, [r3, #0]
      coeres->mbxheader.mbxtype = MBXCOE;
 800e82c:	68ba      	ldr	r2, [r7, #8]
 800e82e:	7953      	ldrb	r3, [r2, #5]
 800e830:	2103      	movs	r1, #3
 800e832:	f361 0303 	bfi	r3, r1, #0, #4
 800e836:	7153      	strb	r3, [r2, #5]
      coeres->coeheader.numberservice =
 800e838:	68bb      	ldr	r3, [r7, #8]
 800e83a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800e83e:	80da      	strh	r2, [r3, #6]
         htoes ((0 & 0x01f) | (COE_SDOREQUEST << 12));
      coeres->index = htoes (index);
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	88ba      	ldrh	r2, [r7, #4]
 800e844:	f8a3 2009 	strh.w	r2, [r3, #9]
      coeres->subindex = subindex;
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	79ba      	ldrb	r2, [r7, #6]
 800e84c:	72da      	strb	r2, [r3, #11]
      coeres->command = COE_COMMAND_SDOABORT;
 800e84e:	68bb      	ldr	r3, [r7, #8]
 800e850:	2280      	movs	r2, #128	@ 0x80
 800e852:	721a      	strb	r2, [r3, #8]
      coeres->size = htoel (abortcode);
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	683a      	ldr	r2, [r7, #0]
 800e858:	60da      	str	r2, [r3, #12]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800e85a:	7bfb      	ldrb	r3, [r7, #15]
 800e85c:	4a05      	ldr	r2, [pc, #20]	@ (800e874 <SDO_abort+0x8c>)
 800e85e:	2103      	movs	r1, #3
 800e860:	54d1      	strb	r1, [r2, r3]
   }
}
 800e862:	bf00      	nop
 800e864:	3710      	adds	r7, #16
 800e866:	46bd      	mov	sp, r7
 800e868:	bd80      	pop	{r7, pc}
 800e86a:	bf00      	nop
 800e86c:	24000bb0 	.word	0x24000bb0
 800e870:	240004ec 	.word	0x240004ec
 800e874:	24000aec 	.word	0x24000aec

0800e878 <set_state_idle>:

static void set_state_idle (uint8_t reusembx,
                           uint16_t index,
                           uint8_t subindex,
                           uint32_t abortcode)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b082      	sub	sp, #8
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	603b      	str	r3, [r7, #0]
 800e880:	4603      	mov	r3, r0
 800e882:	71fb      	strb	r3, [r7, #7]
 800e884:	460b      	mov	r3, r1
 800e886:	80bb      	strh	r3, [r7, #4]
 800e888:	4613      	mov	r3, r2
 800e88a:	71bb      	strb	r3, [r7, #6]
   if (abortcode != 0)
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d005      	beq.n	800e89e <set_state_idle+0x26>
   {
      SDO_abort (reusembx, index, subindex, abortcode);
 800e892:	79ba      	ldrb	r2, [r7, #6]
 800e894:	88b9      	ldrh	r1, [r7, #4]
 800e896:	79f8      	ldrb	r0, [r7, #7]
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	f7ff ffa5 	bl	800e7e8 <SDO_abort>
   }

   MBXcontrol[0].state = MBXstate_idle;
 800e89e:	4b05      	ldr	r3, [pc, #20]	@ (800e8b4 <set_state_idle+0x3c>)
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	701a      	strb	r2, [r3, #0]
   ESCvar.xoe = 0;
 800e8a4:	4b04      	ldr	r3, [pc, #16]	@ (800e8b8 <set_state_idle+0x40>)
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
}
 800e8ac:	bf00      	nop
 800e8ae:	3708      	adds	r7, #8
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bd80      	pop	{r7, pc}
 800e8b4:	24000aec 	.word	0x24000aec
 800e8b8:	24000bb0 	.word	0x24000bb0

0800e8bc <SDO_upload>:
/** Function for responding on requested SDO Upload, sending the content
 *  requested in a free Mailbox buffer. Depending of size of data expedited,
 *  normal or segmented transfer is used. On error an SDO Abort will be sent.
 */
static void SDO_upload (void)
{
 800e8bc:	b590      	push	{r4, r7, lr}
 800e8be:	b08f      	sub	sp, #60	@ 0x3c
 800e8c0:	af02      	add	r7, sp, #8
   int32_t nidx;
   int16_t nsub;
   uint8_t MBXout;
   uint32_t size;
   uint8_t dss;
   uint32_t abort = 1;
 800e8c2:	2301      	movs	r3, #1
 800e8c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   const _objd *objd;
   coesdo = (_COEsdo *) &MBX[0];
 800e8c6:	4b91      	ldr	r3, [pc, #580]	@ (800eb0c <SDO_upload+0x250>)
 800e8c8:	627b      	str	r3, [r7, #36]	@ 0x24
   index = etohs (coesdo->index);
 800e8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8cc:	689b      	ldr	r3, [r3, #8]
 800e8ce:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800e8d2:	847b      	strh	r3, [r7, #34]	@ 0x22
   subindex = coesdo->subindex;
 800e8d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8d6:	7adb      	ldrb	r3, [r3, #11]
 800e8d8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
   nidx = SDO_findobject (index);
 800e8dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e8de:	4618      	mov	r0, r3
 800e8e0:	f7ff fdf6 	bl	800e4d0 <SDO_findobject>
 800e8e4:	61f8      	str	r0, [r7, #28]
   if (nidx >= 0)
 800e8e6:	69fb      	ldr	r3, [r7, #28]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	f2c0 81c3 	blt.w	800ec74 <SDO_upload+0x3b8>
   {
      nsub = SDO_findsubindex (nidx, subindex);
 800e8ee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800e8f2:	4619      	mov	r1, r3
 800e8f4:	69f8      	ldr	r0, [r7, #28]
 800e8f6:	f7ff fd8d 	bl	800e414 <SDO_findsubindex>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	837b      	strh	r3, [r7, #26]
      if (nsub >= 0)
 800e8fe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800e902:	2b00      	cmp	r3, #0
 800e904:	f2c0 81ae 	blt.w	800ec64 <SDO_upload+0x3a8>
      {
         objd = SDOobjects[nidx].objdesc;
 800e908:	4a81      	ldr	r2, [pc, #516]	@ (800eb10 <SDO_upload+0x254>)
 800e90a:	69fb      	ldr	r3, [r7, #28]
 800e90c:	011b      	lsls	r3, r3, #4
 800e90e:	4413      	add	r3, r2
 800e910:	330c      	adds	r3, #12
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	617b      	str	r3, [r7, #20]
         uint8_t access = (objd + nsub)->flags & 0x3f;
 800e916:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800e91a:	4613      	mov	r3, r2
 800e91c:	009b      	lsls	r3, r3, #2
 800e91e:	4413      	add	r3, r2
 800e920:	009b      	lsls	r3, r3, #2
 800e922:	461a      	mov	r2, r3
 800e924:	697b      	ldr	r3, [r7, #20]
 800e926:	4413      	add	r3, r2
 800e928:	88db      	ldrh	r3, [r3, #6]
 800e92a:	b2db      	uxtb	r3, r3
 800e92c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e930:	74fb      	strb	r3, [r7, #19]
         uint8_t state = ESCvar.ALstatus & 0x0f;
 800e932:	4b78      	ldr	r3, [pc, #480]	@ (800eb14 <SDO_upload+0x258>)
 800e934:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 800e938:	b2db      	uxtb	r3, r3
 800e93a:	f003 030f 	and.w	r3, r3, #15
 800e93e:	74bb      	strb	r3, [r7, #18]
         if (!READ_ACCESS(access, state))
 800e940:	7cfb      	ldrb	r3, [r7, #19]
 800e942:	f003 0301 	and.w	r3, r3, #1
 800e946:	2b00      	cmp	r3, #0
 800e948:	d002      	beq.n	800e950 <SDO_upload+0x94>
 800e94a:	7cbb      	ldrb	r3, [r7, #18]
 800e94c:	2b02      	cmp	r3, #2
 800e94e:	d017      	beq.n	800e980 <SDO_upload+0xc4>
 800e950:	7cfb      	ldrb	r3, [r7, #19]
 800e952:	f003 0302 	and.w	r3, r3, #2
 800e956:	2b00      	cmp	r3, #0
 800e958:	d002      	beq.n	800e960 <SDO_upload+0xa4>
 800e95a:	7cbb      	ldrb	r3, [r7, #18]
 800e95c:	2b04      	cmp	r3, #4
 800e95e:	d00f      	beq.n	800e980 <SDO_upload+0xc4>
 800e960:	7cfb      	ldrb	r3, [r7, #19]
 800e962:	f003 0304 	and.w	r3, r3, #4
 800e966:	2b00      	cmp	r3, #0
 800e968:	d002      	beq.n	800e970 <SDO_upload+0xb4>
 800e96a:	7cbb      	ldrb	r3, [r7, #18]
 800e96c:	2b08      	cmp	r3, #8
 800e96e:	d007      	beq.n	800e980 <SDO_upload+0xc4>
         {
            set_state_idle (0, index, subindex, ABORT_WRITEONLY);
 800e970:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800e974:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 800e976:	4b68      	ldr	r3, [pc, #416]	@ (800eb18 <SDO_upload+0x25c>)
 800e978:	2000      	movs	r0, #0
 800e97a:	f7ff ff7d 	bl	800e878 <set_state_idle>
            return;
 800e97e:	e187      	b.n	800ec90 <SDO_upload+0x3d4>
         }
         MBXout = ESC_claimbuffer ();
 800e980:	f7fe fdc2 	bl	800d508 <ESC_claimbuffer>
 800e984:	4603      	mov	r3, r0
 800e986:	747b      	strb	r3, [r7, #17]
         if (MBXout)
 800e988:	7c7b      	ldrb	r3, [r7, #17]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	f000 8179 	beq.w	800ec82 <SDO_upload+0x3c6>
         {
            coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800e990:	7c7b      	ldrb	r3, [r7, #17]
 800e992:	4a60      	ldr	r2, [pc, #384]	@ (800eb14 <SDO_upload+0x258>)
 800e994:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800e996:	fb02 f303 	mul.w	r3, r2, r3
 800e99a:	4a5c      	ldr	r2, [pc, #368]	@ (800eb0c <SDO_upload+0x250>)
 800e99c:	4413      	add	r3, r2
 800e99e:	60fb      	str	r3, [r7, #12]
            coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	220a      	movs	r2, #10
 800e9a4:	801a      	strh	r2, [r3, #0]
            coeres->mbxheader.mbxtype = MBXCOE;
 800e9a6:	68fa      	ldr	r2, [r7, #12]
 800e9a8:	7953      	ldrb	r3, [r2, #5]
 800e9aa:	2103      	movs	r1, #3
 800e9ac:	f361 0303 	bfi	r3, r1, #0, #4
 800e9b0:	7153      	strb	r3, [r2, #5]
            coeres->coeheader.numberservice =
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800e9b8:	80da      	strh	r2, [r3, #6]
               htoes ((0 & 0x01f) | (COE_SDORESPONSE << 12));
            size = (objd + nsub)->bitlength;
 800e9ba:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800e9be:	4613      	mov	r3, r2
 800e9c0:	009b      	lsls	r3, r3, #2
 800e9c2:	4413      	add	r3, r2
 800e9c4:	009b      	lsls	r3, r3, #2
 800e9c6:	461a      	mov	r2, r3
 800e9c8:	697b      	ldr	r3, [r7, #20]
 800e9ca:	4413      	add	r3, r2
 800e9cc:	889b      	ldrh	r3, [r3, #4]
 800e9ce:	607b      	str	r3, [r7, #4]
            /* expedited bits used calculation */
            dss = 0x0c;
 800e9d0:	230c      	movs	r3, #12
 800e9d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            if (size > 8)
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	2b08      	cmp	r3, #8
 800e9da:	d902      	bls.n	800e9e2 <SDO_upload+0x126>
            {
               dss = 0x08;
 800e9dc:	2308      	movs	r3, #8
 800e9de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            }
            if (size > 16)
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	2b10      	cmp	r3, #16
 800e9e6:	d902      	bls.n	800e9ee <SDO_upload+0x132>
            {
               dss = 0x04;
 800e9e8:	2304      	movs	r3, #4
 800e9ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            }
            if (size > 24)
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2b18      	cmp	r3, #24
 800e9f2:	d902      	bls.n	800e9fa <SDO_upload+0x13e>
            {
               dss = 0x00;
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            }
            coeres->index = htoes (index);
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e9fe:	f8a3 2009 	strh.w	r2, [r3, #9]
            coeres->subindex = subindex;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800ea08:	72da      	strb	r2, [r3, #11]
            coeres->command = COE_COMMAND_UPLOADRESPONSE |
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	2241      	movs	r2, #65	@ 0x41
 800ea0e:	721a      	strb	r2, [r3, #8]
               COE_SIZE_INDICATOR;
            /* convert bits to bytes */
            size = BITS2BYTES(size);
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	3307      	adds	r3, #7
 800ea14:	08db      	lsrs	r3, r3, #3
 800ea16:	607b      	str	r3, [r7, #4]
            if (size <= 4)
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2b04      	cmp	r3, #4
 800ea1c:	d87e      	bhi.n	800eb1c <SDO_upload+0x260>
            {
               /* expedited response i.e. length<=4 bytes */
               coeres->command |= (COE_EXPEDITED_INDICATOR | dss);
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	7a1a      	ldrb	r2, [r3, #8]
 800ea22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ea26:	4313      	orrs	r3, r2
 800ea28:	b2db      	uxtb	r3, r3
 800ea2a:	f043 0302 	orr.w	r3, r3, #2
 800ea2e:	b2da      	uxtb	r2, r3
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	721a      	strb	r2, [r3, #8]
               void *dataptr = ((objd + nsub)->data) ?
 800ea34:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800ea38:	4613      	mov	r3, r2
 800ea3a:	009b      	lsls	r3, r3, #2
 800ea3c:	4413      	add	r3, r2
 800ea3e:	009b      	lsls	r3, r3, #2
 800ea40:	461a      	mov	r2, r3
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	4413      	add	r3, r2
 800ea46:	691b      	ldr	r3, [r3, #16]
                     (objd + nsub)->data : (void *)&((objd + nsub)->value);
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d00a      	beq.n	800ea62 <SDO_upload+0x1a6>
 800ea4c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800ea50:	4613      	mov	r3, r2
 800ea52:	009b      	lsls	r3, r3, #2
 800ea54:	4413      	add	r3, r2
 800ea56:	009b      	lsls	r3, r3, #2
 800ea58:	461a      	mov	r2, r3
 800ea5a:	697b      	ldr	r3, [r7, #20]
 800ea5c:	4413      	add	r3, r2
 800ea5e:	691b      	ldr	r3, [r3, #16]
 800ea60:	e009      	b.n	800ea76 <SDO_upload+0x1ba>
 800ea62:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800ea66:	4613      	mov	r3, r2
 800ea68:	009b      	lsls	r3, r3, #2
 800ea6a:	4413      	add	r3, r2
 800ea6c:	009b      	lsls	r3, r3, #2
 800ea6e:	461a      	mov	r2, r3
 800ea70:	697b      	ldr	r3, [r7, #20]
 800ea72:	4413      	add	r3, r2
 800ea74:	330c      	adds	r3, #12
               void *dataptr = ((objd + nsub)->data) ?
 800ea76:	60bb      	str	r3, [r7, #8]
               abort = ESC_upload_pre_objecthandler (index, subindex,
                     dataptr, (size_t *)&size, (objd + nsub)->flags);
 800ea78:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800ea7c:	4613      	mov	r3, r2
 800ea7e:	009b      	lsls	r3, r3, #2
 800ea80:	4413      	add	r3, r2
 800ea82:	009b      	lsls	r3, r3, #2
 800ea84:	461a      	mov	r2, r3
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	4413      	add	r3, r2
 800ea8a:	88db      	ldrh	r3, [r3, #6]
               abort = ESC_upload_pre_objecthandler (index, subindex,
 800ea8c:	1d3a      	adds	r2, r7, #4
 800ea8e:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 800ea92:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 800ea94:	9300      	str	r3, [sp, #0]
 800ea96:	4613      	mov	r3, r2
 800ea98:	68ba      	ldr	r2, [r7, #8]
 800ea9a:	f7fe f811 	bl	800cac0 <ESC_upload_pre_objecthandler>
 800ea9e:	62b8      	str	r0, [r7, #40]	@ 0x28
               if (abort == 0)
 800eaa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d129      	bne.n	800eafa <SDO_upload+0x23e>
               {
                  if ((objd + nsub)->data == NULL)
 800eaa6:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800eaaa:	4613      	mov	r3, r2
 800eaac:	009b      	lsls	r3, r3, #2
 800eaae:	4413      	add	r3, r2
 800eab0:	009b      	lsls	r3, r3, #2
 800eab2:	461a      	mov	r2, r3
 800eab4:	697b      	ldr	r3, [r7, #20]
 800eab6:	4413      	add	r3, r2
 800eab8:	691b      	ldr	r3, [r3, #16]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d10c      	bne.n	800ead8 <SDO_upload+0x21c>
                  {
                     /* use constant value */
                     coeres->size = htoel ((objd + nsub)->value);
 800eabe:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800eac2:	4613      	mov	r3, r2
 800eac4:	009b      	lsls	r3, r3, #2
 800eac6:	4413      	add	r3, r2
 800eac8:	009b      	lsls	r3, r3, #2
 800eaca:	461a      	mov	r2, r3
 800eacc:	697b      	ldr	r3, [r7, #20]
 800eace:	4413      	add	r3, r2
 800ead0:	68da      	ldr	r2, [r3, #12]
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	60da      	str	r2, [r3, #12]
 800ead6:	e09c      	b.n	800ec12 <SDO_upload+0x356>
                  }
                  else
                  {
                     /* use dynamic data */
                     copy2mbx ((objd + nsub)->data, &(coeres->size), size);
 800ead8:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800eadc:	4613      	mov	r3, r2
 800eade:	009b      	lsls	r3, r3, #2
 800eae0:	4413      	add	r3, r2
 800eae2:	009b      	lsls	r3, r3, #2
 800eae4:	461a      	mov	r2, r3
 800eae6:	697b      	ldr	r3, [r7, #20]
 800eae8:	4413      	add	r3, r2
 800eaea:	6918      	ldr	r0, [r3, #16]
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	330c      	adds	r3, #12
 800eaf0:	687a      	ldr	r2, [r7, #4]
 800eaf2:	4619      	mov	r1, r3
 800eaf4:	f7ff fe68 	bl	800e7c8 <copy2mbx>
 800eaf8:	e08b      	b.n	800ec12 <SDO_upload+0x356>
                  }
               }
               else
               {
                  set_state_idle (MBXout, index, subindex, abort);
 800eafa:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800eafe:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 800eb00:	7c78      	ldrb	r0, [r7, #17]
 800eb02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb04:	f7ff feb8 	bl	800e878 <set_state_idle>
                  return;
 800eb08:	e0c2      	b.n	800ec90 <SDO_upload+0x3d4>
 800eb0a:	bf00      	nop
 800eb0c:	240004ec 	.word	0x240004ec
 800eb10:	08012848 	.word	0x08012848
 800eb14:	24000bb0 	.word	0x24000bb0
 800eb18:	06010001 	.word	0x06010001
            }
            else
            {
               /* normal response i.e. length>4 bytes */
               abort = ESC_upload_pre_objecthandler (index, subindex,
                     (objd + nsub)->data, (size_t *)&size, (objd + nsub)->flags);
 800eb1c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800eb20:	4613      	mov	r3, r2
 800eb22:	009b      	lsls	r3, r3, #2
 800eb24:	4413      	add	r3, r2
 800eb26:	009b      	lsls	r3, r3, #2
 800eb28:	461a      	mov	r2, r3
 800eb2a:	697b      	ldr	r3, [r7, #20]
 800eb2c:	4413      	add	r3, r2
 800eb2e:	691c      	ldr	r4, [r3, #16]
 800eb30:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800eb34:	4613      	mov	r3, r2
 800eb36:	009b      	lsls	r3, r3, #2
 800eb38:	4413      	add	r3, r2
 800eb3a:	009b      	lsls	r3, r3, #2
 800eb3c:	461a      	mov	r2, r3
 800eb3e:	697b      	ldr	r3, [r7, #20]
 800eb40:	4413      	add	r3, r2
 800eb42:	88db      	ldrh	r3, [r3, #6]
               abort = ESC_upload_pre_objecthandler (index, subindex,
 800eb44:	1d3a      	adds	r2, r7, #4
 800eb46:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 800eb4a:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 800eb4c:	9300      	str	r3, [sp, #0]
 800eb4e:	4613      	mov	r3, r2
 800eb50:	4622      	mov	r2, r4
 800eb52:	f7fd ffb5 	bl	800cac0 <ESC_upload_pre_objecthandler>
 800eb56:	62b8      	str	r0, [r7, #40]	@ 0x28
               if (abort == 0)
 800eb58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d151      	bne.n	800ec02 <SDO_upload+0x346>
               {
                  /* set total size in bytes */
                  ESCvar.frags = size;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	4a4d      	ldr	r2, [pc, #308]	@ (800ec98 <SDO_upload+0x3dc>)
 800eb62:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
                  coeres->size = htoel (size);
 800eb66:	687a      	ldr	r2, [r7, #4]
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	60da      	str	r2, [r3, #12]
                  if ((size + COE_HEADERSIZE) > ESC_MBXDSIZE)
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f103 020a 	add.w	r2, r3, #10
 800eb72:	4b49      	ldr	r3, [pc, #292]	@ (800ec98 <SDO_upload+0x3dc>)
 800eb74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb76:	3b06      	subs	r3, #6
 800eb78:	429a      	cmp	r2, r3
 800eb7a:	d926      	bls.n	800ebca <SDO_upload+0x30e>
                  {
                     /* segmented transfer needed */
                     /* limit to mailbox size */
                     size = ESC_MBXDSIZE - COE_HEADERSIZE;
 800eb7c:	4b46      	ldr	r3, [pc, #280]	@ (800ec98 <SDO_upload+0x3dc>)
 800eb7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb80:	3b10      	subs	r3, #16
 800eb82:	607b      	str	r3, [r7, #4]
                     /* number of bytes done */
                     ESCvar.fragsleft = size;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	4a44      	ldr	r2, [pc, #272]	@ (800ec98 <SDO_upload+0x3dc>)
 800eb88:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
                     /* signal segmented transfer */
                     ESCvar.segmented = MBXSEU;
 800eb8c:	4b42      	ldr	r3, [pc, #264]	@ (800ec98 <SDO_upload+0x3dc>)
 800eb8e:	2240      	movs	r2, #64	@ 0x40
 800eb90:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
                     ESCvar.data = (objd + nsub)->data;
 800eb94:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800eb98:	4613      	mov	r3, r2
 800eb9a:	009b      	lsls	r3, r3, #2
 800eb9c:	4413      	add	r3, r2
 800eb9e:	009b      	lsls	r3, r3, #2
 800eba0:	461a      	mov	r2, r3
 800eba2:	697b      	ldr	r3, [r7, #20]
 800eba4:	4413      	add	r3, r2
 800eba6:	691b      	ldr	r3, [r3, #16]
 800eba8:	4a3b      	ldr	r2, [pc, #236]	@ (800ec98 <SDO_upload+0x3dc>)
 800ebaa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
                     ESCvar.flags = (objd + nsub)->flags;
 800ebae:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800ebb2:	4613      	mov	r3, r2
 800ebb4:	009b      	lsls	r3, r3, #2
 800ebb6:	4413      	add	r3, r2
 800ebb8:	009b      	lsls	r3, r3, #2
 800ebba:	461a      	mov	r2, r3
 800ebbc:	697b      	ldr	r3, [r7, #20]
 800ebbe:	4413      	add	r3, r2
 800ebc0:	88da      	ldrh	r2, [r3, #6]
 800ebc2:	4b35      	ldr	r3, [pc, #212]	@ (800ec98 <SDO_upload+0x3dc>)
 800ebc4:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
 800ebc8:	e003      	b.n	800ebd2 <SDO_upload+0x316>
                  }
                  else
                  {
                     ESCvar.segmented = 0;
 800ebca:	4b33      	ldr	r3, [pc, #204]	@ (800ec98 <SDO_upload+0x3dc>)
 800ebcc:	2200      	movs	r2, #0
 800ebce:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
                  }
                  coeres->mbxheader.length = htoes (COE_HEADERSIZE + size);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	b29b      	uxth	r3, r3
 800ebd6:	330a      	adds	r3, #10
 800ebd8:	b29a      	uxth	r2, r3
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	801a      	strh	r2, [r3, #0]

                  /* use dynamic data */
                  copy2mbx ((objd + nsub)->data, (&(coeres->size)) + 1, size);
 800ebde:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800ebe2:	4613      	mov	r3, r2
 800ebe4:	009b      	lsls	r3, r3, #2
 800ebe6:	4413      	add	r3, r2
 800ebe8:	009b      	lsls	r3, r3, #2
 800ebea:	461a      	mov	r2, r3
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	4413      	add	r3, r2
 800ebf0:	6918      	ldr	r0, [r3, #16]
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	330c      	adds	r3, #12
 800ebf6:	3304      	adds	r3, #4
 800ebf8:	687a      	ldr	r2, [r7, #4]
 800ebfa:	4619      	mov	r1, r3
 800ebfc:	f7ff fde4 	bl	800e7c8 <copy2mbx>
 800ec00:	e007      	b.n	800ec12 <SDO_upload+0x356>
               }
               else
               {
                  set_state_idle (MBXout, index, subindex, abort);
 800ec02:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800ec06:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 800ec08:	7c78      	ldrb	r0, [r7, #17]
 800ec0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec0c:	f7ff fe34 	bl	800e878 <set_state_idle>
                  return;
 800ec10:	e03e      	b.n	800ec90 <SDO_upload+0x3d4>
               }
            }
            if ((abort == 0) && (ESCvar.segmented == 0))
 800ec12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d120      	bne.n	800ec5a <SDO_upload+0x39e>
 800ec18:	4b1f      	ldr	r3, [pc, #124]	@ (800ec98 <SDO_upload+0x3dc>)
 800ec1a:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d11b      	bne.n	800ec5a <SDO_upload+0x39e>
            {
               abort = ESC_upload_post_objecthandler (index, subindex,
                                                      (objd + nsub)->flags);
 800ec22:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800ec26:	4613      	mov	r3, r2
 800ec28:	009b      	lsls	r3, r3, #2
 800ec2a:	4413      	add	r3, r2
 800ec2c:	009b      	lsls	r3, r3, #2
 800ec2e:	461a      	mov	r2, r3
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	4413      	add	r3, r2
 800ec34:	88da      	ldrh	r2, [r3, #6]
               abort = ESC_upload_post_objecthandler (index, subindex,
 800ec36:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 800ec3a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f7fd ff5f 	bl	800cb00 <ESC_upload_post_objecthandler>
 800ec42:	62b8      	str	r0, [r7, #40]	@ 0x28
               if (abort != 0)
 800ec44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d007      	beq.n	800ec5a <SDO_upload+0x39e>
               {
                  set_state_idle (MBXout, index, subindex, abort);
 800ec4a:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800ec4e:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 800ec50:	7c78      	ldrb	r0, [r7, #17]
 800ec52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec54:	f7ff fe10 	bl	800e878 <set_state_idle>
                  return;
 800ec58:	e01a      	b.n	800ec90 <SDO_upload+0x3d4>
               }
            }
            MBXcontrol[MBXout].state = MBXstate_outreq;
 800ec5a:	7c7b      	ldrb	r3, [r7, #17]
 800ec5c:	4a0f      	ldr	r2, [pc, #60]	@ (800ec9c <SDO_upload+0x3e0>)
 800ec5e:	2103      	movs	r1, #3
 800ec60:	54d1      	strb	r1, [r2, r3]
 800ec62:	e00e      	b.n	800ec82 <SDO_upload+0x3c6>
         }
      }
      else
      {
         SDO_abort (0, index, subindex, ABORT_NOSUBINDEX);
 800ec64:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800ec68:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 800ec6a:	4b0d      	ldr	r3, [pc, #52]	@ (800eca0 <SDO_upload+0x3e4>)
 800ec6c:	2000      	movs	r0, #0
 800ec6e:	f7ff fdbb 	bl	800e7e8 <SDO_abort>
 800ec72:	e006      	b.n	800ec82 <SDO_upload+0x3c6>
      }
   }
   else
   {
      SDO_abort (0, index, subindex, ABORT_NOOBJECT);
 800ec74:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800ec78:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 800ec7a:	4b0a      	ldr	r3, [pc, #40]	@ (800eca4 <SDO_upload+0x3e8>)
 800ec7c:	2000      	movs	r0, #0
 800ec7e:	f7ff fdb3 	bl	800e7e8 <SDO_abort>
   }
   MBXcontrol[0].state = MBXstate_idle;
 800ec82:	4b06      	ldr	r3, [pc, #24]	@ (800ec9c <SDO_upload+0x3e0>)
 800ec84:	2200      	movs	r2, #0
 800ec86:	701a      	strb	r2, [r3, #0]
   ESCvar.xoe = 0;
 800ec88:	4b03      	ldr	r3, [pc, #12]	@ (800ec98 <SDO_upload+0x3dc>)
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
}
 800ec90:	3734      	adds	r7, #52	@ 0x34
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd90      	pop	{r4, r7, pc}
 800ec96:	bf00      	nop
 800ec98:	24000bb0 	.word	0x24000bb0
 800ec9c:	24000aec 	.word	0x24000aec
 800eca0:	06090011 	.word	0x06090011
 800eca4:	06020000 	.word	0x06020000

0800eca8 <complete_access_get_variables>:

static uint32_t complete_access_get_variables(_COEsdo *coesdo, uint16_t *index,
                                              uint8_t *subindex, int32_t *nidx,
                                              int16_t *nsub)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b084      	sub	sp, #16
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	60f8      	str	r0, [r7, #12]
 800ecb0:	60b9      	str	r1, [r7, #8]
 800ecb2:	607a      	str	r2, [r7, #4]
 800ecb4:	603b      	str	r3, [r7, #0]
   *index = etohs (coesdo->index);
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800ecbc:	b29a      	uxth	r2, r3
 800ecbe:	68bb      	ldr	r3, [r7, #8]
 800ecc0:	801a      	strh	r2, [r3, #0]
   *subindex = coesdo->subindex;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	7ada      	ldrb	r2, [r3, #11]
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	701a      	strb	r2, [r3, #0]

   /* A Complete Access must start with Subindex 0 or Subindex 1 */
   if (*subindex > 1)
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	781b      	ldrb	r3, [r3, #0]
 800ecce:	2b01      	cmp	r3, #1
 800ecd0:	d901      	bls.n	800ecd6 <complete_access_get_variables+0x2e>
   {
      return ABORT_UNSUPPORTED;
 800ecd2:	4b14      	ldr	r3, [pc, #80]	@ (800ed24 <complete_access_get_variables+0x7c>)
 800ecd4:	e021      	b.n	800ed1a <complete_access_get_variables+0x72>
   }

   *nidx = SDO_findobject (*index);
 800ecd6:	68bb      	ldr	r3, [r7, #8]
 800ecd8:	881b      	ldrh	r3, [r3, #0]
 800ecda:	4618      	mov	r0, r3
 800ecdc:	f7ff fbf8 	bl	800e4d0 <SDO_findobject>
 800ece0:	4602      	mov	r2, r0
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	601a      	str	r2, [r3, #0]
   if (*nidx < 0)
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	da01      	bge.n	800ecf2 <complete_access_get_variables+0x4a>
   {
      return ABORT_NOOBJECT;
 800ecee:	4b0e      	ldr	r3, [pc, #56]	@ (800ed28 <complete_access_get_variables+0x80>)
 800ecf0:	e013      	b.n	800ed1a <complete_access_get_variables+0x72>
   }

   *nsub = SDO_findsubindex (*nidx, *subindex);
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	681a      	ldr	r2, [r3, #0]
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	781b      	ldrb	r3, [r3, #0]
 800ecfa:	4619      	mov	r1, r3
 800ecfc:	4610      	mov	r0, r2
 800ecfe:	f7ff fb89 	bl	800e414 <SDO_findsubindex>
 800ed02:	4603      	mov	r3, r0
 800ed04:	461a      	mov	r2, r3
 800ed06:	69bb      	ldr	r3, [r7, #24]
 800ed08:	801a      	strh	r2, [r3, #0]
   if (*nsub < 0)
 800ed0a:	69bb      	ldr	r3, [r7, #24]
 800ed0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	da01      	bge.n	800ed18 <complete_access_get_variables+0x70>
   {
      return ABORT_NOSUBINDEX;
 800ed14:	4b05      	ldr	r3, [pc, #20]	@ (800ed2c <complete_access_get_variables+0x84>)
 800ed16:	e000      	b.n	800ed1a <complete_access_get_variables+0x72>
   }

   return 0;
 800ed18:	2300      	movs	r3, #0
}
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	3710      	adds	r7, #16
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}
 800ed22:	bf00      	nop
 800ed24:	06010000 	.word	0x06010000
 800ed28:	06020000 	.word	0x06020000
 800ed2c:	06090011 	.word	0x06090011

0800ed30 <complete_access_subindex_loop>:
                                              int32_t nidx,
                                              int16_t nsub,
                                              uint8_t *mbxdata,
                                              load_t load_type,
                                              uint32_t max_bytes)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b08a      	sub	sp, #40	@ 0x28
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	60f8      	str	r0, [r7, #12]
 800ed38:	60b9      	str	r1, [r7, #8]
 800ed3a:	603b      	str	r3, [r7, #0]
 800ed3c:	4613      	mov	r3, r2
 800ed3e:	80fb      	strh	r3, [r7, #6]
   /* Objects with dynamic entries cannot be accessed with Complete Access */
   if ((objd->datatype == DTYPE_VISIBLE_STRING) ||
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	885b      	ldrh	r3, [r3, #2]
 800ed44:	2b09      	cmp	r3, #9
 800ed46:	d007      	beq.n	800ed58 <complete_access_subindex_loop+0x28>
       (objd->datatype == DTYPE_OCTET_STRING)   ||
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	885b      	ldrh	r3, [r3, #2]
   if ((objd->datatype == DTYPE_VISIBLE_STRING) ||
 800ed4c:	2b0a      	cmp	r3, #10
 800ed4e:	d003      	beq.n	800ed58 <complete_access_subindex_loop+0x28>
       (objd->datatype == DTYPE_UNICODE_STRING))
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	885b      	ldrh	r3, [r3, #2]
       (objd->datatype == DTYPE_OCTET_STRING)   ||
 800ed54:	2b0b      	cmp	r3, #11
 800ed56:	d101      	bne.n	800ed5c <complete_access_subindex_loop+0x2c>
   {
      return ABORT_CA_NOT_SUPPORTED;
 800ed58:	4ba6      	ldr	r3, [pc, #664]	@ (800eff4 <complete_access_subindex_loop+0x2c4>)
 800ed5a:	e153      	b.n	800f004 <complete_access_subindex_loop+0x2d4>
   }

   uint32_t size = 0;
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	627b      	str	r3, [r7, #36]	@ 0x24

   /* Clear padded mbxdata byte [1] on upload */
   if ((load_type == UPLOAD) && (mbxdata != NULL))
 800ed60:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	f040 8139 	bne.w	800efdc <complete_access_subindex_loop+0x2ac>
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	f000 8135 	beq.w	800efdc <complete_access_subindex_loop+0x2ac>
   {
      mbxdata[1] = 0;
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	3301      	adds	r3, #1
 800ed76:	2200      	movs	r2, #0
 800ed78:	701a      	strb	r2, [r3, #0]
   }

   while (nsub <= SDOobjects[nidx].maxsub)
 800ed7a:	e12f      	b.n	800efdc <complete_access_subindex_loop+0x2ac>
   {
      uint16_t bitlen = (objd + nsub)->bitlength;
 800ed7c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ed80:	4613      	mov	r3, r2
 800ed82:	009b      	lsls	r3, r3, #2
 800ed84:	4413      	add	r3, r2
 800ed86:	009b      	lsls	r3, r3, #2
 800ed88:	461a      	mov	r2, r3
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	4413      	add	r3, r2
 800ed8e:	889b      	ldrh	r3, [r3, #4]
 800ed90:	847b      	strh	r3, [r7, #34]	@ 0x22
      void *ul_source = ((objd + nsub)->data != NULL) ?
 800ed92:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ed96:	4613      	mov	r3, r2
 800ed98:	009b      	lsls	r3, r3, #2
 800ed9a:	4413      	add	r3, r2
 800ed9c:	009b      	lsls	r3, r3, #2
 800ed9e:	461a      	mov	r2, r3
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	4413      	add	r3, r2
 800eda4:	691b      	ldr	r3, [r3, #16]
            (objd + nsub)->data : (void *)&((objd + nsub)->value);
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d00a      	beq.n	800edc0 <complete_access_subindex_loop+0x90>
 800edaa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800edae:	4613      	mov	r3, r2
 800edb0:	009b      	lsls	r3, r3, #2
 800edb2:	4413      	add	r3, r2
 800edb4:	009b      	lsls	r3, r3, #2
 800edb6:	461a      	mov	r2, r3
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	4413      	add	r3, r2
 800edbc:	691b      	ldr	r3, [r3, #16]
 800edbe:	e009      	b.n	800edd4 <complete_access_subindex_loop+0xa4>
 800edc0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800edc4:	4613      	mov	r3, r2
 800edc6:	009b      	lsls	r3, r3, #2
 800edc8:	4413      	add	r3, r2
 800edca:	009b      	lsls	r3, r3, #2
 800edcc:	461a      	mov	r2, r3
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	4413      	add	r3, r2
 800edd2:	330c      	adds	r3, #12
      void *ul_source = ((objd + nsub)->data != NULL) ?
 800edd4:	61fb      	str	r3, [r7, #28]
      uint8_t bitoffset = size % 8;
 800edd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edd8:	b2db      	uxtb	r3, r3
 800edda:	f003 0307 	and.w	r3, r3, #7
 800edde:	76fb      	strb	r3, [r7, #27]
      uint8_t access = (objd + nsub)->flags & 0x3f;
 800ede0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ede4:	4613      	mov	r3, r2
 800ede6:	009b      	lsls	r3, r3, #2
 800ede8:	4413      	add	r3, r2
 800edea:	009b      	lsls	r3, r3, #2
 800edec:	461a      	mov	r2, r3
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	4413      	add	r3, r2
 800edf2:	88db      	ldrh	r3, [r3, #6]
 800edf4:	b2db      	uxtb	r3, r3
 800edf6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800edfa:	76bb      	strb	r3, [r7, #26]
      uint8_t state = ESCvar.ALstatus & 0x0f;
 800edfc:	4b7e      	ldr	r3, [pc, #504]	@ (800eff8 <complete_access_subindex_loop+0x2c8>)
 800edfe:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 800ee02:	b2db      	uxtb	r3, r3
 800ee04:	f003 030f 	and.w	r3, r3, #15
 800ee08:	767b      	strb	r3, [r7, #25]

      if ((bitlen % 8) == 0)
 800ee0a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ee0c:	f003 0307 	and.w	r3, r3, #7
 800ee10:	b29b      	uxth	r3, r3
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d16f      	bne.n	800eef6 <complete_access_subindex_loop+0x1c6>
      {
         if (bitoffset != 0)
 800ee16:	7efb      	ldrb	r3, [r7, #27]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d004      	beq.n	800ee26 <complete_access_subindex_loop+0xf6>
         {
            /* move on to next byte boundary */
            size += (8U - bitoffset);
 800ee1c:	7efb      	ldrb	r3, [r7, #27]
 800ee1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee20:	1ad3      	subs	r3, r2, r3
 800ee22:	3308      	adds	r3, #8
 800ee24:	627b      	str	r3, [r7, #36]	@ 0x24
         }
         if (mbxdata != NULL)
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	f000 80be 	beq.w	800efaa <complete_access_subindex_loop+0x27a>
         {
            /* copy a non-bit data type to a byte boundary */
            if (load_type == UPLOAD)
 800ee2e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d131      	bne.n	800ee9a <complete_access_subindex_loop+0x16a>
            {
               if (READ_ACCESS(access, state))
 800ee36:	7ebb      	ldrb	r3, [r7, #26]
 800ee38:	f003 0301 	and.w	r3, r3, #1
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d002      	beq.n	800ee46 <complete_access_subindex_loop+0x116>
 800ee40:	7e7b      	ldrb	r3, [r7, #25]
 800ee42:	2b02      	cmp	r3, #2
 800ee44:	d00f      	beq.n	800ee66 <complete_access_subindex_loop+0x136>
 800ee46:	7ebb      	ldrb	r3, [r7, #26]
 800ee48:	f003 0302 	and.w	r3, r3, #2
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d002      	beq.n	800ee56 <complete_access_subindex_loop+0x126>
 800ee50:	7e7b      	ldrb	r3, [r7, #25]
 800ee52:	2b04      	cmp	r3, #4
 800ee54:	d007      	beq.n	800ee66 <complete_access_subindex_loop+0x136>
 800ee56:	7ebb      	ldrb	r3, [r7, #26]
 800ee58:	f003 0304 	and.w	r3, r3, #4
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d00f      	beq.n	800ee80 <complete_access_subindex_loop+0x150>
 800ee60:	7e7b      	ldrb	r3, [r7, #25]
 800ee62:	2b08      	cmp	r3, #8
 800ee64:	d10c      	bne.n	800ee80 <complete_access_subindex_loop+0x150>
               {
                  memcpy(&mbxdata[BITS2BYTES(size)], ul_source,
 800ee66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee68:	3307      	adds	r3, #7
 800ee6a:	08db      	lsrs	r3, r3, #3
 800ee6c:	683a      	ldr	r2, [r7, #0]
 800ee6e:	18d0      	adds	r0, r2, r3
                        BITS2BYTES(bitlen));
 800ee70:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ee72:	3307      	adds	r3, #7
                  memcpy(&mbxdata[BITS2BYTES(size)], ul_source,
 800ee74:	08db      	lsrs	r3, r3, #3
 800ee76:	461a      	mov	r2, r3
 800ee78:	69f9      	ldr	r1, [r7, #28]
 800ee7a:	f002 fa82 	bl	8011382 <memcpy>
 800ee7e:	e094      	b.n	800efaa <complete_access_subindex_loop+0x27a>
               }
               else
               {
                  /* return zeroes for upload of WO objects */
                  memset(&mbxdata[BITS2BYTES(size)], 0, BITS2BYTES(bitlen));
 800ee80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee82:	3307      	adds	r3, #7
 800ee84:	08db      	lsrs	r3, r3, #3
 800ee86:	683a      	ldr	r2, [r7, #0]
 800ee88:	18d0      	adds	r0, r2, r3
 800ee8a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ee8c:	3307      	adds	r3, #7
 800ee8e:	08db      	lsrs	r3, r3, #3
 800ee90:	461a      	mov	r2, r3
 800ee92:	2100      	movs	r1, #0
 800ee94:	f002 f9f9 	bl	801128a <memset>
 800ee98:	e087      	b.n	800efaa <complete_access_subindex_loop+0x27a>
               }
            }
            /* download of RO objects shall be ignored */
            else if (WRITE_ACCESS(access, state))
 800ee9a:	7ebb      	ldrb	r3, [r7, #26]
 800ee9c:	f003 0308 	and.w	r3, r3, #8
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d002      	beq.n	800eeaa <complete_access_subindex_loop+0x17a>
 800eea4:	7e7b      	ldrb	r3, [r7, #25]
 800eea6:	2b02      	cmp	r3, #2
 800eea8:	d00f      	beq.n	800eeca <complete_access_subindex_loop+0x19a>
 800eeaa:	7ebb      	ldrb	r3, [r7, #26]
 800eeac:	f003 0310 	and.w	r3, r3, #16
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d002      	beq.n	800eeba <complete_access_subindex_loop+0x18a>
 800eeb4:	7e7b      	ldrb	r3, [r7, #25]
 800eeb6:	2b04      	cmp	r3, #4
 800eeb8:	d007      	beq.n	800eeca <complete_access_subindex_loop+0x19a>
 800eeba:	7ebb      	ldrb	r3, [r7, #26]
 800eebc:	f003 0320 	and.w	r3, r3, #32
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d072      	beq.n	800efaa <complete_access_subindex_loop+0x27a>
 800eec4:	7e7b      	ldrb	r3, [r7, #25]
 800eec6:	2b08      	cmp	r3, #8
 800eec8:	d16f      	bne.n	800efaa <complete_access_subindex_loop+0x27a>
            {
               memcpy((objd + nsub)->data, &mbxdata[BITS2BYTES(size)],
 800eeca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800eece:	4613      	mov	r3, r2
 800eed0:	009b      	lsls	r3, r3, #2
 800eed2:	4413      	add	r3, r2
 800eed4:	009b      	lsls	r3, r3, #2
 800eed6:	461a      	mov	r2, r3
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	4413      	add	r3, r2
 800eedc:	6918      	ldr	r0, [r3, #16]
 800eede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eee0:	3307      	adds	r3, #7
 800eee2:	08db      	lsrs	r3, r3, #3
 800eee4:	683a      	ldr	r2, [r7, #0]
 800eee6:	18d1      	adds	r1, r2, r3
                     BITS2BYTES(bitlen));
 800eee8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800eeea:	3307      	adds	r3, #7
               memcpy((objd + nsub)->data, &mbxdata[BITS2BYTES(size)],
 800eeec:	08db      	lsrs	r3, r3, #3
 800eeee:	461a      	mov	r2, r3
 800eef0:	f002 fa47 	bl	8011382 <memcpy>
 800eef4:	e059      	b.n	800efaa <complete_access_subindex_loop+0x27a>
            }
         }
      }
      else if ((load_type == UPLOAD) && (mbxdata != NULL))
 800eef6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d155      	bne.n	800efaa <complete_access_subindex_loop+0x27a>
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d052      	beq.n	800efaa <complete_access_subindex_loop+0x27a>
      {
         /* copy a bit data type into correct position */
         uint32_t bitmask = (1U << bitlen) - 1U;
 800ef04:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ef06:	2201      	movs	r2, #1
 800ef08:	fa02 f303 	lsl.w	r3, r2, r3
 800ef0c:	3b01      	subs	r3, #1
 800ef0e:	617b      	str	r3, [r7, #20]
         uint32_t tempmask;
         if (READ_ACCESS(access, state))
 800ef10:	7ebb      	ldrb	r3, [r7, #26]
 800ef12:	f003 0301 	and.w	r3, r3, #1
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d002      	beq.n	800ef20 <complete_access_subindex_loop+0x1f0>
 800ef1a:	7e7b      	ldrb	r3, [r7, #25]
 800ef1c:	2b02      	cmp	r3, #2
 800ef1e:	d00f      	beq.n	800ef40 <complete_access_subindex_loop+0x210>
 800ef20:	7ebb      	ldrb	r3, [r7, #26]
 800ef22:	f003 0302 	and.w	r3, r3, #2
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d002      	beq.n	800ef30 <complete_access_subindex_loop+0x200>
 800ef2a:	7e7b      	ldrb	r3, [r7, #25]
 800ef2c:	2b04      	cmp	r3, #4
 800ef2e:	d007      	beq.n	800ef40 <complete_access_subindex_loop+0x210>
 800ef30:	7ebb      	ldrb	r3, [r7, #26]
 800ef32:	f003 0304 	and.w	r3, r3, #4
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d023      	beq.n	800ef82 <complete_access_subindex_loop+0x252>
 800ef3a:	7e7b      	ldrb	r3, [r7, #25]
 800ef3c:	2b08      	cmp	r3, #8
 800ef3e:	d120      	bne.n	800ef82 <complete_access_subindex_loop+0x252>
         {
            if (bitoffset == 0)
 800ef40:	7efb      	ldrb	r3, [r7, #27]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d105      	bne.n	800ef52 <complete_access_subindex_loop+0x222>
            {
               mbxdata[BITSPOS2BYTESOFFSET(size)] = 0;
 800ef46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef48:	08db      	lsrs	r3, r3, #3
 800ef4a:	683a      	ldr	r2, [r7, #0]
 800ef4c:	4413      	add	r3, r2
 800ef4e:	2200      	movs	r2, #0
 800ef50:	701a      	strb	r2, [r3, #0]
            }
            tempmask = (*(uint8_t *)ul_source & bitmask) << bitoffset;
 800ef52:	69fb      	ldr	r3, [r7, #28]
 800ef54:	781b      	ldrb	r3, [r3, #0]
 800ef56:	461a      	mov	r2, r3
 800ef58:	697b      	ldr	r3, [r7, #20]
 800ef5a:	401a      	ands	r2, r3
 800ef5c:	7efb      	ldrb	r3, [r7, #27]
 800ef5e:	fa02 f303 	lsl.w	r3, r2, r3
 800ef62:	613b      	str	r3, [r7, #16]
            mbxdata[BITSPOS2BYTESOFFSET(size)] |= (uint8_t)tempmask;
 800ef64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef66:	08db      	lsrs	r3, r3, #3
 800ef68:	683a      	ldr	r2, [r7, #0]
 800ef6a:	4413      	add	r3, r2
 800ef6c:	7819      	ldrb	r1, [r3, #0]
 800ef6e:	693b      	ldr	r3, [r7, #16]
 800ef70:	b2da      	uxtb	r2, r3
 800ef72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef74:	08db      	lsrs	r3, r3, #3
 800ef76:	6838      	ldr	r0, [r7, #0]
 800ef78:	4403      	add	r3, r0
 800ef7a:	430a      	orrs	r2, r1
 800ef7c:	b2d2      	uxtb	r2, r2
 800ef7e:	701a      	strb	r2, [r3, #0]
 800ef80:	e013      	b.n	800efaa <complete_access_subindex_loop+0x27a>
         }
         else
         {
            tempmask = ~(bitmask << bitoffset);
 800ef82:	7efb      	ldrb	r3, [r7, #27]
 800ef84:	697a      	ldr	r2, [r7, #20]
 800ef86:	fa02 f303 	lsl.w	r3, r2, r3
 800ef8a:	43db      	mvns	r3, r3
 800ef8c:	613b      	str	r3, [r7, #16]
            mbxdata[BITSPOS2BYTESOFFSET(size)] &= (uint8_t)tempmask;
 800ef8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef90:	08db      	lsrs	r3, r3, #3
 800ef92:	683a      	ldr	r2, [r7, #0]
 800ef94:	4413      	add	r3, r2
 800ef96:	7819      	ldrb	r1, [r3, #0]
 800ef98:	693b      	ldr	r3, [r7, #16]
 800ef9a:	b2da      	uxtb	r2, r3
 800ef9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef9e:	08db      	lsrs	r3, r3, #3
 800efa0:	6838      	ldr	r0, [r7, #0]
 800efa2:	4403      	add	r3, r0
 800efa4:	400a      	ands	r2, r1
 800efa6:	b2d2      	uxtb	r2, r2
 800efa8:	701a      	strb	r2, [r3, #0]
         }
      }

      /* Subindex 0 is padded to 16 bit */
      size += (nsub == 0) ? 16 : bitlen;
 800efaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d001      	beq.n	800efb6 <complete_access_subindex_loop+0x286>
 800efb2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800efb4:	e000      	b.n	800efb8 <complete_access_subindex_loop+0x288>
 800efb6:	2310      	movs	r3, #16
 800efb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800efba:	4413      	add	r3, r2
 800efbc:	627b      	str	r3, [r7, #36]	@ 0x24
      nsub++;
 800efbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800efc2:	b29b      	uxth	r3, r3
 800efc4:	3301      	adds	r3, #1
 800efc6:	b29b      	uxth	r3, r3
 800efc8:	80fb      	strh	r3, [r7, #6]

      if ((max_bytes > 0) && (BITS2BYTES(size) >= max_bytes))
 800efca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d005      	beq.n	800efdc <complete_access_subindex_loop+0x2ac>
 800efd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efd2:	3307      	adds	r3, #7
 800efd4:	08db      	lsrs	r3, r3, #3
 800efd6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800efd8:	429a      	cmp	r2, r3
 800efda:	d911      	bls.n	800f000 <complete_access_subindex_loop+0x2d0>
   while (nsub <= SDOobjects[nidx].maxsub)
 800efdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800efe0:	4906      	ldr	r1, [pc, #24]	@ (800effc <complete_access_subindex_loop+0x2cc>)
 800efe2:	68ba      	ldr	r2, [r7, #8]
 800efe4:	0112      	lsls	r2, r2, #4
 800efe6:	440a      	add	r2, r1
 800efe8:	3204      	adds	r2, #4
 800efea:	7812      	ldrb	r2, [r2, #0]
 800efec:	4293      	cmp	r3, r2
 800efee:	f77f aec5 	ble.w	800ed7c <complete_access_subindex_loop+0x4c>
 800eff2:	e006      	b.n	800f002 <complete_access_subindex_loop+0x2d2>
 800eff4:	06010004 	.word	0x06010004
 800eff8:	24000bb0 	.word	0x24000bb0
 800effc:	08012848 	.word	0x08012848
      {
         break;
 800f000:	bf00      	nop
      }
   }

   return size;
 800f002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f004:	4618      	mov	r0, r3
 800f006:	3728      	adds	r7, #40	@ 0x28
 800f008:	46bd      	mov	sp, r7
 800f00a:	bd80      	pop	{r7, pc}

0800f00c <init_coesdo>:
static void init_coesdo(_COEsdo *coesdo,
                        uint8_t sdoservice,
                        uint8_t command,
                        uint16_t index,
                        uint8_t subindex)
{
 800f00c:	b480      	push	{r7}
 800f00e:	b083      	sub	sp, #12
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
 800f014:	4608      	mov	r0, r1
 800f016:	4611      	mov	r1, r2
 800f018:	461a      	mov	r2, r3
 800f01a:	4603      	mov	r3, r0
 800f01c:	70fb      	strb	r3, [r7, #3]
 800f01e:	460b      	mov	r3, r1
 800f020:	70bb      	strb	r3, [r7, #2]
 800f022:	4613      	mov	r3, r2
 800f024:	803b      	strh	r3, [r7, #0]
   coesdo->mbxheader.length = htoes(COE_DEFAULTLENGTH);
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	220a      	movs	r2, #10
 800f02a:	801a      	strh	r2, [r3, #0]
   coesdo->mbxheader.mbxtype = MBXCOE;
 800f02c:	687a      	ldr	r2, [r7, #4]
 800f02e:	7953      	ldrb	r3, [r2, #5]
 800f030:	2103      	movs	r1, #3
 800f032:	f361 0303 	bfi	r3, r1, #0, #4
 800f036:	7153      	strb	r3, [r2, #5]
   coesdo->coeheader.numberservice = htoes(sdoservice << 12);
 800f038:	78fb      	ldrb	r3, [r7, #3]
 800f03a:	b29b      	uxth	r3, r3
 800f03c:	031b      	lsls	r3, r3, #12
 800f03e:	b29a      	uxth	r2, r3
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	80da      	strh	r2, [r3, #6]
   coesdo->command = command;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	78ba      	ldrb	r2, [r7, #2]
 800f048:	721a      	strb	r2, [r3, #8]
   coesdo->index = htoes(index);
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	883a      	ldrh	r2, [r7, #0]
 800f04e:	f8a3 2009 	strh.w	r2, [r3, #9]
   coesdo->subindex = subindex;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	7c3a      	ldrb	r2, [r7, #16]
 800f056:	72da      	strb	r2, [r3, #11]
}
 800f058:	bf00      	nop
 800f05a:	370c      	adds	r7, #12
 800f05c:	46bd      	mov	sp, r7
 800f05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f062:	4770      	bx	lr

0800f064 <SDO_upload_complete_access>:
 *  sending the content requested in a free Mailbox buffer. Depending of
 *  size of data expedited, normal or segmented transfer is used.
 *  On error an SDO Abort will be sent.
 */
static void SDO_upload_complete_access (void)
{
 800f064:	b590      	push	{r4, r7, lr}
 800f066:	b08d      	sub	sp, #52	@ 0x34
 800f068:	af02      	add	r7, sp, #8
   _COEsdo *coesdo = (_COEsdo *) &MBX[0];
 800f06a:	4b86      	ldr	r3, [pc, #536]	@ (800f284 <SDO_upload_complete_access+0x220>)
 800f06c:	627b      	str	r3, [r7, #36]	@ 0x24
   uint16_t index;
   uint8_t subindex;
   int32_t nidx;
   int16_t nsub;
   uint32_t abortcode = complete_access_get_variables
 800f06e:	f107 0008 	add.w	r0, r7, #8
 800f072:	f107 020d 	add.w	r2, r7, #13
 800f076:	f107 010e 	add.w	r1, r7, #14
 800f07a:	1dbb      	adds	r3, r7, #6
 800f07c:	9300      	str	r3, [sp, #0]
 800f07e:	4603      	mov	r3, r0
 800f080:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f082:	f7ff fe11 	bl	800eca8 <complete_access_get_variables>
 800f086:	6238      	str	r0, [r7, #32]
                           (coesdo, &index, &subindex, &nidx, &nsub);
   if (abortcode != 0)
 800f088:	6a3b      	ldr	r3, [r7, #32]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d006      	beq.n	800f09c <SDO_upload_complete_access+0x38>
   {
      set_state_idle (0, index, subindex, abortcode);
 800f08e:	89f9      	ldrh	r1, [r7, #14]
 800f090:	7b7a      	ldrb	r2, [r7, #13]
 800f092:	6a3b      	ldr	r3, [r7, #32]
 800f094:	2000      	movs	r0, #0
 800f096:	f7ff fbef 	bl	800e878 <set_state_idle>
      return;
 800f09a:	e0ef      	b.n	800f27c <SDO_upload_complete_access+0x218>
   }

   uint8_t MBXout = ESC_claimbuffer ();
 800f09c:	f7fe fa34 	bl	800d508 <ESC_claimbuffer>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	77fb      	strb	r3, [r7, #31]
   if (MBXout == 0)
 800f0a4:	7ffb      	ldrb	r3, [r7, #31]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d106      	bne.n	800f0b8 <SDO_upload_complete_access+0x54>
   {
      /* It is a bad idea to call SDO_abort when ESC_claimbuffer fails,
       * because SDO_abort will also call ESC_claimbuffer ...
       */
      set_state_idle (0, index, subindex, 0);
 800f0aa:	89f9      	ldrh	r1, [r7, #14]
 800f0ac:	7b7a      	ldrb	r2, [r7, #13]
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	2000      	movs	r0, #0
 800f0b2:	f7ff fbe1 	bl	800e878 <set_state_idle>
      return;
 800f0b6:	e0e1      	b.n	800f27c <SDO_upload_complete_access+0x218>
   }

   const _objd *objd = SDOobjects[nidx].objdesc;
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	4a73      	ldr	r2, [pc, #460]	@ (800f288 <SDO_upload_complete_access+0x224>)
 800f0bc:	011b      	lsls	r3, r3, #4
 800f0be:	4413      	add	r3, r2
 800f0c0:	330c      	adds	r3, #12
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	61bb      	str	r3, [r7, #24]

   /* loop through the subindexes to get the total size */
   uint32_t size = complete_access_subindex_loop(objd, nidx, nsub, NULL, UPLOAD, 0);
 800f0c6:	68b9      	ldr	r1, [r7, #8]
 800f0c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	9301      	str	r3, [sp, #4]
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	9300      	str	r3, [sp, #0]
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	69b8      	ldr	r0, [r7, #24]
 800f0d8:	f7ff fe2a 	bl	800ed30 <complete_access_subindex_loop>
 800f0dc:	4603      	mov	r3, r0
 800f0de:	603b      	str	r3, [r7, #0]

   /* expedited bits used calculation */
   uint8_t dss = (size > 24) ? 0 : (uint8_t)(4U * (3U - ((size - 1U) >> 3)));
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	2b18      	cmp	r3, #24
 800f0e4:	d808      	bhi.n	800f0f8 <SDO_upload_complete_access+0x94>
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	3b01      	subs	r3, #1
 800f0ea:	08db      	lsrs	r3, r3, #3
 800f0ec:	f1c3 0303 	rsb	r3, r3, #3
 800f0f0:	b2db      	uxtb	r3, r3
 800f0f2:	009b      	lsls	r3, r3, #2
 800f0f4:	b2db      	uxtb	r3, r3
 800f0f6:	e000      	b.n	800f0fa <SDO_upload_complete_access+0x96>
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	75fb      	strb	r3, [r7, #23]

   /* convert bits to bytes */
   size = BITS2BYTES(size);
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	3307      	adds	r3, #7
 800f100:	08db      	lsrs	r3, r3, #3
 800f102:	603b      	str	r3, [r7, #0]

   if (size > 0xffff)
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f10a:	d306      	bcc.n	800f11a <SDO_upload_complete_access+0xb6>
   {
      /* 'size' is in this case actually an abort code */
      set_state_idle (MBXout, index, subindex, size);
 800f10c:	89f9      	ldrh	r1, [r7, #14]
 800f10e:	7b7a      	ldrb	r2, [r7, #13]
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	7ff8      	ldrb	r0, [r7, #31]
 800f114:	f7ff fbb0 	bl	800e878 <set_state_idle>
      return;
 800f118:	e0b0      	b.n	800f27c <SDO_upload_complete_access+0x218>
   }

   /* check that upload data fits in the preallocated buffer */
   if ((size + PREALLOC_FACTOR * COE_HEADERSIZE) > PREALLOC_BUFFER_SIZE)
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	331e      	adds	r3, #30
 800f11e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800f122:	d906      	bls.n	800f132 <SDO_upload_complete_access+0xce>
   {
      set_state_idle (MBXout, index, subindex, ABORT_CA_NOT_SUPPORTED);
 800f124:	89f9      	ldrh	r1, [r7, #14]
 800f126:	7b7a      	ldrb	r2, [r7, #13]
 800f128:	7ff8      	ldrb	r0, [r7, #31]
 800f12a:	4b58      	ldr	r3, [pc, #352]	@ (800f28c <SDO_upload_complete_access+0x228>)
 800f12c:	f7ff fba4 	bl	800e878 <set_state_idle>
      return;
 800f130:	e0a4      	b.n	800f27c <SDO_upload_complete_access+0x218>
   }
   abortcode = ESC_upload_pre_objecthandler(index, subindex,
 800f132:	89f8      	ldrh	r0, [r7, #14]
 800f134:	7b79      	ldrb	r1, [r7, #13]
         objd->data, (size_t *)&size, objd->flags | COMPLETE_ACCESS_FLAG);
 800f136:	69bb      	ldr	r3, [r7, #24]
 800f138:	691c      	ldr	r4, [r3, #16]
 800f13a:	69bb      	ldr	r3, [r7, #24]
 800f13c:	88da      	ldrh	r2, [r3, #6]
   abortcode = ESC_upload_pre_objecthandler(index, subindex,
 800f13e:	4b54      	ldr	r3, [pc, #336]	@ (800f290 <SDO_upload_complete_access+0x22c>)
 800f140:	4313      	orrs	r3, r2
 800f142:	b29b      	uxth	r3, r3
 800f144:	463a      	mov	r2, r7
 800f146:	9300      	str	r3, [sp, #0]
 800f148:	4613      	mov	r3, r2
 800f14a:	4622      	mov	r2, r4
 800f14c:	f7fd fcb8 	bl	800cac0 <ESC_upload_pre_objecthandler>
 800f150:	6238      	str	r0, [r7, #32]
   if (abortcode != 0)
 800f152:	6a3b      	ldr	r3, [r7, #32]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d006      	beq.n	800f166 <SDO_upload_complete_access+0x102>
   {
      set_state_idle (MBXout, index, subindex, abortcode);
 800f158:	89f9      	ldrh	r1, [r7, #14]
 800f15a:	7b7a      	ldrb	r2, [r7, #13]
 800f15c:	7ff8      	ldrb	r0, [r7, #31]
 800f15e:	6a3b      	ldr	r3, [r7, #32]
 800f160:	f7ff fb8a 	bl	800e878 <set_state_idle>
      return;
 800f164:	e08a      	b.n	800f27c <SDO_upload_complete_access+0x218>
   }

   /* copy subindex data into the preallocated buffer */
   complete_access_subindex_loop(objd, nidx, nsub, ESCvar.mbxdata, UPLOAD, 0);
 800f166:	68b9      	ldr	r1, [r7, #8]
 800f168:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f16c:	2300      	movs	r3, #0
 800f16e:	9301      	str	r3, [sp, #4]
 800f170:	2300      	movs	r3, #0
 800f172:	9300      	str	r3, [sp, #0]
 800f174:	4b47      	ldr	r3, [pc, #284]	@ (800f294 <SDO_upload_complete_access+0x230>)
 800f176:	69b8      	ldr	r0, [r7, #24]
 800f178:	f7ff fdda 	bl	800ed30 <complete_access_subindex_loop>

   _COEsdo *coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800f17c:	7ffb      	ldrb	r3, [r7, #31]
 800f17e:	4a46      	ldr	r2, [pc, #280]	@ (800f298 <SDO_upload_complete_access+0x234>)
 800f180:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800f182:	fb02 f303 	mul.w	r3, r2, r3
 800f186:	4a3f      	ldr	r2, [pc, #252]	@ (800f284 <SDO_upload_complete_access+0x220>)
 800f188:	4413      	add	r3, r2
 800f18a:	613b      	str	r3, [r7, #16]
   init_coesdo(coeres, COE_SDORESPONSE,
 800f18c:	89fa      	ldrh	r2, [r7, #14]
 800f18e:	7b7b      	ldrb	r3, [r7, #13]
 800f190:	9300      	str	r3, [sp, #0]
 800f192:	4613      	mov	r3, r2
 800f194:	2251      	movs	r2, #81	@ 0x51
 800f196:	2103      	movs	r1, #3
 800f198:	6938      	ldr	r0, [r7, #16]
 800f19a:	f7ff ff37 	bl	800f00c <init_coesdo>
         COE_COMMAND_UPLOADRESPONSE | COE_COMPLETEACCESS | COE_SIZE_INDICATOR,
         index, subindex);

   ESCvar.segmented = 0;
 800f19e:	4b3e      	ldr	r3, [pc, #248]	@ (800f298 <SDO_upload_complete_access+0x234>)
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

   if (size <= 4)
 800f1a6:	683b      	ldr	r3, [r7, #0]
 800f1a8:	2b04      	cmp	r3, #4
 800f1aa:	d811      	bhi.n	800f1d0 <SDO_upload_complete_access+0x16c>
   {
      /* expedited response, i.e. length <= 4 bytes */
      coeres->command |= (COE_EXPEDITED_INDICATOR | dss);
 800f1ac:	693b      	ldr	r3, [r7, #16]
 800f1ae:	7a1a      	ldrb	r2, [r3, #8]
 800f1b0:	7dfb      	ldrb	r3, [r7, #23]
 800f1b2:	4313      	orrs	r3, r2
 800f1b4:	b2db      	uxtb	r3, r3
 800f1b6:	f043 0302 	orr.w	r3, r3, #2
 800f1ba:	b2da      	uxtb	r2, r3
 800f1bc:	693b      	ldr	r3, [r7, #16]
 800f1be:	721a      	strb	r2, [r3, #8]
      memcpy(&(coeres->size), ESCvar.mbxdata, size);
 800f1c0:	693b      	ldr	r3, [r7, #16]
 800f1c2:	330c      	adds	r3, #12
 800f1c4:	683a      	ldr	r2, [r7, #0]
 800f1c6:	4933      	ldr	r1, [pc, #204]	@ (800f294 <SDO_upload_complete_access+0x230>)
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f002 f8da 	bl	8011382 <memcpy>
 800f1ce:	e031      	b.n	800f234 <SDO_upload_complete_access+0x1d0>
   }
   else
   {
      /* normal response, i.e. length > 4 bytes */
      coeres->size = htoel (size);
 800f1d0:	683a      	ldr	r2, [r7, #0]
 800f1d2:	693b      	ldr	r3, [r7, #16]
 800f1d4:	60da      	str	r2, [r3, #12]

      if ((size + COE_HEADERSIZE) > ESC_MBXDSIZE)
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	f103 020a 	add.w	r2, r3, #10
 800f1dc:	4b2e      	ldr	r3, [pc, #184]	@ (800f298 <SDO_upload_complete_access+0x234>)
 800f1de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f1e0:	3b06      	subs	r3, #6
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	d918      	bls.n	800f218 <SDO_upload_complete_access+0x1b4>
      {
         /* segmented transfer needed */
         /* set total size in bytes */
         ESCvar.frags = size;
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	4a2b      	ldr	r2, [pc, #172]	@ (800f298 <SDO_upload_complete_access+0x234>)
 800f1ea:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
         /* limit to mailbox size */
         size = ESC_MBXDSIZE - COE_HEADERSIZE;
 800f1ee:	4b2a      	ldr	r3, [pc, #168]	@ (800f298 <SDO_upload_complete_access+0x234>)
 800f1f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f1f2:	3b10      	subs	r3, #16
 800f1f4:	603b      	str	r3, [r7, #0]
         /* number of bytes done */
         ESCvar.fragsleft = size;
 800f1f6:	683b      	ldr	r3, [r7, #0]
 800f1f8:	4a27      	ldr	r2, [pc, #156]	@ (800f298 <SDO_upload_complete_access+0x234>)
 800f1fa:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
         /* signal segmented transfer */
         ESCvar.segmented = MBXSEU;
 800f1fe:	4b26      	ldr	r3, [pc, #152]	@ (800f298 <SDO_upload_complete_access+0x234>)
 800f200:	2240      	movs	r2, #64	@ 0x40
 800f202:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
         ESCvar.data = ESCvar.mbxdata;
 800f206:	4b24      	ldr	r3, [pc, #144]	@ (800f298 <SDO_upload_complete_access+0x234>)
 800f208:	4a22      	ldr	r2, [pc, #136]	@ (800f294 <SDO_upload_complete_access+0x230>)
 800f20a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
         ESCvar.flags = COMPLETE_ACCESS_FLAG;
 800f20e:	4b22      	ldr	r3, [pc, #136]	@ (800f298 <SDO_upload_complete_access+0x234>)
 800f210:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800f214:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
      }

      coeres->mbxheader.length = htoes (COE_HEADERSIZE + size);
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	b29b      	uxth	r3, r3
 800f21c:	330a      	adds	r3, #10
 800f21e:	b29a      	uxth	r2, r3
 800f220:	693b      	ldr	r3, [r7, #16]
 800f222:	801a      	strh	r2, [r3, #0]
      memcpy((&(coeres->size)) + 1, ESCvar.mbxdata, size);
 800f224:	693b      	ldr	r3, [r7, #16]
 800f226:	330c      	adds	r3, #12
 800f228:	3304      	adds	r3, #4
 800f22a:	683a      	ldr	r2, [r7, #0]
 800f22c:	4919      	ldr	r1, [pc, #100]	@ (800f294 <SDO_upload_complete_access+0x230>)
 800f22e:	4618      	mov	r0, r3
 800f230:	f002 f8a7 	bl	8011382 <memcpy>
   }

   if (ESCvar.segmented == 0)
 800f234:	4b18      	ldr	r3, [pc, #96]	@ (800f298 <SDO_upload_complete_access+0x234>)
 800f236:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d114      	bne.n	800f268 <SDO_upload_complete_access+0x204>
   {
      abortcode = ESC_upload_post_objecthandler (index, subindex,
 800f23e:	89f8      	ldrh	r0, [r7, #14]
 800f240:	7b79      	ldrb	r1, [r7, #13]
            objd->flags | COMPLETE_ACCESS_FLAG);
 800f242:	69bb      	ldr	r3, [r7, #24]
 800f244:	88da      	ldrh	r2, [r3, #6]
      abortcode = ESC_upload_post_objecthandler (index, subindex,
 800f246:	4b12      	ldr	r3, [pc, #72]	@ (800f290 <SDO_upload_complete_access+0x22c>)
 800f248:	4313      	orrs	r3, r2
 800f24a:	b29b      	uxth	r3, r3
 800f24c:	461a      	mov	r2, r3
 800f24e:	f7fd fc57 	bl	800cb00 <ESC_upload_post_objecthandler>
 800f252:	6238      	str	r0, [r7, #32]

      if (abortcode != 0)
 800f254:	6a3b      	ldr	r3, [r7, #32]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d006      	beq.n	800f268 <SDO_upload_complete_access+0x204>
      {
         set_state_idle (MBXout, index, subindex, abortcode);
 800f25a:	89f9      	ldrh	r1, [r7, #14]
 800f25c:	7b7a      	ldrb	r2, [r7, #13]
 800f25e:	7ff8      	ldrb	r0, [r7, #31]
 800f260:	6a3b      	ldr	r3, [r7, #32]
 800f262:	f7ff fb09 	bl	800e878 <set_state_idle>
         return;
 800f266:	e009      	b.n	800f27c <SDO_upload_complete_access+0x218>
      }
   }

   MBXcontrol[MBXout].state = MBXstate_outreq;
 800f268:	7ffb      	ldrb	r3, [r7, #31]
 800f26a:	4a0c      	ldr	r2, [pc, #48]	@ (800f29c <SDO_upload_complete_access+0x238>)
 800f26c:	2103      	movs	r1, #3
 800f26e:	54d1      	strb	r1, [r2, r3]

   set_state_idle (MBXout, index, subindex, 0);
 800f270:	89f9      	ldrh	r1, [r7, #14]
 800f272:	7b7a      	ldrb	r2, [r7, #13]
 800f274:	7ff8      	ldrb	r0, [r7, #31]
 800f276:	2300      	movs	r3, #0
 800f278:	f7ff fafe 	bl	800e878 <set_state_idle>
}
 800f27c:	372c      	adds	r7, #44	@ 0x2c
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd90      	pop	{r4, r7, pc}
 800f282:	bf00      	nop
 800f284:	240004ec 	.word	0x240004ec
 800f288:	08012848 	.word	0x08012848
 800f28c:	06010004 	.word	0x06010004
 800f290:	ffff8000 	.word	0xffff8000
 800f294:	24000c9a 	.word	0x24000c9a
 800f298:	24000bb0 	.word	0x24000bb0
 800f29c:	24000aec 	.word	0x24000aec

0800f2a0 <SDO_uploadsegment>:

/** Function for handling the following SDO Upload if previous SDOUpload
 * response was flagged it needed to be segmented.
 */
static void SDO_uploadsegment (void)
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b08a      	sub	sp, #40	@ 0x28
 800f2a4:	af02      	add	r7, sp, #8
   _COEsdo *coesdo, *coeres;
   uint8_t MBXout;
   uint32_t size, offset, abort;
   coesdo = (_COEsdo *) &MBX[0];
 800f2a6:	4b58      	ldr	r3, [pc, #352]	@ (800f408 <SDO_uploadsegment+0x168>)
 800f2a8:	61bb      	str	r3, [r7, #24]
   MBXout = ESC_claimbuffer ();
 800f2aa:	f7fe f92d 	bl	800d508 <ESC_claimbuffer>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	75fb      	strb	r3, [r7, #23]
   if (MBXout)
 800f2b2:	7dfb      	ldrb	r3, [r7, #23]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	f000 809d 	beq.w	800f3f4 <SDO_uploadsegment+0x154>
   {
      coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800f2ba:	7dfb      	ldrb	r3, [r7, #23]
 800f2bc:	4a53      	ldr	r2, [pc, #332]	@ (800f40c <SDO_uploadsegment+0x16c>)
 800f2be:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800f2c0:	fb02 f303 	mul.w	r3, r2, r3
 800f2c4:	4a50      	ldr	r2, [pc, #320]	@ (800f408 <SDO_uploadsegment+0x168>)
 800f2c6:	4413      	add	r3, r2
 800f2c8:	613b      	str	r3, [r7, #16]
      offset = ESCvar.fragsleft;
 800f2ca:	4b50      	ldr	r3, [pc, #320]	@ (800f40c <SDO_uploadsegment+0x16c>)
 800f2cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f2d0:	60fb      	str	r3, [r7, #12]
      size = ESCvar.frags - ESCvar.fragsleft;
 800f2d2:	4b4e      	ldr	r3, [pc, #312]	@ (800f40c <SDO_uploadsegment+0x16c>)
 800f2d4:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800f2d8:	4b4c      	ldr	r3, [pc, #304]	@ (800f40c <SDO_uploadsegment+0x16c>)
 800f2da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f2de:	1ad3      	subs	r3, r2, r3
 800f2e0:	61fb      	str	r3, [r7, #28]
      uint8_t command = COE_COMMAND_UPLOADSEGMENT |
            (coesdo->command & COE_TOGGLEBIT);  /* copy toggle bit */
 800f2e2:	69bb      	ldr	r3, [r7, #24]
 800f2e4:	7a1b      	ldrb	r3, [r3, #8]
      uint8_t command = COE_COMMAND_UPLOADSEGMENT |
 800f2e6:	f003 0310 	and.w	r3, r3, #16
 800f2ea:	72fb      	strb	r3, [r7, #11]
      init_coesdo(coeres, COE_SDORESPONSE, command,
 800f2ec:	69bb      	ldr	r3, [r7, #24]
 800f2ee:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800f2f2:	b299      	uxth	r1, r3
 800f2f4:	69bb      	ldr	r3, [r7, #24]
 800f2f6:	7adb      	ldrb	r3, [r3, #11]
 800f2f8:	7afa      	ldrb	r2, [r7, #11]
 800f2fa:	9300      	str	r3, [sp, #0]
 800f2fc:	460b      	mov	r3, r1
 800f2fe:	2103      	movs	r1, #3
 800f300:	6938      	ldr	r0, [r7, #16]
 800f302:	f7ff fe83 	bl	800f00c <init_coesdo>
            coesdo->index, coesdo->subindex);
      if ((size + COE_SEGMENTHEADERSIZE) > ESC_MBXDSIZE)
 800f306:	69fb      	ldr	r3, [r7, #28]
 800f308:	1cda      	adds	r2, r3, #3
 800f30a:	4b40      	ldr	r3, [pc, #256]	@ (800f40c <SDO_uploadsegment+0x16c>)
 800f30c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f30e:	3b06      	subs	r3, #6
 800f310:	429a      	cmp	r2, r3
 800f312:	d912      	bls.n	800f33a <SDO_uploadsegment+0x9a>
      {
         /* more segmented transfer needed */
         /* limit to mailbox size */
         size = ESC_MBXDSIZE - COE_SEGMENTHEADERSIZE;
 800f314:	4b3d      	ldr	r3, [pc, #244]	@ (800f40c <SDO_uploadsegment+0x16c>)
 800f316:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f318:	3b09      	subs	r3, #9
 800f31a:	61fb      	str	r3, [r7, #28]
         /* number of bytes done */
         ESCvar.fragsleft += size;
 800f31c:	4b3b      	ldr	r3, [pc, #236]	@ (800f40c <SDO_uploadsegment+0x16c>)
 800f31e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f322:	69fb      	ldr	r3, [r7, #28]
 800f324:	4413      	add	r3, r2
 800f326:	4a39      	ldr	r2, [pc, #228]	@ (800f40c <SDO_uploadsegment+0x16c>)
 800f328:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
         coeres->mbxheader.length = htoes (COE_SEGMENTHEADERSIZE + size);
 800f32c:	69fb      	ldr	r3, [r7, #28]
 800f32e:	b29b      	uxth	r3, r3
 800f330:	3303      	adds	r3, #3
 800f332:	b29a      	uxth	r2, r3
 800f334:	693b      	ldr	r3, [r7, #16]
 800f336:	801a      	strh	r2, [r3, #0]
 800f338:	e02c      	b.n	800f394 <SDO_uploadsegment+0xf4>
      }
      else
      {
         /* last segment */
         ESCvar.segmented = 0;
 800f33a:	4b34      	ldr	r3, [pc, #208]	@ (800f40c <SDO_uploadsegment+0x16c>)
 800f33c:	2200      	movs	r2, #0
 800f33e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
         ESCvar.frags = 0;
 800f342:	4b32      	ldr	r3, [pc, #200]	@ (800f40c <SDO_uploadsegment+0x16c>)
 800f344:	2200      	movs	r2, #0
 800f346:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
         ESCvar.fragsleft = 0;
 800f34a:	4b30      	ldr	r3, [pc, #192]	@ (800f40c <SDO_uploadsegment+0x16c>)
 800f34c:	2200      	movs	r2, #0
 800f34e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
         coeres->command |= COE_COMMAND_LASTSEGMENTBIT;
 800f352:	693b      	ldr	r3, [r7, #16]
 800f354:	7a1b      	ldrb	r3, [r3, #8]
 800f356:	f043 0301 	orr.w	r3, r3, #1
 800f35a:	b2da      	uxtb	r2, r3
 800f35c:	693b      	ldr	r3, [r7, #16]
 800f35e:	721a      	strb	r2, [r3, #8]
         if (size >= 7)
 800f360:	69fb      	ldr	r3, [r7, #28]
 800f362:	2b06      	cmp	r3, #6
 800f364:	d906      	bls.n	800f374 <SDO_uploadsegment+0xd4>
         {
            coeres->mbxheader.length = htoes (COE_SEGMENTHEADERSIZE + size);
 800f366:	69fb      	ldr	r3, [r7, #28]
 800f368:	b29b      	uxth	r3, r3
 800f36a:	3303      	adds	r3, #3
 800f36c:	b29a      	uxth	r2, r3
 800f36e:	693b      	ldr	r3, [r7, #16]
 800f370:	801a      	strh	r2, [r3, #0]
 800f372:	e00f      	b.n	800f394 <SDO_uploadsegment+0xf4>
         }
         else
         {
            coeres->command |= (uint8_t)((7U - size) << 1);
 800f374:	693b      	ldr	r3, [r7, #16]
 800f376:	7a1a      	ldrb	r2, [r3, #8]
 800f378:	69fb      	ldr	r3, [r7, #28]
 800f37a:	b2db      	uxtb	r3, r3
 800f37c:	f1c3 0307 	rsb	r3, r3, #7
 800f380:	b2db      	uxtb	r3, r3
 800f382:	005b      	lsls	r3, r3, #1
 800f384:	b2db      	uxtb	r3, r3
 800f386:	4313      	orrs	r3, r2
 800f388:	b2da      	uxtb	r2, r3
 800f38a:	693b      	ldr	r3, [r7, #16]
 800f38c:	721a      	strb	r2, [r3, #8]
            coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 800f38e:	693b      	ldr	r3, [r7, #16]
 800f390:	220a      	movs	r2, #10
 800f392:	801a      	strh	r2, [r3, #0]
         }
      }
      copy2mbx ((uint8_t *) ESCvar.data + offset, (&(coeres->command)) + 1,
 800f394:	4b1d      	ldr	r3, [pc, #116]	@ (800f40c <SDO_uploadsegment+0x16c>)
 800f396:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	18d0      	adds	r0, r2, r3
 800f39e:	693b      	ldr	r3, [r7, #16]
 800f3a0:	3308      	adds	r3, #8
 800f3a2:	3301      	adds	r3, #1
 800f3a4:	69fa      	ldr	r2, [r7, #28]
 800f3a6:	4619      	mov	r1, r3
 800f3a8:	f7ff fa0e 	bl	800e7c8 <copy2mbx>
            size);        /* copy to mailbox */

      if (ESCvar.segmented == 0)
 800f3ac:	4b17      	ldr	r3, [pc, #92]	@ (800f40c <SDO_uploadsegment+0x16c>)
 800f3ae:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d11a      	bne.n	800f3ec <SDO_uploadsegment+0x14c>
      {
         abort = ESC_upload_post_objecthandler (etohs (coesdo->index),
 800f3b6:	69bb      	ldr	r3, [r7, #24]
 800f3b8:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800f3bc:	b298      	uxth	r0, r3
 800f3be:	69bb      	ldr	r3, [r7, #24]
 800f3c0:	7adb      	ldrb	r3, [r3, #11]
 800f3c2:	4a12      	ldr	r2, [pc, #72]	@ (800f40c <SDO_uploadsegment+0x16c>)
 800f3c4:	f8b2 20a8 	ldrh.w	r2, [r2, #168]	@ 0xa8
 800f3c8:	4619      	mov	r1, r3
 800f3ca:	f7fd fb99 	bl	800cb00 <ESC_upload_post_objecthandler>
 800f3ce:	6078      	str	r0, [r7, #4]
               coesdo->subindex, ESCvar.flags);
         if (abort != 0)
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d00a      	beq.n	800f3ec <SDO_uploadsegment+0x14c>
         {
            set_state_idle (MBXout, etohs (coesdo->index), coesdo->subindex, abort);
 800f3d6:	69bb      	ldr	r3, [r7, #24]
 800f3d8:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800f3dc:	b299      	uxth	r1, r3
 800f3de:	69bb      	ldr	r3, [r7, #24]
 800f3e0:	7ada      	ldrb	r2, [r3, #11]
 800f3e2:	7df8      	ldrb	r0, [r7, #23]
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f7ff fa47 	bl	800e878 <set_state_idle>
            return;
 800f3ea:	e00a      	b.n	800f402 <SDO_uploadsegment+0x162>
         }
      }

      MBXcontrol[MBXout].state = MBXstate_outreq;
 800f3ec:	7dfb      	ldrb	r3, [r7, #23]
 800f3ee:	4a08      	ldr	r2, [pc, #32]	@ (800f410 <SDO_uploadsegment+0x170>)
 800f3f0:	2103      	movs	r1, #3
 800f3f2:	54d1      	strb	r1, [r2, r3]
   }
   MBXcontrol[0].state = MBXstate_idle;
 800f3f4:	4b06      	ldr	r3, [pc, #24]	@ (800f410 <SDO_uploadsegment+0x170>)
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	701a      	strb	r2, [r3, #0]
   ESCvar.xoe = 0;
 800f3fa:	4b04      	ldr	r3, [pc, #16]	@ (800f40c <SDO_uploadsegment+0x16c>)
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
}
 800f402:	3720      	adds	r7, #32
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}
 800f408:	240004ec 	.word	0x240004ec
 800f40c:	24000bb0 	.word	0x24000bb0
 800f410:	24000aec 	.word	0x24000aec

0800f414 <SDO_download>:

/** Function for handling incoming requested SDO Download, validating the
 * request and sending an response. On error an SDO Abort will be sent.
 */
static void SDO_download (void)
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b090      	sub	sp, #64	@ 0x40
 800f418:	af02      	add	r7, sp, #8
   uint32_t size, actsize;
   const _objd *objd;
   uint32_t *mbxdata;
   uint32_t abort;

   coesdo = (_COEsdo *) &MBX[0];
 800f41a:	4b89      	ldr	r3, [pc, #548]	@ (800f640 <SDO_download+0x22c>)
 800f41c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   index = etohs (coesdo->index);
 800f41e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f420:	689b      	ldr	r3, [r3, #8]
 800f422:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800f426:	857b      	strh	r3, [r7, #42]	@ 0x2a
   subindex = coesdo->subindex;
 800f428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f42a:	7adb      	ldrb	r3, [r3, #11]
 800f42c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
   nidx = SDO_findobject (index);
 800f430:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f432:	4618      	mov	r0, r3
 800f434:	f7ff f84c 	bl	800e4d0 <SDO_findobject>
 800f438:	6278      	str	r0, [r7, #36]	@ 0x24
   if (nidx >= 0)
 800f43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	f2c0 818c 	blt.w	800f75a <SDO_download+0x346>
   {
      nsub = SDO_findsubindex (nidx, subindex);
 800f442:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800f446:	4619      	mov	r1, r3
 800f448:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f44a:	f7fe ffe3 	bl	800e414 <SDO_findsubindex>
 800f44e:	4603      	mov	r3, r0
 800f450:	847b      	strh	r3, [r7, #34]	@ 0x22
      if (nsub >= 0)
 800f452:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800f456:	2b00      	cmp	r3, #0
 800f458:	f2c0 8177 	blt.w	800f74a <SDO_download+0x336>
      {
         objd = SDOobjects[nidx].objdesc;
 800f45c:	4a79      	ldr	r2, [pc, #484]	@ (800f644 <SDO_download+0x230>)
 800f45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f460:	011b      	lsls	r3, r3, #4
 800f462:	4413      	add	r3, r2
 800f464:	330c      	adds	r3, #12
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	61fb      	str	r3, [r7, #28]
         uint8_t access = (objd + nsub)->flags & 0x3f;
 800f46a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 800f46e:	4613      	mov	r3, r2
 800f470:	009b      	lsls	r3, r3, #2
 800f472:	4413      	add	r3, r2
 800f474:	009b      	lsls	r3, r3, #2
 800f476:	461a      	mov	r2, r3
 800f478:	69fb      	ldr	r3, [r7, #28]
 800f47a:	4413      	add	r3, r2
 800f47c:	88db      	ldrh	r3, [r3, #6]
 800f47e:	b2db      	uxtb	r3, r3
 800f480:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f484:	76fb      	strb	r3, [r7, #27]
         uint8_t state = ESCvar.ALstatus & 0x0f;
 800f486:	4b70      	ldr	r3, [pc, #448]	@ (800f648 <SDO_download+0x234>)
 800f488:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 800f48c:	b2db      	uxtb	r3, r3
 800f48e:	f003 030f 	and.w	r3, r3, #15
 800f492:	76bb      	strb	r3, [r7, #26]
         if (WRITE_ACCESS(access, state))
 800f494:	7efb      	ldrb	r3, [r7, #27]
 800f496:	f003 0308 	and.w	r3, r3, #8
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d002      	beq.n	800f4a4 <SDO_download+0x90>
 800f49e:	7ebb      	ldrb	r3, [r7, #26]
 800f4a0:	2b02      	cmp	r3, #2
 800f4a2:	d011      	beq.n	800f4c8 <SDO_download+0xb4>
 800f4a4:	7efb      	ldrb	r3, [r7, #27]
 800f4a6:	f003 0310 	and.w	r3, r3, #16
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d002      	beq.n	800f4b4 <SDO_download+0xa0>
 800f4ae:	7ebb      	ldrb	r3, [r7, #26]
 800f4b0:	2b04      	cmp	r3, #4
 800f4b2:	d009      	beq.n	800f4c8 <SDO_download+0xb4>
 800f4b4:	7efb      	ldrb	r3, [r7, #27]
 800f4b6:	f003 0320 	and.w	r3, r3, #32
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	f000 8132 	beq.w	800f724 <SDO_download+0x310>
 800f4c0:	7ebb      	ldrb	r3, [r7, #26]
 800f4c2:	2b08      	cmp	r3, #8
 800f4c4:	f040 812e 	bne.w	800f724 <SDO_download+0x310>
         {
            /* expedited? */
            if (coesdo->command & COE_EXPEDITED_INDICATOR)
 800f4c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4ca:	7a1b      	ldrb	r3, [r3, #8]
 800f4cc:	f003 0302 	and.w	r3, r3, #2
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d00b      	beq.n	800f4ec <SDO_download+0xd8>
            {
               size = 4U - ((coesdo->command & 0x0CU) >> 2);
 800f4d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4d6:	7a1b      	ldrb	r3, [r3, #8]
 800f4d8:	089b      	lsrs	r3, r3, #2
 800f4da:	f003 0303 	and.w	r3, r3, #3
 800f4de:	f1c3 0304 	rsb	r3, r3, #4
 800f4e2:	637b      	str	r3, [r7, #52]	@ 0x34
               mbxdata = &(coesdo->size);
 800f4e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4e6:	330c      	adds	r3, #12
 800f4e8:	633b      	str	r3, [r7, #48]	@ 0x30
 800f4ea:	e007      	b.n	800f4fc <SDO_download+0xe8>
            }
            else
            {
               /* normal download */
               size = (etohl (coesdo->size) & 0xffff);
 800f4ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4ee:	68db      	ldr	r3, [r3, #12]
 800f4f0:	b29b      	uxth	r3, r3
 800f4f2:	637b      	str	r3, [r7, #52]	@ 0x34
               mbxdata = (&(coesdo->size)) + 1;
 800f4f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4f6:	330c      	adds	r3, #12
 800f4f8:	3304      	adds	r3, #4
 800f4fa:	633b      	str	r3, [r7, #48]	@ 0x30
            }
            actsize = BITS2BYTES((objd + nsub)->bitlength);
 800f4fc:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 800f500:	4613      	mov	r3, r2
 800f502:	009b      	lsls	r3, r3, #2
 800f504:	4413      	add	r3, r2
 800f506:	009b      	lsls	r3, r3, #2
 800f508:	461a      	mov	r2, r3
 800f50a:	69fb      	ldr	r3, [r7, #28]
 800f50c:	4413      	add	r3, r2
 800f50e:	889b      	ldrh	r3, [r3, #4]
 800f510:	3307      	adds	r3, #7
 800f512:	08db      	lsrs	r3, r3, #3
 800f514:	617b      	str	r3, [r7, #20]
            if (actsize != size)
 800f516:	697a      	ldr	r2, [r7, #20]
 800f518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f51a:	429a      	cmp	r2, r3
 800f51c:	d042      	beq.n	800f5a4 <SDO_download+0x190>
            {
               /* entries with data types VISIBLE_STRING, OCTET_STRING,
                * UNICODE_STRING, ARRAY_OF_INT, ARRAY_OF_SINT,
                * ARRAY_OF_DINT, and ARRAY_OF_UDINT may have flexible length
                */
               uint16_t type = (objd + nsub)->datatype;
 800f51e:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 800f522:	4613      	mov	r3, r2
 800f524:	009b      	lsls	r3, r3, #2
 800f526:	4413      	add	r3, r2
 800f528:	009b      	lsls	r3, r3, #2
 800f52a:	461a      	mov	r2, r3
 800f52c:	69fb      	ldr	r3, [r7, #28]
 800f52e:	4413      	add	r3, r2
 800f530:	885b      	ldrh	r3, [r3, #2]
 800f532:	827b      	strh	r3, [r7, #18]
               if (type == DTYPE_VISIBLE_STRING)
 800f534:	8a7b      	ldrh	r3, [r7, #18]
 800f536:	2b09      	cmp	r3, #9
 800f538:	d113      	bne.n	800f562 <SDO_download+0x14e>
               {
                  /* pad with zeroes up to the maximum size of the entry */
                  memset((objd + nsub)->data + size, 0, actsize - size);
 800f53a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 800f53e:	4613      	mov	r3, r2
 800f540:	009b      	lsls	r3, r3, #2
 800f542:	4413      	add	r3, r2
 800f544:	009b      	lsls	r3, r3, #2
 800f546:	461a      	mov	r2, r3
 800f548:	69fb      	ldr	r3, [r7, #28]
 800f54a:	4413      	add	r3, r2
 800f54c:	691a      	ldr	r2, [r3, #16]
 800f54e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f550:	18d0      	adds	r0, r2, r3
 800f552:	697a      	ldr	r2, [r7, #20]
 800f554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f556:	1ad3      	subs	r3, r2, r3
 800f558:	461a      	mov	r2, r3
 800f55a:	2100      	movs	r1, #0
 800f55c:	f001 fe95 	bl	801128a <memset>
 800f560:	e020      	b.n	800f5a4 <SDO_download+0x190>
               }
               else if ((type != DTYPE_OCTET_STRING) &&
 800f562:	8a7b      	ldrh	r3, [r7, #18]
 800f564:	2b0a      	cmp	r3, #10
 800f566:	d01d      	beq.n	800f5a4 <SDO_download+0x190>
 800f568:	8a7b      	ldrh	r3, [r7, #18]
 800f56a:	2b0b      	cmp	r3, #11
 800f56c:	d01a      	beq.n	800f5a4 <SDO_download+0x190>
                        (type != DTYPE_UNICODE_STRING) &&
 800f56e:	8a7b      	ldrh	r3, [r7, #18]
 800f570:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800f574:	d016      	beq.n	800f5a4 <SDO_download+0x190>
                        (type != DTYPE_ARRAY_OF_INT) &&
 800f576:	8a7b      	ldrh	r3, [r7, #18]
 800f578:	f240 2261 	movw	r2, #609	@ 0x261
 800f57c:	4293      	cmp	r3, r2
 800f57e:	d011      	beq.n	800f5a4 <SDO_download+0x190>
                        (type != DTYPE_ARRAY_OF_SINT) &&
 800f580:	8a7b      	ldrh	r3, [r7, #18]
 800f582:	f240 2262 	movw	r2, #610	@ 0x262
 800f586:	4293      	cmp	r3, r2
 800f588:	d00c      	beq.n	800f5a4 <SDO_download+0x190>
                        (type != DTYPE_ARRAY_OF_DINT) &&
 800f58a:	8a7b      	ldrh	r3, [r7, #18]
 800f58c:	f240 2263 	movw	r2, #611	@ 0x263
 800f590:	4293      	cmp	r3, r2
 800f592:	d007      	beq.n	800f5a4 <SDO_download+0x190>
                        (type != DTYPE_ARRAY_OF_UDINT))
               {
                  set_state_idle (0, index, subindex, ABORT_TYPEMISMATCH);
 800f594:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800f598:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800f59a:	4b2c      	ldr	r3, [pc, #176]	@ (800f64c <SDO_download+0x238>)
 800f59c:	2000      	movs	r0, #0
 800f59e:	f7ff f96b 	bl	800e878 <set_state_idle>
                  return;
 800f5a2:	e0ea      	b.n	800f77a <SDO_download+0x366>
            abort = ESC_download_pre_objecthandler (
                  index,
                  subindex,
                  mbxdata,
                  size,
                  (objd + nsub)->flags
 800f5a4:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 800f5a8:	4613      	mov	r3, r2
 800f5aa:	009b      	lsls	r3, r3, #2
 800f5ac:	4413      	add	r3, r2
 800f5ae:	009b      	lsls	r3, r3, #2
 800f5b0:	461a      	mov	r2, r3
 800f5b2:	69fb      	ldr	r3, [r7, #28]
 800f5b4:	4413      	add	r3, r2
 800f5b6:	88db      	ldrh	r3, [r3, #6]
            abort = ESC_download_pre_objecthandler (
 800f5b8:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 800f5bc:	8d78      	ldrh	r0, [r7, #42]	@ 0x2a
 800f5be:	9300      	str	r3, [sp, #0]
 800f5c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f5c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f5c4:	f7fd fa12 	bl	800c9ec <ESC_download_pre_objecthandler>
 800f5c8:	60f8      	str	r0, [r7, #12]
            );
            if (abort == 0)
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	f040 80a1 	bne.w	800f714 <SDO_download+0x300>
            {
               if ((size > 4) &&
 800f5d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f5d4:	2b04      	cmp	r3, #4
 800f5d6:	d93b      	bls.n	800f650 <SDO_download+0x23c>
                     (size > (coesdo->mbxheader.length - COE_HEADERSIZE)))
 800f5d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5da:	881b      	ldrh	r3, [r3, #0]
 800f5dc:	3b0a      	subs	r3, #10
               if ((size > 4) &&
 800f5de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	d935      	bls.n	800f650 <SDO_download+0x23c>
               {
                  size = coesdo->mbxheader.length - COE_HEADERSIZE;
 800f5e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5e6:	881b      	ldrh	r3, [r3, #0]
 800f5e8:	3b0a      	subs	r3, #10
 800f5ea:	637b      	str	r3, [r7, #52]	@ 0x34
                  /* signal segmented transfer */
                  ESCvar.segmented = MBXSED;
 800f5ec:	4b16      	ldr	r3, [pc, #88]	@ (800f648 <SDO_download+0x234>)
 800f5ee:	2250      	movs	r2, #80	@ 0x50
 800f5f0:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
                  ESCvar.data = (objd + nsub)->data + size;
 800f5f4:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 800f5f8:	4613      	mov	r3, r2
 800f5fa:	009b      	lsls	r3, r3, #2
 800f5fc:	4413      	add	r3, r2
 800f5fe:	009b      	lsls	r3, r3, #2
 800f600:	461a      	mov	r2, r3
 800f602:	69fb      	ldr	r3, [r7, #28]
 800f604:	4413      	add	r3, r2
 800f606:	691a      	ldr	r2, [r3, #16]
 800f608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f60a:	4413      	add	r3, r2
 800f60c:	4a0e      	ldr	r2, [pc, #56]	@ (800f648 <SDO_download+0x234>)
 800f60e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
                  ESCvar.index = index;
 800f612:	4a0d      	ldr	r2, [pc, #52]	@ (800f648 <SDO_download+0x234>)
 800f614:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f616:	f8a2 30a4 	strh.w	r3, [r2, #164]	@ 0xa4
                  ESCvar.subindex = subindex;
 800f61a:	4a0b      	ldr	r2, [pc, #44]	@ (800f648 <SDO_download+0x234>)
 800f61c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800f620:	f882 30a6 	strb.w	r3, [r2, #166]	@ 0xa6
                  ESCvar.flags = (objd + nsub)->flags;
 800f624:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 800f628:	4613      	mov	r3, r2
 800f62a:	009b      	lsls	r3, r3, #2
 800f62c:	4413      	add	r3, r2
 800f62e:	009b      	lsls	r3, r3, #2
 800f630:	461a      	mov	r2, r3
 800f632:	69fb      	ldr	r3, [r7, #28]
 800f634:	4413      	add	r3, r2
 800f636:	88da      	ldrh	r2, [r3, #6]
 800f638:	4b03      	ldr	r3, [pc, #12]	@ (800f648 <SDO_download+0x234>)
 800f63a:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
 800f63e:	e00b      	b.n	800f658 <SDO_download+0x244>
 800f640:	240004ec 	.word	0x240004ec
 800f644:	08012848 	.word	0x08012848
 800f648:	24000bb0 	.word	0x24000bb0
 800f64c:	06070010 	.word	0x06070010
               }
               else
               {
                  ESCvar.segmented = 0;
 800f650:	4b4b      	ldr	r3, [pc, #300]	@ (800f780 <SDO_download+0x36c>)
 800f652:	2200      	movs	r2, #0
 800f654:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
               }
               copy2mbx (mbxdata, (objd + nsub)->data, size);
 800f658:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 800f65c:	4613      	mov	r3, r2
 800f65e:	009b      	lsls	r3, r3, #2
 800f660:	4413      	add	r3, r2
 800f662:	009b      	lsls	r3, r3, #2
 800f664:	461a      	mov	r2, r3
 800f666:	69fb      	ldr	r3, [r7, #28]
 800f668:	4413      	add	r3, r2
 800f66a:	691b      	ldr	r3, [r3, #16]
 800f66c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f66e:	4619      	mov	r1, r3
 800f670:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f672:	f7ff f8a9 	bl	800e7c8 <copy2mbx>
               MBXout = ESC_claimbuffer ();
 800f676:	f7fd ff47 	bl	800d508 <ESC_claimbuffer>
 800f67a:	4603      	mov	r3, r0
 800f67c:	72fb      	strb	r3, [r7, #11]
               if (MBXout)
 800f67e:	7afb      	ldrb	r3, [r7, #11]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d026      	beq.n	800f6d2 <SDO_download+0x2be>
               {
                  coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800f684:	7afb      	ldrb	r3, [r7, #11]
 800f686:	4a3e      	ldr	r2, [pc, #248]	@ (800f780 <SDO_download+0x36c>)
 800f688:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800f68a:	fb02 f303 	mul.w	r3, r2, r3
 800f68e:	4a3d      	ldr	r2, [pc, #244]	@ (800f784 <SDO_download+0x370>)
 800f690:	4413      	add	r3, r2
 800f692:	607b      	str	r3, [r7, #4]
                  coeres->mbxheader.length = htoes (COE_DEFAULTLENGTH);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	220a      	movs	r2, #10
 800f698:	801a      	strh	r2, [r3, #0]
                  coeres->mbxheader.mbxtype = MBXCOE;
 800f69a:	687a      	ldr	r2, [r7, #4]
 800f69c:	7953      	ldrb	r3, [r2, #5]
 800f69e:	2103      	movs	r1, #3
 800f6a0:	f361 0303 	bfi	r3, r1, #0, #4
 800f6a4:	7153      	strb	r3, [r2, #5]
                  coeres->coeheader.numberservice =
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800f6ac:	80da      	strh	r2, [r3, #6]
                        htoes ((0 & 0x01f) | (COE_SDORESPONSE << 12));
                  coeres->index = htoes (index);
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800f6b2:	f8a3 2009 	strh.w	r2, [r3, #9]
                  coeres->subindex = subindex;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800f6bc:	72da      	strb	r2, [r3, #11]
                  coeres->command = COE_COMMAND_DOWNLOADRESPONSE;
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	2260      	movs	r2, #96	@ 0x60
 800f6c2:	721a      	strb	r2, [r3, #8]
                  coeres->size = htoel (0);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	60da      	str	r2, [r3, #12]
                  MBXcontrol[MBXout].state = MBXstate_outreq;
 800f6ca:	7afb      	ldrb	r3, [r7, #11]
 800f6cc:	4a2e      	ldr	r2, [pc, #184]	@ (800f788 <SDO_download+0x374>)
 800f6ce:	2103      	movs	r1, #3
 800f6d0:	54d1      	strb	r1, [r2, r3]
               }
               if (ESCvar.segmented == 0)
 800f6d2:	4b2b      	ldr	r3, [pc, #172]	@ (800f780 <SDO_download+0x36c>)
 800f6d4:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d146      	bne.n	800f76a <SDO_download+0x356>
               {
                  /* external object write handler */
                  abort = ESC_download_post_objecthandler (index, subindex, (objd + nsub)->flags);
 800f6dc:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 800f6e0:	4613      	mov	r3, r2
 800f6e2:	009b      	lsls	r3, r3, #2
 800f6e4:	4413      	add	r3, r2
 800f6e6:	009b      	lsls	r3, r3, #2
 800f6e8:	461a      	mov	r2, r3
 800f6ea:	69fb      	ldr	r3, [r7, #28]
 800f6ec:	4413      	add	r3, r2
 800f6ee:	88da      	ldrh	r2, [r3, #6]
 800f6f0:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 800f6f4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f7fd f9c6 	bl	800ca88 <ESC_download_post_objecthandler>
 800f6fc:	60f8      	str	r0, [r7, #12]
                  if (abort != 0)
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d032      	beq.n	800f76a <SDO_download+0x356>
                  {
                     SDO_abort (MBXout, index, subindex, abort);
 800f704:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800f708:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800f70a:	7af8      	ldrb	r0, [r7, #11]
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	f7ff f86b 	bl	800e7e8 <SDO_abort>
            if (abort == 0)
 800f712:	e02a      	b.n	800f76a <SDO_download+0x356>
                  }
               }
            }
            else
            {
               SDO_abort (0, index, subindex, abort);
 800f714:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800f718:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	2000      	movs	r0, #0
 800f71e:	f7ff f863 	bl	800e7e8 <SDO_abort>
            if (abort == 0)
 800f722:	e022      	b.n	800f76a <SDO_download+0x356>
            }
         }
         else
         {
            if (access == ATYPE_RO)
 800f724:	7efb      	ldrb	r3, [r7, #27]
 800f726:	2b07      	cmp	r3, #7
 800f728:	d107      	bne.n	800f73a <SDO_download+0x326>
            {
               SDO_abort (0, index, subindex, ABORT_READONLY);
 800f72a:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800f72e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800f730:	4b16      	ldr	r3, [pc, #88]	@ (800f78c <SDO_download+0x378>)
 800f732:	2000      	movs	r0, #0
 800f734:	f7ff f858 	bl	800e7e8 <SDO_abort>
 800f738:	e018      	b.n	800f76c <SDO_download+0x358>

            }
            else
            {
               SDO_abort (0, index, subindex, ABORT_NOTINTHISSTATE);
 800f73a:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800f73e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800f740:	4b13      	ldr	r3, [pc, #76]	@ (800f790 <SDO_download+0x37c>)
 800f742:	2000      	movs	r0, #0
 800f744:	f7ff f850 	bl	800e7e8 <SDO_abort>
 800f748:	e010      	b.n	800f76c <SDO_download+0x358>
            }
         }
      }
      else
      {
         SDO_abort (0, index, subindex, ABORT_NOSUBINDEX);
 800f74a:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800f74e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800f750:	4b10      	ldr	r3, [pc, #64]	@ (800f794 <SDO_download+0x380>)
 800f752:	2000      	movs	r0, #0
 800f754:	f7ff f848 	bl	800e7e8 <SDO_abort>
 800f758:	e008      	b.n	800f76c <SDO_download+0x358>
      }
   }
   else
   {
      SDO_abort (0, index, subindex, ABORT_NOOBJECT);
 800f75a:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800f75e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800f760:	4b0d      	ldr	r3, [pc, #52]	@ (800f798 <SDO_download+0x384>)
 800f762:	2000      	movs	r0, #0
 800f764:	f7ff f840 	bl	800e7e8 <SDO_abort>
 800f768:	e000      	b.n	800f76c <SDO_download+0x358>
            if (abort == 0)
 800f76a:	bf00      	nop
   }
   MBXcontrol[0].state = MBXstate_idle;
 800f76c:	4b06      	ldr	r3, [pc, #24]	@ (800f788 <SDO_download+0x374>)
 800f76e:	2200      	movs	r2, #0
 800f770:	701a      	strb	r2, [r3, #0]
   ESCvar.xoe = 0;
 800f772:	4b03      	ldr	r3, [pc, #12]	@ (800f780 <SDO_download+0x36c>)
 800f774:	2200      	movs	r2, #0
 800f776:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
}
 800f77a:	3738      	adds	r7, #56	@ 0x38
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bd80      	pop	{r7, pc}
 800f780:	24000bb0 	.word	0x24000bb0
 800f784:	240004ec 	.word	0x240004ec
 800f788:	24000aec 	.word	0x24000aec
 800f78c:	06010002 	.word	0x06010002
 800f790:	08000022 	.word	0x08000022
 800f794:	06090011 	.word	0x06090011
 800f798:	06020000 	.word	0x06020000

0800f79c <SDO_download_complete_access>:
/** Function for handling incoming requested SDO Download with Complete Access,
 *  validating the request and sending a response. On error an SDO Abort will
 *  be sent.
 */
static void SDO_download_complete_access (void)
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b08e      	sub	sp, #56	@ 0x38
 800f7a0:	af02      	add	r7, sp, #8
   _COEsdo *coesdo = (_COEsdo *) &MBX[0];
 800f7a2:	4b7f      	ldr	r3, [pc, #508]	@ (800f9a0 <SDO_download_complete_access+0x204>)
 800f7a4:	627b      	str	r3, [r7, #36]	@ 0x24
   uint16_t index;
   uint8_t subindex;
   int32_t nidx;
   int16_t nsub;
   uint32_t abortcode = complete_access_get_variables
 800f7a6:	f107 0008 	add.w	r0, r7, #8
 800f7aa:	f107 020d 	add.w	r2, r7, #13
 800f7ae:	f107 010e 	add.w	r1, r7, #14
 800f7b2:	1dbb      	adds	r3, r7, #6
 800f7b4:	9300      	str	r3, [sp, #0]
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f7ba:	f7ff fa75 	bl	800eca8 <complete_access_get_variables>
 800f7be:	6238      	str	r0, [r7, #32]
                           (coesdo, &index, &subindex, &nidx, &nsub);
   if (abortcode != 0)
 800f7c0:	6a3b      	ldr	r3, [r7, #32]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d006      	beq.n	800f7d4 <SDO_download_complete_access+0x38>
   {
      set_state_idle (0, index, subindex, abortcode);
 800f7c6:	89f9      	ldrh	r1, [r7, #14]
 800f7c8:	7b7a      	ldrb	r2, [r7, #13]
 800f7ca:	6a3b      	ldr	r3, [r7, #32]
 800f7cc:	2000      	movs	r0, #0
 800f7ce:	f7ff f853 	bl	800e878 <set_state_idle>
      return;
 800f7d2:	e0e2      	b.n	800f99a <SDO_download_complete_access+0x1fe>
   }

   uint32_t bytes;
   uint32_t *mbxdata = &(coesdo->size);
 800f7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7d6:	330c      	adds	r3, #12
 800f7d8:	62bb      	str	r3, [r7, #40]	@ 0x28

   if (coesdo->command & COE_EXPEDITED_INDICATOR)
 800f7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7dc:	7a1b      	ldrb	r3, [r3, #8]
 800f7de:	f003 0302 	and.w	r3, r3, #2
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d008      	beq.n	800f7f8 <SDO_download_complete_access+0x5c>
   {
      /* expedited download */
      bytes = 4U - ((coesdo->command & 0x0CU) >> 2);
 800f7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7e8:	7a1b      	ldrb	r3, [r3, #8]
 800f7ea:	089b      	lsrs	r3, r3, #2
 800f7ec:	f003 0303 	and.w	r3, r3, #3
 800f7f0:	f1c3 0304 	rsb	r3, r3, #4
 800f7f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f7f6:	e006      	b.n	800f806 <SDO_download_complete_access+0x6a>
   }
   else
   {
      /* normal download */
      bytes = (etohl (coesdo->size) & 0xffff);
 800f7f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7fa:	68db      	ldr	r3, [r3, #12]
 800f7fc:	b29b      	uxth	r3, r3
 800f7fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      mbxdata++;
 800f800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f802:	3304      	adds	r3, #4
 800f804:	62bb      	str	r3, [r7, #40]	@ 0x28
   }

   const _objd *objd = SDOobjects[nidx].objdesc;
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	4a66      	ldr	r2, [pc, #408]	@ (800f9a4 <SDO_download_complete_access+0x208>)
 800f80a:	011b      	lsls	r3, r3, #4
 800f80c:	4413      	add	r3, r2
 800f80e:	330c      	adds	r3, #12
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	61fb      	str	r3, [r7, #28]

   /* loop through the subindexes to get the total size */
   uint32_t size = complete_access_subindex_loop(objd, nidx, nsub, NULL, DOWNLOAD, 0);
 800f814:	68b9      	ldr	r1, [r7, #8]
 800f816:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f81a:	2300      	movs	r3, #0
 800f81c:	9301      	str	r3, [sp, #4]
 800f81e:	2301      	movs	r3, #1
 800f820:	9300      	str	r3, [sp, #0]
 800f822:	2300      	movs	r3, #0
 800f824:	69f8      	ldr	r0, [r7, #28]
 800f826:	f7ff fa83 	bl	800ed30 <complete_access_subindex_loop>
 800f82a:	61b8      	str	r0, [r7, #24]
   size = BITS2BYTES(size);
 800f82c:	69bb      	ldr	r3, [r7, #24]
 800f82e:	3307      	adds	r3, #7
 800f830:	08db      	lsrs	r3, r3, #3
 800f832:	61bb      	str	r3, [r7, #24]
   if (size > 0xffff)
 800f834:	69bb      	ldr	r3, [r7, #24]
 800f836:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f83a:	d306      	bcc.n	800f84a <SDO_download_complete_access+0xae>
   {
      /* 'size' is in this case actually an abort code */
      set_state_idle (0, index, subindex, size);
 800f83c:	89f9      	ldrh	r1, [r7, #14]
 800f83e:	7b7a      	ldrb	r2, [r7, #13]
 800f840:	69bb      	ldr	r3, [r7, #24]
 800f842:	2000      	movs	r0, #0
 800f844:	f7ff f818 	bl	800e878 <set_state_idle>
      return;
 800f848:	e0a7      	b.n	800f99a <SDO_download_complete_access+0x1fe>
    * "The SDO Download Complete Access data length shall always match
    * the full current object size (defined by SubIndex0)".
    * But EtherCAT Conformance Test Tool doesn't follow this rule for some test
    * cases, which is the reason to here only check for 'less than or equal'.
    */
   else if (bytes <= size)
 800f84a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f84c:	69bb      	ldr	r3, [r7, #24]
 800f84e:	429a      	cmp	r2, r3
 800f850:	d877      	bhi.n	800f942 <SDO_download_complete_access+0x1a6>
   {
      abortcode = ESC_download_pre_objecthandler(index, subindex, mbxdata,
 800f852:	89f8      	ldrh	r0, [r7, #14]
 800f854:	7b79      	ldrb	r1, [r7, #13]
            size, objd->flags | COMPLETE_ACCESS_FLAG);
 800f856:	69fb      	ldr	r3, [r7, #28]
 800f858:	88da      	ldrh	r2, [r3, #6]
      abortcode = ESC_download_pre_objecthandler(index, subindex, mbxdata,
 800f85a:	4b53      	ldr	r3, [pc, #332]	@ (800f9a8 <SDO_download_complete_access+0x20c>)
 800f85c:	4313      	orrs	r3, r2
 800f85e:	b29b      	uxth	r3, r3
 800f860:	9300      	str	r3, [sp, #0]
 800f862:	69bb      	ldr	r3, [r7, #24]
 800f864:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f866:	f7fd f8c1 	bl	800c9ec <ESC_download_pre_objecthandler>
 800f86a:	6238      	str	r0, [r7, #32]
      if (abortcode != 0)
 800f86c:	6a3b      	ldr	r3, [r7, #32]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d006      	beq.n	800f880 <SDO_download_complete_access+0xe4>
      {
         set_state_idle (0, index, subindex, abortcode);
 800f872:	89f9      	ldrh	r1, [r7, #14]
 800f874:	7b7a      	ldrb	r2, [r7, #13]
 800f876:	6a3b      	ldr	r3, [r7, #32]
 800f878:	2000      	movs	r0, #0
 800f87a:	f7fe fffd 	bl	800e878 <set_state_idle>
         return;
 800f87e:	e08c      	b.n	800f99a <SDO_download_complete_access+0x1fe>
      }

      if ((bytes + COE_HEADERSIZE) > ESC_MBXDSIZE)
 800f880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f882:	f103 020a 	add.w	r2, r3, #10
 800f886:	4b49      	ldr	r3, [pc, #292]	@ (800f9ac <SDO_download_complete_access+0x210>)
 800f888:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f88a:	3b06      	subs	r3, #6
 800f88c:	429a      	cmp	r2, r3
 800f88e:	d934      	bls.n	800f8fa <SDO_download_complete_access+0x15e>
      {
         /* check that download data fits in the preallocated buffer */
         if ((bytes + PREALLOC_FACTOR * COE_HEADERSIZE) > PREALLOC_BUFFER_SIZE)
 800f890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f892:	331e      	adds	r3, #30
 800f894:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800f898:	d906      	bls.n	800f8a8 <SDO_download_complete_access+0x10c>
         {
             set_state_idle(0, index, subindex, ABORT_CA_NOT_SUPPORTED);
 800f89a:	89f9      	ldrh	r1, [r7, #14]
 800f89c:	7b7a      	ldrb	r2, [r7, #13]
 800f89e:	4b44      	ldr	r3, [pc, #272]	@ (800f9b0 <SDO_download_complete_access+0x214>)
 800f8a0:	2000      	movs	r0, #0
 800f8a2:	f7fe ffe9 	bl	800e878 <set_state_idle>
             return;
 800f8a6:	e078      	b.n	800f99a <SDO_download_complete_access+0x1fe>
         }
         /* set total size in bytes */
         ESCvar.frags = bytes;
 800f8a8:	4a40      	ldr	r2, [pc, #256]	@ (800f9ac <SDO_download_complete_access+0x210>)
 800f8aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8ac:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
         /* limit to mailbox size */
         size = ESC_MBXDSIZE - COE_HEADERSIZE;
 800f8b0:	4b3e      	ldr	r3, [pc, #248]	@ (800f9ac <SDO_download_complete_access+0x210>)
 800f8b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f8b4:	3b10      	subs	r3, #16
 800f8b6:	61bb      	str	r3, [r7, #24]
         /* number of bytes done */
         ESCvar.fragsleft = size;
 800f8b8:	4a3c      	ldr	r2, [pc, #240]	@ (800f9ac <SDO_download_complete_access+0x210>)
 800f8ba:	69bb      	ldr	r3, [r7, #24]
 800f8bc:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
         ESCvar.segmented = MBXSED;
 800f8c0:	4b3a      	ldr	r3, [pc, #232]	@ (800f9ac <SDO_download_complete_access+0x210>)
 800f8c2:	2250      	movs	r2, #80	@ 0x50
 800f8c4:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
         ESCvar.data = ESCvar.mbxdata + size;
 800f8c8:	69bb      	ldr	r3, [r7, #24]
 800f8ca:	4a3a      	ldr	r2, [pc, #232]	@ (800f9b4 <SDO_download_complete_access+0x218>)
 800f8cc:	4413      	add	r3, r2
 800f8ce:	4a37      	ldr	r2, [pc, #220]	@ (800f9ac <SDO_download_complete_access+0x210>)
 800f8d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
         ESCvar.index = index;
 800f8d4:	89fa      	ldrh	r2, [r7, #14]
 800f8d6:	4b35      	ldr	r3, [pc, #212]	@ (800f9ac <SDO_download_complete_access+0x210>)
 800f8d8:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
         ESCvar.subindex = subindex;
 800f8dc:	7b7a      	ldrb	r2, [r7, #13]
 800f8de:	4b33      	ldr	r3, [pc, #204]	@ (800f9ac <SDO_download_complete_access+0x210>)
 800f8e0:	f883 20a6 	strb.w	r2, [r3, #166]	@ 0xa6
         ESCvar.flags = COMPLETE_ACCESS_FLAG;
 800f8e4:	4b31      	ldr	r3, [pc, #196]	@ (800f9ac <SDO_download_complete_access+0x210>)
 800f8e6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800f8ea:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
         /* Store the data */
         copy2mbx (mbxdata, ESCvar.mbxdata, size);
 800f8ee:	69ba      	ldr	r2, [r7, #24]
 800f8f0:	4930      	ldr	r1, [pc, #192]	@ (800f9b4 <SDO_download_complete_access+0x218>)
 800f8f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f8f4:	f7fe ff68 	bl	800e7c8 <copy2mbx>
 800f8f8:	e02a      	b.n	800f950 <SDO_download_complete_access+0x1b4>
      }
      else
      {
         ESCvar.segmented = 0;
 800f8fa:	4b2c      	ldr	r3, [pc, #176]	@ (800f9ac <SDO_download_complete_access+0x210>)
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
         /* copy download data to subindexes */
         complete_access_subindex_loop(objd, nidx, nsub, (uint8_t *)mbxdata, DOWNLOAD, bytes);
 800f902:	68b9      	ldr	r1, [r7, #8]
 800f904:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f90a:	9301      	str	r3, [sp, #4]
 800f90c:	2301      	movs	r3, #1
 800f90e:	9300      	str	r3, [sp, #0]
 800f910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f912:	69f8      	ldr	r0, [r7, #28]
 800f914:	f7ff fa0c 	bl	800ed30 <complete_access_subindex_loop>

         abortcode = ESC_download_post_objecthandler(index, subindex,
 800f918:	89f8      	ldrh	r0, [r7, #14]
 800f91a:	7b79      	ldrb	r1, [r7, #13]
               objd->flags | COMPLETE_ACCESS_FLAG);
 800f91c:	69fb      	ldr	r3, [r7, #28]
 800f91e:	88da      	ldrh	r2, [r3, #6]
         abortcode = ESC_download_post_objecthandler(index, subindex,
 800f920:	4b21      	ldr	r3, [pc, #132]	@ (800f9a8 <SDO_download_complete_access+0x20c>)
 800f922:	4313      	orrs	r3, r2
 800f924:	b29b      	uxth	r3, r3
 800f926:	461a      	mov	r2, r3
 800f928:	f7fd f8ae 	bl	800ca88 <ESC_download_post_objecthandler>
 800f92c:	6238      	str	r0, [r7, #32]
         if (abortcode != 0)
 800f92e:	6a3b      	ldr	r3, [r7, #32]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d00d      	beq.n	800f950 <SDO_download_complete_access+0x1b4>
         {
            set_state_idle (0, index, subindex, abortcode);
 800f934:	89f9      	ldrh	r1, [r7, #14]
 800f936:	7b7a      	ldrb	r2, [r7, #13]
 800f938:	6a3b      	ldr	r3, [r7, #32]
 800f93a:	2000      	movs	r0, #0
 800f93c:	f7fe ff9c 	bl	800e878 <set_state_idle>
            return;
 800f940:	e02b      	b.n	800f99a <SDO_download_complete_access+0x1fe>
         }
      }
   }
   else
   {
      set_state_idle (0, index, subindex, ABORT_TYPEMISMATCH);
 800f942:	89f9      	ldrh	r1, [r7, #14]
 800f944:	7b7a      	ldrb	r2, [r7, #13]
 800f946:	4b1c      	ldr	r3, [pc, #112]	@ (800f9b8 <SDO_download_complete_access+0x21c>)
 800f948:	2000      	movs	r0, #0
 800f94a:	f7fe ff95 	bl	800e878 <set_state_idle>
      return;
 800f94e:	e024      	b.n	800f99a <SDO_download_complete_access+0x1fe>
   }

   uint8_t MBXout = ESC_claimbuffer ();
 800f950:	f7fd fdda 	bl	800d508 <ESC_claimbuffer>
 800f954:	4603      	mov	r3, r0
 800f956:	75fb      	strb	r3, [r7, #23]
   if (MBXout > 0)
 800f958:	7dfb      	ldrb	r3, [r7, #23]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d017      	beq.n	800f98e <SDO_download_complete_access+0x1f2>
   {
      _COEsdo *coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800f95e:	7dfb      	ldrb	r3, [r7, #23]
 800f960:	4a12      	ldr	r2, [pc, #72]	@ (800f9ac <SDO_download_complete_access+0x210>)
 800f962:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800f964:	fb02 f303 	mul.w	r3, r2, r3
 800f968:	4a0d      	ldr	r2, [pc, #52]	@ (800f9a0 <SDO_download_complete_access+0x204>)
 800f96a:	4413      	add	r3, r2
 800f96c:	613b      	str	r3, [r7, #16]
      init_coesdo(coeres, COE_SDORESPONSE,
 800f96e:	89fa      	ldrh	r2, [r7, #14]
 800f970:	7b7b      	ldrb	r3, [r7, #13]
 800f972:	9300      	str	r3, [sp, #0]
 800f974:	4613      	mov	r3, r2
 800f976:	2270      	movs	r2, #112	@ 0x70
 800f978:	2103      	movs	r1, #3
 800f97a:	6938      	ldr	r0, [r7, #16]
 800f97c:	f7ff fb46 	bl	800f00c <init_coesdo>
                  COE_COMMAND_DOWNLOADRESPONSE | COE_COMPLETEACCESS,
                  index, subindex);

      coeres->size = 0;
 800f980:	693b      	ldr	r3, [r7, #16]
 800f982:	2200      	movs	r2, #0
 800f984:	60da      	str	r2, [r3, #12]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800f986:	7dfb      	ldrb	r3, [r7, #23]
 800f988:	4a0c      	ldr	r2, [pc, #48]	@ (800f9bc <SDO_download_complete_access+0x220>)
 800f98a:	2103      	movs	r1, #3
 800f98c:	54d1      	strb	r1, [r2, r3]
   }

   set_state_idle (MBXout, index, subindex, 0);
 800f98e:	89f9      	ldrh	r1, [r7, #14]
 800f990:	7b7a      	ldrb	r2, [r7, #13]
 800f992:	7df8      	ldrb	r0, [r7, #23]
 800f994:	2300      	movs	r3, #0
 800f996:	f7fe ff6f 	bl	800e878 <set_state_idle>
}
 800f99a:	3730      	adds	r7, #48	@ 0x30
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd80      	pop	{r7, pc}
 800f9a0:	240004ec 	.word	0x240004ec
 800f9a4:	08012848 	.word	0x08012848
 800f9a8:	ffff8000 	.word	0xffff8000
 800f9ac:	24000bb0 	.word	0x24000bb0
 800f9b0:	06010004 	.word	0x06010004
 800f9b4:	24000c9a 	.word	0x24000c9a
 800f9b8:	06070010 	.word	0x06070010
 800f9bc:	24000aec 	.word	0x24000aec

0800f9c0 <SDO_downloadsegment>:

static void SDO_downloadsegment (void)
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b08c      	sub	sp, #48	@ 0x30
 800f9c4:	af02      	add	r7, sp, #8
   _COEsdo *coesdo = (_COEsdo *) &MBX[0];
 800f9c6:	4b6d      	ldr	r3, [pc, #436]	@ (800fb7c <SDO_downloadsegment+0x1bc>)
 800f9c8:	623b      	str	r3, [r7, #32]
   uint8_t MBXout = ESC_claimbuffer ();
 800f9ca:	f7fd fd9d 	bl	800d508 <ESC_claimbuffer>
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	77fb      	strb	r3, [r7, #31]
   if (MBXout)
 800f9d2:	7ffb      	ldrb	r3, [r7, #31]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	f000 80c7 	beq.w	800fb68 <SDO_downloadsegment+0x1a8>
   {
      _COEsdo *coeres = (_COEsdo *) &MBX[MBXout * ESC_MBXSIZE];
 800f9da:	7ffb      	ldrb	r3, [r7, #31]
 800f9dc:	4a68      	ldr	r2, [pc, #416]	@ (800fb80 <SDO_downloadsegment+0x1c0>)
 800f9de:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800f9e0:	fb02 f303 	mul.w	r3, r2, r3
 800f9e4:	4a65      	ldr	r2, [pc, #404]	@ (800fb7c <SDO_downloadsegment+0x1bc>)
 800f9e6:	4413      	add	r3, r2
 800f9e8:	61bb      	str	r3, [r7, #24]
      uint32_t size = coesdo->mbxheader.length - 3U;
 800f9ea:	6a3b      	ldr	r3, [r7, #32]
 800f9ec:	881b      	ldrh	r3, [r3, #0]
 800f9ee:	3b03      	subs	r3, #3
 800f9f0:	627b      	str	r3, [r7, #36]	@ 0x24
      if (size == 7)
 800f9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9f4:	2b07      	cmp	r3, #7
 800f9f6:	d107      	bne.n	800fa08 <SDO_downloadsegment+0x48>
      {
         size = 7 - ((coesdo->command >> 1) & 7);
 800f9f8:	6a3b      	ldr	r3, [r7, #32]
 800f9fa:	7a1b      	ldrb	r3, [r3, #8]
 800f9fc:	085b      	lsrs	r3, r3, #1
 800f9fe:	b2db      	uxtb	r3, r3
 800fa00:	43db      	mvns	r3, r3
 800fa02:	f003 0307 	and.w	r3, r3, #7
 800fa06:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      uint8_t command = COE_COMMAND_DOWNLOADSEGRESP;
 800fa08:	2320      	movs	r3, #32
 800fa0a:	75fb      	strb	r3, [r7, #23]
      uint8_t command2 = (coesdo->command & COE_TOGGLEBIT);  /* copy toggle bit */
 800fa0c:	6a3b      	ldr	r3, [r7, #32]
 800fa0e:	7a1b      	ldrb	r3, [r3, #8]
 800fa10:	f003 0310 	and.w	r3, r3, #16
 800fa14:	75bb      	strb	r3, [r7, #22]
      command |= command2;
 800fa16:	7dfa      	ldrb	r2, [r7, #23]
 800fa18:	7dbb      	ldrb	r3, [r7, #22]
 800fa1a:	4313      	orrs	r3, r2
 800fa1c:	75fb      	strb	r3, [r7, #23]
      init_coesdo(coeres, COE_SDORESPONSE, command, 0, 0);
 800fa1e:	7dfa      	ldrb	r2, [r7, #23]
 800fa20:	2300      	movs	r3, #0
 800fa22:	9300      	str	r3, [sp, #0]
 800fa24:	2300      	movs	r3, #0
 800fa26:	2103      	movs	r1, #3
 800fa28:	69b8      	ldr	r0, [r7, #24]
 800fa2a:	f7ff faef 	bl	800f00c <init_coesdo>

      void *mbxdata = &(coesdo->index);  /* data pointer */
 800fa2e:	6a3b      	ldr	r3, [r7, #32]
 800fa30:	3309      	adds	r3, #9
 800fa32:	613b      	str	r3, [r7, #16]
      copy2mbx (mbxdata, ESCvar.data, size);
 800fa34:	4b52      	ldr	r3, [pc, #328]	@ (800fb80 <SDO_downloadsegment+0x1c0>)
 800fa36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fa3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa3c:	4619      	mov	r1, r3
 800fa3e:	6938      	ldr	r0, [r7, #16]
 800fa40:	f7fe fec2 	bl	800e7c8 <copy2mbx>

      if (coesdo->command & COE_COMMAND_LASTSEGMENTBIT)
 800fa44:	6a3b      	ldr	r3, [r7, #32]
 800fa46:	7a1b      	ldrb	r3, [r3, #8]
 800fa48:	f003 0301 	and.w	r3, r3, #1
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d077      	beq.n	800fb40 <SDO_downloadsegment+0x180>
      {
         if(ESCvar.flags == COMPLETE_ACCESS_FLAG)
 800fa50:	4b4b      	ldr	r3, [pc, #300]	@ (800fb80 <SDO_downloadsegment+0x1c0>)
 800fa52:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 800fa56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fa5a:	d14a      	bne.n	800faf2 <SDO_downloadsegment+0x132>
         {
            int32_t nidx;
            int16_t nsub;

            if(ESCvar.frags > ESCvar.fragsleft + size)
 800fa5c:	4b48      	ldr	r3, [pc, #288]	@ (800fb80 <SDO_downloadsegment+0x1c0>)
 800fa5e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800fa62:	4b47      	ldr	r3, [pc, #284]	@ (800fb80 <SDO_downloadsegment+0x1c0>)
 800fa64:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800fa68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa6a:	440b      	add	r3, r1
 800fa6c:	429a      	cmp	r2, r3
 800fa6e:	d90a      	bls.n	800fa86 <SDO_downloadsegment+0xc6>
            {
               set_state_idle (0, ESCvar.index, ESCvar.subindex, ABORT_TYPEMISMATCH);
 800fa70:	4b43      	ldr	r3, [pc, #268]	@ (800fb80 <SDO_downloadsegment+0x1c0>)
 800fa72:	f8b3 10a4 	ldrh.w	r1, [r3, #164]	@ 0xa4
 800fa76:	4b42      	ldr	r3, [pc, #264]	@ (800fb80 <SDO_downloadsegment+0x1c0>)
 800fa78:	f893 20a6 	ldrb.w	r2, [r3, #166]	@ 0xa6
 800fa7c:	4b41      	ldr	r3, [pc, #260]	@ (800fb84 <SDO_downloadsegment+0x1c4>)
 800fa7e:	2000      	movs	r0, #0
 800fa80:	f7fe fefa 	bl	800e878 <set_state_idle>
               return;
 800fa84:	e076      	b.n	800fb74 <SDO_downloadsegment+0x1b4>
            }

            nidx = SDO_findobject(ESCvar.index);
 800fa86:	4b3e      	ldr	r3, [pc, #248]	@ (800fb80 <SDO_downloadsegment+0x1c0>)
 800fa88:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	f7fe fd1f 	bl	800e4d0 <SDO_findobject>
 800fa92:	60f8      	str	r0, [r7, #12]
            nsub = SDO_findsubindex (nidx, ESCvar.subindex);
 800fa94:	4b3a      	ldr	r3, [pc, #232]	@ (800fb80 <SDO_downloadsegment+0x1c0>)
 800fa96:	f893 30a6 	ldrb.w	r3, [r3, #166]	@ 0xa6
 800fa9a:	4619      	mov	r1, r3
 800fa9c:	68f8      	ldr	r0, [r7, #12]
 800fa9e:	f7fe fcb9 	bl	800e414 <SDO_findsubindex>
 800faa2:	4603      	mov	r3, r0
 800faa4:	817b      	strh	r3, [r7, #10]

            if ((nidx < 0) || (nsub < 0))
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	db03      	blt.n	800fab4 <SDO_downloadsegment+0xf4>
 800faac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	da0a      	bge.n	800faca <SDO_downloadsegment+0x10a>
            {
               set_state_idle (0, ESCvar.index, ESCvar.subindex, ABORT_NOOBJECT);
 800fab4:	4b32      	ldr	r3, [pc, #200]	@ (800fb80 <SDO_downloadsegment+0x1c0>)
 800fab6:	f8b3 10a4 	ldrh.w	r1, [r3, #164]	@ 0xa4
 800faba:	4b31      	ldr	r3, [pc, #196]	@ (800fb80 <SDO_downloadsegment+0x1c0>)
 800fabc:	f893 20a6 	ldrb.w	r2, [r3, #166]	@ 0xa6
 800fac0:	4b31      	ldr	r3, [pc, #196]	@ (800fb88 <SDO_downloadsegment+0x1c8>)
 800fac2:	2000      	movs	r0, #0
 800fac4:	f7fe fed8 	bl	800e878 <set_state_idle>
               return;
 800fac8:	e054      	b.n	800fb74 <SDO_downloadsegment+0x1b4>
            }

            /* copy download data to subindexes */
            const _objd *objd = SDOobjects[nidx].objdesc;
 800faca:	4a30      	ldr	r2, [pc, #192]	@ (800fb8c <SDO_downloadsegment+0x1cc>)
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	011b      	lsls	r3, r3, #4
 800fad0:	4413      	add	r3, r2
 800fad2:	330c      	adds	r3, #12
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	607b      	str	r3, [r7, #4]
            complete_access_subindex_loop(objd,
 800fad8:	4b29      	ldr	r3, [pc, #164]	@ (800fb80 <SDO_downloadsegment+0x1c0>)
 800fada:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fade:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800fae2:	9301      	str	r3, [sp, #4]
 800fae4:	2301      	movs	r3, #1
 800fae6:	9300      	str	r3, [sp, #0]
 800fae8:	4b29      	ldr	r3, [pc, #164]	@ (800fb90 <SDO_downloadsegment+0x1d0>)
 800faea:	68f9      	ldr	r1, [r7, #12]
 800faec:	6878      	ldr	r0, [r7, #4]
 800faee:	f7ff f91f 	bl	800ed30 <complete_access_subindex_loop>
                  DOWNLOAD,
                  ESCvar.frags);

         }
         /* last segment */
         ESCvar.segmented = 0;
 800faf2:	4b23      	ldr	r3, [pc, #140]	@ (800fb80 <SDO_downloadsegment+0x1c0>)
 800faf4:	2200      	movs	r2, #0
 800faf6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
         ESCvar.frags = 0;
 800fafa:	4b21      	ldr	r3, [pc, #132]	@ (800fb80 <SDO_downloadsegment+0x1c0>)
 800fafc:	2200      	movs	r2, #0
 800fafe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
         ESCvar.fragsleft = 0;
 800fb02:	4b1f      	ldr	r3, [pc, #124]	@ (800fb80 <SDO_downloadsegment+0x1c0>)
 800fb04:	2200      	movs	r2, #0
 800fb06:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
         /* external object write handler */
         uint32_t abort = ESC_download_post_objecthandler
 800fb0a:	4b1d      	ldr	r3, [pc, #116]	@ (800fb80 <SDO_downloadsegment+0x1c0>)
 800fb0c:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 800fb10:	4a1b      	ldr	r2, [pc, #108]	@ (800fb80 <SDO_downloadsegment+0x1c0>)
 800fb12:	f892 10a6 	ldrb.w	r1, [r2, #166]	@ 0xa6
 800fb16:	4a1a      	ldr	r2, [pc, #104]	@ (800fb80 <SDO_downloadsegment+0x1c0>)
 800fb18:	f8b2 20a8 	ldrh.w	r2, [r2, #168]	@ 0xa8
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f7fc ffb3 	bl	800ca88 <ESC_download_post_objecthandler>
 800fb22:	6038      	str	r0, [r7, #0]
               (ESCvar.index, ESCvar.subindex, ESCvar.flags);
         if (abort != 0)
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d01a      	beq.n	800fb60 <SDO_downloadsegment+0x1a0>
         {
            set_state_idle (MBXout, ESCvar.index, ESCvar.subindex, abort);
 800fb2a:	4b15      	ldr	r3, [pc, #84]	@ (800fb80 <SDO_downloadsegment+0x1c0>)
 800fb2c:	f8b3 10a4 	ldrh.w	r1, [r3, #164]	@ 0xa4
 800fb30:	4b13      	ldr	r3, [pc, #76]	@ (800fb80 <SDO_downloadsegment+0x1c0>)
 800fb32:	f893 20a6 	ldrb.w	r2, [r3, #166]	@ 0xa6
 800fb36:	7ff8      	ldrb	r0, [r7, #31]
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	f7fe fe9d 	bl	800e878 <set_state_idle>
            return;
 800fb3e:	e019      	b.n	800fb74 <SDO_downloadsegment+0x1b4>
         }
      }
      else
      {
         /* more segmented transfer needed: increase offset */
         ESCvar.data += size;
 800fb40:	4b0f      	ldr	r3, [pc, #60]	@ (800fb80 <SDO_downloadsegment+0x1c0>)
 800fb42:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800fb46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb48:	4413      	add	r3, r2
 800fb4a:	4a0d      	ldr	r2, [pc, #52]	@ (800fb80 <SDO_downloadsegment+0x1c0>)
 800fb4c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
         /* number of bytes done */
         ESCvar.fragsleft += size;
 800fb50:	4b0b      	ldr	r3, [pc, #44]	@ (800fb80 <SDO_downloadsegment+0x1c0>)
 800fb52:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800fb56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb58:	4413      	add	r3, r2
 800fb5a:	4a09      	ldr	r2, [pc, #36]	@ (800fb80 <SDO_downloadsegment+0x1c0>)
 800fb5c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
      }

      MBXcontrol[MBXout].state = MBXstate_outreq;
 800fb60:	7ffb      	ldrb	r3, [r7, #31]
 800fb62:	4a0c      	ldr	r2, [pc, #48]	@ (800fb94 <SDO_downloadsegment+0x1d4>)
 800fb64:	2103      	movs	r1, #3
 800fb66:	54d1      	strb	r1, [r2, r3]
   }

   set_state_idle (0, 0, 0, 0);
 800fb68:	2300      	movs	r3, #0
 800fb6a:	2200      	movs	r2, #0
 800fb6c:	2100      	movs	r1, #0
 800fb6e:	2000      	movs	r0, #0
 800fb70:	f7fe fe82 	bl	800e878 <set_state_idle>
}
 800fb74:	3728      	adds	r7, #40	@ 0x28
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd80      	pop	{r7, pc}
 800fb7a:	bf00      	nop
 800fb7c:	240004ec 	.word	0x240004ec
 800fb80:	24000bb0 	.word	0x24000bb0
 800fb84:	06070010 	.word	0x06070010
 800fb88:	06020000 	.word	0x06020000
 800fb8c:	08012848 	.word	0x08012848
 800fb90:	24000c9a 	.word	0x24000c9a
 800fb94:	24000aec 	.word	0x24000aec

0800fb98 <SDO_infoerror>:
/** Function for sending an SDO Info Error reply.
 *
 * @param[in] abortcode  = = abort code to send in reply
 */
static void SDO_infoerror (uint32_t abortcode)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b084      	sub	sp, #16
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
   uint8_t MBXout;
   _COEobjdesc *coeres;
   MBXout = ESC_claimbuffer ();
 800fba0:	f7fd fcb2 	bl	800d508 <ESC_claimbuffer>
 800fba4:	4603      	mov	r3, r0
 800fba6:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 800fba8:	7bfb      	ldrb	r3, [r7, #15]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d039      	beq.n	800fc22 <SDO_infoerror+0x8a>
   {
      coeres = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 800fbae:	7bfb      	ldrb	r3, [r7, #15]
 800fbb0:	4a1e      	ldr	r2, [pc, #120]	@ (800fc2c <SDO_infoerror+0x94>)
 800fbb2:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800fbb4:	fb02 f303 	mul.w	r3, r2, r3
 800fbb8:	4a1d      	ldr	r2, [pc, #116]	@ (800fc30 <SDO_infoerror+0x98>)
 800fbba:	4413      	add	r3, r2
 800fbbc:	60bb      	str	r3, [r7, #8]
      coeres->mbxheader.length = htoes (COE_HEADERSIZE);
 800fbbe:	68bb      	ldr	r3, [r7, #8]
 800fbc0:	220a      	movs	r2, #10
 800fbc2:	801a      	strh	r2, [r3, #0]
      coeres->mbxheader.mbxtype = MBXCOE;
 800fbc4:	68ba      	ldr	r2, [r7, #8]
 800fbc6:	7953      	ldrb	r3, [r2, #5]
 800fbc8:	2103      	movs	r1, #3
 800fbca:	f361 0303 	bfi	r3, r1, #0, #4
 800fbce:	7153      	strb	r3, [r2, #5]
      coeres->coeheader.numberservice =
 800fbd0:	68bb      	ldr	r3, [r7, #8]
 800fbd2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800fbd6:	80da      	strh	r2, [r3, #6]
         htoes ((0 & 0x01f) | (COE_SDOINFORMATION << 12));
      /* SDO info error request */
      coeres->infoheader.opcode = COE_INFOERROR;
 800fbd8:	68ba      	ldr	r2, [r7, #8]
 800fbda:	7a13      	ldrb	r3, [r2, #8]
 800fbdc:	2107      	movs	r1, #7
 800fbde:	f361 0306 	bfi	r3, r1, #0, #7
 800fbe2:	7213      	strb	r3, [r2, #8]
      coeres->infoheader.incomplete = 0;
 800fbe4:	68ba      	ldr	r2, [r7, #8]
 800fbe6:	7a13      	ldrb	r3, [r2, #8]
 800fbe8:	f36f 13c7 	bfc	r3, #7, #1
 800fbec:	7213      	strb	r3, [r2, #8]
      coeres->infoheader.reserved = 0x00;
 800fbee:	68bb      	ldr	r3, [r7, #8]
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	725a      	strb	r2, [r3, #9]
      coeres->infoheader.fragmentsleft = 0;
 800fbf4:	68bb      	ldr	r3, [r7, #8]
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	815a      	strh	r2, [r3, #10]
      coeres->index = (uint16_t)htoel (abortcode);
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	b29a      	uxth	r2, r3
 800fbfe:	68bb      	ldr	r3, [r7, #8]
 800fc00:	819a      	strh	r2, [r3, #12]
      coeres->datatype = (uint16_t)(htoel (abortcode) >> 16);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	0c1b      	lsrs	r3, r3, #16
 800fc06:	b29a      	uxth	r2, r3
 800fc08:	68bb      	ldr	r3, [r7, #8]
 800fc0a:	81da      	strh	r2, [r3, #14]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800fc0c:	7bfb      	ldrb	r3, [r7, #15]
 800fc0e:	4a09      	ldr	r2, [pc, #36]	@ (800fc34 <SDO_infoerror+0x9c>)
 800fc10:	2103      	movs	r1, #3
 800fc12:	54d1      	strb	r1, [r2, r3]
      MBXcontrol[0].state = MBXstate_idle;
 800fc14:	4b07      	ldr	r3, [pc, #28]	@ (800fc34 <SDO_infoerror+0x9c>)
 800fc16:	2200      	movs	r2, #0
 800fc18:	701a      	strb	r2, [r3, #0]
      ESCvar.xoe = 0;
 800fc1a:	4b04      	ldr	r3, [pc, #16]	@ (800fc2c <SDO_infoerror+0x94>)
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
   }
}
 800fc22:	bf00      	nop
 800fc24:	3710      	adds	r7, #16
 800fc26:	46bd      	mov	sp, r7
 800fc28:	bd80      	pop	{r7, pc}
 800fc2a:	bf00      	nop
 800fc2c:	24000bb0 	.word	0x24000bb0
 800fc30:	240004ec 	.word	0x240004ec
 800fc34:	24000aec 	.word	0x24000aec

0800fc38 <SDO_getodlist>:

/** Function for handling incoming requested SDO Get OD List, validating the
 * request and sending an response. On error an SDO Info Error will be sent.
 */
static void SDO_getodlist (void)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b086      	sub	sp, #24
 800fc3c:	af00      	add	r7, sp, #0
   uint32_t frags;
   uint8_t MBXout = 0;
 800fc3e:	2300      	movs	r3, #0
 800fc40:	75fb      	strb	r3, [r7, #23]
   uint16_t entries = 0;
 800fc42:	2300      	movs	r3, #0
 800fc44:	82bb      	strh	r3, [r7, #20]
   uint16_t i, n;
   uint16_t *p;
   _COEobjdesc *coel, *coer;

   while (SDOobjects[entries].index != 0xffff)
 800fc46:	e002      	b.n	800fc4e <SDO_getodlist+0x16>
   {
      entries++;
 800fc48:	8abb      	ldrh	r3, [r7, #20]
 800fc4a:	3301      	adds	r3, #1
 800fc4c:	82bb      	strh	r3, [r7, #20]
   while (SDOobjects[entries].index != 0xffff)
 800fc4e:	8abb      	ldrh	r3, [r7, #20]
 800fc50:	4a7a      	ldr	r2, [pc, #488]	@ (800fe3c <SDO_getodlist+0x204>)
 800fc52:	011b      	lsls	r3, r3, #4
 800fc54:	4413      	add	r3, r2
 800fc56:	881b      	ldrh	r3, [r3, #0]
 800fc58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fc5c:	4293      	cmp	r3, r2
 800fc5e:	d1f3      	bne.n	800fc48 <SDO_getodlist+0x10>
   }
   ESCvar.entries = entries;
 800fc60:	4a77      	ldr	r2, [pc, #476]	@ (800fe40 <SDO_getodlist+0x208>)
 800fc62:	8abb      	ldrh	r3, [r7, #20]
 800fc64:	f8a2 3098 	strh.w	r3, [r2, #152]	@ 0x98
   frags = ((uint32_t)(entries << 1) + ODLISTSIZE - 1U);
 800fc68:	8abb      	ldrh	r3, [r7, #20]
 800fc6a:	005a      	lsls	r2, r3, #1
 800fc6c:	4b74      	ldr	r3, [pc, #464]	@ (800fe40 <SDO_getodlist+0x208>)
 800fc6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc70:	885b      	ldrh	r3, [r3, #2]
 800fc72:	f1a3 010e 	sub.w	r1, r3, #14
 800fc76:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800fc7a:	400b      	ands	r3, r1
 800fc7c:	4413      	add	r3, r2
 800fc7e:	3b01      	subs	r3, #1
 800fc80:	60bb      	str	r3, [r7, #8]
   frags /= ODLISTSIZE;
 800fc82:	4b6f      	ldr	r3, [pc, #444]	@ (800fe40 <SDO_getodlist+0x208>)
 800fc84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc86:	885b      	ldrh	r3, [r3, #2]
 800fc88:	f1a3 020e 	sub.w	r2, r3, #14
 800fc8c:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800fc90:	4013      	ands	r3, r2
 800fc92:	68ba      	ldr	r2, [r7, #8]
 800fc94:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc98:	60bb      	str	r3, [r7, #8]
   coer = (_COEobjdesc *) &MBX[0];
 800fc9a:	4b6a      	ldr	r3, [pc, #424]	@ (800fe44 <SDO_getodlist+0x20c>)
 800fc9c:	607b      	str	r3, [r7, #4]
   /* check for unsupported opcodes */
   if (etohs (coer->index) > 0x01)
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	899b      	ldrh	r3, [r3, #12]
 800fca2:	2b01      	cmp	r3, #1
 800fca4:	d903      	bls.n	800fcae <SDO_getodlist+0x76>
   {
      SDO_infoerror (ABORT_UNSUPPORTED);
 800fca6:	4868      	ldr	r0, [pc, #416]	@ (800fe48 <SDO_getodlist+0x210>)
 800fca8:	f7ff ff76 	bl	800fb98 <SDO_infoerror>
 800fcac:	e003      	b.n	800fcb6 <SDO_getodlist+0x7e>
   }
   else
   {
      MBXout = ESC_claimbuffer ();
 800fcae:	f7fd fc2b 	bl	800d508 <ESC_claimbuffer>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	75fb      	strb	r3, [r7, #23]
   }
   if (MBXout)
 800fcb6:	7dfb      	ldrb	r3, [r7, #23]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	f000 80ba 	beq.w	800fe32 <SDO_getodlist+0x1fa>
   {
      coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 800fcbe:	7dfb      	ldrb	r3, [r7, #23]
 800fcc0:	4a5f      	ldr	r2, [pc, #380]	@ (800fe40 <SDO_getodlist+0x208>)
 800fcc2:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800fcc4:	fb02 f303 	mul.w	r3, r2, r3
 800fcc8:	4a5e      	ldr	r2, [pc, #376]	@ (800fe44 <SDO_getodlist+0x20c>)
 800fcca:	4413      	add	r3, r2
 800fccc:	603b      	str	r3, [r7, #0]
      coel->mbxheader.mbxtype = MBXCOE;
 800fcce:	683a      	ldr	r2, [r7, #0]
 800fcd0:	7953      	ldrb	r3, [r2, #5]
 800fcd2:	2103      	movs	r1, #3
 800fcd4:	f361 0303 	bfi	r3, r1, #0, #4
 800fcd8:	7153      	strb	r3, [r2, #5]
      coel->coeheader.numberservice =
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800fce0:	80da      	strh	r2, [r3, #6]
         htoes ((0 & 0x01f) | (COE_SDOINFORMATION << 12));
      coel->infoheader.opcode = COE_GETODLISTRESPONSE;
 800fce2:	683a      	ldr	r2, [r7, #0]
 800fce4:	7a13      	ldrb	r3, [r2, #8]
 800fce6:	2102      	movs	r1, #2
 800fce8:	f361 0306 	bfi	r3, r1, #0, #7
 800fcec:	7213      	strb	r3, [r2, #8]
      /* number of objects request */
      if (etohs (coer->index) == 0x00)
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	899b      	ldrh	r3, [r3, #12]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d13e      	bne.n	800fd74 <SDO_getodlist+0x13c>
      {
         coel->index = htoes (0x00);
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	819a      	strh	r2, [r3, #12]
         coel->infoheader.incomplete = 0;
 800fcfc:	683a      	ldr	r2, [r7, #0]
 800fcfe:	7a13      	ldrb	r3, [r2, #8]
 800fd00:	f36f 13c7 	bfc	r3, #7, #1
 800fd04:	7213      	strb	r3, [r2, #8]
         coel->infoheader.reserved = 0x00;
 800fd06:	683b      	ldr	r3, [r7, #0]
 800fd08:	2200      	movs	r2, #0
 800fd0a:	725a      	strb	r2, [r3, #9]
         coel->infoheader.fragmentsleft = htoes (0);
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	2200      	movs	r2, #0
 800fd10:	815a      	strh	r2, [r3, #10]
         MBXcontrol[0].state = MBXstate_idle;
 800fd12:	4b4e      	ldr	r3, [pc, #312]	@ (800fe4c <SDO_getodlist+0x214>)
 800fd14:	2200      	movs	r2, #0
 800fd16:	701a      	strb	r2, [r3, #0]
         ESCvar.xoe = 0;
 800fd18:	4b49      	ldr	r3, [pc, #292]	@ (800fe40 <SDO_getodlist+0x208>)
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
         ESCvar.frags = frags;
 800fd20:	4a47      	ldr	r2, [pc, #284]	@ (800fe40 <SDO_getodlist+0x208>)
 800fd22:	68bb      	ldr	r3, [r7, #8]
 800fd24:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
         ESCvar.fragsleft = frags - 1;
 800fd28:	68bb      	ldr	r3, [r7, #8]
 800fd2a:	3b01      	subs	r3, #1
 800fd2c:	4a44      	ldr	r2, [pc, #272]	@ (800fe40 <SDO_getodlist+0x208>)
 800fd2e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
         p = &(coel->datatype);
 800fd32:	683b      	ldr	r3, [r7, #0]
 800fd34:	330e      	adds	r3, #14
 800fd36:	60fb      	str	r3, [r7, #12]
         *p = htoes (entries);
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	8aba      	ldrh	r2, [r7, #20]
 800fd3c:	801a      	strh	r2, [r3, #0]
         p++;
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	3302      	adds	r3, #2
 800fd42:	60fb      	str	r3, [r7, #12]
         *p = 0;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	2200      	movs	r2, #0
 800fd48:	801a      	strh	r2, [r3, #0]
         p++;
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	3302      	adds	r3, #2
 800fd4e:	60fb      	str	r3, [r7, #12]
         *p = 0;
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	2200      	movs	r2, #0
 800fd54:	801a      	strh	r2, [r3, #0]
         p++;
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	3302      	adds	r3, #2
 800fd5a:	60fb      	str	r3, [r7, #12]
         *p = 0;
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	2200      	movs	r2, #0
 800fd60:	801a      	strh	r2, [r3, #0]
         p++;
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	3302      	adds	r3, #2
 800fd66:	60fb      	str	r3, [r7, #12]
         *p = 0;
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	801a      	strh	r2, [r3, #0]
         coel->mbxheader.length = htoes (0x08 + (5 << 1));
 800fd6e:	683b      	ldr	r3, [r7, #0]
 800fd70:	2212      	movs	r2, #18
 800fd72:	801a      	strh	r2, [r3, #0]
      }
      /* only return all objects */
      if (etohs (coer->index) == 0x01)
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	899b      	ldrh	r3, [r3, #12]
 800fd78:	2b01      	cmp	r3, #1
 800fd7a:	d156      	bne.n	800fe2a <SDO_getodlist+0x1f2>
      {
         if (frags > 1)
 800fd7c:	68bb      	ldr	r3, [r7, #8]
 800fd7e:	2b01      	cmp	r3, #1
 800fd80:	d912      	bls.n	800fda8 <SDO_getodlist+0x170>
         {
            coel->infoheader.incomplete = 1;
 800fd82:	683a      	ldr	r2, [r7, #0]
 800fd84:	7a13      	ldrb	r3, [r2, #8]
 800fd86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fd8a:	7213      	strb	r3, [r2, #8]
            ESCvar.xoe = MBXCOE + MBXODL;
 800fd8c:	4b2c      	ldr	r3, [pc, #176]	@ (800fe40 <SDO_getodlist+0x208>)
 800fd8e:	2213      	movs	r2, #19
 800fd90:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
            n = ODLISTSIZE >> 1;
 800fd94:	4b2a      	ldr	r3, [pc, #168]	@ (800fe40 <SDO_getodlist+0x208>)
 800fd96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fd98:	885b      	ldrh	r3, [r3, #2]
 800fd9a:	3b0e      	subs	r3, #14
 800fd9c:	085b      	lsrs	r3, r3, #1
 800fd9e:	b29b      	uxth	r3, r3
 800fda0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800fda4:	823b      	strh	r3, [r7, #16]
 800fda6:	e00d      	b.n	800fdc4 <SDO_getodlist+0x18c>
         }
         else
         {
            coel->infoheader.incomplete = 0;
 800fda8:	683a      	ldr	r2, [r7, #0]
 800fdaa:	7a13      	ldrb	r3, [r2, #8]
 800fdac:	f36f 13c7 	bfc	r3, #7, #1
 800fdb0:	7213      	strb	r3, [r2, #8]
            MBXcontrol[0].state = MBXstate_idle;
 800fdb2:	4b26      	ldr	r3, [pc, #152]	@ (800fe4c <SDO_getodlist+0x214>)
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	701a      	strb	r2, [r3, #0]
            ESCvar.xoe = 0;
 800fdb8:	4b21      	ldr	r3, [pc, #132]	@ (800fe40 <SDO_getodlist+0x208>)
 800fdba:	2200      	movs	r2, #0
 800fdbc:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
            n = entries;
 800fdc0:	8abb      	ldrh	r3, [r7, #20]
 800fdc2:	823b      	strh	r3, [r7, #16]
         }
         coel->infoheader.reserved = 0x00;
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	725a      	strb	r2, [r3, #9]
         ESCvar.frags = frags;
 800fdca:	4a1d      	ldr	r2, [pc, #116]	@ (800fe40 <SDO_getodlist+0x208>)
 800fdcc:	68bb      	ldr	r3, [r7, #8]
 800fdce:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
         ESCvar.fragsleft = frags - 1;
 800fdd2:	68bb      	ldr	r3, [r7, #8]
 800fdd4:	3b01      	subs	r3, #1
 800fdd6:	4a1a      	ldr	r2, [pc, #104]	@ (800fe40 <SDO_getodlist+0x208>)
 800fdd8:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
         coel->infoheader.fragmentsleft = htoes (ESCvar.fragsleft);
 800fddc:	4b18      	ldr	r3, [pc, #96]	@ (800fe40 <SDO_getodlist+0x208>)
 800fdde:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fde2:	b29a      	uxth	r2, r3
 800fde4:	683b      	ldr	r3, [r7, #0]
 800fde6:	815a      	strh	r2, [r3, #10]
         coel->index = htoes (0x01);
 800fde8:	683b      	ldr	r3, [r7, #0]
 800fdea:	2201      	movs	r2, #1
 800fdec:	819a      	strh	r2, [r3, #12]

         p = &(coel->datatype);
 800fdee:	683b      	ldr	r3, [r7, #0]
 800fdf0:	330e      	adds	r3, #14
 800fdf2:	60fb      	str	r3, [r7, #12]
         for (i = 0; i < n; i++)
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	827b      	strh	r3, [r7, #18]
 800fdf8:	e00c      	b.n	800fe14 <SDO_getodlist+0x1dc>
         {
            *p = htoes (SDOobjects[i].index);
 800fdfa:	8a7b      	ldrh	r3, [r7, #18]
 800fdfc:	4a0f      	ldr	r2, [pc, #60]	@ (800fe3c <SDO_getodlist+0x204>)
 800fdfe:	011b      	lsls	r3, r3, #4
 800fe00:	4413      	add	r3, r2
 800fe02:	881a      	ldrh	r2, [r3, #0]
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	801a      	strh	r2, [r3, #0]
            p++;
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	3302      	adds	r3, #2
 800fe0c:	60fb      	str	r3, [r7, #12]
         for (i = 0; i < n; i++)
 800fe0e:	8a7b      	ldrh	r3, [r7, #18]
 800fe10:	3301      	adds	r3, #1
 800fe12:	827b      	strh	r3, [r7, #18]
 800fe14:	8a7a      	ldrh	r2, [r7, #18]
 800fe16:	8a3b      	ldrh	r3, [r7, #16]
 800fe18:	429a      	cmp	r2, r3
 800fe1a:	d3ee      	bcc.n	800fdfa <SDO_getodlist+0x1c2>
         }

         coel->mbxheader.length = htoes (0x08 + (n << 1));
 800fe1c:	8a3b      	ldrh	r3, [r7, #16]
 800fe1e:	005b      	lsls	r3, r3, #1
 800fe20:	b29b      	uxth	r3, r3
 800fe22:	3308      	adds	r3, #8
 800fe24:	b29a      	uxth	r2, r3
 800fe26:	683b      	ldr	r3, [r7, #0]
 800fe28:	801a      	strh	r2, [r3, #0]
      }
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800fe2a:	7dfb      	ldrb	r3, [r7, #23]
 800fe2c:	4a07      	ldr	r2, [pc, #28]	@ (800fe4c <SDO_getodlist+0x214>)
 800fe2e:	2103      	movs	r1, #3
 800fe30:	54d1      	strb	r1, [r2, r3]
   }
}
 800fe32:	bf00      	nop
 800fe34:	3718      	adds	r7, #24
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bd80      	pop	{r7, pc}
 800fe3a:	bf00      	nop
 800fe3c:	08012848 	.word	0x08012848
 800fe40:	24000bb0 	.word	0x24000bb0
 800fe44:	240004ec 	.word	0x240004ec
 800fe48:	06010000 	.word	0x06010000
 800fe4c:	24000aec 	.word	0x24000aec

0800fe50 <SDO_getodlistcont>:
/** Function for continuing sending left overs from previous requested
 * SDO Get OD List, validating the request and sending an response.
 */
static void SDO_getodlistcont (void)
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b086      	sub	sp, #24
 800fe54:	af00      	add	r7, sp, #0
   uint8_t MBXout;
   uint16_t i, n, s;
   uint16_t *p;
   _COEobjdesc *coel;

   MBXout = ESC_claimbuffer ();
 800fe56:	f7fd fb57 	bl	800d508 <ESC_claimbuffer>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	73fb      	strb	r3, [r7, #15]
   if (MBXout)
 800fe5e:	7bfb      	ldrb	r3, [r7, #15]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	f000 8088 	beq.w	800ff76 <SDO_getodlistcont+0x126>
   {
      coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 800fe66:	7bfb      	ldrb	r3, [r7, #15]
 800fe68:	4a45      	ldr	r2, [pc, #276]	@ (800ff80 <SDO_getodlistcont+0x130>)
 800fe6a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800fe6c:	fb02 f303 	mul.w	r3, r2, r3
 800fe70:	4a44      	ldr	r2, [pc, #272]	@ (800ff84 <SDO_getodlistcont+0x134>)
 800fe72:	4413      	add	r3, r2
 800fe74:	60bb      	str	r3, [r7, #8]
      coel->mbxheader.mbxtype = MBXCOE;
 800fe76:	68ba      	ldr	r2, [r7, #8]
 800fe78:	7953      	ldrb	r3, [r2, #5]
 800fe7a:	2103      	movs	r1, #3
 800fe7c:	f361 0303 	bfi	r3, r1, #0, #4
 800fe80:	7153      	strb	r3, [r2, #5]
      coel->coeheader.numberservice =
 800fe82:	68bb      	ldr	r3, [r7, #8]
 800fe84:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800fe88:	80da      	strh	r2, [r3, #6]
         htoes (COE_SDOINFORMATION << 12);
      coel->infoheader.opcode = COE_GETODLISTRESPONSE;
 800fe8a:	68ba      	ldr	r2, [r7, #8]
 800fe8c:	7a13      	ldrb	r3, [r2, #8]
 800fe8e:	2102      	movs	r1, #2
 800fe90:	f361 0306 	bfi	r3, r1, #0, #7
 800fe94:	7213      	strb	r3, [r2, #8]
      s = (uint16_t)((ESCvar.frags - ESCvar.fragsleft) * (ODLISTSIZE >> 1));
 800fe96:	4b3a      	ldr	r3, [pc, #232]	@ (800ff80 <SDO_getodlistcont+0x130>)
 800fe98:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800fe9c:	4b38      	ldr	r3, [pc, #224]	@ (800ff80 <SDO_getodlistcont+0x130>)
 800fe9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fea2:	1ad3      	subs	r3, r2, r3
 800fea4:	b29a      	uxth	r2, r3
 800fea6:	4b36      	ldr	r3, [pc, #216]	@ (800ff80 <SDO_getodlistcont+0x130>)
 800fea8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800feaa:	885b      	ldrh	r3, [r3, #2]
 800feac:	3b0e      	subs	r3, #14
 800feae:	085b      	lsrs	r3, r3, #1
 800feb0:	b29b      	uxth	r3, r3
 800feb2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800feb6:	b29b      	uxth	r3, r3
 800feb8:	fb12 f303 	smulbb	r3, r2, r3
 800febc:	80fb      	strh	r3, [r7, #6]
      if (ESCvar.fragsleft > 1)
 800febe:	4b30      	ldr	r3, [pc, #192]	@ (800ff80 <SDO_getodlistcont+0x130>)
 800fec0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fec4:	2b01      	cmp	r3, #1
 800fec6:	d911      	bls.n	800feec <SDO_getodlistcont+0x9c>
      {
         coel->infoheader.incomplete = 1;
 800fec8:	68ba      	ldr	r2, [r7, #8]
 800feca:	7a13      	ldrb	r3, [r2, #8]
 800fecc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fed0:	7213      	strb	r3, [r2, #8]
         n = (uint16_t)(s + (ODLISTSIZE >> 1));
 800fed2:	4b2b      	ldr	r3, [pc, #172]	@ (800ff80 <SDO_getodlistcont+0x130>)
 800fed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fed6:	885b      	ldrh	r3, [r3, #2]
 800fed8:	3b0e      	subs	r3, #14
 800feda:	085b      	lsrs	r3, r3, #1
 800fedc:	b29b      	uxth	r3, r3
 800fede:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800fee2:	b29a      	uxth	r2, r3
 800fee4:	88fb      	ldrh	r3, [r7, #6]
 800fee6:	4413      	add	r3, r2
 800fee8:	82bb      	strh	r3, [r7, #20]
 800feea:	e00f      	b.n	800ff0c <SDO_getodlistcont+0xbc>
      }
      else
      {
         coel->infoheader.incomplete = 0;
 800feec:	68ba      	ldr	r2, [r7, #8]
 800feee:	7a13      	ldrb	r3, [r2, #8]
 800fef0:	f36f 13c7 	bfc	r3, #7, #1
 800fef4:	7213      	strb	r3, [r2, #8]
         MBXcontrol[0].state = MBXstate_idle;
 800fef6:	4b24      	ldr	r3, [pc, #144]	@ (800ff88 <SDO_getodlistcont+0x138>)
 800fef8:	2200      	movs	r2, #0
 800fefa:	701a      	strb	r2, [r3, #0]
         ESCvar.xoe = 0;
 800fefc:	4b20      	ldr	r3, [pc, #128]	@ (800ff80 <SDO_getodlistcont+0x130>)
 800fefe:	2200      	movs	r2, #0
 800ff00:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
         n = ESCvar.entries;
 800ff04:	4b1e      	ldr	r3, [pc, #120]	@ (800ff80 <SDO_getodlistcont+0x130>)
 800ff06:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 800ff0a:	82bb      	strh	r3, [r7, #20]
      }
      coel->infoheader.reserved = 0x00;
 800ff0c:	68bb      	ldr	r3, [r7, #8]
 800ff0e:	2200      	movs	r2, #0
 800ff10:	725a      	strb	r2, [r3, #9]
      ESCvar.fragsleft--;
 800ff12:	4b1b      	ldr	r3, [pc, #108]	@ (800ff80 <SDO_getodlistcont+0x130>)
 800ff14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ff18:	3b01      	subs	r3, #1
 800ff1a:	4a19      	ldr	r2, [pc, #100]	@ (800ff80 <SDO_getodlistcont+0x130>)
 800ff1c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
      coel->infoheader.fragmentsleft = htoes ((uint16_t)ESCvar.fragsleft);
 800ff20:	4b17      	ldr	r3, [pc, #92]	@ (800ff80 <SDO_getodlistcont+0x130>)
 800ff22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ff26:	b29a      	uxth	r2, r3
 800ff28:	68bb      	ldr	r3, [r7, #8]
 800ff2a:	815a      	strh	r2, [r3, #10]
      /* pointer 2 bytes back to exclude index */
      p = &(coel->index);
 800ff2c:	68bb      	ldr	r3, [r7, #8]
 800ff2e:	330c      	adds	r3, #12
 800ff30:	613b      	str	r3, [r7, #16]
      for (i = s; i < n; i++)
 800ff32:	88fb      	ldrh	r3, [r7, #6]
 800ff34:	82fb      	strh	r3, [r7, #22]
 800ff36:	e00c      	b.n	800ff52 <SDO_getodlistcont+0x102>
      {
         *p = htoes (SDOobjects[i].index);
 800ff38:	8afb      	ldrh	r3, [r7, #22]
 800ff3a:	4a14      	ldr	r2, [pc, #80]	@ (800ff8c <SDO_getodlistcont+0x13c>)
 800ff3c:	011b      	lsls	r3, r3, #4
 800ff3e:	4413      	add	r3, r2
 800ff40:	881a      	ldrh	r2, [r3, #0]
 800ff42:	693b      	ldr	r3, [r7, #16]
 800ff44:	801a      	strh	r2, [r3, #0]
         p++;
 800ff46:	693b      	ldr	r3, [r7, #16]
 800ff48:	3302      	adds	r3, #2
 800ff4a:	613b      	str	r3, [r7, #16]
      for (i = s; i < n; i++)
 800ff4c:	8afb      	ldrh	r3, [r7, #22]
 800ff4e:	3301      	adds	r3, #1
 800ff50:	82fb      	strh	r3, [r7, #22]
 800ff52:	8afa      	ldrh	r2, [r7, #22]
 800ff54:	8abb      	ldrh	r3, [r7, #20]
 800ff56:	429a      	cmp	r2, r3
 800ff58:	d3ee      	bcc.n	800ff38 <SDO_getodlistcont+0xe8>
      }
      coel->mbxheader.length = htoes (0x06 + ((n - s) << 1));
 800ff5a:	8aba      	ldrh	r2, [r7, #20]
 800ff5c:	88fb      	ldrh	r3, [r7, #6]
 800ff5e:	1ad3      	subs	r3, r2, r3
 800ff60:	b29b      	uxth	r3, r3
 800ff62:	005b      	lsls	r3, r3, #1
 800ff64:	b29b      	uxth	r3, r3
 800ff66:	3306      	adds	r3, #6
 800ff68:	b29a      	uxth	r2, r3
 800ff6a:	68bb      	ldr	r3, [r7, #8]
 800ff6c:	801a      	strh	r2, [r3, #0]
      MBXcontrol[MBXout].state = MBXstate_outreq;
 800ff6e:	7bfb      	ldrb	r3, [r7, #15]
 800ff70:	4a05      	ldr	r2, [pc, #20]	@ (800ff88 <SDO_getodlistcont+0x138>)
 800ff72:	2103      	movs	r1, #3
 800ff74:	54d1      	strb	r1, [r2, r3]
   }
}
 800ff76:	bf00      	nop
 800ff78:	3718      	adds	r7, #24
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}
 800ff7e:	bf00      	nop
 800ff80:	24000bb0 	.word	0x24000bb0
 800ff84:	240004ec 	.word	0x240004ec
 800ff88:	24000aec 	.word	0x24000aec
 800ff8c:	08012848 	.word	0x08012848

0800ff90 <SDO_getod>:
/** Function for handling incoming requested SDO Get Object Description,
 * validating the request and sending an response. On error an
 * SDO Info Error will be sent.
 */
static void SDO_getod (void)
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b08c      	sub	sp, #48	@ 0x30
 800ff94:	af00      	add	r7, sp, #0
   uint8_t MBXout;
   uint16_t index;
   int32_t nidx;
   uint8_t *d;
   const uint8_t *s;
   uint8_t n = 0;
 800ff96:	2300      	movs	r3, #0
 800ff98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
   _COEobjdesc *coer, *coel;
   coer = (_COEobjdesc *) &MBX[0];
 800ff9c:	4b74      	ldr	r3, [pc, #464]	@ (8010170 <SDO_getod+0x1e0>)
 800ff9e:	623b      	str	r3, [r7, #32]
   index = etohs (coer->index);
 800ffa0:	6a3b      	ldr	r3, [r7, #32]
 800ffa2:	899b      	ldrh	r3, [r3, #12]
 800ffa4:	83fb      	strh	r3, [r7, #30]
   nidx = SDO_findobject (index);
 800ffa6:	8bfb      	ldrh	r3, [r7, #30]
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	f7fe fa91 	bl	800e4d0 <SDO_findobject>
 800ffae:	61b8      	str	r0, [r7, #24]
   if (nidx >= 0)
 800ffb0:	69bb      	ldr	r3, [r7, #24]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	f2c0 80d4 	blt.w	8010160 <SDO_getod+0x1d0>
   {
      MBXout = ESC_claimbuffer ();
 800ffb8:	f7fd faa6 	bl	800d508 <ESC_claimbuffer>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	75fb      	strb	r3, [r7, #23]
      if (MBXout)
 800ffc0:	7dfb      	ldrb	r3, [r7, #23]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	f000 80cf 	beq.w	8010166 <SDO_getod+0x1d6>
      {
         coel = (_COEobjdesc *) &MBX[MBXout * ESC_MBXSIZE];
 800ffc8:	7dfb      	ldrb	r3, [r7, #23]
 800ffca:	4a6a      	ldr	r2, [pc, #424]	@ (8010174 <SDO_getod+0x1e4>)
 800ffcc:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800ffce:	fb02 f303 	mul.w	r3, r2, r3
 800ffd2:	4a67      	ldr	r2, [pc, #412]	@ (8010170 <SDO_getod+0x1e0>)
 800ffd4:	4413      	add	r3, r2
 800ffd6:	613b      	str	r3, [r7, #16]
         coel->mbxheader.mbxtype = MBXCOE;
 800ffd8:	693a      	ldr	r2, [r7, #16]
 800ffda:	7953      	ldrb	r3, [r2, #5]
 800ffdc:	2103      	movs	r1, #3
 800ffde:	f361 0303 	bfi	r3, r1, #0, #4
 800ffe2:	7153      	strb	r3, [r2, #5]
         coel->coeheader.numberservice =
 800ffe4:	693b      	ldr	r3, [r7, #16]
 800ffe6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800ffea:	80da      	strh	r2, [r3, #6]
            htoes (COE_SDOINFORMATION << 12);
         coel->infoheader.opcode = COE_GETODRESPONSE;
 800ffec:	693a      	ldr	r2, [r7, #16]
 800ffee:	7a13      	ldrb	r3, [r2, #8]
 800fff0:	2104      	movs	r1, #4
 800fff2:	f361 0306 	bfi	r3, r1, #0, #7
 800fff6:	7213      	strb	r3, [r2, #8]
         coel->infoheader.incomplete = 0;
 800fff8:	693a      	ldr	r2, [r7, #16]
 800fffa:	7a13      	ldrb	r3, [r2, #8]
 800fffc:	f36f 13c7 	bfc	r3, #7, #1
 8010000:	7213      	strb	r3, [r2, #8]
         coel->infoheader.reserved = 0x00;
 8010002:	693b      	ldr	r3, [r7, #16]
 8010004:	2200      	movs	r2, #0
 8010006:	725a      	strb	r2, [r3, #9]
         coel->infoheader.fragmentsleft = htoes (0);
 8010008:	693b      	ldr	r3, [r7, #16]
 801000a:	2200      	movs	r2, #0
 801000c:	815a      	strh	r2, [r3, #10]
         coel->index = htoes (index);
 801000e:	693b      	ldr	r3, [r7, #16]
 8010010:	8bfa      	ldrh	r2, [r7, #30]
 8010012:	819a      	strh	r2, [r3, #12]
         if (SDOobjects[nidx].objtype == OTYPE_VAR)
 8010014:	4a58      	ldr	r2, [pc, #352]	@ (8010178 <SDO_getod+0x1e8>)
 8010016:	69bb      	ldr	r3, [r7, #24]
 8010018:	011b      	lsls	r3, r3, #4
 801001a:	4413      	add	r3, r2
 801001c:	3302      	adds	r3, #2
 801001e:	881b      	ldrh	r3, [r3, #0]
 8010020:	2b07      	cmp	r3, #7
 8010022:	d120      	bne.n	8010066 <SDO_getod+0xd6>
         {
            int32_t nsub = SDO_findsubindex (nidx, 0);
 8010024:	2100      	movs	r1, #0
 8010026:	69b8      	ldr	r0, [r7, #24]
 8010028:	f7fe f9f4 	bl	800e414 <SDO_findsubindex>
 801002c:	4603      	mov	r3, r0
 801002e:	607b      	str	r3, [r7, #4]
            const _objd *objd = SDOobjects[nidx].objdesc;
 8010030:	4a51      	ldr	r2, [pc, #324]	@ (8010178 <SDO_getod+0x1e8>)
 8010032:	69bb      	ldr	r3, [r7, #24]
 8010034:	011b      	lsls	r3, r3, #4
 8010036:	4413      	add	r3, r2
 8010038:	330c      	adds	r3, #12
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	603b      	str	r3, [r7, #0]
            coel->datatype = htoes ((objd + nsub)->datatype);
 801003e:	687a      	ldr	r2, [r7, #4]
 8010040:	4613      	mov	r3, r2
 8010042:	009b      	lsls	r3, r3, #2
 8010044:	4413      	add	r3, r2
 8010046:	009b      	lsls	r3, r3, #2
 8010048:	461a      	mov	r2, r3
 801004a:	683b      	ldr	r3, [r7, #0]
 801004c:	4413      	add	r3, r2
 801004e:	885a      	ldrh	r2, [r3, #2]
 8010050:	693b      	ldr	r3, [r7, #16]
 8010052:	81da      	strh	r2, [r3, #14]
            coel->maxsub = SDOobjects[nidx].maxsub;
 8010054:	4a48      	ldr	r2, [pc, #288]	@ (8010178 <SDO_getod+0x1e8>)
 8010056:	69bb      	ldr	r3, [r7, #24]
 8010058:	011b      	lsls	r3, r3, #4
 801005a:	4413      	add	r3, r2
 801005c:	3304      	adds	r3, #4
 801005e:	781a      	ldrb	r2, [r3, #0]
 8010060:	693b      	ldr	r3, [r7, #16]
 8010062:	741a      	strb	r2, [r3, #16]
 8010064:	e037      	b.n	80100d6 <SDO_getod+0x146>
         }
         else if (SDOobjects[nidx].objtype == OTYPE_ARRAY)
 8010066:	4a44      	ldr	r2, [pc, #272]	@ (8010178 <SDO_getod+0x1e8>)
 8010068:	69bb      	ldr	r3, [r7, #24]
 801006a:	011b      	lsls	r3, r3, #4
 801006c:	4413      	add	r3, r2
 801006e:	3302      	adds	r3, #2
 8010070:	881b      	ldrh	r3, [r3, #0]
 8010072:	2b08      	cmp	r3, #8
 8010074:	d122      	bne.n	80100bc <SDO_getod+0x12c>
         {
            int32_t nsub = SDO_findsubindex (nidx, 0);
 8010076:	2100      	movs	r1, #0
 8010078:	69b8      	ldr	r0, [r7, #24]
 801007a:	f7fe f9cb 	bl	800e414 <SDO_findsubindex>
 801007e:	4603      	mov	r3, r0
 8010080:	60fb      	str	r3, [r7, #12]
            const _objd *objd = SDOobjects[nidx].objdesc;
 8010082:	4a3d      	ldr	r2, [pc, #244]	@ (8010178 <SDO_getod+0x1e8>)
 8010084:	69bb      	ldr	r3, [r7, #24]
 8010086:	011b      	lsls	r3, r3, #4
 8010088:	4413      	add	r3, r2
 801008a:	330c      	adds	r3, #12
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	60bb      	str	r3, [r7, #8]
            coel->datatype = htoes ((objd + nsub)->datatype);
 8010090:	68fa      	ldr	r2, [r7, #12]
 8010092:	4613      	mov	r3, r2
 8010094:	009b      	lsls	r3, r3, #2
 8010096:	4413      	add	r3, r2
 8010098:	009b      	lsls	r3, r3, #2
 801009a:	461a      	mov	r2, r3
 801009c:	68bb      	ldr	r3, [r7, #8]
 801009e:	4413      	add	r3, r2
 80100a0:	885a      	ldrh	r2, [r3, #2]
 80100a2:	693b      	ldr	r3, [r7, #16]
 80100a4:	81da      	strh	r2, [r3, #14]
            coel->maxsub = (uint8_t)SDOobjects[nidx].objdesc->value;
 80100a6:	4a34      	ldr	r2, [pc, #208]	@ (8010178 <SDO_getod+0x1e8>)
 80100a8:	69bb      	ldr	r3, [r7, #24]
 80100aa:	011b      	lsls	r3, r3, #4
 80100ac:	4413      	add	r3, r2
 80100ae:	330c      	adds	r3, #12
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	68db      	ldr	r3, [r3, #12]
 80100b4:	b2da      	uxtb	r2, r3
 80100b6:	693b      	ldr	r3, [r7, #16]
 80100b8:	741a      	strb	r2, [r3, #16]
 80100ba:	e00c      	b.n	80100d6 <SDO_getod+0x146>
         }
         else
         {
            coel->datatype = htoes (0);
 80100bc:	693b      	ldr	r3, [r7, #16]
 80100be:	2200      	movs	r2, #0
 80100c0:	81da      	strh	r2, [r3, #14]
            coel->maxsub = (uint8_t)SDOobjects[nidx].objdesc->value;
 80100c2:	4a2d      	ldr	r2, [pc, #180]	@ (8010178 <SDO_getod+0x1e8>)
 80100c4:	69bb      	ldr	r3, [r7, #24]
 80100c6:	011b      	lsls	r3, r3, #4
 80100c8:	4413      	add	r3, r2
 80100ca:	330c      	adds	r3, #12
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	68db      	ldr	r3, [r3, #12]
 80100d0:	b2da      	uxtb	r2, r3
 80100d2:	693b      	ldr	r3, [r7, #16]
 80100d4:	741a      	strb	r2, [r3, #16]
         }
         coel->objectcode = (uint8_t)SDOobjects[nidx].objtype;
 80100d6:	4a28      	ldr	r2, [pc, #160]	@ (8010178 <SDO_getod+0x1e8>)
 80100d8:	69bb      	ldr	r3, [r7, #24]
 80100da:	011b      	lsls	r3, r3, #4
 80100dc:	4413      	add	r3, r2
 80100de:	3302      	adds	r3, #2
 80100e0:	881b      	ldrh	r3, [r3, #0]
 80100e2:	b2da      	uxtb	r2, r3
 80100e4:	693b      	ldr	r3, [r7, #16]
 80100e6:	745a      	strb	r2, [r3, #17]
         s = (uint8_t *) SDOobjects[nidx].name;
 80100e8:	4a23      	ldr	r2, [pc, #140]	@ (8010178 <SDO_getod+0x1e8>)
 80100ea:	69bb      	ldr	r3, [r7, #24]
 80100ec:	011b      	lsls	r3, r3, #4
 80100ee:	4413      	add	r3, r2
 80100f0:	3308      	adds	r3, #8
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	62bb      	str	r3, [r7, #40]	@ 0x28
         d = (uint8_t *) &(coel->name);
 80100f6:	693b      	ldr	r3, [r7, #16]
 80100f8:	3312      	adds	r3, #18
 80100fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
         while (*s && (n < (ESC_MBXDSIZE - 0x0c)))
 80100fc:	e00e      	b.n	801011c <SDO_getod+0x18c>
         {
            *d = *s;
 80100fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010100:	781a      	ldrb	r2, [r3, #0]
 8010102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010104:	701a      	strb	r2, [r3, #0]
            n++;
 8010106:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801010a:	3301      	adds	r3, #1
 801010c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            s++;
 8010110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010112:	3301      	adds	r3, #1
 8010114:	62bb      	str	r3, [r7, #40]	@ 0x28
            d++;
 8010116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010118:	3301      	adds	r3, #1
 801011a:	62fb      	str	r3, [r7, #44]	@ 0x2c
         while (*s && (n < (ESC_MBXDSIZE - 0x0c)))
 801011c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801011e:	781b      	ldrb	r3, [r3, #0]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d006      	beq.n	8010132 <SDO_getod+0x1a2>
 8010124:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8010128:	4b12      	ldr	r3, [pc, #72]	@ (8010174 <SDO_getod+0x1e4>)
 801012a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801012c:	3b12      	subs	r3, #18
 801012e:	429a      	cmp	r2, r3
 8010130:	d3e5      	bcc.n	80100fe <SDO_getod+0x16e>
         }
         *d = *s;
 8010132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010134:	781a      	ldrb	r2, [r3, #0]
 8010136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010138:	701a      	strb	r2, [r3, #0]
         coel->mbxheader.length = htoes (0x0C + n);
 801013a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801013e:	b29b      	uxth	r3, r3
 8010140:	330c      	adds	r3, #12
 8010142:	b29a      	uxth	r2, r3
 8010144:	693b      	ldr	r3, [r7, #16]
 8010146:	801a      	strh	r2, [r3, #0]
         MBXcontrol[MBXout].state = MBXstate_outreq;
 8010148:	7dfb      	ldrb	r3, [r7, #23]
 801014a:	4a0c      	ldr	r2, [pc, #48]	@ (801017c <SDO_getod+0x1ec>)
 801014c:	2103      	movs	r1, #3
 801014e:	54d1      	strb	r1, [r2, r3]
         MBXcontrol[0].state = MBXstate_idle;
 8010150:	4b0a      	ldr	r3, [pc, #40]	@ (801017c <SDO_getod+0x1ec>)
 8010152:	2200      	movs	r2, #0
 8010154:	701a      	strb	r2, [r3, #0]
         ESCvar.xoe = 0;
 8010156:	4b07      	ldr	r3, [pc, #28]	@ (8010174 <SDO_getod+0x1e4>)
 8010158:	2200      	movs	r2, #0
 801015a:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
   }
   else
   {
      SDO_infoerror (ABORT_NOOBJECT);
   }
}
 801015e:	e002      	b.n	8010166 <SDO_getod+0x1d6>
      SDO_infoerror (ABORT_NOOBJECT);
 8010160:	4807      	ldr	r0, [pc, #28]	@ (8010180 <SDO_getod+0x1f0>)
 8010162:	f7ff fd19 	bl	800fb98 <SDO_infoerror>
}
 8010166:	bf00      	nop
 8010168:	3730      	adds	r7, #48	@ 0x30
 801016a:	46bd      	mov	sp, r7
 801016c:	bd80      	pop	{r7, pc}
 801016e:	bf00      	nop
 8010170:	240004ec 	.word	0x240004ec
 8010174:	24000bb0 	.word	0x24000bb0
 8010178:	08012848 	.word	0x08012848
 801017c:	24000aec 	.word	0x24000aec
 8010180:	06020000 	.word	0x06020000

08010184 <SDO_geted>:
/** Function for handling incoming requested SDO Get Entry Description,
 * validating the request and sending an response. On error an
 * SDO Info Error will be sent.
 */
static void SDO_geted (void)
{
 8010184:	b580      	push	{r7, lr}
 8010186:	b08a      	sub	sp, #40	@ 0x28
 8010188:	af00      	add	r7, sp, #0
   int16_t nsub;
   uint8_t subindex;
   uint8_t *d;
   const uint8_t *s;
   const _objd *objd;
   uint8_t n = 0;
 801018a:	2300      	movs	r3, #0
 801018c:	77fb      	strb	r3, [r7, #31]
   _COEentdesc *coer, *coel;
   coer = (_COEentdesc *) &MBX[0];
 801018e:	4b65      	ldr	r3, [pc, #404]	@ (8010324 <SDO_geted+0x1a0>)
 8010190:	61bb      	str	r3, [r7, #24]
   index = etohs (coer->index);
 8010192:	69bb      	ldr	r3, [r7, #24]
 8010194:	7b1a      	ldrb	r2, [r3, #12]
 8010196:	7b5b      	ldrb	r3, [r3, #13]
 8010198:	021b      	lsls	r3, r3, #8
 801019a:	4313      	orrs	r3, r2
 801019c:	82fb      	strh	r3, [r7, #22]
   subindex = coer->subindex;
 801019e:	69bb      	ldr	r3, [r7, #24]
 80101a0:	7b9b      	ldrb	r3, [r3, #14]
 80101a2:	757b      	strb	r3, [r7, #21]
   nidx = SDO_findobject (index);
 80101a4:	8afb      	ldrh	r3, [r7, #22]
 80101a6:	4618      	mov	r0, r3
 80101a8:	f7fe f992 	bl	800e4d0 <SDO_findobject>
 80101ac:	6138      	str	r0, [r7, #16]
   if (nidx >= 0)
 80101ae:	693b      	ldr	r3, [r7, #16]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	f2c0 80b0 	blt.w	8010316 <SDO_geted+0x192>
   {
      nsub = SDO_findsubindex (nidx, subindex);
 80101b6:	7d7b      	ldrb	r3, [r7, #21]
 80101b8:	4619      	mov	r1, r3
 80101ba:	6938      	ldr	r0, [r7, #16]
 80101bc:	f7fe f92a 	bl	800e414 <SDO_findsubindex>
 80101c0:	4603      	mov	r3, r0
 80101c2:	81fb      	strh	r3, [r7, #14]
      if (nsub >= 0)
 80101c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	f2c0 80a0 	blt.w	801030e <SDO_geted+0x18a>
      {
         objd = SDOobjects[nidx].objdesc;
 80101ce:	4a56      	ldr	r2, [pc, #344]	@ (8010328 <SDO_geted+0x1a4>)
 80101d0:	693b      	ldr	r3, [r7, #16]
 80101d2:	011b      	lsls	r3, r3, #4
 80101d4:	4413      	add	r3, r2
 80101d6:	330c      	adds	r3, #12
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	60bb      	str	r3, [r7, #8]
         MBXout = ESC_claimbuffer ();
 80101dc:	f7fd f994 	bl	800d508 <ESC_claimbuffer>
 80101e0:	4603      	mov	r3, r0
 80101e2:	71fb      	strb	r3, [r7, #7]
         if (MBXout)
 80101e4:	79fb      	ldrb	r3, [r7, #7]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	f000 8098 	beq.w	801031c <SDO_geted+0x198>
         {
            coel = (_COEentdesc *) &MBX[MBXout * ESC_MBXSIZE];
 80101ec:	79fb      	ldrb	r3, [r7, #7]
 80101ee:	4a4f      	ldr	r2, [pc, #316]	@ (801032c <SDO_geted+0x1a8>)
 80101f0:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80101f2:	fb02 f303 	mul.w	r3, r2, r3
 80101f6:	4a4b      	ldr	r2, [pc, #300]	@ (8010324 <SDO_geted+0x1a0>)
 80101f8:	4413      	add	r3, r2
 80101fa:	603b      	str	r3, [r7, #0]
            coel->mbxheader.mbxtype = MBXCOE;
 80101fc:	683a      	ldr	r2, [r7, #0]
 80101fe:	7953      	ldrb	r3, [r2, #5]
 8010200:	2103      	movs	r1, #3
 8010202:	f361 0303 	bfi	r3, r1, #0, #4
 8010206:	7153      	strb	r3, [r2, #5]
            coel->coeheader.numberservice =
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	2200      	movs	r2, #0
 801020c:	719a      	strb	r2, [r3, #6]
 801020e:	2200      	movs	r2, #0
 8010210:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8010214:	71da      	strb	r2, [r3, #7]
               htoes ((0 & 0x01f) | (COE_SDOINFORMATION << 12));
            coel->infoheader.opcode = COE_ENTRYDESCRIPTIONRESPONSE;
 8010216:	683a      	ldr	r2, [r7, #0]
 8010218:	7a13      	ldrb	r3, [r2, #8]
 801021a:	2106      	movs	r1, #6
 801021c:	f361 0306 	bfi	r3, r1, #0, #7
 8010220:	7213      	strb	r3, [r2, #8]
            coel->infoheader.incomplete = 0;
 8010222:	683a      	ldr	r2, [r7, #0]
 8010224:	7a13      	ldrb	r3, [r2, #8]
 8010226:	f36f 13c7 	bfc	r3, #7, #1
 801022a:	7213      	strb	r3, [r2, #8]
            coel->infoheader.reserved = 0x00;
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	2200      	movs	r2, #0
 8010230:	725a      	strb	r2, [r3, #9]
            coel->infoheader.fragmentsleft = htoes (0);
 8010232:	683b      	ldr	r3, [r7, #0]
 8010234:	2200      	movs	r2, #0
 8010236:	729a      	strb	r2, [r3, #10]
 8010238:	2200      	movs	r2, #0
 801023a:	72da      	strb	r2, [r3, #11]
            coel->index = htoes (index);
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	8afa      	ldrh	r2, [r7, #22]
 8010240:	819a      	strh	r2, [r3, #12]
            coel->subindex = subindex;
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	7d7a      	ldrb	r2, [r7, #21]
 8010246:	739a      	strb	r2, [r3, #14]
            coel->valueinfo = COE_VALUEINFO_ACCESS +
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	2207      	movs	r2, #7
 801024c:	73da      	strb	r2, [r3, #15]
               COE_VALUEINFO_OBJECT + COE_VALUEINFO_MAPPABLE;
            coel->datatype = htoes ((objd + nsub)->datatype);
 801024e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010252:	4613      	mov	r3, r2
 8010254:	009b      	lsls	r3, r3, #2
 8010256:	4413      	add	r3, r2
 8010258:	009b      	lsls	r3, r3, #2
 801025a:	461a      	mov	r2, r3
 801025c:	68bb      	ldr	r3, [r7, #8]
 801025e:	4413      	add	r3, r2
 8010260:	885a      	ldrh	r2, [r3, #2]
 8010262:	683b      	ldr	r3, [r7, #0]
 8010264:	821a      	strh	r2, [r3, #16]
            coel->bitlength = htoes ((objd + nsub)->bitlength);
 8010266:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801026a:	4613      	mov	r3, r2
 801026c:	009b      	lsls	r3, r3, #2
 801026e:	4413      	add	r3, r2
 8010270:	009b      	lsls	r3, r3, #2
 8010272:	461a      	mov	r2, r3
 8010274:	68bb      	ldr	r3, [r7, #8]
 8010276:	4413      	add	r3, r2
 8010278:	889a      	ldrh	r2, [r3, #4]
 801027a:	683b      	ldr	r3, [r7, #0]
 801027c:	825a      	strh	r2, [r3, #18]
            coel->access = htoes ((objd + nsub)->flags);
 801027e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010282:	4613      	mov	r3, r2
 8010284:	009b      	lsls	r3, r3, #2
 8010286:	4413      	add	r3, r2
 8010288:	009b      	lsls	r3, r3, #2
 801028a:	461a      	mov	r2, r3
 801028c:	68bb      	ldr	r3, [r7, #8]
 801028e:	4413      	add	r3, r2
 8010290:	88da      	ldrh	r2, [r3, #6]
 8010292:	683b      	ldr	r3, [r7, #0]
 8010294:	829a      	strh	r2, [r3, #20]
            s = (uint8_t *) (objd + nsub)->name;
 8010296:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801029a:	4613      	mov	r3, r2
 801029c:	009b      	lsls	r3, r3, #2
 801029e:	4413      	add	r3, r2
 80102a0:	009b      	lsls	r3, r3, #2
 80102a2:	461a      	mov	r2, r3
 80102a4:	68bb      	ldr	r3, [r7, #8]
 80102a6:	4413      	add	r3, r2
 80102a8:	689b      	ldr	r3, [r3, #8]
 80102aa:	623b      	str	r3, [r7, #32]
            d = (uint8_t *) &(coel->name);
 80102ac:	683b      	ldr	r3, [r7, #0]
 80102ae:	3316      	adds	r3, #22
 80102b0:	627b      	str	r3, [r7, #36]	@ 0x24
            while (*s && (n < (ESC_MBXDSIZE - 0x10)))
 80102b2:	e00c      	b.n	80102ce <SDO_geted+0x14a>
            {
               *d = *s;
 80102b4:	6a3b      	ldr	r3, [r7, #32]
 80102b6:	781a      	ldrb	r2, [r3, #0]
 80102b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102ba:	701a      	strb	r2, [r3, #0]
               n++;
 80102bc:	7ffb      	ldrb	r3, [r7, #31]
 80102be:	3301      	adds	r3, #1
 80102c0:	77fb      	strb	r3, [r7, #31]
               s++;
 80102c2:	6a3b      	ldr	r3, [r7, #32]
 80102c4:	3301      	adds	r3, #1
 80102c6:	623b      	str	r3, [r7, #32]
               d++;
 80102c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102ca:	3301      	adds	r3, #1
 80102cc:	627b      	str	r3, [r7, #36]	@ 0x24
            while (*s && (n < (ESC_MBXDSIZE - 0x10)))
 80102ce:	6a3b      	ldr	r3, [r7, #32]
 80102d0:	781b      	ldrb	r3, [r3, #0]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d005      	beq.n	80102e2 <SDO_geted+0x15e>
 80102d6:	7ffa      	ldrb	r2, [r7, #31]
 80102d8:	4b14      	ldr	r3, [pc, #80]	@ (801032c <SDO_geted+0x1a8>)
 80102da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102dc:	3b16      	subs	r3, #22
 80102de:	429a      	cmp	r2, r3
 80102e0:	d3e8      	bcc.n	80102b4 <SDO_geted+0x130>
            }
            *d = *s;
 80102e2:	6a3b      	ldr	r3, [r7, #32]
 80102e4:	781a      	ldrb	r2, [r3, #0]
 80102e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102e8:	701a      	strb	r2, [r3, #0]
            coel->mbxheader.length = htoes (0x10 + n);
 80102ea:	7ffb      	ldrb	r3, [r7, #31]
 80102ec:	b29b      	uxth	r3, r3
 80102ee:	3310      	adds	r3, #16
 80102f0:	b29a      	uxth	r2, r3
 80102f2:	683b      	ldr	r3, [r7, #0]
 80102f4:	801a      	strh	r2, [r3, #0]
            MBXcontrol[MBXout].state = MBXstate_outreq;
 80102f6:	79fb      	ldrb	r3, [r7, #7]
 80102f8:	4a0d      	ldr	r2, [pc, #52]	@ (8010330 <SDO_geted+0x1ac>)
 80102fa:	2103      	movs	r1, #3
 80102fc:	54d1      	strb	r1, [r2, r3]
            MBXcontrol[0].state = MBXstate_idle;
 80102fe:	4b0c      	ldr	r3, [pc, #48]	@ (8010330 <SDO_geted+0x1ac>)
 8010300:	2200      	movs	r2, #0
 8010302:	701a      	strb	r2, [r3, #0]
            ESCvar.xoe = 0;
 8010304:	4b09      	ldr	r3, [pc, #36]	@ (801032c <SDO_geted+0x1a8>)
 8010306:	2200      	movs	r2, #0
 8010308:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
   }
   else
   {
      SDO_infoerror (ABORT_NOOBJECT);
   }
}
 801030c:	e006      	b.n	801031c <SDO_geted+0x198>
         SDO_infoerror (ABORT_NOSUBINDEX);
 801030e:	4809      	ldr	r0, [pc, #36]	@ (8010334 <SDO_geted+0x1b0>)
 8010310:	f7ff fc42 	bl	800fb98 <SDO_infoerror>
}
 8010314:	e002      	b.n	801031c <SDO_geted+0x198>
      SDO_infoerror (ABORT_NOOBJECT);
 8010316:	4808      	ldr	r0, [pc, #32]	@ (8010338 <SDO_geted+0x1b4>)
 8010318:	f7ff fc3e 	bl	800fb98 <SDO_infoerror>
}
 801031c:	bf00      	nop
 801031e:	3728      	adds	r7, #40	@ 0x28
 8010320:	46bd      	mov	sp, r7
 8010322:	bd80      	pop	{r7, pc}
 8010324:	240004ec 	.word	0x240004ec
 8010328:	08012848 	.word	0x08012848
 801032c:	24000bb0 	.word	0x24000bb0
 8010330:	24000aec 	.word	0x24000aec
 8010334:	06090011 	.word	0x06090011
 8010338:	06020000 	.word	0x06020000

0801033c <ESC_coeprocess>:
/** Main CoE function checking the status on current mailbox buffers carrying
 * data, distributing the mailboxes to appropriate CoE functions.
 * On Error an MBX_error or SDO Abort will be sent depending on error cause.
 */
void ESC_coeprocess (void)
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b084      	sub	sp, #16
 8010340:	af00      	add	r7, sp, #0
   _MBXh *mbh;
   _COEsdo *coesdo;
   _COEobjdesc *coeobjdesc;
   uint16_t service;
   if (ESCvar.MBXrun == 0)
 8010342:	4b67      	ldr	r3, [pc, #412]	@ (80104e0 <ESC_coeprocess+0x1a4>)
 8010344:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010348:	2b00      	cmp	r3, #0
 801034a:	f000 80c4 	beq.w	80104d6 <ESC_coeprocess+0x19a>
   {
      return;
   }
   if (!ESCvar.xoe && (MBXcontrol[0].state == MBXstate_inclaim))
 801034e:	4b64      	ldr	r3, [pc, #400]	@ (80104e0 <ESC_coeprocess+0x1a4>)
 8010350:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 8010354:	2b00      	cmp	r3, #0
 8010356:	d119      	bne.n	801038c <ESC_coeprocess+0x50>
 8010358:	4b62      	ldr	r3, [pc, #392]	@ (80104e4 <ESC_coeprocess+0x1a8>)
 801035a:	781b      	ldrb	r3, [r3, #0]
 801035c:	2b01      	cmp	r3, #1
 801035e:	d115      	bne.n	801038c <ESC_coeprocess+0x50>
   {
      mbh = (_MBXh *) &MBX[0];
 8010360:	4b61      	ldr	r3, [pc, #388]	@ (80104e8 <ESC_coeprocess+0x1ac>)
 8010362:	60fb      	str	r3, [r7, #12]
      if (mbh->mbxtype == MBXCOE)
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	795b      	ldrb	r3, [r3, #5]
 8010368:	f003 030f 	and.w	r3, r3, #15
 801036c:	b2db      	uxtb	r3, r3
 801036e:	2b03      	cmp	r3, #3
 8010370:	d10c      	bne.n	801038c <ESC_coeprocess+0x50>
      {
         if (etohs (mbh->length) < COE_MINIMUM_LENGTH)
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	881b      	ldrh	r3, [r3, #0]
 8010376:	b29b      	uxth	r3, r3
 8010378:	2b07      	cmp	r3, #7
 801037a:	d803      	bhi.n	8010384 <ESC_coeprocess+0x48>
         {
            MBX_error (MBXERR_INVALIDSIZE);
 801037c:	2008      	movs	r0, #8
 801037e:	f7fd f947 	bl	800d610 <MBX_error>
 8010382:	e003      	b.n	801038c <ESC_coeprocess+0x50>
         }
         else
         {
            ESCvar.xoe = MBXCOE;
 8010384:	4b56      	ldr	r3, [pc, #344]	@ (80104e0 <ESC_coeprocess+0x1a4>)
 8010386:	2203      	movs	r2, #3
 8010388:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
         }
      }
   }
   if ((ESCvar.xoe == (MBXCOE + MBXODL)) && (!ESCvar.mbxoutpost))
 801038c:	4b54      	ldr	r3, [pc, #336]	@ (80104e0 <ESC_coeprocess+0x1a4>)
 801038e:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 8010392:	2b13      	cmp	r3, #19
 8010394:	d106      	bne.n	80103a4 <ESC_coeprocess+0x68>
 8010396:	4b52      	ldr	r3, [pc, #328]	@ (80104e0 <ESC_coeprocess+0x1a4>)
 8010398:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 801039c:	2b00      	cmp	r3, #0
 801039e:	d101      	bne.n	80103a4 <ESC_coeprocess+0x68>
   {
      /* continue get OD list */
      SDO_getodlistcont ();
 80103a0:	f7ff fd56 	bl	800fe50 <SDO_getodlistcont>
   }
   if (ESCvar.xoe == MBXCOE)
 80103a4:	4b4e      	ldr	r3, [pc, #312]	@ (80104e0 <ESC_coeprocess+0x1a4>)
 80103a6:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 80103aa:	2b03      	cmp	r3, #3
 80103ac:	f040 8094 	bne.w	80104d8 <ESC_coeprocess+0x19c>
   {
      coesdo = (_COEsdo *) &MBX[0];
 80103b0:	4b4d      	ldr	r3, [pc, #308]	@ (80104e8 <ESC_coeprocess+0x1ac>)
 80103b2:	60bb      	str	r3, [r7, #8]
      coeobjdesc = (_COEobjdesc *) &MBX[0];
 80103b4:	4b4c      	ldr	r3, [pc, #304]	@ (80104e8 <ESC_coeprocess+0x1ac>)
 80103b6:	607b      	str	r3, [r7, #4]
      service = etohs (coesdo->coeheader.numberservice) >> 12;
 80103b8:	68bb      	ldr	r3, [r7, #8]
 80103ba:	88db      	ldrh	r3, [r3, #6]
 80103bc:	0b1b      	lsrs	r3, r3, #12
 80103be:	807b      	strh	r3, [r7, #2]
      if (service == COE_SDOREQUEST)
 80103c0:	887b      	ldrh	r3, [r7, #2]
 80103c2:	2b02      	cmp	r3, #2
 80103c4:	d142      	bne.n	801044c <ESC_coeprocess+0x110>
      {
         if ((SDO_COMMAND(coesdo->command) == COE_COMMAND_UPLOADREQUEST)
 80103c6:	68bb      	ldr	r3, [r7, #8]
 80103c8:	7a1b      	ldrb	r3, [r3, #8]
 80103ca:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80103ce:	2b40      	cmp	r3, #64	@ 0x40
 80103d0:	d10f      	bne.n	80103f2 <ESC_coeprocess+0xb6>
               && (etohs (coesdo->mbxheader.length) == COE_HEADERSIZE))
 80103d2:	68bb      	ldr	r3, [r7, #8]
 80103d4:	881b      	ldrh	r3, [r3, #0]
 80103d6:	2b0a      	cmp	r3, #10
 80103d8:	d10b      	bne.n	80103f2 <ESC_coeprocess+0xb6>
         {
            /* initiate SDO upload request */
            if (SDO_COMPLETE_ACCESS(coesdo->command))
 80103da:	68bb      	ldr	r3, [r7, #8]
 80103dc:	7a1b      	ldrb	r3, [r3, #8]
 80103de:	f003 0310 	and.w	r3, r3, #16
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d002      	beq.n	80103ec <ESC_coeprocess+0xb0>
            {
               SDO_upload_complete_access ();
 80103e6:	f7fe fe3d 	bl	800f064 <SDO_upload_complete_access>
            if (SDO_COMPLETE_ACCESS(coesdo->command))
 80103ea:	e075      	b.n	80104d8 <ESC_coeprocess+0x19c>
            }
            else
            {
               SDO_upload ();
 80103ec:	f7fe fa66 	bl	800e8bc <SDO_upload>
            if (SDO_COMPLETE_ACCESS(coesdo->command))
 80103f0:	e072      	b.n	80104d8 <ESC_coeprocess+0x19c>
            }
         }
         else if (((coesdo->command & 0xef) == COE_COMMAND_UPLOADSEGREQ)
 80103f2:	68bb      	ldr	r3, [r7, #8]
 80103f4:	7a1b      	ldrb	r3, [r3, #8]
 80103f6:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 80103fa:	2b60      	cmp	r3, #96	@ 0x60
 80103fc:	d10b      	bne.n	8010416 <ESC_coeprocess+0xda>
               && (etohs (coesdo->mbxheader.length) == COE_HEADERSIZE)
 80103fe:	68bb      	ldr	r3, [r7, #8]
 8010400:	881b      	ldrh	r3, [r3, #0]
 8010402:	2b0a      	cmp	r3, #10
 8010404:	d107      	bne.n	8010416 <ESC_coeprocess+0xda>
               && (ESCvar.segmented == MBXSEU))
 8010406:	4b36      	ldr	r3, [pc, #216]	@ (80104e0 <ESC_coeprocess+0x1a4>)
 8010408:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 801040c:	2b40      	cmp	r3, #64	@ 0x40
 801040e:	d102      	bne.n	8010416 <ESC_coeprocess+0xda>
         {
            /* SDO upload segment request */
            SDO_uploadsegment ();
 8010410:	f7fe ff46 	bl	800f2a0 <SDO_uploadsegment>
 8010414:	e060      	b.n	80104d8 <ESC_coeprocess+0x19c>
         }
         else if (SDO_COMMAND(coesdo->command) == COE_COMMAND_DOWNLOADREQUEST)
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	7a1b      	ldrb	r3, [r3, #8]
 801041a:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 801041e:	2b20      	cmp	r3, #32
 8010420:	d10b      	bne.n	801043a <ESC_coeprocess+0xfe>
         {
            /* initiate SDO download request */
            if (SDO_COMPLETE_ACCESS(coesdo->command))
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	7a1b      	ldrb	r3, [r3, #8]
 8010426:	f003 0310 	and.w	r3, r3, #16
 801042a:	2b00      	cmp	r3, #0
 801042c:	d002      	beq.n	8010434 <ESC_coeprocess+0xf8>
            {
               SDO_download_complete_access ();
 801042e:	f7ff f9b5 	bl	800f79c <SDO_download_complete_access>
 8010432:	e051      	b.n	80104d8 <ESC_coeprocess+0x19c>
            }
            else
            {
               SDO_download ();
 8010434:	f7fe ffee 	bl	800f414 <SDO_download>
 8010438:	e04e      	b.n	80104d8 <ESC_coeprocess+0x19c>
            }
         }
         else if (SDO_COMMAND(coesdo->command) == COE_COMMAND_DOWNLOADSEGREQ)
 801043a:	68bb      	ldr	r3, [r7, #8]
 801043c:	7a1b      	ldrb	r3, [r3, #8]
 801043e:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8010442:	2b00      	cmp	r3, #0
 8010444:	d148      	bne.n	80104d8 <ESC_coeprocess+0x19c>
         {
            /* SDO download segment request */
            SDO_downloadsegment ();
 8010446:	f7ff fabb 	bl	800f9c0 <SDO_downloadsegment>
 801044a:	e045      	b.n	80104d8 <ESC_coeprocess+0x19c>
         }
      }
      /* initiate SDO get OD list */
      else
      {
         if ((service == COE_SDOINFORMATION)
 801044c:	887b      	ldrh	r3, [r7, #2]
 801044e:	2b08      	cmp	r3, #8
 8010450:	d109      	bne.n	8010466 <ESC_coeprocess+0x12a>
               && (coeobjdesc->infoheader.opcode == 0x01))
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	7a1b      	ldrb	r3, [r3, #8]
 8010456:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801045a:	b2db      	uxtb	r3, r3
 801045c:	2b01      	cmp	r3, #1
 801045e:	d102      	bne.n	8010466 <ESC_coeprocess+0x12a>
         {
            SDO_getodlist ();
 8010460:	f7ff fbea 	bl	800fc38 <SDO_getodlist>
 8010464:	e038      	b.n	80104d8 <ESC_coeprocess+0x19c>
         }
         /* initiate SDO get OD */
         else
         {
            if ((service == COE_SDOINFORMATION)
 8010466:	887b      	ldrh	r3, [r7, #2]
 8010468:	2b08      	cmp	r3, #8
 801046a:	d109      	bne.n	8010480 <ESC_coeprocess+0x144>
                  && (coeobjdesc->infoheader.opcode == 0x03))
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	7a1b      	ldrb	r3, [r3, #8]
 8010470:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010474:	b2db      	uxtb	r3, r3
 8010476:	2b03      	cmp	r3, #3
 8010478:	d102      	bne.n	8010480 <ESC_coeprocess+0x144>
            {
               SDO_getod ();
 801047a:	f7ff fd89 	bl	800ff90 <SDO_getod>
 801047e:	e02b      	b.n	80104d8 <ESC_coeprocess+0x19c>
            }
            /* initiate SDO get ED */
            else
            {
               if ((service == COE_SDOINFORMATION)
 8010480:	887b      	ldrh	r3, [r7, #2]
 8010482:	2b08      	cmp	r3, #8
 8010484:	d109      	bne.n	801049a <ESC_coeprocess+0x15e>
                     && (coeobjdesc->infoheader.opcode == 0x05))
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	7a1b      	ldrb	r3, [r3, #8]
 801048a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801048e:	b2db      	uxtb	r3, r3
 8010490:	2b05      	cmp	r3, #5
 8010492:	d102      	bne.n	801049a <ESC_coeprocess+0x15e>
               {
                  SDO_geted ();
 8010494:	f7ff fe76 	bl	8010184 <SDO_geted>
 8010498:	e01e      	b.n	80104d8 <ESC_coeprocess+0x19c>
               }
               else
               {
                  /* COE not recognised above */
                  if (ESCvar.xoe == MBXCOE)
 801049a:	4b11      	ldr	r3, [pc, #68]	@ (80104e0 <ESC_coeprocess+0x1a4>)
 801049c:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 80104a0:	2b03      	cmp	r3, #3
 80104a2:	d119      	bne.n	80104d8 <ESC_coeprocess+0x19c>
                  {
                     if (service == 0)
 80104a4:	887b      	ldrh	r3, [r7, #2]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d103      	bne.n	80104b2 <ESC_coeprocess+0x176>
                     {
                        MBX_error (MBXERR_INVALIDHEADER);
 80104aa:	2005      	movs	r0, #5
 80104ac:	f7fd f8b0 	bl	800d610 <MBX_error>
 80104b0:	e009      	b.n	80104c6 <ESC_coeprocess+0x18a>
                     }
                     else
                     {
                        SDO_abort (0, etohs (coesdo->index), coesdo->subindex, ABORT_UNSUPPORTED);
 80104b2:	68bb      	ldr	r3, [r7, #8]
 80104b4:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80104b8:	b299      	uxth	r1, r3
 80104ba:	68bb      	ldr	r3, [r7, #8]
 80104bc:	7ada      	ldrb	r2, [r3, #11]
 80104be:	4b0b      	ldr	r3, [pc, #44]	@ (80104ec <ESC_coeprocess+0x1b0>)
 80104c0:	2000      	movs	r0, #0
 80104c2:	f7fe f991 	bl	800e7e8 <SDO_abort>
                     }
                     MBXcontrol[0].state = MBXstate_idle;
 80104c6:	4b07      	ldr	r3, [pc, #28]	@ (80104e4 <ESC_coeprocess+0x1a8>)
 80104c8:	2200      	movs	r2, #0
 80104ca:	701a      	strb	r2, [r3, #0]
                     ESCvar.xoe = 0;
 80104cc:	4b04      	ldr	r3, [pc, #16]	@ (80104e0 <ESC_coeprocess+0x1a4>)
 80104ce:	2200      	movs	r2, #0
 80104d0:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
 80104d4:	e000      	b.n	80104d8 <ESC_coeprocess+0x19c>
      return;
 80104d6:	bf00      	nop
               }
            }
         }
      }
   }
}
 80104d8:	3710      	adds	r7, #16
 80104da:	46bd      	mov	sp, r7
 80104dc:	bd80      	pop	{r7, pc}
 80104de:	bf00      	nop
 80104e0:	24000bb0 	.word	0x24000bb0
 80104e4:	24000aec 	.word	0x24000aec
 80104e8:	240004ec 	.word	0x240004ec
 80104ec:	06010000 	.word	0x06010000

080104f0 <COE_bitsliceGet>:
 * @param[in] offset = start offset
 * @param[in] length = number of bits to get
 * @return bitslice value
 */
static uint64_t COE_bitsliceGet (uint64_t * bitmap, unsigned int offset, unsigned int length)
{
 80104f0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80104f4:	b092      	sub	sp, #72	@ 0x48
 80104f6:	af00      	add	r7, sp, #0
 80104f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80104fa:	6239      	str	r1, [r7, #32]
 80104fc:	61fa      	str	r2, [r7, #28]
   const unsigned int word_offset = offset / 64;
 80104fe:	6a3b      	ldr	r3, [r7, #32]
 8010500:	099b      	lsrs	r3, r3, #6
 8010502:	63fb      	str	r3, [r7, #60]	@ 0x3c
   const unsigned int bit_offset = offset % 64;
 8010504:	6a3b      	ldr	r3, [r7, #32]
 8010506:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801050a:	63bb      	str	r3, [r7, #56]	@ 0x38
   const uint64_t mask = (length == 64) ? UINT64_MAX : (1ULL << length) - 1;
 801050c:	69fb      	ldr	r3, [r7, #28]
 801050e:	2b40      	cmp	r3, #64	@ 0x40
 8010510:	d018      	beq.n	8010544 <COE_bitsliceGet+0x54>
 8010512:	f04f 0201 	mov.w	r2, #1
 8010516:	f04f 0300 	mov.w	r3, #0
 801051a:	69fe      	ldr	r6, [r7, #28]
 801051c:	f1a6 0120 	sub.w	r1, r6, #32
 8010520:	f1c6 0020 	rsb	r0, r6, #32
 8010524:	fa03 f506 	lsl.w	r5, r3, r6
 8010528:	fa02 f101 	lsl.w	r1, r2, r1
 801052c:	430d      	orrs	r5, r1
 801052e:	fa22 f000 	lsr.w	r0, r2, r0
 8010532:	4305      	orrs	r5, r0
 8010534:	fa02 f406 	lsl.w	r4, r2, r6
 8010538:	1e63      	subs	r3, r4, #1
 801053a:	613b      	str	r3, [r7, #16]
 801053c:	f145 33ff 	adc.w	r3, r5, #4294967295
 8010540:	617b      	str	r3, [r7, #20]
 8010542:	e005      	b.n	8010550 <COE_bitsliceGet+0x60>
 8010544:	f04f 33ff 	mov.w	r3, #4294967295
 8010548:	f04f 34ff 	mov.w	r4, #4294967295
 801054c:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8010550:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8010554:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
   uint64_t w0;
   uint64_t w1 = 0;
 8010558:	f04f 0200 	mov.w	r2, #0
 801055c:	f04f 0300 	mov.w	r3, #0
 8010560:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

   /* Get the least significant word */
   w0 = bitmap[word_offset];
 8010564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010566:	00db      	lsls	r3, r3, #3
 8010568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801056a:	4413      	add	r3, r2
 801056c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010570:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
   w0 = w0 >> bit_offset;
 8010574:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8010578:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801057a:	f1c1 0420 	rsb	r4, r1, #32
 801057e:	f1a1 0020 	sub.w	r0, r1, #32
 8010582:	fa22 fa01 	lsr.w	sl, r2, r1
 8010586:	fa03 f404 	lsl.w	r4, r3, r4
 801058a:	ea4a 0a04 	orr.w	sl, sl, r4
 801058e:	fa23 f000 	lsr.w	r0, r3, r0
 8010592:	ea4a 0a00 	orr.w	sl, sl, r0
 8010596:	fa23 fb01 	lsr.w	fp, r3, r1
 801059a:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	@ 0x28

   /* Get the most significant word, if required */
   if (length + bit_offset > 64)
 801059e:	69fa      	ldr	r2, [r7, #28]
 80105a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105a2:	4413      	add	r3, r2
 80105a4:	2b40      	cmp	r3, #64	@ 0x40
 80105a6:	d91f      	bls.n	80105e8 <COE_bitsliceGet+0xf8>
   {
      w1 = bitmap[word_offset + 1];
 80105a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80105aa:	3301      	adds	r3, #1
 80105ac:	00db      	lsls	r3, r3, #3
 80105ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80105b0:	4413      	add	r3, r2
 80105b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105b6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
      w1 = w1 << (64 - bit_offset);
 80105ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105bc:	f1c3 0140 	rsb	r1, r3, #64	@ 0x40
 80105c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80105c4:	f1a1 0420 	sub.w	r4, r1, #32
 80105c8:	f1c1 0020 	rsb	r0, r1, #32
 80105cc:	fa03 f901 	lsl.w	r9, r3, r1
 80105d0:	fa02 f404 	lsl.w	r4, r2, r4
 80105d4:	ea49 0904 	orr.w	r9, r9, r4
 80105d8:	fa22 f000 	lsr.w	r0, r2, r0
 80105dc:	ea49 0900 	orr.w	r9, r9, r0
 80105e0:	fa02 f801 	lsl.w	r8, r2, r1
 80105e4:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40
   }

   w0 = (w1 | w0);
 80105e8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80105ec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80105f0:	ea40 0402 	orr.w	r4, r0, r2
 80105f4:	603c      	str	r4, [r7, #0]
 80105f6:	430b      	orrs	r3, r1
 80105f8:	607b      	str	r3, [r7, #4]
 80105fa:	e9d7 3400 	ldrd	r3, r4, [r7]
 80105fe:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
   return (w0 & mask);
 8010602:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8010606:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 801060a:	ea00 0402 	and.w	r4, r0, r2
 801060e:	60bc      	str	r4, [r7, #8]
 8010610:	400b      	ands	r3, r1
 8010612:	60fb      	str	r3, [r7, #12]
 8010614:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8010618:	4610      	mov	r0, r2
 801061a:	4619      	mov	r1, r3
 801061c:	3748      	adds	r7, #72	@ 0x48
 801061e:	46bd      	mov	sp, r7
 8010620:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010624:	4770      	bx	lr

08010626 <COE_bitsliceSet>:
 * @param[in] length = number of bits to set
 * @param[in] value  = value to set
 */
static void COE_bitsliceSet (uint64_t * bitmap, unsigned int offset, unsigned int length,
                             uint64_t value)
{
 8010626:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801062a:	b0aa      	sub	sp, #168	@ 0xa8
 801062c:	af00      	add	r7, sp, #0
 801062e:	6678      	str	r0, [r7, #100]	@ 0x64
 8010630:	6639      	str	r1, [r7, #96]	@ 0x60
 8010632:	65fa      	str	r2, [r7, #92]	@ 0x5c
   const unsigned int word_offset = offset / 64;
 8010634:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010636:	099b      	lsrs	r3, r3, #6
 8010638:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   const unsigned int bit_offset = offset % 64;
 801063c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801063e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010642:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   const uint64_t mask = (length == 64) ? UINT64_MAX : (1ULL << length) - 1;
 8010646:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010648:	2b40      	cmp	r3, #64	@ 0x40
 801064a:	d018      	beq.n	801067e <COE_bitsliceSet+0x58>
 801064c:	f04f 0201 	mov.w	r2, #1
 8010650:	f04f 0300 	mov.w	r3, #0
 8010654:	6dfe      	ldr	r6, [r7, #92]	@ 0x5c
 8010656:	f1a6 0120 	sub.w	r1, r6, #32
 801065a:	f1c6 0020 	rsb	r0, r6, #32
 801065e:	fa03 f506 	lsl.w	r5, r3, r6
 8010662:	fa02 f101 	lsl.w	r1, r2, r1
 8010666:	430d      	orrs	r5, r1
 8010668:	fa22 f000 	lsr.w	r0, r2, r0
 801066c:	4305      	orrs	r5, r0
 801066e:	fa02 f406 	lsl.w	r4, r2, r6
 8010672:	1e63      	subs	r3, r4, #1
 8010674:	643b      	str	r3, [r7, #64]	@ 0x40
 8010676:	f145 33ff 	adc.w	r3, r5, #4294967295
 801067a:	647b      	str	r3, [r7, #68]	@ 0x44
 801067c:	e005      	b.n	801068a <COE_bitsliceSet+0x64>
 801067e:	f04f 33ff 	mov.w	r3, #4294967295
 8010682:	f04f 34ff 	mov.w	r4, #4294967295
 8010686:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
 801068a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 801068e:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
   const uint64_t mask0 = mask << bit_offset;
 8010692:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8010696:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 801069a:	f1a4 0120 	sub.w	r1, r4, #32
 801069e:	f1c4 0020 	rsb	r0, r4, #32
 80106a2:	fa03 f904 	lsl.w	r9, r3, r4
 80106a6:	fa02 f101 	lsl.w	r1, r2, r1
 80106aa:	ea49 0901 	orr.w	r9, r9, r1
 80106ae:	fa22 f000 	lsr.w	r0, r2, r0
 80106b2:	ea49 0900 	orr.w	r9, r9, r0
 80106b6:	fa02 f804 	lsl.w	r8, r2, r4
 80106ba:	e9c7 8924 	strd	r8, r9, [r7, #144]	@ 0x90
   uint64_t v0 = value << bit_offset;
 80106be:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 80106c2:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 80106c6:	f1a4 0120 	sub.w	r1, r4, #32
 80106ca:	f1c4 0020 	rsb	r0, r4, #32
 80106ce:	fa03 fb04 	lsl.w	fp, r3, r4
 80106d2:	fa02 f101 	lsl.w	r1, r2, r1
 80106d6:	ea4b 0b01 	orr.w	fp, fp, r1
 80106da:	fa22 f000 	lsr.w	r0, r2, r0
 80106de:	ea4b 0b00 	orr.w	fp, fp, r0
 80106e2:	fa02 fa04 	lsl.w	sl, r2, r4
 80106e6:	e9c7 ab22 	strd	sl, fp, [r7, #136]	@ 0x88
   uint64_t w0 = bitmap[word_offset];
 80106ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80106ee:	00da      	lsls	r2, r3, #3
 80106f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80106f2:	4413      	add	r3, r2
 80106f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106f8:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

   /* Set the least significant word */
   w0 = (w0 & ~mask0) | (v0 & mask0);
 80106fc:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8010700:	43d1      	mvns	r1, r2
 8010702:	63b9      	str	r1, [r7, #56]	@ 0x38
 8010704:	43db      	mvns	r3, r3
 8010706:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010708:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 801070c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8010710:	4621      	mov	r1, r4
 8010712:	4011      	ands	r1, r2
 8010714:	6339      	str	r1, [r7, #48]	@ 0x30
 8010716:	4629      	mov	r1, r5
 8010718:	4019      	ands	r1, r3
 801071a:	6379      	str	r1, [r7, #52]	@ 0x34
 801071c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8010720:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8010724:	ea00 0402 	and.w	r4, r0, r2
 8010728:	62bc      	str	r4, [r7, #40]	@ 0x28
 801072a:	400b      	ands	r3, r1
 801072c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801072e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8010732:	4623      	mov	r3, r4
 8010734:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8010738:	4602      	mov	r2, r0
 801073a:	4313      	orrs	r3, r2
 801073c:	60bb      	str	r3, [r7, #8]
 801073e:	462b      	mov	r3, r5
 8010740:	460a      	mov	r2, r1
 8010742:	4313      	orrs	r3, r2
 8010744:	60fb      	str	r3, [r7, #12]
 8010746:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801074a:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
   bitmap[word_offset] = w0;
 801074e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010752:	00db      	lsls	r3, r3, #3
 8010754:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010756:	18d1      	adds	r1, r2, r3
 8010758:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 801075c:	e9c1 2300 	strd	r2, r3, [r1]

   /* Set the most significant word, if required */
   if (length + bit_offset > 64)
 8010760:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010762:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010766:	4413      	add	r3, r2
 8010768:	2b40      	cmp	r3, #64	@ 0x40
 801076a:	d976      	bls.n	801085a <COE_bitsliceSet+0x234>
   {
      const uint64_t mask1 = mask >> (64 - bit_offset);
 801076c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010770:	f1c3 0440 	rsb	r4, r3, #64	@ 0x40
 8010774:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8010778:	f1c4 0120 	rsb	r1, r4, #32
 801077c:	f1a4 0020 	sub.w	r0, r4, #32
 8010780:	fa22 f504 	lsr.w	r5, r2, r4
 8010784:	653d      	str	r5, [r7, #80]	@ 0x50
 8010786:	fa03 f101 	lsl.w	r1, r3, r1
 801078a:	6d3d      	ldr	r5, [r7, #80]	@ 0x50
 801078c:	430d      	orrs	r5, r1
 801078e:	653d      	str	r5, [r7, #80]	@ 0x50
 8010790:	fa23 f000 	lsr.w	r0, r3, r0
 8010794:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010796:	4301      	orrs	r1, r0
 8010798:	6539      	str	r1, [r7, #80]	@ 0x50
 801079a:	40e3      	lsrs	r3, r4
 801079c:	657b      	str	r3, [r7, #84]	@ 0x54
 801079e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 80107a2:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
      uint64_t v1 = value >> (64 - bit_offset);
 80107a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80107aa:	f1c3 0040 	rsb	r0, r3, #64	@ 0x40
 80107ae:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 80107b2:	f1c0 0420 	rsb	r4, r0, #32
 80107b6:	f1a0 0120 	sub.w	r1, r0, #32
 80107ba:	fa22 f500 	lsr.w	r5, r2, r0
 80107be:	64bd      	str	r5, [r7, #72]	@ 0x48
 80107c0:	fa03 f404 	lsl.w	r4, r3, r4
 80107c4:	6cbd      	ldr	r5, [r7, #72]	@ 0x48
 80107c6:	4325      	orrs	r5, r4
 80107c8:	64bd      	str	r5, [r7, #72]	@ 0x48
 80107ca:	fa23 f101 	lsr.w	r1, r3, r1
 80107ce:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 80107d0:	430c      	orrs	r4, r1
 80107d2:	64bc      	str	r4, [r7, #72]	@ 0x48
 80107d4:	40c3      	lsrs	r3, r0
 80107d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80107d8:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 80107dc:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
      uint64_t w1 = bitmap[word_offset + 1];
 80107e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80107e4:	3301      	adds	r3, #1
 80107e6:	00db      	lsls	r3, r3, #3
 80107e8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80107ea:	4413      	add	r3, r2
 80107ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f0:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

      w1 = (w1 & ~mask1) | (v1 & mask1);
 80107f4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80107f8:	43d1      	mvns	r1, r2
 80107fa:	6239      	str	r1, [r7, #32]
 80107fc:	43db      	mvns	r3, r3
 80107fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8010800:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8010804:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8010808:	4621      	mov	r1, r4
 801080a:	4011      	ands	r1, r2
 801080c:	61b9      	str	r1, [r7, #24]
 801080e:	4629      	mov	r1, r5
 8010810:	4019      	ands	r1, r3
 8010812:	61f9      	str	r1, [r7, #28]
 8010814:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8010818:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 801081c:	ea00 0402 	and.w	r4, r0, r2
 8010820:	613c      	str	r4, [r7, #16]
 8010822:	400b      	ands	r3, r1
 8010824:	617b      	str	r3, [r7, #20]
 8010826:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 801082a:	4623      	mov	r3, r4
 801082c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8010830:	4602      	mov	r2, r0
 8010832:	4313      	orrs	r3, r2
 8010834:	603b      	str	r3, [r7, #0]
 8010836:	462b      	mov	r3, r5
 8010838:	460a      	mov	r2, r1
 801083a:	4313      	orrs	r3, r2
 801083c:	607b      	str	r3, [r7, #4]
 801083e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010842:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
      bitmap[word_offset + 1] = w1;
 8010846:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801084a:	3301      	adds	r3, #1
 801084c:	00db      	lsls	r3, r3, #3
 801084e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010850:	18d1      	adds	r1, r2, r3
 8010852:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8010856:	e9c1 2300 	strd	r2, r3, [r1]
   }
}
 801085a:	bf00      	nop
 801085c:	37a8      	adds	r7, #168	@ 0xa8
 801085e:	46bd      	mov	sp, r7
 8010860:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010864:	4770      	bx	lr
	...

08010868 <COE_getValue>:
 *
 * @param[in] obj   = object description
 * @return object value
 */
static uint64_t COE_getValue (const _objd * obj)
{
 8010868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801086c:	b084      	sub	sp, #16
 801086e:	af00      	add	r7, sp, #0
 8010870:	6078      	str	r0, [r7, #4]
   uint64_t value = 0;
 8010872:	f04f 0200 	mov.w	r2, #0
 8010876:	f04f 0300 	mov.w	r3, #0
 801087a:	e9c7 2302 	strd	r2, r3, [r7, #8]

   /* TODO: const data */

   switch(obj->datatype)
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	885b      	ldrh	r3, [r3, #2]
 8010882:	3b01      	subs	r3, #1
 8010884:	2b36      	cmp	r3, #54	@ 0x36
 8010886:	f200 8095 	bhi.w	80109b4 <COE_getValue+0x14c>
 801088a:	a201      	add	r2, pc, #4	@ (adr r2, 8010890 <COE_getValue+0x28>)
 801088c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010890:	0801096d 	.word	0x0801096d
 8010894:	0801096d 	.word	0x0801096d
 8010898:	08010981 	.word	0x08010981
 801089c:	08010995 	.word	0x08010995
 80108a0:	0801096d 	.word	0x0801096d
 80108a4:	08010981 	.word	0x08010981
 80108a8:	08010995 	.word	0x08010995
 80108ac:	08010995 	.word	0x08010995
 80108b0:	080109b5 	.word	0x080109b5
 80108b4:	080109b5 	.word	0x080109b5
 80108b8:	080109b5 	.word	0x080109b5
 80108bc:	080109b5 	.word	0x080109b5
 80108c0:	080109b5 	.word	0x080109b5
 80108c4:	080109b5 	.word	0x080109b5
 80108c8:	080109b5 	.word	0x080109b5
 80108cc:	080109b5 	.word	0x080109b5
 80108d0:	080109a7 	.word	0x080109a7
 80108d4:	080109b5 	.word	0x080109b5
 80108d8:	080109b5 	.word	0x080109b5
 80108dc:	080109b5 	.word	0x080109b5
 80108e0:	080109a7 	.word	0x080109a7
 80108e4:	080109b5 	.word	0x080109b5
 80108e8:	080109b5 	.word	0x080109b5
 80108ec:	080109b5 	.word	0x080109b5
 80108f0:	080109b5 	.word	0x080109b5
 80108f4:	080109b5 	.word	0x080109b5
 80108f8:	080109a7 	.word	0x080109a7
 80108fc:	080109b5 	.word	0x080109b5
 8010900:	080109b5 	.word	0x080109b5
 8010904:	080109b5 	.word	0x080109b5
 8010908:	080109b5 	.word	0x080109b5
 801090c:	080109b5 	.word	0x080109b5
 8010910:	080109b5 	.word	0x080109b5
 8010914:	080109b5 	.word	0x080109b5
 8010918:	080109b5 	.word	0x080109b5
 801091c:	080109b5 	.word	0x080109b5
 8010920:	080109b5 	.word	0x080109b5
 8010924:	080109b5 	.word	0x080109b5
 8010928:	080109b5 	.word	0x080109b5
 801092c:	080109b5 	.word	0x080109b5
 8010930:	080109b5 	.word	0x080109b5
 8010934:	080109b5 	.word	0x080109b5
 8010938:	080109b5 	.word	0x080109b5
 801093c:	080109b5 	.word	0x080109b5
 8010940:	0801096d 	.word	0x0801096d
 8010944:	08010981 	.word	0x08010981
 8010948:	08010995 	.word	0x08010995
 801094c:	0801096d 	.word	0x0801096d
 8010950:	0801096d 	.word	0x0801096d
 8010954:	0801096d 	.word	0x0801096d
 8010958:	0801096d 	.word	0x0801096d
 801095c:	0801096d 	.word	0x0801096d
 8010960:	0801096d 	.word	0x0801096d
 8010964:	0801096d 	.word	0x0801096d
 8010968:	0801096d 	.word	0x0801096d
   case DTYPE_BIT8:
   case DTYPE_BOOLEAN:
   case DTYPE_UNSIGNED8:
   case DTYPE_INTEGER8:
   case DTYPE_BITARR8:
      value = *(uint8_t *)obj->data;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	691b      	ldr	r3, [r3, #16]
 8010970:	781b      	ldrb	r3, [r3, #0]
 8010972:	b2db      	uxtb	r3, r3
 8010974:	2200      	movs	r2, #0
 8010976:	469a      	mov	sl, r3
 8010978:	4693      	mov	fp, r2
 801097a:	e9c7 ab02 	strd	sl, fp, [r7, #8]
      break;
 801097e:	e020      	b.n	80109c2 <COE_getValue+0x15a>

   case DTYPE_UNSIGNED16:
   case DTYPE_INTEGER16:
   case DTYPE_BITARR16:
      value = *(uint16_t *)obj->data;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	691b      	ldr	r3, [r3, #16]
 8010984:	881b      	ldrh	r3, [r3, #0]
 8010986:	b29b      	uxth	r3, r3
 8010988:	2200      	movs	r2, #0
 801098a:	4698      	mov	r8, r3
 801098c:	4691      	mov	r9, r2
 801098e:	e9c7 8902 	strd	r8, r9, [r7, #8]
      break;
 8010992:	e016      	b.n	80109c2 <COE_getValue+0x15a>

   case DTYPE_REAL32:
   case DTYPE_UNSIGNED32:
   case DTYPE_INTEGER32:
   case DTYPE_BITARR32:
      value = *(uint32_t *)obj->data;
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	691b      	ldr	r3, [r3, #16]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	2200      	movs	r2, #0
 801099c:	461c      	mov	r4, r3
 801099e:	4615      	mov	r5, r2
 80109a0:	e9c7 4502 	strd	r4, r5, [r7, #8]
      break;
 80109a4:	e00d      	b.n	80109c2 <COE_getValue+0x15a>

   case DTYPE_REAL64:
   case DTYPE_UNSIGNED64:
   case DTYPE_INTEGER64:
      /* FIXME: must be atomic */
      value = *(uint64_t *)obj->data;
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	691b      	ldr	r3, [r3, #16]
 80109aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
      break;
 80109b2:	e006      	b.n	80109c2 <COE_getValue+0x15a>

   default:
      CC_ASSERT (0);
 80109b4:	4b07      	ldr	r3, [pc, #28]	@ (80109d4 <COE_getValue+0x16c>)
 80109b6:	4a08      	ldr	r2, [pc, #32]	@ (80109d8 <COE_getValue+0x170>)
 80109b8:	f240 618b 	movw	r1, #1675	@ 0x68b
 80109bc:	4807      	ldr	r0, [pc, #28]	@ (80109dc <COE_getValue+0x174>)
 80109be:	f000 fb2f 	bl	8011020 <__assert_func>
   }

   return value;
 80109c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80109c6:	4610      	mov	r0, r2
 80109c8:	4619      	mov	r1, r3
 80109ca:	3710      	adds	r7, #16
 80109cc:	46bd      	mov	sp, r7
 80109ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80109d2:	bf00      	nop
 80109d4:	08011fd0 	.word	0x08011fd0
 80109d8:	08012038 	.word	0x08012038
 80109dc:	08011fd4 	.word	0x08011fd4

080109e0 <COE_setValue>:
 *
 * @param[in] obj   = object description
 * @param[in] value = new value
 */
static void COE_setValue (const _objd * obj, uint64_t value)
{
 80109e0:	b480      	push	{r7}
 80109e2:	b085      	sub	sp, #20
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	60f8      	str	r0, [r7, #12]
 80109e8:	e9c7 2300 	strd	r2, r3, [r7]
   switch(obj->datatype)
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	885b      	ldrh	r3, [r3, #2]
 80109f0:	3b01      	subs	r3, #1
 80109f2:	2b36      	cmp	r3, #54	@ 0x36
 80109f4:	f200 8088 	bhi.w	8010b08 <COE_setValue+0x128>
 80109f8:	a201      	add	r2, pc, #4	@ (adr r2, 8010a00 <COE_setValue+0x20>)
 80109fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109fe:	bf00      	nop
 8010a00:	08010add 	.word	0x08010add
 8010a04:	08010add 	.word	0x08010add
 8010a08:	08010ae7 	.word	0x08010ae7
 8010a0c:	08010af1 	.word	0x08010af1
 8010a10:	08010add 	.word	0x08010add
 8010a14:	08010ae7 	.word	0x08010ae7
 8010a18:	08010af1 	.word	0x08010af1
 8010a1c:	08010af1 	.word	0x08010af1
 8010a20:	08010b09 	.word	0x08010b09
 8010a24:	08010b09 	.word	0x08010b09
 8010a28:	08010b09 	.word	0x08010b09
 8010a2c:	08010b09 	.word	0x08010b09
 8010a30:	08010b09 	.word	0x08010b09
 8010a34:	08010b09 	.word	0x08010b09
 8010a38:	08010b09 	.word	0x08010b09
 8010a3c:	08010b09 	.word	0x08010b09
 8010a40:	08010afb 	.word	0x08010afb
 8010a44:	08010b09 	.word	0x08010b09
 8010a48:	08010b09 	.word	0x08010b09
 8010a4c:	08010b09 	.word	0x08010b09
 8010a50:	08010afb 	.word	0x08010afb
 8010a54:	08010b09 	.word	0x08010b09
 8010a58:	08010b09 	.word	0x08010b09
 8010a5c:	08010b09 	.word	0x08010b09
 8010a60:	08010b09 	.word	0x08010b09
 8010a64:	08010b09 	.word	0x08010b09
 8010a68:	08010afb 	.word	0x08010afb
 8010a6c:	08010b09 	.word	0x08010b09
 8010a70:	08010b09 	.word	0x08010b09
 8010a74:	08010b09 	.word	0x08010b09
 8010a78:	08010b09 	.word	0x08010b09
 8010a7c:	08010b09 	.word	0x08010b09
 8010a80:	08010b09 	.word	0x08010b09
 8010a84:	08010b09 	.word	0x08010b09
 8010a88:	08010b09 	.word	0x08010b09
 8010a8c:	08010b09 	.word	0x08010b09
 8010a90:	08010b09 	.word	0x08010b09
 8010a94:	08010b09 	.word	0x08010b09
 8010a98:	08010b09 	.word	0x08010b09
 8010a9c:	08010b09 	.word	0x08010b09
 8010aa0:	08010b09 	.word	0x08010b09
 8010aa4:	08010b09 	.word	0x08010b09
 8010aa8:	08010b09 	.word	0x08010b09
 8010aac:	08010b09 	.word	0x08010b09
 8010ab0:	08010add 	.word	0x08010add
 8010ab4:	08010ae7 	.word	0x08010ae7
 8010ab8:	08010af1 	.word	0x08010af1
 8010abc:	08010add 	.word	0x08010add
 8010ac0:	08010add 	.word	0x08010add
 8010ac4:	08010add 	.word	0x08010add
 8010ac8:	08010add 	.word	0x08010add
 8010acc:	08010add 	.word	0x08010add
 8010ad0:	08010add 	.word	0x08010add
 8010ad4:	08010add 	.word	0x08010add
 8010ad8:	08010add 	.word	0x08010add
   case DTYPE_BIT8:
   case DTYPE_BOOLEAN:
   case DTYPE_UNSIGNED8:
   case DTYPE_INTEGER8:
   case DTYPE_BITARR8:
      *(uint8_t *)obj->data = value & UINT8_MAX;
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	691b      	ldr	r3, [r3, #16]
 8010ae0:	783a      	ldrb	r2, [r7, #0]
 8010ae2:	701a      	strb	r2, [r3, #0]
      break;
 8010ae4:	e011      	b.n	8010b0a <COE_setValue+0x12a>

   case DTYPE_UNSIGNED16:
   case DTYPE_INTEGER16:
   case DTYPE_BITARR16:
      *(uint16_t *)obj->data = value & UINT16_MAX;
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	691b      	ldr	r3, [r3, #16]
 8010aea:	883a      	ldrh	r2, [r7, #0]
 8010aec:	801a      	strh	r2, [r3, #0]
      break;
 8010aee:	e00c      	b.n	8010b0a <COE_setValue+0x12a>

   case DTYPE_REAL32:
   case DTYPE_UNSIGNED32:
   case DTYPE_INTEGER32:
   case DTYPE_BITARR32:
      *(uint32_t *)obj->data = value & UINT32_MAX;
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	691b      	ldr	r3, [r3, #16]
 8010af4:	683a      	ldr	r2, [r7, #0]
 8010af6:	601a      	str	r2, [r3, #0]
      break;
 8010af8:	e007      	b.n	8010b0a <COE_setValue+0x12a>

   case DTYPE_REAL64:
   case DTYPE_UNSIGNED64:
   case DTYPE_INTEGER64:
      /* FIXME: must be atomic */
      *(uint64_t *)obj->data = value;
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	6919      	ldr	r1, [r3, #16]
 8010afe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010b02:	e9c1 2300 	strd	r2, r3, [r1]
      break;
 8010b06:	e000      	b.n	8010b0a <COE_setValue+0x12a>

   default:
      DPRINT ("ignored\n");
      break;
 8010b08:	bf00      	nop
   }
}
 8010b0a:	bf00      	nop
 8010b0c:	3714      	adds	r7, #20
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b14:	4770      	bx	lr
 8010b16:	bf00      	nop

08010b18 <COE_initDefaultValues>:

/**
 * Init default values for SDO objects
 */
void COE_initDefaultValues (void)
{
 8010b18:	b5b0      	push	{r4, r5, r7, lr}
 8010b1a:	b084      	sub	sp, #16
 8010b1c:	af00      	add	r7, sp, #0
   const _objd *objd;
   int n;
   uint8_t maxsub;

   /* Let application decide if initialization will be skipped */
   if (ESCvar.skip_default_initialization)
 8010b1e:	4b32      	ldr	r3, [pc, #200]	@ (8010be8 <COE_initDefaultValues+0xd0>)
 8010b20:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d15a      	bne.n	8010bde <COE_initDefaultValues+0xc6>
   {
      return;
   }

   /* Set default values from object descriptor */
   for (n = 0; SDOobjects[n].index != 0xffff; n++)
 8010b28:	2300      	movs	r3, #0
 8010b2a:	60bb      	str	r3, [r7, #8]
 8010b2c:	e046      	b.n	8010bbc <COE_initDefaultValues+0xa4>
   {
      objd = SDOobjects[n].objdesc;
 8010b2e:	4a2f      	ldr	r2, [pc, #188]	@ (8010bec <COE_initDefaultValues+0xd4>)
 8010b30:	68bb      	ldr	r3, [r7, #8]
 8010b32:	011b      	lsls	r3, r3, #4
 8010b34:	4413      	add	r3, r2
 8010b36:	330c      	adds	r3, #12
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	607b      	str	r3, [r7, #4]
      maxsub = SDOobjects[n].maxsub;
 8010b3c:	4a2b      	ldr	r2, [pc, #172]	@ (8010bec <COE_initDefaultValues+0xd4>)
 8010b3e:	68bb      	ldr	r3, [r7, #8]
 8010b40:	011b      	lsls	r3, r3, #4
 8010b42:	4413      	add	r3, r2
 8010b44:	3304      	adds	r3, #4
 8010b46:	781b      	ldrb	r3, [r3, #0]
 8010b48:	70fb      	strb	r3, [r7, #3]

      i = 0;
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	60fb      	str	r3, [r7, #12]
      do
      {
         if (objd[i].data != NULL)
 8010b4e:	68fa      	ldr	r2, [r7, #12]
 8010b50:	4613      	mov	r3, r2
 8010b52:	009b      	lsls	r3, r3, #2
 8010b54:	4413      	add	r3, r2
 8010b56:	009b      	lsls	r3, r3, #2
 8010b58:	461a      	mov	r2, r3
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	4413      	add	r3, r2
 8010b5e:	691b      	ldr	r3, [r3, #16]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d018      	beq.n	8010b96 <COE_initDefaultValues+0x7e>
         {
            COE_setValue (&objd[i], objd[i].value);
 8010b64:	68fa      	ldr	r2, [r7, #12]
 8010b66:	4613      	mov	r3, r2
 8010b68:	009b      	lsls	r3, r3, #2
 8010b6a:	4413      	add	r3, r2
 8010b6c:	009b      	lsls	r3, r3, #2
 8010b6e:	461a      	mov	r2, r3
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	1899      	adds	r1, r3, r2
 8010b74:	68fa      	ldr	r2, [r7, #12]
 8010b76:	4613      	mov	r3, r2
 8010b78:	009b      	lsls	r3, r3, #2
 8010b7a:	4413      	add	r3, r2
 8010b7c:	009b      	lsls	r3, r3, #2
 8010b7e:	461a      	mov	r2, r3
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	4413      	add	r3, r2
 8010b84:	68db      	ldr	r3, [r3, #12]
 8010b86:	2200      	movs	r2, #0
 8010b88:	461c      	mov	r4, r3
 8010b8a:	4615      	mov	r5, r2
 8010b8c:	4622      	mov	r2, r4
 8010b8e:	462b      	mov	r3, r5
 8010b90:	4608      	mov	r0, r1
 8010b92:	f7ff ff25 	bl	80109e0 <COE_setValue>
            DPRINT ("%04"PRIx32":%02"PRIx32" = %"PRIx32"\n",
                  SDOobjects[n].index,
                  objd[i].subindex,
                  objd[i].value);
         }
      } while (objd[i++].subindex < maxsub);
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	1c5a      	adds	r2, r3, #1
 8010b9a:	60fa      	str	r2, [r7, #12]
 8010b9c:	461a      	mov	r2, r3
 8010b9e:	4613      	mov	r3, r2
 8010ba0:	009b      	lsls	r3, r3, #2
 8010ba2:	4413      	add	r3, r2
 8010ba4:	009b      	lsls	r3, r3, #2
 8010ba6:	461a      	mov	r2, r3
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	4413      	add	r3, r2
 8010bac:	881a      	ldrh	r2, [r3, #0]
 8010bae:	78fb      	ldrb	r3, [r7, #3]
 8010bb0:	b29b      	uxth	r3, r3
 8010bb2:	429a      	cmp	r2, r3
 8010bb4:	d3cb      	bcc.n	8010b4e <COE_initDefaultValues+0x36>
   for (n = 0; SDOobjects[n].index != 0xffff; n++)
 8010bb6:	68bb      	ldr	r3, [r7, #8]
 8010bb8:	3301      	adds	r3, #1
 8010bba:	60bb      	str	r3, [r7, #8]
 8010bbc:	4a0b      	ldr	r2, [pc, #44]	@ (8010bec <COE_initDefaultValues+0xd4>)
 8010bbe:	68bb      	ldr	r3, [r7, #8]
 8010bc0:	011b      	lsls	r3, r3, #4
 8010bc2:	4413      	add	r3, r2
 8010bc4:	881b      	ldrh	r3, [r3, #0]
 8010bc6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010bca:	4293      	cmp	r3, r2
 8010bcc:	d1af      	bne.n	8010b2e <COE_initDefaultValues+0x16>
   }

   /* Let application override default values */
   if (ESCvar.set_defaults_hook != NULL)
 8010bce:	4b06      	ldr	r3, [pc, #24]	@ (8010be8 <COE_initDefaultValues+0xd0>)
 8010bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d004      	beq.n	8010be0 <COE_initDefaultValues+0xc8>
   {
      ESCvar.set_defaults_hook();
 8010bd6:	4b04      	ldr	r3, [pc, #16]	@ (8010be8 <COE_initDefaultValues+0xd0>)
 8010bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010bda:	4798      	blx	r3
 8010bdc:	e000      	b.n	8010be0 <COE_initDefaultValues+0xc8>
      return;
 8010bde:	bf00      	nop
   }
}
 8010be0:	3710      	adds	r7, #16
 8010be2:	46bd      	mov	sp, r7
 8010be4:	bdb0      	pop	{r4, r5, r7, pc}
 8010be6:	bf00      	nop
 8010be8:	24000bb0 	.word	0x24000bb0
 8010bec:	08012848 	.word	0x08012848

08010bf0 <COE_pdoPack>:
 * @param[in] buffer     = input process data
 * @param[in] nmappings  = number of mappings in sync manager
 * @param[in] mappings   = list of mapped objects in sync manager
 */
void COE_pdoPack (uint8_t * buffer, int nmappings, _SMmap * mappings)
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b08c      	sub	sp, #48	@ 0x30
 8010bf4:	af02      	add	r7, sp, #8
 8010bf6:	60f8      	str	r0, [r7, #12]
 8010bf8:	60b9      	str	r1, [r7, #8]
 8010bfa:	607a      	str	r2, [r7, #4]
   int ix;

   /* Check that buffer is aligned on 64-bit boundary */
   CC_ASSERT (((uintptr_t)buffer & 0x07) == 0);
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	f003 0307 	and.w	r3, r3, #7
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d006      	beq.n	8010c14 <COE_pdoPack+0x24>
 8010c06:	4b28      	ldr	r3, [pc, #160]	@ (8010ca8 <COE_pdoPack+0xb8>)
 8010c08:	4a28      	ldr	r2, [pc, #160]	@ (8010cac <COE_pdoPack+0xbc>)
 8010c0a:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8010c0e:	4828      	ldr	r0, [pc, #160]	@ (8010cb0 <COE_pdoPack+0xc0>)
 8010c10:	f000 fa06 	bl	8011020 <__assert_func>

   for (ix = 0; ix < nmappings; ix++)
 8010c14:	2300      	movs	r3, #0
 8010c16:	627b      	str	r3, [r7, #36]	@ 0x24
 8010c18:	e03c      	b.n	8010c94 <COE_pdoPack+0xa4>
   {
      const _objd * obj = mappings[ix].obj;
 8010c1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010c1c:	4613      	mov	r3, r2
 8010c1e:	005b      	lsls	r3, r3, #1
 8010c20:	4413      	add	r3, r2
 8010c22:	009b      	lsls	r3, r3, #2
 8010c24:	461a      	mov	r2, r3
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	4413      	add	r3, r2
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	623b      	str	r3, [r7, #32]
      uint32_t offset = mappings[ix].offset;
 8010c2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010c30:	4613      	mov	r3, r2
 8010c32:	005b      	lsls	r3, r3, #1
 8010c34:	4413      	add	r3, r2
 8010c36:	009b      	lsls	r3, r3, #2
 8010c38:	461a      	mov	r2, r3
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	4413      	add	r3, r2
 8010c3e:	689b      	ldr	r3, [r3, #8]
 8010c40:	61fb      	str	r3, [r7, #28]

      if (obj != NULL)
 8010c42:	6a3b      	ldr	r3, [r7, #32]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d022      	beq.n	8010c8e <COE_pdoPack+0x9e>
      {
         if (obj->bitlength > 64)
 8010c48:	6a3b      	ldr	r3, [r7, #32]
 8010c4a:	889b      	ldrh	r3, [r3, #4]
 8010c4c:	2b40      	cmp	r3, #64	@ 0x40
 8010c4e:	d90d      	bls.n	8010c6c <COE_pdoPack+0x7c>
         {
            memcpy (
               &buffer[BITSPOS2BYTESOFFSET (offset)],
 8010c50:	69fb      	ldr	r3, [r7, #28]
 8010c52:	08db      	lsrs	r3, r3, #3
 8010c54:	68fa      	ldr	r2, [r7, #12]
 8010c56:	18d0      	adds	r0, r2, r3
               obj->data,
 8010c58:	6a3b      	ldr	r3, [r7, #32]
 8010c5a:	6919      	ldr	r1, [r3, #16]
               BITS2BYTES (obj->bitlength)
 8010c5c:	6a3b      	ldr	r3, [r7, #32]
 8010c5e:	889b      	ldrh	r3, [r3, #4]
 8010c60:	3307      	adds	r3, #7
            memcpy (
 8010c62:	08db      	lsrs	r3, r3, #3
 8010c64:	461a      	mov	r2, r3
 8010c66:	f000 fb8c 	bl	8011382 <memcpy>
 8010c6a:	e010      	b.n	8010c8e <COE_pdoPack+0x9e>
            );
         }
         else
         {
            /* Atomically get object value */
            uint64_t value = COE_getValue (obj);
 8010c6c:	6a38      	ldr	r0, [r7, #32]
 8010c6e:	f7ff fdfb 	bl	8010868 <COE_getValue>
 8010c72:	e9c7 0104 	strd	r0, r1, [r7, #16]
            COE_bitsliceSet (
               (uint64_t *)buffer,
               offset,
               obj->bitlength,
 8010c76:	6a3b      	ldr	r3, [r7, #32]
 8010c78:	889b      	ldrh	r3, [r3, #4]
            COE_bitsliceSet (
 8010c7a:	4619      	mov	r1, r3
 8010c7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010c80:	e9cd 2300 	strd	r2, r3, [sp]
 8010c84:	460a      	mov	r2, r1
 8010c86:	69f9      	ldr	r1, [r7, #28]
 8010c88:	68f8      	ldr	r0, [r7, #12]
 8010c8a:	f7ff fccc 	bl	8010626 <COE_bitsliceSet>
   for (ix = 0; ix < nmappings; ix++)
 8010c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c90:	3301      	adds	r3, #1
 8010c92:	627b      	str	r3, [r7, #36]	@ 0x24
 8010c94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010c96:	68bb      	ldr	r3, [r7, #8]
 8010c98:	429a      	cmp	r2, r3
 8010c9a:	dbbe      	blt.n	8010c1a <COE_pdoPack+0x2a>
               value
            );
         }
      }
   }
}
 8010c9c:	bf00      	nop
 8010c9e:	bf00      	nop
 8010ca0:	3728      	adds	r7, #40	@ 0x28
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	bd80      	pop	{r7, pc}
 8010ca6:	bf00      	nop
 8010ca8:	08011fec 	.word	0x08011fec
 8010cac:	08012048 	.word	0x08012048
 8010cb0:	08011fd4 	.word	0x08011fd4

08010cb4 <COE_pdoUnpack>:
 * @param[in] buffer    = output process data
 * @param[in] nmappings = number of mappings in sync manager
 * @param[in] mappings  = list of mapped objects in sync manager
 */
void COE_pdoUnpack (uint8_t * buffer, int nmappings, _SMmap * mappings)
{
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b08a      	sub	sp, #40	@ 0x28
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	60f8      	str	r0, [r7, #12]
 8010cbc:	60b9      	str	r1, [r7, #8]
 8010cbe:	607a      	str	r2, [r7, #4]
   int ix;

   /* Check that buffer is aligned on 64-bit boundary */
   CC_ASSERT (((uintptr_t)buffer & 0x07) == 0);
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	f003 0307 	and.w	r3, r3, #7
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d006      	beq.n	8010cd8 <COE_pdoUnpack+0x24>
 8010cca:	4b26      	ldr	r3, [pc, #152]	@ (8010d64 <COE_pdoUnpack+0xb0>)
 8010ccc:	4a26      	ldr	r2, [pc, #152]	@ (8010d68 <COE_pdoUnpack+0xb4>)
 8010cce:	f240 712f 	movw	r1, #1839	@ 0x72f
 8010cd2:	4826      	ldr	r0, [pc, #152]	@ (8010d6c <COE_pdoUnpack+0xb8>)
 8010cd4:	f000 f9a4 	bl	8011020 <__assert_func>

   for (ix = 0; ix < nmappings; ix++)
 8010cd8:	2300      	movs	r3, #0
 8010cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8010cdc:	e039      	b.n	8010d52 <COE_pdoUnpack+0x9e>
   {
      const _objd * obj = mappings[ix].obj;
 8010cde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010ce0:	4613      	mov	r3, r2
 8010ce2:	005b      	lsls	r3, r3, #1
 8010ce4:	4413      	add	r3, r2
 8010ce6:	009b      	lsls	r3, r3, #2
 8010ce8:	461a      	mov	r2, r3
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	4413      	add	r3, r2
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	623b      	str	r3, [r7, #32]
      uint32_t offset = mappings[ix].offset;
 8010cf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010cf4:	4613      	mov	r3, r2
 8010cf6:	005b      	lsls	r3, r3, #1
 8010cf8:	4413      	add	r3, r2
 8010cfa:	009b      	lsls	r3, r3, #2
 8010cfc:	461a      	mov	r2, r3
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	4413      	add	r3, r2
 8010d02:	689b      	ldr	r3, [r3, #8]
 8010d04:	61fb      	str	r3, [r7, #28]

      if (obj != NULL)
 8010d06:	6a3b      	ldr	r3, [r7, #32]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d01f      	beq.n	8010d4c <COE_pdoUnpack+0x98>
      {
         if (obj->bitlength > 64)
 8010d0c:	6a3b      	ldr	r3, [r7, #32]
 8010d0e:	889b      	ldrh	r3, [r3, #4]
 8010d10:	2b40      	cmp	r3, #64	@ 0x40
 8010d12:	d90d      	bls.n	8010d30 <COE_pdoUnpack+0x7c>
         {
            memcpy (
               obj->data,
 8010d14:	6a3b      	ldr	r3, [r7, #32]
 8010d16:	6918      	ldr	r0, [r3, #16]
               &buffer[BITSPOS2BYTESOFFSET (offset)],
 8010d18:	69fb      	ldr	r3, [r7, #28]
 8010d1a:	08db      	lsrs	r3, r3, #3
 8010d1c:	68fa      	ldr	r2, [r7, #12]
 8010d1e:	18d1      	adds	r1, r2, r3
               BITS2BYTES (obj->bitlength)
 8010d20:	6a3b      	ldr	r3, [r7, #32]
 8010d22:	889b      	ldrh	r3, [r3, #4]
 8010d24:	3307      	adds	r3, #7
            memcpy (
 8010d26:	08db      	lsrs	r3, r3, #3
 8010d28:	461a      	mov	r2, r3
 8010d2a:	f000 fb2a 	bl	8011382 <memcpy>
 8010d2e:	e00d      	b.n	8010d4c <COE_pdoUnpack+0x98>
         {
            /* Atomically set object value */
            uint64_t value = COE_bitsliceGet (
               (uint64_t *)buffer,
               offset,
               obj->bitlength
 8010d30:	6a3b      	ldr	r3, [r7, #32]
 8010d32:	889b      	ldrh	r3, [r3, #4]
            uint64_t value = COE_bitsliceGet (
 8010d34:	461a      	mov	r2, r3
 8010d36:	69f9      	ldr	r1, [r7, #28]
 8010d38:	68f8      	ldr	r0, [r7, #12]
 8010d3a:	f7ff fbd9 	bl	80104f0 <COE_bitsliceGet>
 8010d3e:	e9c7 0104 	strd	r0, r1, [r7, #16]
            );
            COE_setValue (obj, value);
 8010d42:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010d46:	6a38      	ldr	r0, [r7, #32]
 8010d48:	f7ff fe4a 	bl	80109e0 <COE_setValue>
   for (ix = 0; ix < nmappings; ix++)
 8010d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d4e:	3301      	adds	r3, #1
 8010d50:	627b      	str	r3, [r7, #36]	@ 0x24
 8010d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010d54:	68bb      	ldr	r3, [r7, #8]
 8010d56:	429a      	cmp	r2, r3
 8010d58:	dbc1      	blt.n	8010cde <COE_pdoUnpack+0x2a>
         }
      }
   }
}
 8010d5a:	bf00      	nop
 8010d5c:	bf00      	nop
 8010d5e:	3728      	adds	r7, #40	@ 0x28
 8010d60:	46bd      	mov	sp, r7
 8010d62:	bd80      	pop	{r7, pc}
 8010d64:	08011fec 	.word	0x08011fec
 8010d68:	08012054 	.word	0x08012054
 8010d6c:	08011fd4 	.word	0x08011fd4

08010d70 <COE_maxSub>:
 * This function fetches the value of subindex 0 (max subindex).
 *
 * @param[in] index = object index
 */
uint8_t COE_maxSub (uint16_t index)
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b084      	sub	sp, #16
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	4603      	mov	r3, r0
 8010d78:	80fb      	strh	r3, [r7, #6]
   int32_t nidx;
   uint8_t maxsub;

   nidx = SDO_findobject (index);
 8010d7a:	88fb      	ldrh	r3, [r7, #6]
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f7fd fba7 	bl	800e4d0 <SDO_findobject>
 8010d82:	60f8      	str	r0, [r7, #12]
   if (nidx == -1)
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d8a:	d101      	bne.n	8010d90 <COE_maxSub+0x20>
      return 0;
 8010d8c:	2300      	movs	r3, #0
 8010d8e:	e01b      	b.n	8010dc8 <COE_maxSub+0x58>

   maxsub = OBJ_VALUE_FETCH (maxsub, SDOobjects[nidx].objdesc[0]);
 8010d90:	4a0f      	ldr	r2, [pc, #60]	@ (8010dd0 <COE_maxSub+0x60>)
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	011b      	lsls	r3, r3, #4
 8010d96:	4413      	add	r3, r2
 8010d98:	330c      	adds	r3, #12
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	691b      	ldr	r3, [r3, #16]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d008      	beq.n	8010db4 <COE_maxSub+0x44>
 8010da2:	4a0b      	ldr	r2, [pc, #44]	@ (8010dd0 <COE_maxSub+0x60>)
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	011b      	lsls	r3, r3, #4
 8010da8:	4413      	add	r3, r2
 8010daa:	330c      	adds	r3, #12
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	691b      	ldr	r3, [r3, #16]
 8010db0:	781b      	ldrb	r3, [r3, #0]
 8010db2:	e007      	b.n	8010dc4 <COE_maxSub+0x54>
 8010db4:	4a06      	ldr	r2, [pc, #24]	@ (8010dd0 <COE_maxSub+0x60>)
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	011b      	lsls	r3, r3, #4
 8010dba:	4413      	add	r3, r2
 8010dbc:	330c      	adds	r3, #12
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	68db      	ldr	r3, [r3, #12]
 8010dc2:	b2db      	uxtb	r3, r3
 8010dc4:	72fb      	strb	r3, [r7, #11]
   return maxsub;
 8010dc6:	7afb      	ldrb	r3, [r7, #11]
}
 8010dc8:	4618      	mov	r0, r3
 8010dca:	3710      	adds	r7, #16
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}
 8010dd0:	08012848 	.word	0x08012848

08010dd4 <esc_address>:
#define GPIO_ECAT_RESET 1 /* specific function to hold ESC reset on startup \
                           * when emulating EEPROM                          \
                           */

static void esc_address(uint16_t address, uint8_t command)
{
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	b084      	sub	sp, #16
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	4603      	mov	r3, r0
 8010ddc:	460a      	mov	r2, r1
 8010dde:	80fb      	strh	r3, [r7, #6]
 8010de0:	4613      	mov	r3, r2
 8010de2:	717b      	strb	r3, [r7, #5]
    * We use 2 bytes addressing.
    */
   uint8_t data[2];

   /* address 12:5 */
   data[0] = (address >> 5);
 8010de4:	88fb      	ldrh	r3, [r7, #6]
 8010de6:	095b      	lsrs	r3, r3, #5
 8010de8:	b29b      	uxth	r3, r3
 8010dea:	b2db      	uxtb	r3, r3
 8010dec:	733b      	strb	r3, [r7, #12]
   /* address 4:0 and cmd 2:0 */
   data[1] = ((address & 0x1F) << 3) | command;
 8010dee:	88fb      	ldrh	r3, [r7, #6]
 8010df0:	00db      	lsls	r3, r3, #3
 8010df2:	b25a      	sxtb	r2, r3
 8010df4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8010df8:	4313      	orrs	r3, r2
 8010dfa:	b25b      	sxtb	r3, r3
 8010dfc:	b2db      	uxtb	r3, r3
 8010dfe:	737b      	strb	r3, [r7, #13]

   /* Write (and read AL interrupt register) */
   spi_bidirectionally_transfer(et1100, (uint8_t *)&ESCvar.ALevent,
 8010e00:	4b0a      	ldr	r3, [pc, #40]	@ (8010e2c <esc_address+0x58>)
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	b258      	sxtb	r0, r3
 8010e06:	f107 020c 	add.w	r2, r7, #12
 8010e0a:	2302      	movs	r3, #2
 8010e0c:	4908      	ldr	r1, [pc, #32]	@ (8010e30 <esc_address+0x5c>)
 8010e0e:	f000 f8ed 	bl	8010fec <spi_bidirectionally_transfer>
                                data, sizeof(data));
   ESCvar.ALevent = etohs(ESCvar.ALevent);
 8010e12:	4b08      	ldr	r3, [pc, #32]	@ (8010e34 <esc_address+0x60>)
 8010e14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8010e18:	b29b      	uxth	r3, r3
 8010e1a:	461a      	mov	r2, r3
 8010e1c:	4b05      	ldr	r3, [pc, #20]	@ (8010e34 <esc_address+0x60>)
 8010e1e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
}
 8010e22:	bf00      	nop
 8010e24:	3710      	adds	r7, #16
 8010e26:	46bd      	mov	sp, r7
 8010e28:	bd80      	pop	{r7, pc}
 8010e2a:	bf00      	nop
 8010e2c:	24000088 	.word	0x24000088
 8010e30:	24000c94 	.word	0x24000c94
 8010e34:	24000bb0 	.word	0x24000bb0

08010e38 <ESC_read>:
 * @param[out]  buf         = pointer to buffer to read in
 * @param[in]   len         = number of bytes to read
 */

void ESC_read(uint16_t address, void *buf, uint16_t len)
{
 8010e38:	b580      	push	{r7, lr}
 8010e3a:	b082      	sub	sp, #8
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	4603      	mov	r3, r0
 8010e40:	6039      	str	r1, [r7, #0]
 8010e42:	80fb      	strh	r3, [r7, #6]
 8010e44:	4613      	mov	r3, r2
 8010e46:	80bb      	strh	r3, [r7, #4]
   if (len > MAX_READ_SIZE)
 8010e48:	88bb      	ldrh	r3, [r7, #4]
 8010e4a:	2b80      	cmp	r3, #128	@ 0x80
 8010e4c:	d81f      	bhi.n	8010e8e <ESC_read+0x56>
   {
      return;
   }

   /* Select device. */
   spi_select(et1100);
 8010e4e:	4b12      	ldr	r3, [pc, #72]	@ (8010e98 <ESC_read+0x60>)
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	b25b      	sxtb	r3, r3
 8010e54:	4618      	mov	r0, r3
 8010e56:	f000 f893 	bl	8010f80 <spi_select>

   /* Write address and command to device. */
   esc_address(address, ESC_CMD_READ);
 8010e5a:	88fb      	ldrh	r3, [r7, #6]
 8010e5c:	2102      	movs	r1, #2
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f7ff ffb8 	bl	8010dd4 <esc_address>

   /* Here we want to read data and keep MOSI low (0x00) during
    * all bytes except the last one where we want to pull it high (0xFF).
    * Read (and write termination bytes).
    */
   spi_bidirectionally_transfer(et1100, buf, read_termination + (MAX_READ_SIZE - len), len);
 8010e64:	4b0c      	ldr	r3, [pc, #48]	@ (8010e98 <ESC_read+0x60>)
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	b258      	sxtb	r0, r3
 8010e6a:	88bb      	ldrh	r3, [r7, #4]
 8010e6c:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8010e70:	461a      	mov	r2, r3
 8010e72:	4b0a      	ldr	r3, [pc, #40]	@ (8010e9c <ESC_read+0x64>)
 8010e74:	441a      	add	r2, r3
 8010e76:	88bb      	ldrh	r3, [r7, #4]
 8010e78:	b2db      	uxtb	r3, r3
 8010e7a:	6839      	ldr	r1, [r7, #0]
 8010e7c:	f000 f8b6 	bl	8010fec <spi_bidirectionally_transfer>

   /* Un-select device. */
   spi_unselect(et1100);
 8010e80:	4b05      	ldr	r3, [pc, #20]	@ (8010e98 <ESC_read+0x60>)
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	b25b      	sxtb	r3, r3
 8010e86:	4618      	mov	r0, r3
 8010e88:	f000 f88a 	bl	8010fa0 <spi_unselect>
 8010e8c:	e000      	b.n	8010e90 <ESC_read+0x58>
      return;
 8010e8e:	bf00      	nop
}
 8010e90:	3708      	adds	r7, #8
 8010e92:	46bd      	mov	sp, r7
 8010e94:	bd80      	pop	{r7, pc}
 8010e96:	bf00      	nop
 8010e98:	24000088 	.word	0x24000088
 8010e9c:	240016a0 	.word	0x240016a0

08010ea0 <ESC_write>:
 * @param[in]   address     = address of ESC register to write
 * @param[out]  buf         = pointer to buffer to write from
 * @param[in]   len         = number of bytes to write
 */
void ESC_write(uint16_t address, void *buf, uint16_t len)
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b082      	sub	sp, #8
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	6039      	str	r1, [r7, #0]
 8010eaa:	80fb      	strh	r3, [r7, #6]
 8010eac:	4613      	mov	r3, r2
 8010eae:	80bb      	strh	r3, [r7, #4]
   /* Select device. */
   spi_select(et1100);
 8010eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8010eec <ESC_write+0x4c>)
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	b25b      	sxtb	r3, r3
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	f000 f862 	bl	8010f80 <spi_select>
   /* Write address and command to device. */
   esc_address(address, ESC_CMD_WRITE);
 8010ebc:	88fb      	ldrh	r3, [r7, #6]
 8010ebe:	2104      	movs	r1, #4
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	f7ff ff87 	bl	8010dd4 <esc_address>
   /* Write data. */
   spi_write(et1100, buf, len);
 8010ec6:	4b09      	ldr	r3, [pc, #36]	@ (8010eec <ESC_write+0x4c>)
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	b25b      	sxtb	r3, r3
 8010ecc:	88ba      	ldrh	r2, [r7, #4]
 8010ece:	b2d2      	uxtb	r2, r2
 8010ed0:	6839      	ldr	r1, [r7, #0]
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	f000 f874 	bl	8010fc0 <spi_write>
   /* Un-select device. */
   spi_unselect(et1100);
 8010ed8:	4b04      	ldr	r3, [pc, #16]	@ (8010eec <ESC_write+0x4c>)
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	b25b      	sxtb	r3, r3
 8010ede:	4618      	mov	r0, r3
 8010ee0:	f000 f85e 	bl	8010fa0 <spi_unselect>
}
 8010ee4:	bf00      	nop
 8010ee6:	3708      	adds	r7, #8
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	bd80      	pop	{r7, pc}
 8010eec:	24000088 	.word	0x24000088

08010ef0 <ESC_init>:
   }
   DPRINT("esc_reset_ended\n");
}

void ESC_init(const esc_cfg_t *config)
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b082      	sub	sp, #8
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
   rst_setup();
 8010ef8:	f000 f814 	bl	8010f24 <rst_setup>
   rst_high();
 8010efc:	f000 f82c 	bl	8010f58 <rst_high>
   spi_setup();
 8010f00:	f000 f836 	bl	8010f70 <spi_setup>
   et1100 = 1;
 8010f04:	4b05      	ldr	r3, [pc, #20]	@ (8010f1c <ESC_init+0x2c>)
 8010f06:	2201      	movs	r2, #1
 8010f08:	601a      	str	r2, [r3, #0]
   read_termination[MAX_READ_SIZE - 1] = 0xFF;
 8010f0a:	4b05      	ldr	r3, [pc, #20]	@ (8010f20 <ESC_init+0x30>)
 8010f0c:	22ff      	movs	r2, #255	@ 0xff
 8010f0e:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
   //       DPRINT("ESC init successful");
   //    }
   // }
   // task_delay(1000); // allow ESC to load EEPROM, or if EEP_DONE can be read
   // then wait while EEP_DONE is low.
}
 8010f12:	bf00      	nop
 8010f14:	3708      	adds	r7, #8
 8010f16:	46bd      	mov	sp, r7
 8010f18:	bd80      	pop	{r7, pc}
 8010f1a:	bf00      	nop
 8010f1c:	24000088 	.word	0x24000088
 8010f20:	240016a0 	.word	0x240016a0

08010f24 <rst_setup>:
#include "rst.h"

void rst_setup(void)
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b086      	sub	sp, #24
 8010f28:	af00      	add	r7, sp, #0
    /* Setup NRST as GPIO out and pull it high */
	GPIO_InitTypeDef gpio;
 

    gpio.Pin   = ESC_GPIO_Pin_RSTN;
 8010f2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010f2e:	607b      	str	r3, [r7, #4]
    gpio.Mode  = GPIO_MODE_OUTPUT_PP;
 8010f30:	2301      	movs	r3, #1
 8010f32:	60bb      	str	r3, [r7, #8]
    gpio.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8010f34:	2301      	movs	r3, #1
 8010f36:	613b      	str	r3, [r7, #16]
    gpio.Pull  = GPIO_PULLUP;
 8010f38:	2301      	movs	r3, #1
 8010f3a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(ESC_GPIOX_RSTN, &gpio);
 8010f3c:	1d3b      	adds	r3, r7, #4
 8010f3e:	4619      	mov	r1, r3
 8010f40:	4804      	ldr	r0, [pc, #16]	@ (8010f54 <rst_setup+0x30>)
 8010f42:	f7f4 ffb3 	bl	8005eac <HAL_GPIO_Init>
    
    rst_high();
 8010f46:	f000 f807 	bl	8010f58 <rst_high>
}
 8010f4a:	bf00      	nop
 8010f4c:	3718      	adds	r7, #24
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	bd80      	pop	{r7, pc}
 8010f52:	bf00      	nop
 8010f54:	58020400 	.word	0x58020400

08010f58 <rst_high>:
{    /* Set RSTN line low */
	HAL_GPIO_WritePin(ESC_GPIOX_RSTN, ESC_GPIO_Pin_RSTN, 0);
}

void rst_high(void)
{
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	af00      	add	r7, sp, #0
    /* Set RSTN line high */
	HAL_GPIO_WritePin(ESC_GPIOX_RSTN, ESC_GPIO_Pin_RSTN, 1);
 8010f5c:	2201      	movs	r2, #1
 8010f5e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8010f62:	4802      	ldr	r0, [pc, #8]	@ (8010f6c <rst_high+0x14>)
 8010f64:	f7f5 f952 	bl	800620c <HAL_GPIO_WritePin>
}
 8010f68:	bf00      	nop
 8010f6a:	bd80      	pop	{r7, pc}
 8010f6c:	58020400 	.word	0x58020400

08010f70 <spi_setup>:


}

void spi_setup(void)
{
 8010f70:	b480      	push	{r7}
 8010f72:	af00      	add	r7, sp, #0

}
 8010f74:	bf00      	nop
 8010f76:	46bd      	mov	sp, r7
 8010f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7c:	4770      	bx	lr
	...

08010f80 <spi_select>:

void spi_select (int8_t board)
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b082      	sub	sp, #8
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	4603      	mov	r3, r0
 8010f88:	71fb      	strb	r3, [r7, #7]
    // Soft CSM
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 0);
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	2110      	movs	r1, #16
 8010f8e:	4803      	ldr	r0, [pc, #12]	@ (8010f9c <spi_select+0x1c>)
 8010f90:	f7f5 f93c 	bl	800620c <HAL_GPIO_WritePin>
}
 8010f94:	bf00      	nop
 8010f96:	3708      	adds	r7, #8
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	bd80      	pop	{r7, pc}
 8010f9c:	58020000 	.word	0x58020000

08010fa0 <spi_unselect>:

void spi_unselect (int8_t board)
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b082      	sub	sp, #8
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 1);
 8010faa:	2201      	movs	r2, #1
 8010fac:	2110      	movs	r1, #16
 8010fae:	4803      	ldr	r0, [pc, #12]	@ (8010fbc <spi_unselect+0x1c>)
 8010fb0:	f7f5 f92c 	bl	800620c <HAL_GPIO_WritePin>
}
 8010fb4:	bf00      	nop
 8010fb6:	3708      	adds	r7, #8
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	bd80      	pop	{r7, pc}
 8010fbc:	58020000 	.word	0x58020000

08010fc0 <spi_write>:

    return receive;
}

void spi_write (int8_t board, uint8_t *data, uint8_t size)
{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b082      	sub	sp, #8
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	6039      	str	r1, [r7, #0]
 8010fca:	71fb      	strb	r3, [r7, #7]
 8010fcc:	4613      	mov	r3, r2
 8010fce:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_Transmit(&hspi1, data, size, 100);
 8010fd0:	79bb      	ldrb	r3, [r7, #6]
 8010fd2:	b29a      	uxth	r2, r3
 8010fd4:	2364      	movs	r3, #100	@ 0x64
 8010fd6:	6839      	ldr	r1, [r7, #0]
 8010fd8:	4803      	ldr	r0, [pc, #12]	@ (8010fe8 <spi_write+0x28>)
 8010fda:	f7fa fc6d 	bl	800b8b8 <HAL_SPI_Transmit>
}
 8010fde:	bf00      	nop
 8010fe0:	3708      	adds	r7, #8
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	bd80      	pop	{r7, pc}
 8010fe6:	bf00      	nop
 8010fe8:	240002d4 	.word	0x240002d4

08010fec <spi_bidirectionally_transfer>:
	HAL_SPI_Receive(&hspi1, result, size, 100);
}


void spi_bidirectionally_transfer (int8_t board, uint8_t *result, uint8_t *data, uint8_t size)
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b086      	sub	sp, #24
 8010ff0:	af02      	add	r7, sp, #8
 8010ff2:	60b9      	str	r1, [r7, #8]
 8010ff4:	607a      	str	r2, [r7, #4]
 8010ff6:	461a      	mov	r2, r3
 8010ff8:	4603      	mov	r3, r0
 8010ffa:	73fb      	strb	r3, [r7, #15]
 8010ffc:	4613      	mov	r3, r2
 8010ffe:	73bb      	strb	r3, [r7, #14]

	HAL_SPI_TransmitReceive(&hspi1, data, result, size, 50);
 8011000:	7bbb      	ldrb	r3, [r7, #14]
 8011002:	b29b      	uxth	r3, r3
 8011004:	2232      	movs	r2, #50	@ 0x32
 8011006:	9200      	str	r2, [sp, #0]
 8011008:	68ba      	ldr	r2, [r7, #8]
 801100a:	6879      	ldr	r1, [r7, #4]
 801100c:	4803      	ldr	r0, [pc, #12]	@ (801101c <spi_bidirectionally_transfer+0x30>)
 801100e:	f7fa fe41 	bl	800bc94 <HAL_SPI_TransmitReceive>
}
 8011012:	bf00      	nop
 8011014:	3710      	adds	r7, #16
 8011016:	46bd      	mov	sp, r7
 8011018:	bd80      	pop	{r7, pc}
 801101a:	bf00      	nop
 801101c:	240002d4 	.word	0x240002d4

08011020 <__assert_func>:
 8011020:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011022:	4614      	mov	r4, r2
 8011024:	461a      	mov	r2, r3
 8011026:	4b09      	ldr	r3, [pc, #36]	@ (801104c <__assert_func+0x2c>)
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	4605      	mov	r5, r0
 801102c:	68d8      	ldr	r0, [r3, #12]
 801102e:	b954      	cbnz	r4, 8011046 <__assert_func+0x26>
 8011030:	4b07      	ldr	r3, [pc, #28]	@ (8011050 <__assert_func+0x30>)
 8011032:	461c      	mov	r4, r3
 8011034:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011038:	9100      	str	r1, [sp, #0]
 801103a:	462b      	mov	r3, r5
 801103c:	4905      	ldr	r1, [pc, #20]	@ (8011054 <__assert_func+0x34>)
 801103e:	f000 f8b1 	bl	80111a4 <fiprintf>
 8011042:	f000 f9ac 	bl	801139e <abort>
 8011046:	4b04      	ldr	r3, [pc, #16]	@ (8011058 <__assert_func+0x38>)
 8011048:	e7f4      	b.n	8011034 <__assert_func+0x14>
 801104a:	bf00      	nop
 801104c:	24000098 	.word	0x24000098
 8011050:	08012993 	.word	0x08012993
 8011054:	08012965 	.word	0x08012965
 8011058:	08012958 	.word	0x08012958

0801105c <std>:
 801105c:	2300      	movs	r3, #0
 801105e:	b510      	push	{r4, lr}
 8011060:	4604      	mov	r4, r0
 8011062:	e9c0 3300 	strd	r3, r3, [r0]
 8011066:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801106a:	6083      	str	r3, [r0, #8]
 801106c:	8181      	strh	r1, [r0, #12]
 801106e:	6643      	str	r3, [r0, #100]	@ 0x64
 8011070:	81c2      	strh	r2, [r0, #14]
 8011072:	6183      	str	r3, [r0, #24]
 8011074:	4619      	mov	r1, r3
 8011076:	2208      	movs	r2, #8
 8011078:	305c      	adds	r0, #92	@ 0x5c
 801107a:	f000 f906 	bl	801128a <memset>
 801107e:	4b0d      	ldr	r3, [pc, #52]	@ (80110b4 <std+0x58>)
 8011080:	6263      	str	r3, [r4, #36]	@ 0x24
 8011082:	4b0d      	ldr	r3, [pc, #52]	@ (80110b8 <std+0x5c>)
 8011084:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011086:	4b0d      	ldr	r3, [pc, #52]	@ (80110bc <std+0x60>)
 8011088:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801108a:	4b0d      	ldr	r3, [pc, #52]	@ (80110c0 <std+0x64>)
 801108c:	6323      	str	r3, [r4, #48]	@ 0x30
 801108e:	4b0d      	ldr	r3, [pc, #52]	@ (80110c4 <std+0x68>)
 8011090:	6224      	str	r4, [r4, #32]
 8011092:	429c      	cmp	r4, r3
 8011094:	d006      	beq.n	80110a4 <std+0x48>
 8011096:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801109a:	4294      	cmp	r4, r2
 801109c:	d002      	beq.n	80110a4 <std+0x48>
 801109e:	33d0      	adds	r3, #208	@ 0xd0
 80110a0:	429c      	cmp	r4, r3
 80110a2:	d105      	bne.n	80110b0 <std+0x54>
 80110a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80110a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80110ac:	f000 b966 	b.w	801137c <__retarget_lock_init_recursive>
 80110b0:	bd10      	pop	{r4, pc}
 80110b2:	bf00      	nop
 80110b4:	08011205 	.word	0x08011205
 80110b8:	08011227 	.word	0x08011227
 80110bc:	0801125f 	.word	0x0801125f
 80110c0:	08011283 	.word	0x08011283
 80110c4:	24001720 	.word	0x24001720

080110c8 <stdio_exit_handler>:
 80110c8:	4a02      	ldr	r2, [pc, #8]	@ (80110d4 <stdio_exit_handler+0xc>)
 80110ca:	4903      	ldr	r1, [pc, #12]	@ (80110d8 <stdio_exit_handler+0x10>)
 80110cc:	4803      	ldr	r0, [pc, #12]	@ (80110dc <stdio_exit_handler+0x14>)
 80110ce:	f000 b87b 	b.w	80111c8 <_fwalk_sglue>
 80110d2:	bf00      	nop
 80110d4:	2400008c 	.word	0x2400008c
 80110d8:	08011c45 	.word	0x08011c45
 80110dc:	2400009c 	.word	0x2400009c

080110e0 <cleanup_stdio>:
 80110e0:	6841      	ldr	r1, [r0, #4]
 80110e2:	4b0c      	ldr	r3, [pc, #48]	@ (8011114 <cleanup_stdio+0x34>)
 80110e4:	4299      	cmp	r1, r3
 80110e6:	b510      	push	{r4, lr}
 80110e8:	4604      	mov	r4, r0
 80110ea:	d001      	beq.n	80110f0 <cleanup_stdio+0x10>
 80110ec:	f000 fdaa 	bl	8011c44 <_fflush_r>
 80110f0:	68a1      	ldr	r1, [r4, #8]
 80110f2:	4b09      	ldr	r3, [pc, #36]	@ (8011118 <cleanup_stdio+0x38>)
 80110f4:	4299      	cmp	r1, r3
 80110f6:	d002      	beq.n	80110fe <cleanup_stdio+0x1e>
 80110f8:	4620      	mov	r0, r4
 80110fa:	f000 fda3 	bl	8011c44 <_fflush_r>
 80110fe:	68e1      	ldr	r1, [r4, #12]
 8011100:	4b06      	ldr	r3, [pc, #24]	@ (801111c <cleanup_stdio+0x3c>)
 8011102:	4299      	cmp	r1, r3
 8011104:	d004      	beq.n	8011110 <cleanup_stdio+0x30>
 8011106:	4620      	mov	r0, r4
 8011108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801110c:	f000 bd9a 	b.w	8011c44 <_fflush_r>
 8011110:	bd10      	pop	{r4, pc}
 8011112:	bf00      	nop
 8011114:	24001720 	.word	0x24001720
 8011118:	24001788 	.word	0x24001788
 801111c:	240017f0 	.word	0x240017f0

08011120 <global_stdio_init.part.0>:
 8011120:	b510      	push	{r4, lr}
 8011122:	4b0b      	ldr	r3, [pc, #44]	@ (8011150 <global_stdio_init.part.0+0x30>)
 8011124:	4c0b      	ldr	r4, [pc, #44]	@ (8011154 <global_stdio_init.part.0+0x34>)
 8011126:	4a0c      	ldr	r2, [pc, #48]	@ (8011158 <global_stdio_init.part.0+0x38>)
 8011128:	601a      	str	r2, [r3, #0]
 801112a:	4620      	mov	r0, r4
 801112c:	2200      	movs	r2, #0
 801112e:	2104      	movs	r1, #4
 8011130:	f7ff ff94 	bl	801105c <std>
 8011134:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011138:	2201      	movs	r2, #1
 801113a:	2109      	movs	r1, #9
 801113c:	f7ff ff8e 	bl	801105c <std>
 8011140:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011144:	2202      	movs	r2, #2
 8011146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801114a:	2112      	movs	r1, #18
 801114c:	f7ff bf86 	b.w	801105c <std>
 8011150:	24001858 	.word	0x24001858
 8011154:	24001720 	.word	0x24001720
 8011158:	080110c9 	.word	0x080110c9

0801115c <__sfp_lock_acquire>:
 801115c:	4801      	ldr	r0, [pc, #4]	@ (8011164 <__sfp_lock_acquire+0x8>)
 801115e:	f000 b90e 	b.w	801137e <__retarget_lock_acquire_recursive>
 8011162:	bf00      	nop
 8011164:	24001861 	.word	0x24001861

08011168 <__sfp_lock_release>:
 8011168:	4801      	ldr	r0, [pc, #4]	@ (8011170 <__sfp_lock_release+0x8>)
 801116a:	f000 b909 	b.w	8011380 <__retarget_lock_release_recursive>
 801116e:	bf00      	nop
 8011170:	24001861 	.word	0x24001861

08011174 <__sinit>:
 8011174:	b510      	push	{r4, lr}
 8011176:	4604      	mov	r4, r0
 8011178:	f7ff fff0 	bl	801115c <__sfp_lock_acquire>
 801117c:	6a23      	ldr	r3, [r4, #32]
 801117e:	b11b      	cbz	r3, 8011188 <__sinit+0x14>
 8011180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011184:	f7ff bff0 	b.w	8011168 <__sfp_lock_release>
 8011188:	4b04      	ldr	r3, [pc, #16]	@ (801119c <__sinit+0x28>)
 801118a:	6223      	str	r3, [r4, #32]
 801118c:	4b04      	ldr	r3, [pc, #16]	@ (80111a0 <__sinit+0x2c>)
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d1f5      	bne.n	8011180 <__sinit+0xc>
 8011194:	f7ff ffc4 	bl	8011120 <global_stdio_init.part.0>
 8011198:	e7f2      	b.n	8011180 <__sinit+0xc>
 801119a:	bf00      	nop
 801119c:	080110e1 	.word	0x080110e1
 80111a0:	24001858 	.word	0x24001858

080111a4 <fiprintf>:
 80111a4:	b40e      	push	{r1, r2, r3}
 80111a6:	b503      	push	{r0, r1, lr}
 80111a8:	4601      	mov	r1, r0
 80111aa:	ab03      	add	r3, sp, #12
 80111ac:	4805      	ldr	r0, [pc, #20]	@ (80111c4 <fiprintf+0x20>)
 80111ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80111b2:	6800      	ldr	r0, [r0, #0]
 80111b4:	9301      	str	r3, [sp, #4]
 80111b6:	f000 fa1b 	bl	80115f0 <_vfiprintf_r>
 80111ba:	b002      	add	sp, #8
 80111bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80111c0:	b003      	add	sp, #12
 80111c2:	4770      	bx	lr
 80111c4:	24000098 	.word	0x24000098

080111c8 <_fwalk_sglue>:
 80111c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111cc:	4607      	mov	r7, r0
 80111ce:	4688      	mov	r8, r1
 80111d0:	4614      	mov	r4, r2
 80111d2:	2600      	movs	r6, #0
 80111d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80111d8:	f1b9 0901 	subs.w	r9, r9, #1
 80111dc:	d505      	bpl.n	80111ea <_fwalk_sglue+0x22>
 80111de:	6824      	ldr	r4, [r4, #0]
 80111e0:	2c00      	cmp	r4, #0
 80111e2:	d1f7      	bne.n	80111d4 <_fwalk_sglue+0xc>
 80111e4:	4630      	mov	r0, r6
 80111e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111ea:	89ab      	ldrh	r3, [r5, #12]
 80111ec:	2b01      	cmp	r3, #1
 80111ee:	d907      	bls.n	8011200 <_fwalk_sglue+0x38>
 80111f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80111f4:	3301      	adds	r3, #1
 80111f6:	d003      	beq.n	8011200 <_fwalk_sglue+0x38>
 80111f8:	4629      	mov	r1, r5
 80111fa:	4638      	mov	r0, r7
 80111fc:	47c0      	blx	r8
 80111fe:	4306      	orrs	r6, r0
 8011200:	3568      	adds	r5, #104	@ 0x68
 8011202:	e7e9      	b.n	80111d8 <_fwalk_sglue+0x10>

08011204 <__sread>:
 8011204:	b510      	push	{r4, lr}
 8011206:	460c      	mov	r4, r1
 8011208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801120c:	f000 f868 	bl	80112e0 <_read_r>
 8011210:	2800      	cmp	r0, #0
 8011212:	bfab      	itete	ge
 8011214:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011216:	89a3      	ldrhlt	r3, [r4, #12]
 8011218:	181b      	addge	r3, r3, r0
 801121a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801121e:	bfac      	ite	ge
 8011220:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011222:	81a3      	strhlt	r3, [r4, #12]
 8011224:	bd10      	pop	{r4, pc}

08011226 <__swrite>:
 8011226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801122a:	461f      	mov	r7, r3
 801122c:	898b      	ldrh	r3, [r1, #12]
 801122e:	05db      	lsls	r3, r3, #23
 8011230:	4605      	mov	r5, r0
 8011232:	460c      	mov	r4, r1
 8011234:	4616      	mov	r6, r2
 8011236:	d505      	bpl.n	8011244 <__swrite+0x1e>
 8011238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801123c:	2302      	movs	r3, #2
 801123e:	2200      	movs	r2, #0
 8011240:	f000 f83c 	bl	80112bc <_lseek_r>
 8011244:	89a3      	ldrh	r3, [r4, #12]
 8011246:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801124a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801124e:	81a3      	strh	r3, [r4, #12]
 8011250:	4632      	mov	r2, r6
 8011252:	463b      	mov	r3, r7
 8011254:	4628      	mov	r0, r5
 8011256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801125a:	f000 b853 	b.w	8011304 <_write_r>

0801125e <__sseek>:
 801125e:	b510      	push	{r4, lr}
 8011260:	460c      	mov	r4, r1
 8011262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011266:	f000 f829 	bl	80112bc <_lseek_r>
 801126a:	1c43      	adds	r3, r0, #1
 801126c:	89a3      	ldrh	r3, [r4, #12]
 801126e:	bf15      	itete	ne
 8011270:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011272:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011276:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801127a:	81a3      	strheq	r3, [r4, #12]
 801127c:	bf18      	it	ne
 801127e:	81a3      	strhne	r3, [r4, #12]
 8011280:	bd10      	pop	{r4, pc}

08011282 <__sclose>:
 8011282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011286:	f000 b809 	b.w	801129c <_close_r>

0801128a <memset>:
 801128a:	4402      	add	r2, r0
 801128c:	4603      	mov	r3, r0
 801128e:	4293      	cmp	r3, r2
 8011290:	d100      	bne.n	8011294 <memset+0xa>
 8011292:	4770      	bx	lr
 8011294:	f803 1b01 	strb.w	r1, [r3], #1
 8011298:	e7f9      	b.n	801128e <memset+0x4>
	...

0801129c <_close_r>:
 801129c:	b538      	push	{r3, r4, r5, lr}
 801129e:	4d06      	ldr	r5, [pc, #24]	@ (80112b8 <_close_r+0x1c>)
 80112a0:	2300      	movs	r3, #0
 80112a2:	4604      	mov	r4, r0
 80112a4:	4608      	mov	r0, r1
 80112a6:	602b      	str	r3, [r5, #0]
 80112a8:	f7f0 fb36 	bl	8001918 <_close>
 80112ac:	1c43      	adds	r3, r0, #1
 80112ae:	d102      	bne.n	80112b6 <_close_r+0x1a>
 80112b0:	682b      	ldr	r3, [r5, #0]
 80112b2:	b103      	cbz	r3, 80112b6 <_close_r+0x1a>
 80112b4:	6023      	str	r3, [r4, #0]
 80112b6:	bd38      	pop	{r3, r4, r5, pc}
 80112b8:	2400185c 	.word	0x2400185c

080112bc <_lseek_r>:
 80112bc:	b538      	push	{r3, r4, r5, lr}
 80112be:	4d07      	ldr	r5, [pc, #28]	@ (80112dc <_lseek_r+0x20>)
 80112c0:	4604      	mov	r4, r0
 80112c2:	4608      	mov	r0, r1
 80112c4:	4611      	mov	r1, r2
 80112c6:	2200      	movs	r2, #0
 80112c8:	602a      	str	r2, [r5, #0]
 80112ca:	461a      	mov	r2, r3
 80112cc:	f7f0 fb4b 	bl	8001966 <_lseek>
 80112d0:	1c43      	adds	r3, r0, #1
 80112d2:	d102      	bne.n	80112da <_lseek_r+0x1e>
 80112d4:	682b      	ldr	r3, [r5, #0]
 80112d6:	b103      	cbz	r3, 80112da <_lseek_r+0x1e>
 80112d8:	6023      	str	r3, [r4, #0]
 80112da:	bd38      	pop	{r3, r4, r5, pc}
 80112dc:	2400185c 	.word	0x2400185c

080112e0 <_read_r>:
 80112e0:	b538      	push	{r3, r4, r5, lr}
 80112e2:	4d07      	ldr	r5, [pc, #28]	@ (8011300 <_read_r+0x20>)
 80112e4:	4604      	mov	r4, r0
 80112e6:	4608      	mov	r0, r1
 80112e8:	4611      	mov	r1, r2
 80112ea:	2200      	movs	r2, #0
 80112ec:	602a      	str	r2, [r5, #0]
 80112ee:	461a      	mov	r2, r3
 80112f0:	f7f0 fad9 	bl	80018a6 <_read>
 80112f4:	1c43      	adds	r3, r0, #1
 80112f6:	d102      	bne.n	80112fe <_read_r+0x1e>
 80112f8:	682b      	ldr	r3, [r5, #0]
 80112fa:	b103      	cbz	r3, 80112fe <_read_r+0x1e>
 80112fc:	6023      	str	r3, [r4, #0]
 80112fe:	bd38      	pop	{r3, r4, r5, pc}
 8011300:	2400185c 	.word	0x2400185c

08011304 <_write_r>:
 8011304:	b538      	push	{r3, r4, r5, lr}
 8011306:	4d07      	ldr	r5, [pc, #28]	@ (8011324 <_write_r+0x20>)
 8011308:	4604      	mov	r4, r0
 801130a:	4608      	mov	r0, r1
 801130c:	4611      	mov	r1, r2
 801130e:	2200      	movs	r2, #0
 8011310:	602a      	str	r2, [r5, #0]
 8011312:	461a      	mov	r2, r3
 8011314:	f7f0 fae4 	bl	80018e0 <_write>
 8011318:	1c43      	adds	r3, r0, #1
 801131a:	d102      	bne.n	8011322 <_write_r+0x1e>
 801131c:	682b      	ldr	r3, [r5, #0]
 801131e:	b103      	cbz	r3, 8011322 <_write_r+0x1e>
 8011320:	6023      	str	r3, [r4, #0]
 8011322:	bd38      	pop	{r3, r4, r5, pc}
 8011324:	2400185c 	.word	0x2400185c

08011328 <__errno>:
 8011328:	4b01      	ldr	r3, [pc, #4]	@ (8011330 <__errno+0x8>)
 801132a:	6818      	ldr	r0, [r3, #0]
 801132c:	4770      	bx	lr
 801132e:	bf00      	nop
 8011330:	24000098 	.word	0x24000098

08011334 <__libc_init_array>:
 8011334:	b570      	push	{r4, r5, r6, lr}
 8011336:	4d0d      	ldr	r5, [pc, #52]	@ (801136c <__libc_init_array+0x38>)
 8011338:	4c0d      	ldr	r4, [pc, #52]	@ (8011370 <__libc_init_array+0x3c>)
 801133a:	1b64      	subs	r4, r4, r5
 801133c:	10a4      	asrs	r4, r4, #2
 801133e:	2600      	movs	r6, #0
 8011340:	42a6      	cmp	r6, r4
 8011342:	d109      	bne.n	8011358 <__libc_init_array+0x24>
 8011344:	4d0b      	ldr	r5, [pc, #44]	@ (8011374 <__libc_init_array+0x40>)
 8011346:	4c0c      	ldr	r4, [pc, #48]	@ (8011378 <__libc_init_array+0x44>)
 8011348:	f000 fe10 	bl	8011f6c <_init>
 801134c:	1b64      	subs	r4, r4, r5
 801134e:	10a4      	asrs	r4, r4, #2
 8011350:	2600      	movs	r6, #0
 8011352:	42a6      	cmp	r6, r4
 8011354:	d105      	bne.n	8011362 <__libc_init_array+0x2e>
 8011356:	bd70      	pop	{r4, r5, r6, pc}
 8011358:	f855 3b04 	ldr.w	r3, [r5], #4
 801135c:	4798      	blx	r3
 801135e:	3601      	adds	r6, #1
 8011360:	e7ee      	b.n	8011340 <__libc_init_array+0xc>
 8011362:	f855 3b04 	ldr.w	r3, [r5], #4
 8011366:	4798      	blx	r3
 8011368:	3601      	adds	r6, #1
 801136a:	e7f2      	b.n	8011352 <__libc_init_array+0x1e>
 801136c:	080129d0 	.word	0x080129d0
 8011370:	080129d0 	.word	0x080129d0
 8011374:	080129d0 	.word	0x080129d0
 8011378:	080129d4 	.word	0x080129d4

0801137c <__retarget_lock_init_recursive>:
 801137c:	4770      	bx	lr

0801137e <__retarget_lock_acquire_recursive>:
 801137e:	4770      	bx	lr

08011380 <__retarget_lock_release_recursive>:
 8011380:	4770      	bx	lr

08011382 <memcpy>:
 8011382:	440a      	add	r2, r1
 8011384:	4291      	cmp	r1, r2
 8011386:	f100 33ff 	add.w	r3, r0, #4294967295
 801138a:	d100      	bne.n	801138e <memcpy+0xc>
 801138c:	4770      	bx	lr
 801138e:	b510      	push	{r4, lr}
 8011390:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011394:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011398:	4291      	cmp	r1, r2
 801139a:	d1f9      	bne.n	8011390 <memcpy+0xe>
 801139c:	bd10      	pop	{r4, pc}

0801139e <abort>:
 801139e:	b508      	push	{r3, lr}
 80113a0:	2006      	movs	r0, #6
 80113a2:	f000 fd33 	bl	8011e0c <raise>
 80113a6:	2001      	movs	r0, #1
 80113a8:	f7f0 fa72 	bl	8001890 <_exit>

080113ac <_free_r>:
 80113ac:	b538      	push	{r3, r4, r5, lr}
 80113ae:	4605      	mov	r5, r0
 80113b0:	2900      	cmp	r1, #0
 80113b2:	d041      	beq.n	8011438 <_free_r+0x8c>
 80113b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80113b8:	1f0c      	subs	r4, r1, #4
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	bfb8      	it	lt
 80113be:	18e4      	addlt	r4, r4, r3
 80113c0:	f000 f8e0 	bl	8011584 <__malloc_lock>
 80113c4:	4a1d      	ldr	r2, [pc, #116]	@ (801143c <_free_r+0x90>)
 80113c6:	6813      	ldr	r3, [r2, #0]
 80113c8:	b933      	cbnz	r3, 80113d8 <_free_r+0x2c>
 80113ca:	6063      	str	r3, [r4, #4]
 80113cc:	6014      	str	r4, [r2, #0]
 80113ce:	4628      	mov	r0, r5
 80113d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80113d4:	f000 b8dc 	b.w	8011590 <__malloc_unlock>
 80113d8:	42a3      	cmp	r3, r4
 80113da:	d908      	bls.n	80113ee <_free_r+0x42>
 80113dc:	6820      	ldr	r0, [r4, #0]
 80113de:	1821      	adds	r1, r4, r0
 80113e0:	428b      	cmp	r3, r1
 80113e2:	bf01      	itttt	eq
 80113e4:	6819      	ldreq	r1, [r3, #0]
 80113e6:	685b      	ldreq	r3, [r3, #4]
 80113e8:	1809      	addeq	r1, r1, r0
 80113ea:	6021      	streq	r1, [r4, #0]
 80113ec:	e7ed      	b.n	80113ca <_free_r+0x1e>
 80113ee:	461a      	mov	r2, r3
 80113f0:	685b      	ldr	r3, [r3, #4]
 80113f2:	b10b      	cbz	r3, 80113f8 <_free_r+0x4c>
 80113f4:	42a3      	cmp	r3, r4
 80113f6:	d9fa      	bls.n	80113ee <_free_r+0x42>
 80113f8:	6811      	ldr	r1, [r2, #0]
 80113fa:	1850      	adds	r0, r2, r1
 80113fc:	42a0      	cmp	r0, r4
 80113fe:	d10b      	bne.n	8011418 <_free_r+0x6c>
 8011400:	6820      	ldr	r0, [r4, #0]
 8011402:	4401      	add	r1, r0
 8011404:	1850      	adds	r0, r2, r1
 8011406:	4283      	cmp	r3, r0
 8011408:	6011      	str	r1, [r2, #0]
 801140a:	d1e0      	bne.n	80113ce <_free_r+0x22>
 801140c:	6818      	ldr	r0, [r3, #0]
 801140e:	685b      	ldr	r3, [r3, #4]
 8011410:	6053      	str	r3, [r2, #4]
 8011412:	4408      	add	r0, r1
 8011414:	6010      	str	r0, [r2, #0]
 8011416:	e7da      	b.n	80113ce <_free_r+0x22>
 8011418:	d902      	bls.n	8011420 <_free_r+0x74>
 801141a:	230c      	movs	r3, #12
 801141c:	602b      	str	r3, [r5, #0]
 801141e:	e7d6      	b.n	80113ce <_free_r+0x22>
 8011420:	6820      	ldr	r0, [r4, #0]
 8011422:	1821      	adds	r1, r4, r0
 8011424:	428b      	cmp	r3, r1
 8011426:	bf04      	itt	eq
 8011428:	6819      	ldreq	r1, [r3, #0]
 801142a:	685b      	ldreq	r3, [r3, #4]
 801142c:	6063      	str	r3, [r4, #4]
 801142e:	bf04      	itt	eq
 8011430:	1809      	addeq	r1, r1, r0
 8011432:	6021      	streq	r1, [r4, #0]
 8011434:	6054      	str	r4, [r2, #4]
 8011436:	e7ca      	b.n	80113ce <_free_r+0x22>
 8011438:	bd38      	pop	{r3, r4, r5, pc}
 801143a:	bf00      	nop
 801143c:	24001868 	.word	0x24001868

08011440 <sbrk_aligned>:
 8011440:	b570      	push	{r4, r5, r6, lr}
 8011442:	4e0f      	ldr	r6, [pc, #60]	@ (8011480 <sbrk_aligned+0x40>)
 8011444:	460c      	mov	r4, r1
 8011446:	6831      	ldr	r1, [r6, #0]
 8011448:	4605      	mov	r5, r0
 801144a:	b911      	cbnz	r1, 8011452 <sbrk_aligned+0x12>
 801144c:	f000 fcfa 	bl	8011e44 <_sbrk_r>
 8011450:	6030      	str	r0, [r6, #0]
 8011452:	4621      	mov	r1, r4
 8011454:	4628      	mov	r0, r5
 8011456:	f000 fcf5 	bl	8011e44 <_sbrk_r>
 801145a:	1c43      	adds	r3, r0, #1
 801145c:	d103      	bne.n	8011466 <sbrk_aligned+0x26>
 801145e:	f04f 34ff 	mov.w	r4, #4294967295
 8011462:	4620      	mov	r0, r4
 8011464:	bd70      	pop	{r4, r5, r6, pc}
 8011466:	1cc4      	adds	r4, r0, #3
 8011468:	f024 0403 	bic.w	r4, r4, #3
 801146c:	42a0      	cmp	r0, r4
 801146e:	d0f8      	beq.n	8011462 <sbrk_aligned+0x22>
 8011470:	1a21      	subs	r1, r4, r0
 8011472:	4628      	mov	r0, r5
 8011474:	f000 fce6 	bl	8011e44 <_sbrk_r>
 8011478:	3001      	adds	r0, #1
 801147a:	d1f2      	bne.n	8011462 <sbrk_aligned+0x22>
 801147c:	e7ef      	b.n	801145e <sbrk_aligned+0x1e>
 801147e:	bf00      	nop
 8011480:	24001864 	.word	0x24001864

08011484 <_malloc_r>:
 8011484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011488:	1ccd      	adds	r5, r1, #3
 801148a:	f025 0503 	bic.w	r5, r5, #3
 801148e:	3508      	adds	r5, #8
 8011490:	2d0c      	cmp	r5, #12
 8011492:	bf38      	it	cc
 8011494:	250c      	movcc	r5, #12
 8011496:	2d00      	cmp	r5, #0
 8011498:	4606      	mov	r6, r0
 801149a:	db01      	blt.n	80114a0 <_malloc_r+0x1c>
 801149c:	42a9      	cmp	r1, r5
 801149e:	d904      	bls.n	80114aa <_malloc_r+0x26>
 80114a0:	230c      	movs	r3, #12
 80114a2:	6033      	str	r3, [r6, #0]
 80114a4:	2000      	movs	r0, #0
 80114a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80114aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011580 <_malloc_r+0xfc>
 80114ae:	f000 f869 	bl	8011584 <__malloc_lock>
 80114b2:	f8d8 3000 	ldr.w	r3, [r8]
 80114b6:	461c      	mov	r4, r3
 80114b8:	bb44      	cbnz	r4, 801150c <_malloc_r+0x88>
 80114ba:	4629      	mov	r1, r5
 80114bc:	4630      	mov	r0, r6
 80114be:	f7ff ffbf 	bl	8011440 <sbrk_aligned>
 80114c2:	1c43      	adds	r3, r0, #1
 80114c4:	4604      	mov	r4, r0
 80114c6:	d158      	bne.n	801157a <_malloc_r+0xf6>
 80114c8:	f8d8 4000 	ldr.w	r4, [r8]
 80114cc:	4627      	mov	r7, r4
 80114ce:	2f00      	cmp	r7, #0
 80114d0:	d143      	bne.n	801155a <_malloc_r+0xd6>
 80114d2:	2c00      	cmp	r4, #0
 80114d4:	d04b      	beq.n	801156e <_malloc_r+0xea>
 80114d6:	6823      	ldr	r3, [r4, #0]
 80114d8:	4639      	mov	r1, r7
 80114da:	4630      	mov	r0, r6
 80114dc:	eb04 0903 	add.w	r9, r4, r3
 80114e0:	f000 fcb0 	bl	8011e44 <_sbrk_r>
 80114e4:	4581      	cmp	r9, r0
 80114e6:	d142      	bne.n	801156e <_malloc_r+0xea>
 80114e8:	6821      	ldr	r1, [r4, #0]
 80114ea:	1a6d      	subs	r5, r5, r1
 80114ec:	4629      	mov	r1, r5
 80114ee:	4630      	mov	r0, r6
 80114f0:	f7ff ffa6 	bl	8011440 <sbrk_aligned>
 80114f4:	3001      	adds	r0, #1
 80114f6:	d03a      	beq.n	801156e <_malloc_r+0xea>
 80114f8:	6823      	ldr	r3, [r4, #0]
 80114fa:	442b      	add	r3, r5
 80114fc:	6023      	str	r3, [r4, #0]
 80114fe:	f8d8 3000 	ldr.w	r3, [r8]
 8011502:	685a      	ldr	r2, [r3, #4]
 8011504:	bb62      	cbnz	r2, 8011560 <_malloc_r+0xdc>
 8011506:	f8c8 7000 	str.w	r7, [r8]
 801150a:	e00f      	b.n	801152c <_malloc_r+0xa8>
 801150c:	6822      	ldr	r2, [r4, #0]
 801150e:	1b52      	subs	r2, r2, r5
 8011510:	d420      	bmi.n	8011554 <_malloc_r+0xd0>
 8011512:	2a0b      	cmp	r2, #11
 8011514:	d917      	bls.n	8011546 <_malloc_r+0xc2>
 8011516:	1961      	adds	r1, r4, r5
 8011518:	42a3      	cmp	r3, r4
 801151a:	6025      	str	r5, [r4, #0]
 801151c:	bf18      	it	ne
 801151e:	6059      	strne	r1, [r3, #4]
 8011520:	6863      	ldr	r3, [r4, #4]
 8011522:	bf08      	it	eq
 8011524:	f8c8 1000 	streq.w	r1, [r8]
 8011528:	5162      	str	r2, [r4, r5]
 801152a:	604b      	str	r3, [r1, #4]
 801152c:	4630      	mov	r0, r6
 801152e:	f000 f82f 	bl	8011590 <__malloc_unlock>
 8011532:	f104 000b 	add.w	r0, r4, #11
 8011536:	1d23      	adds	r3, r4, #4
 8011538:	f020 0007 	bic.w	r0, r0, #7
 801153c:	1ac2      	subs	r2, r0, r3
 801153e:	bf1c      	itt	ne
 8011540:	1a1b      	subne	r3, r3, r0
 8011542:	50a3      	strne	r3, [r4, r2]
 8011544:	e7af      	b.n	80114a6 <_malloc_r+0x22>
 8011546:	6862      	ldr	r2, [r4, #4]
 8011548:	42a3      	cmp	r3, r4
 801154a:	bf0c      	ite	eq
 801154c:	f8c8 2000 	streq.w	r2, [r8]
 8011550:	605a      	strne	r2, [r3, #4]
 8011552:	e7eb      	b.n	801152c <_malloc_r+0xa8>
 8011554:	4623      	mov	r3, r4
 8011556:	6864      	ldr	r4, [r4, #4]
 8011558:	e7ae      	b.n	80114b8 <_malloc_r+0x34>
 801155a:	463c      	mov	r4, r7
 801155c:	687f      	ldr	r7, [r7, #4]
 801155e:	e7b6      	b.n	80114ce <_malloc_r+0x4a>
 8011560:	461a      	mov	r2, r3
 8011562:	685b      	ldr	r3, [r3, #4]
 8011564:	42a3      	cmp	r3, r4
 8011566:	d1fb      	bne.n	8011560 <_malloc_r+0xdc>
 8011568:	2300      	movs	r3, #0
 801156a:	6053      	str	r3, [r2, #4]
 801156c:	e7de      	b.n	801152c <_malloc_r+0xa8>
 801156e:	230c      	movs	r3, #12
 8011570:	6033      	str	r3, [r6, #0]
 8011572:	4630      	mov	r0, r6
 8011574:	f000 f80c 	bl	8011590 <__malloc_unlock>
 8011578:	e794      	b.n	80114a4 <_malloc_r+0x20>
 801157a:	6005      	str	r5, [r0, #0]
 801157c:	e7d6      	b.n	801152c <_malloc_r+0xa8>
 801157e:	bf00      	nop
 8011580:	24001868 	.word	0x24001868

08011584 <__malloc_lock>:
 8011584:	4801      	ldr	r0, [pc, #4]	@ (801158c <__malloc_lock+0x8>)
 8011586:	f7ff befa 	b.w	801137e <__retarget_lock_acquire_recursive>
 801158a:	bf00      	nop
 801158c:	24001860 	.word	0x24001860

08011590 <__malloc_unlock>:
 8011590:	4801      	ldr	r0, [pc, #4]	@ (8011598 <__malloc_unlock+0x8>)
 8011592:	f7ff bef5 	b.w	8011380 <__retarget_lock_release_recursive>
 8011596:	bf00      	nop
 8011598:	24001860 	.word	0x24001860

0801159c <__sfputc_r>:
 801159c:	6893      	ldr	r3, [r2, #8]
 801159e:	3b01      	subs	r3, #1
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	b410      	push	{r4}
 80115a4:	6093      	str	r3, [r2, #8]
 80115a6:	da08      	bge.n	80115ba <__sfputc_r+0x1e>
 80115a8:	6994      	ldr	r4, [r2, #24]
 80115aa:	42a3      	cmp	r3, r4
 80115ac:	db01      	blt.n	80115b2 <__sfputc_r+0x16>
 80115ae:	290a      	cmp	r1, #10
 80115b0:	d103      	bne.n	80115ba <__sfputc_r+0x1e>
 80115b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80115b6:	f000 bb6d 	b.w	8011c94 <__swbuf_r>
 80115ba:	6813      	ldr	r3, [r2, #0]
 80115bc:	1c58      	adds	r0, r3, #1
 80115be:	6010      	str	r0, [r2, #0]
 80115c0:	7019      	strb	r1, [r3, #0]
 80115c2:	4608      	mov	r0, r1
 80115c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80115c8:	4770      	bx	lr

080115ca <__sfputs_r>:
 80115ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115cc:	4606      	mov	r6, r0
 80115ce:	460f      	mov	r7, r1
 80115d0:	4614      	mov	r4, r2
 80115d2:	18d5      	adds	r5, r2, r3
 80115d4:	42ac      	cmp	r4, r5
 80115d6:	d101      	bne.n	80115dc <__sfputs_r+0x12>
 80115d8:	2000      	movs	r0, #0
 80115da:	e007      	b.n	80115ec <__sfputs_r+0x22>
 80115dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115e0:	463a      	mov	r2, r7
 80115e2:	4630      	mov	r0, r6
 80115e4:	f7ff ffda 	bl	801159c <__sfputc_r>
 80115e8:	1c43      	adds	r3, r0, #1
 80115ea:	d1f3      	bne.n	80115d4 <__sfputs_r+0xa>
 80115ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080115f0 <_vfiprintf_r>:
 80115f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115f4:	460d      	mov	r5, r1
 80115f6:	b09d      	sub	sp, #116	@ 0x74
 80115f8:	4614      	mov	r4, r2
 80115fa:	4698      	mov	r8, r3
 80115fc:	4606      	mov	r6, r0
 80115fe:	b118      	cbz	r0, 8011608 <_vfiprintf_r+0x18>
 8011600:	6a03      	ldr	r3, [r0, #32]
 8011602:	b90b      	cbnz	r3, 8011608 <_vfiprintf_r+0x18>
 8011604:	f7ff fdb6 	bl	8011174 <__sinit>
 8011608:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801160a:	07d9      	lsls	r1, r3, #31
 801160c:	d405      	bmi.n	801161a <_vfiprintf_r+0x2a>
 801160e:	89ab      	ldrh	r3, [r5, #12]
 8011610:	059a      	lsls	r2, r3, #22
 8011612:	d402      	bmi.n	801161a <_vfiprintf_r+0x2a>
 8011614:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011616:	f7ff feb2 	bl	801137e <__retarget_lock_acquire_recursive>
 801161a:	89ab      	ldrh	r3, [r5, #12]
 801161c:	071b      	lsls	r3, r3, #28
 801161e:	d501      	bpl.n	8011624 <_vfiprintf_r+0x34>
 8011620:	692b      	ldr	r3, [r5, #16]
 8011622:	b99b      	cbnz	r3, 801164c <_vfiprintf_r+0x5c>
 8011624:	4629      	mov	r1, r5
 8011626:	4630      	mov	r0, r6
 8011628:	f000 fb72 	bl	8011d10 <__swsetup_r>
 801162c:	b170      	cbz	r0, 801164c <_vfiprintf_r+0x5c>
 801162e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011630:	07dc      	lsls	r4, r3, #31
 8011632:	d504      	bpl.n	801163e <_vfiprintf_r+0x4e>
 8011634:	f04f 30ff 	mov.w	r0, #4294967295
 8011638:	b01d      	add	sp, #116	@ 0x74
 801163a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801163e:	89ab      	ldrh	r3, [r5, #12]
 8011640:	0598      	lsls	r0, r3, #22
 8011642:	d4f7      	bmi.n	8011634 <_vfiprintf_r+0x44>
 8011644:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011646:	f7ff fe9b 	bl	8011380 <__retarget_lock_release_recursive>
 801164a:	e7f3      	b.n	8011634 <_vfiprintf_r+0x44>
 801164c:	2300      	movs	r3, #0
 801164e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011650:	2320      	movs	r3, #32
 8011652:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011656:	f8cd 800c 	str.w	r8, [sp, #12]
 801165a:	2330      	movs	r3, #48	@ 0x30
 801165c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801180c <_vfiprintf_r+0x21c>
 8011660:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011664:	f04f 0901 	mov.w	r9, #1
 8011668:	4623      	mov	r3, r4
 801166a:	469a      	mov	sl, r3
 801166c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011670:	b10a      	cbz	r2, 8011676 <_vfiprintf_r+0x86>
 8011672:	2a25      	cmp	r2, #37	@ 0x25
 8011674:	d1f9      	bne.n	801166a <_vfiprintf_r+0x7a>
 8011676:	ebba 0b04 	subs.w	fp, sl, r4
 801167a:	d00b      	beq.n	8011694 <_vfiprintf_r+0xa4>
 801167c:	465b      	mov	r3, fp
 801167e:	4622      	mov	r2, r4
 8011680:	4629      	mov	r1, r5
 8011682:	4630      	mov	r0, r6
 8011684:	f7ff ffa1 	bl	80115ca <__sfputs_r>
 8011688:	3001      	adds	r0, #1
 801168a:	f000 80a7 	beq.w	80117dc <_vfiprintf_r+0x1ec>
 801168e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011690:	445a      	add	r2, fp
 8011692:	9209      	str	r2, [sp, #36]	@ 0x24
 8011694:	f89a 3000 	ldrb.w	r3, [sl]
 8011698:	2b00      	cmp	r3, #0
 801169a:	f000 809f 	beq.w	80117dc <_vfiprintf_r+0x1ec>
 801169e:	2300      	movs	r3, #0
 80116a0:	f04f 32ff 	mov.w	r2, #4294967295
 80116a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80116a8:	f10a 0a01 	add.w	sl, sl, #1
 80116ac:	9304      	str	r3, [sp, #16]
 80116ae:	9307      	str	r3, [sp, #28]
 80116b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80116b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80116b6:	4654      	mov	r4, sl
 80116b8:	2205      	movs	r2, #5
 80116ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116be:	4853      	ldr	r0, [pc, #332]	@ (801180c <_vfiprintf_r+0x21c>)
 80116c0:	f7ee fe0e 	bl	80002e0 <memchr>
 80116c4:	9a04      	ldr	r2, [sp, #16]
 80116c6:	b9d8      	cbnz	r0, 8011700 <_vfiprintf_r+0x110>
 80116c8:	06d1      	lsls	r1, r2, #27
 80116ca:	bf44      	itt	mi
 80116cc:	2320      	movmi	r3, #32
 80116ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80116d2:	0713      	lsls	r3, r2, #28
 80116d4:	bf44      	itt	mi
 80116d6:	232b      	movmi	r3, #43	@ 0x2b
 80116d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80116dc:	f89a 3000 	ldrb.w	r3, [sl]
 80116e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80116e2:	d015      	beq.n	8011710 <_vfiprintf_r+0x120>
 80116e4:	9a07      	ldr	r2, [sp, #28]
 80116e6:	4654      	mov	r4, sl
 80116e8:	2000      	movs	r0, #0
 80116ea:	f04f 0c0a 	mov.w	ip, #10
 80116ee:	4621      	mov	r1, r4
 80116f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80116f4:	3b30      	subs	r3, #48	@ 0x30
 80116f6:	2b09      	cmp	r3, #9
 80116f8:	d94b      	bls.n	8011792 <_vfiprintf_r+0x1a2>
 80116fa:	b1b0      	cbz	r0, 801172a <_vfiprintf_r+0x13a>
 80116fc:	9207      	str	r2, [sp, #28]
 80116fe:	e014      	b.n	801172a <_vfiprintf_r+0x13a>
 8011700:	eba0 0308 	sub.w	r3, r0, r8
 8011704:	fa09 f303 	lsl.w	r3, r9, r3
 8011708:	4313      	orrs	r3, r2
 801170a:	9304      	str	r3, [sp, #16]
 801170c:	46a2      	mov	sl, r4
 801170e:	e7d2      	b.n	80116b6 <_vfiprintf_r+0xc6>
 8011710:	9b03      	ldr	r3, [sp, #12]
 8011712:	1d19      	adds	r1, r3, #4
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	9103      	str	r1, [sp, #12]
 8011718:	2b00      	cmp	r3, #0
 801171a:	bfbb      	ittet	lt
 801171c:	425b      	neglt	r3, r3
 801171e:	f042 0202 	orrlt.w	r2, r2, #2
 8011722:	9307      	strge	r3, [sp, #28]
 8011724:	9307      	strlt	r3, [sp, #28]
 8011726:	bfb8      	it	lt
 8011728:	9204      	strlt	r2, [sp, #16]
 801172a:	7823      	ldrb	r3, [r4, #0]
 801172c:	2b2e      	cmp	r3, #46	@ 0x2e
 801172e:	d10a      	bne.n	8011746 <_vfiprintf_r+0x156>
 8011730:	7863      	ldrb	r3, [r4, #1]
 8011732:	2b2a      	cmp	r3, #42	@ 0x2a
 8011734:	d132      	bne.n	801179c <_vfiprintf_r+0x1ac>
 8011736:	9b03      	ldr	r3, [sp, #12]
 8011738:	1d1a      	adds	r2, r3, #4
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	9203      	str	r2, [sp, #12]
 801173e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011742:	3402      	adds	r4, #2
 8011744:	9305      	str	r3, [sp, #20]
 8011746:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801181c <_vfiprintf_r+0x22c>
 801174a:	7821      	ldrb	r1, [r4, #0]
 801174c:	2203      	movs	r2, #3
 801174e:	4650      	mov	r0, sl
 8011750:	f7ee fdc6 	bl	80002e0 <memchr>
 8011754:	b138      	cbz	r0, 8011766 <_vfiprintf_r+0x176>
 8011756:	9b04      	ldr	r3, [sp, #16]
 8011758:	eba0 000a 	sub.w	r0, r0, sl
 801175c:	2240      	movs	r2, #64	@ 0x40
 801175e:	4082      	lsls	r2, r0
 8011760:	4313      	orrs	r3, r2
 8011762:	3401      	adds	r4, #1
 8011764:	9304      	str	r3, [sp, #16]
 8011766:	f814 1b01 	ldrb.w	r1, [r4], #1
 801176a:	4829      	ldr	r0, [pc, #164]	@ (8011810 <_vfiprintf_r+0x220>)
 801176c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011770:	2206      	movs	r2, #6
 8011772:	f7ee fdb5 	bl	80002e0 <memchr>
 8011776:	2800      	cmp	r0, #0
 8011778:	d03f      	beq.n	80117fa <_vfiprintf_r+0x20a>
 801177a:	4b26      	ldr	r3, [pc, #152]	@ (8011814 <_vfiprintf_r+0x224>)
 801177c:	bb1b      	cbnz	r3, 80117c6 <_vfiprintf_r+0x1d6>
 801177e:	9b03      	ldr	r3, [sp, #12]
 8011780:	3307      	adds	r3, #7
 8011782:	f023 0307 	bic.w	r3, r3, #7
 8011786:	3308      	adds	r3, #8
 8011788:	9303      	str	r3, [sp, #12]
 801178a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801178c:	443b      	add	r3, r7
 801178e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011790:	e76a      	b.n	8011668 <_vfiprintf_r+0x78>
 8011792:	fb0c 3202 	mla	r2, ip, r2, r3
 8011796:	460c      	mov	r4, r1
 8011798:	2001      	movs	r0, #1
 801179a:	e7a8      	b.n	80116ee <_vfiprintf_r+0xfe>
 801179c:	2300      	movs	r3, #0
 801179e:	3401      	adds	r4, #1
 80117a0:	9305      	str	r3, [sp, #20]
 80117a2:	4619      	mov	r1, r3
 80117a4:	f04f 0c0a 	mov.w	ip, #10
 80117a8:	4620      	mov	r0, r4
 80117aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80117ae:	3a30      	subs	r2, #48	@ 0x30
 80117b0:	2a09      	cmp	r2, #9
 80117b2:	d903      	bls.n	80117bc <_vfiprintf_r+0x1cc>
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d0c6      	beq.n	8011746 <_vfiprintf_r+0x156>
 80117b8:	9105      	str	r1, [sp, #20]
 80117ba:	e7c4      	b.n	8011746 <_vfiprintf_r+0x156>
 80117bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80117c0:	4604      	mov	r4, r0
 80117c2:	2301      	movs	r3, #1
 80117c4:	e7f0      	b.n	80117a8 <_vfiprintf_r+0x1b8>
 80117c6:	ab03      	add	r3, sp, #12
 80117c8:	9300      	str	r3, [sp, #0]
 80117ca:	462a      	mov	r2, r5
 80117cc:	4b12      	ldr	r3, [pc, #72]	@ (8011818 <_vfiprintf_r+0x228>)
 80117ce:	a904      	add	r1, sp, #16
 80117d0:	4630      	mov	r0, r6
 80117d2:	f3af 8000 	nop.w
 80117d6:	4607      	mov	r7, r0
 80117d8:	1c78      	adds	r0, r7, #1
 80117da:	d1d6      	bne.n	801178a <_vfiprintf_r+0x19a>
 80117dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80117de:	07d9      	lsls	r1, r3, #31
 80117e0:	d405      	bmi.n	80117ee <_vfiprintf_r+0x1fe>
 80117e2:	89ab      	ldrh	r3, [r5, #12]
 80117e4:	059a      	lsls	r2, r3, #22
 80117e6:	d402      	bmi.n	80117ee <_vfiprintf_r+0x1fe>
 80117e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80117ea:	f7ff fdc9 	bl	8011380 <__retarget_lock_release_recursive>
 80117ee:	89ab      	ldrh	r3, [r5, #12]
 80117f0:	065b      	lsls	r3, r3, #25
 80117f2:	f53f af1f 	bmi.w	8011634 <_vfiprintf_r+0x44>
 80117f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80117f8:	e71e      	b.n	8011638 <_vfiprintf_r+0x48>
 80117fa:	ab03      	add	r3, sp, #12
 80117fc:	9300      	str	r3, [sp, #0]
 80117fe:	462a      	mov	r2, r5
 8011800:	4b05      	ldr	r3, [pc, #20]	@ (8011818 <_vfiprintf_r+0x228>)
 8011802:	a904      	add	r1, sp, #16
 8011804:	4630      	mov	r0, r6
 8011806:	f000 f879 	bl	80118fc <_printf_i>
 801180a:	e7e4      	b.n	80117d6 <_vfiprintf_r+0x1e6>
 801180c:	08012994 	.word	0x08012994
 8011810:	0801299e 	.word	0x0801299e
 8011814:	00000000 	.word	0x00000000
 8011818:	080115cb 	.word	0x080115cb
 801181c:	0801299a 	.word	0x0801299a

08011820 <_printf_common>:
 8011820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011824:	4616      	mov	r6, r2
 8011826:	4698      	mov	r8, r3
 8011828:	688a      	ldr	r2, [r1, #8]
 801182a:	690b      	ldr	r3, [r1, #16]
 801182c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011830:	4293      	cmp	r3, r2
 8011832:	bfb8      	it	lt
 8011834:	4613      	movlt	r3, r2
 8011836:	6033      	str	r3, [r6, #0]
 8011838:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801183c:	4607      	mov	r7, r0
 801183e:	460c      	mov	r4, r1
 8011840:	b10a      	cbz	r2, 8011846 <_printf_common+0x26>
 8011842:	3301      	adds	r3, #1
 8011844:	6033      	str	r3, [r6, #0]
 8011846:	6823      	ldr	r3, [r4, #0]
 8011848:	0699      	lsls	r1, r3, #26
 801184a:	bf42      	ittt	mi
 801184c:	6833      	ldrmi	r3, [r6, #0]
 801184e:	3302      	addmi	r3, #2
 8011850:	6033      	strmi	r3, [r6, #0]
 8011852:	6825      	ldr	r5, [r4, #0]
 8011854:	f015 0506 	ands.w	r5, r5, #6
 8011858:	d106      	bne.n	8011868 <_printf_common+0x48>
 801185a:	f104 0a19 	add.w	sl, r4, #25
 801185e:	68e3      	ldr	r3, [r4, #12]
 8011860:	6832      	ldr	r2, [r6, #0]
 8011862:	1a9b      	subs	r3, r3, r2
 8011864:	42ab      	cmp	r3, r5
 8011866:	dc26      	bgt.n	80118b6 <_printf_common+0x96>
 8011868:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801186c:	6822      	ldr	r2, [r4, #0]
 801186e:	3b00      	subs	r3, #0
 8011870:	bf18      	it	ne
 8011872:	2301      	movne	r3, #1
 8011874:	0692      	lsls	r2, r2, #26
 8011876:	d42b      	bmi.n	80118d0 <_printf_common+0xb0>
 8011878:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801187c:	4641      	mov	r1, r8
 801187e:	4638      	mov	r0, r7
 8011880:	47c8      	blx	r9
 8011882:	3001      	adds	r0, #1
 8011884:	d01e      	beq.n	80118c4 <_printf_common+0xa4>
 8011886:	6823      	ldr	r3, [r4, #0]
 8011888:	6922      	ldr	r2, [r4, #16]
 801188a:	f003 0306 	and.w	r3, r3, #6
 801188e:	2b04      	cmp	r3, #4
 8011890:	bf02      	ittt	eq
 8011892:	68e5      	ldreq	r5, [r4, #12]
 8011894:	6833      	ldreq	r3, [r6, #0]
 8011896:	1aed      	subeq	r5, r5, r3
 8011898:	68a3      	ldr	r3, [r4, #8]
 801189a:	bf0c      	ite	eq
 801189c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80118a0:	2500      	movne	r5, #0
 80118a2:	4293      	cmp	r3, r2
 80118a4:	bfc4      	itt	gt
 80118a6:	1a9b      	subgt	r3, r3, r2
 80118a8:	18ed      	addgt	r5, r5, r3
 80118aa:	2600      	movs	r6, #0
 80118ac:	341a      	adds	r4, #26
 80118ae:	42b5      	cmp	r5, r6
 80118b0:	d11a      	bne.n	80118e8 <_printf_common+0xc8>
 80118b2:	2000      	movs	r0, #0
 80118b4:	e008      	b.n	80118c8 <_printf_common+0xa8>
 80118b6:	2301      	movs	r3, #1
 80118b8:	4652      	mov	r2, sl
 80118ba:	4641      	mov	r1, r8
 80118bc:	4638      	mov	r0, r7
 80118be:	47c8      	blx	r9
 80118c0:	3001      	adds	r0, #1
 80118c2:	d103      	bne.n	80118cc <_printf_common+0xac>
 80118c4:	f04f 30ff 	mov.w	r0, #4294967295
 80118c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118cc:	3501      	adds	r5, #1
 80118ce:	e7c6      	b.n	801185e <_printf_common+0x3e>
 80118d0:	18e1      	adds	r1, r4, r3
 80118d2:	1c5a      	adds	r2, r3, #1
 80118d4:	2030      	movs	r0, #48	@ 0x30
 80118d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80118da:	4422      	add	r2, r4
 80118dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80118e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80118e4:	3302      	adds	r3, #2
 80118e6:	e7c7      	b.n	8011878 <_printf_common+0x58>
 80118e8:	2301      	movs	r3, #1
 80118ea:	4622      	mov	r2, r4
 80118ec:	4641      	mov	r1, r8
 80118ee:	4638      	mov	r0, r7
 80118f0:	47c8      	blx	r9
 80118f2:	3001      	adds	r0, #1
 80118f4:	d0e6      	beq.n	80118c4 <_printf_common+0xa4>
 80118f6:	3601      	adds	r6, #1
 80118f8:	e7d9      	b.n	80118ae <_printf_common+0x8e>
	...

080118fc <_printf_i>:
 80118fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011900:	7e0f      	ldrb	r7, [r1, #24]
 8011902:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011904:	2f78      	cmp	r7, #120	@ 0x78
 8011906:	4691      	mov	r9, r2
 8011908:	4680      	mov	r8, r0
 801190a:	460c      	mov	r4, r1
 801190c:	469a      	mov	sl, r3
 801190e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011912:	d807      	bhi.n	8011924 <_printf_i+0x28>
 8011914:	2f62      	cmp	r7, #98	@ 0x62
 8011916:	d80a      	bhi.n	801192e <_printf_i+0x32>
 8011918:	2f00      	cmp	r7, #0
 801191a:	f000 80d2 	beq.w	8011ac2 <_printf_i+0x1c6>
 801191e:	2f58      	cmp	r7, #88	@ 0x58
 8011920:	f000 80b9 	beq.w	8011a96 <_printf_i+0x19a>
 8011924:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011928:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801192c:	e03a      	b.n	80119a4 <_printf_i+0xa8>
 801192e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011932:	2b15      	cmp	r3, #21
 8011934:	d8f6      	bhi.n	8011924 <_printf_i+0x28>
 8011936:	a101      	add	r1, pc, #4	@ (adr r1, 801193c <_printf_i+0x40>)
 8011938:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801193c:	08011995 	.word	0x08011995
 8011940:	080119a9 	.word	0x080119a9
 8011944:	08011925 	.word	0x08011925
 8011948:	08011925 	.word	0x08011925
 801194c:	08011925 	.word	0x08011925
 8011950:	08011925 	.word	0x08011925
 8011954:	080119a9 	.word	0x080119a9
 8011958:	08011925 	.word	0x08011925
 801195c:	08011925 	.word	0x08011925
 8011960:	08011925 	.word	0x08011925
 8011964:	08011925 	.word	0x08011925
 8011968:	08011aa9 	.word	0x08011aa9
 801196c:	080119d3 	.word	0x080119d3
 8011970:	08011a63 	.word	0x08011a63
 8011974:	08011925 	.word	0x08011925
 8011978:	08011925 	.word	0x08011925
 801197c:	08011acb 	.word	0x08011acb
 8011980:	08011925 	.word	0x08011925
 8011984:	080119d3 	.word	0x080119d3
 8011988:	08011925 	.word	0x08011925
 801198c:	08011925 	.word	0x08011925
 8011990:	08011a6b 	.word	0x08011a6b
 8011994:	6833      	ldr	r3, [r6, #0]
 8011996:	1d1a      	adds	r2, r3, #4
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	6032      	str	r2, [r6, #0]
 801199c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80119a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80119a4:	2301      	movs	r3, #1
 80119a6:	e09d      	b.n	8011ae4 <_printf_i+0x1e8>
 80119a8:	6833      	ldr	r3, [r6, #0]
 80119aa:	6820      	ldr	r0, [r4, #0]
 80119ac:	1d19      	adds	r1, r3, #4
 80119ae:	6031      	str	r1, [r6, #0]
 80119b0:	0606      	lsls	r6, r0, #24
 80119b2:	d501      	bpl.n	80119b8 <_printf_i+0xbc>
 80119b4:	681d      	ldr	r5, [r3, #0]
 80119b6:	e003      	b.n	80119c0 <_printf_i+0xc4>
 80119b8:	0645      	lsls	r5, r0, #25
 80119ba:	d5fb      	bpl.n	80119b4 <_printf_i+0xb8>
 80119bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80119c0:	2d00      	cmp	r5, #0
 80119c2:	da03      	bge.n	80119cc <_printf_i+0xd0>
 80119c4:	232d      	movs	r3, #45	@ 0x2d
 80119c6:	426d      	negs	r5, r5
 80119c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80119cc:	4859      	ldr	r0, [pc, #356]	@ (8011b34 <_printf_i+0x238>)
 80119ce:	230a      	movs	r3, #10
 80119d0:	e011      	b.n	80119f6 <_printf_i+0xfa>
 80119d2:	6821      	ldr	r1, [r4, #0]
 80119d4:	6833      	ldr	r3, [r6, #0]
 80119d6:	0608      	lsls	r0, r1, #24
 80119d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80119dc:	d402      	bmi.n	80119e4 <_printf_i+0xe8>
 80119de:	0649      	lsls	r1, r1, #25
 80119e0:	bf48      	it	mi
 80119e2:	b2ad      	uxthmi	r5, r5
 80119e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80119e6:	4853      	ldr	r0, [pc, #332]	@ (8011b34 <_printf_i+0x238>)
 80119e8:	6033      	str	r3, [r6, #0]
 80119ea:	bf14      	ite	ne
 80119ec:	230a      	movne	r3, #10
 80119ee:	2308      	moveq	r3, #8
 80119f0:	2100      	movs	r1, #0
 80119f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80119f6:	6866      	ldr	r6, [r4, #4]
 80119f8:	60a6      	str	r6, [r4, #8]
 80119fa:	2e00      	cmp	r6, #0
 80119fc:	bfa2      	ittt	ge
 80119fe:	6821      	ldrge	r1, [r4, #0]
 8011a00:	f021 0104 	bicge.w	r1, r1, #4
 8011a04:	6021      	strge	r1, [r4, #0]
 8011a06:	b90d      	cbnz	r5, 8011a0c <_printf_i+0x110>
 8011a08:	2e00      	cmp	r6, #0
 8011a0a:	d04b      	beq.n	8011aa4 <_printf_i+0x1a8>
 8011a0c:	4616      	mov	r6, r2
 8011a0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8011a12:	fb03 5711 	mls	r7, r3, r1, r5
 8011a16:	5dc7      	ldrb	r7, [r0, r7]
 8011a18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011a1c:	462f      	mov	r7, r5
 8011a1e:	42bb      	cmp	r3, r7
 8011a20:	460d      	mov	r5, r1
 8011a22:	d9f4      	bls.n	8011a0e <_printf_i+0x112>
 8011a24:	2b08      	cmp	r3, #8
 8011a26:	d10b      	bne.n	8011a40 <_printf_i+0x144>
 8011a28:	6823      	ldr	r3, [r4, #0]
 8011a2a:	07df      	lsls	r7, r3, #31
 8011a2c:	d508      	bpl.n	8011a40 <_printf_i+0x144>
 8011a2e:	6923      	ldr	r3, [r4, #16]
 8011a30:	6861      	ldr	r1, [r4, #4]
 8011a32:	4299      	cmp	r1, r3
 8011a34:	bfde      	ittt	le
 8011a36:	2330      	movle	r3, #48	@ 0x30
 8011a38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011a3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011a40:	1b92      	subs	r2, r2, r6
 8011a42:	6122      	str	r2, [r4, #16]
 8011a44:	f8cd a000 	str.w	sl, [sp]
 8011a48:	464b      	mov	r3, r9
 8011a4a:	aa03      	add	r2, sp, #12
 8011a4c:	4621      	mov	r1, r4
 8011a4e:	4640      	mov	r0, r8
 8011a50:	f7ff fee6 	bl	8011820 <_printf_common>
 8011a54:	3001      	adds	r0, #1
 8011a56:	d14a      	bne.n	8011aee <_printf_i+0x1f2>
 8011a58:	f04f 30ff 	mov.w	r0, #4294967295
 8011a5c:	b004      	add	sp, #16
 8011a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a62:	6823      	ldr	r3, [r4, #0]
 8011a64:	f043 0320 	orr.w	r3, r3, #32
 8011a68:	6023      	str	r3, [r4, #0]
 8011a6a:	4833      	ldr	r0, [pc, #204]	@ (8011b38 <_printf_i+0x23c>)
 8011a6c:	2778      	movs	r7, #120	@ 0x78
 8011a6e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011a72:	6823      	ldr	r3, [r4, #0]
 8011a74:	6831      	ldr	r1, [r6, #0]
 8011a76:	061f      	lsls	r7, r3, #24
 8011a78:	f851 5b04 	ldr.w	r5, [r1], #4
 8011a7c:	d402      	bmi.n	8011a84 <_printf_i+0x188>
 8011a7e:	065f      	lsls	r7, r3, #25
 8011a80:	bf48      	it	mi
 8011a82:	b2ad      	uxthmi	r5, r5
 8011a84:	6031      	str	r1, [r6, #0]
 8011a86:	07d9      	lsls	r1, r3, #31
 8011a88:	bf44      	itt	mi
 8011a8a:	f043 0320 	orrmi.w	r3, r3, #32
 8011a8e:	6023      	strmi	r3, [r4, #0]
 8011a90:	b11d      	cbz	r5, 8011a9a <_printf_i+0x19e>
 8011a92:	2310      	movs	r3, #16
 8011a94:	e7ac      	b.n	80119f0 <_printf_i+0xf4>
 8011a96:	4827      	ldr	r0, [pc, #156]	@ (8011b34 <_printf_i+0x238>)
 8011a98:	e7e9      	b.n	8011a6e <_printf_i+0x172>
 8011a9a:	6823      	ldr	r3, [r4, #0]
 8011a9c:	f023 0320 	bic.w	r3, r3, #32
 8011aa0:	6023      	str	r3, [r4, #0]
 8011aa2:	e7f6      	b.n	8011a92 <_printf_i+0x196>
 8011aa4:	4616      	mov	r6, r2
 8011aa6:	e7bd      	b.n	8011a24 <_printf_i+0x128>
 8011aa8:	6833      	ldr	r3, [r6, #0]
 8011aaa:	6825      	ldr	r5, [r4, #0]
 8011aac:	6961      	ldr	r1, [r4, #20]
 8011aae:	1d18      	adds	r0, r3, #4
 8011ab0:	6030      	str	r0, [r6, #0]
 8011ab2:	062e      	lsls	r6, r5, #24
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	d501      	bpl.n	8011abc <_printf_i+0x1c0>
 8011ab8:	6019      	str	r1, [r3, #0]
 8011aba:	e002      	b.n	8011ac2 <_printf_i+0x1c6>
 8011abc:	0668      	lsls	r0, r5, #25
 8011abe:	d5fb      	bpl.n	8011ab8 <_printf_i+0x1bc>
 8011ac0:	8019      	strh	r1, [r3, #0]
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	6123      	str	r3, [r4, #16]
 8011ac6:	4616      	mov	r6, r2
 8011ac8:	e7bc      	b.n	8011a44 <_printf_i+0x148>
 8011aca:	6833      	ldr	r3, [r6, #0]
 8011acc:	1d1a      	adds	r2, r3, #4
 8011ace:	6032      	str	r2, [r6, #0]
 8011ad0:	681e      	ldr	r6, [r3, #0]
 8011ad2:	6862      	ldr	r2, [r4, #4]
 8011ad4:	2100      	movs	r1, #0
 8011ad6:	4630      	mov	r0, r6
 8011ad8:	f7ee fc02 	bl	80002e0 <memchr>
 8011adc:	b108      	cbz	r0, 8011ae2 <_printf_i+0x1e6>
 8011ade:	1b80      	subs	r0, r0, r6
 8011ae0:	6060      	str	r0, [r4, #4]
 8011ae2:	6863      	ldr	r3, [r4, #4]
 8011ae4:	6123      	str	r3, [r4, #16]
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011aec:	e7aa      	b.n	8011a44 <_printf_i+0x148>
 8011aee:	6923      	ldr	r3, [r4, #16]
 8011af0:	4632      	mov	r2, r6
 8011af2:	4649      	mov	r1, r9
 8011af4:	4640      	mov	r0, r8
 8011af6:	47d0      	blx	sl
 8011af8:	3001      	adds	r0, #1
 8011afa:	d0ad      	beq.n	8011a58 <_printf_i+0x15c>
 8011afc:	6823      	ldr	r3, [r4, #0]
 8011afe:	079b      	lsls	r3, r3, #30
 8011b00:	d413      	bmi.n	8011b2a <_printf_i+0x22e>
 8011b02:	68e0      	ldr	r0, [r4, #12]
 8011b04:	9b03      	ldr	r3, [sp, #12]
 8011b06:	4298      	cmp	r0, r3
 8011b08:	bfb8      	it	lt
 8011b0a:	4618      	movlt	r0, r3
 8011b0c:	e7a6      	b.n	8011a5c <_printf_i+0x160>
 8011b0e:	2301      	movs	r3, #1
 8011b10:	4632      	mov	r2, r6
 8011b12:	4649      	mov	r1, r9
 8011b14:	4640      	mov	r0, r8
 8011b16:	47d0      	blx	sl
 8011b18:	3001      	adds	r0, #1
 8011b1a:	d09d      	beq.n	8011a58 <_printf_i+0x15c>
 8011b1c:	3501      	adds	r5, #1
 8011b1e:	68e3      	ldr	r3, [r4, #12]
 8011b20:	9903      	ldr	r1, [sp, #12]
 8011b22:	1a5b      	subs	r3, r3, r1
 8011b24:	42ab      	cmp	r3, r5
 8011b26:	dcf2      	bgt.n	8011b0e <_printf_i+0x212>
 8011b28:	e7eb      	b.n	8011b02 <_printf_i+0x206>
 8011b2a:	2500      	movs	r5, #0
 8011b2c:	f104 0619 	add.w	r6, r4, #25
 8011b30:	e7f5      	b.n	8011b1e <_printf_i+0x222>
 8011b32:	bf00      	nop
 8011b34:	080129a5 	.word	0x080129a5
 8011b38:	080129b6 	.word	0x080129b6

08011b3c <__sflush_r>:
 8011b3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b44:	0716      	lsls	r6, r2, #28
 8011b46:	4605      	mov	r5, r0
 8011b48:	460c      	mov	r4, r1
 8011b4a:	d454      	bmi.n	8011bf6 <__sflush_r+0xba>
 8011b4c:	684b      	ldr	r3, [r1, #4]
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	dc02      	bgt.n	8011b58 <__sflush_r+0x1c>
 8011b52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	dd48      	ble.n	8011bea <__sflush_r+0xae>
 8011b58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011b5a:	2e00      	cmp	r6, #0
 8011b5c:	d045      	beq.n	8011bea <__sflush_r+0xae>
 8011b5e:	2300      	movs	r3, #0
 8011b60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011b64:	682f      	ldr	r7, [r5, #0]
 8011b66:	6a21      	ldr	r1, [r4, #32]
 8011b68:	602b      	str	r3, [r5, #0]
 8011b6a:	d030      	beq.n	8011bce <__sflush_r+0x92>
 8011b6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011b6e:	89a3      	ldrh	r3, [r4, #12]
 8011b70:	0759      	lsls	r1, r3, #29
 8011b72:	d505      	bpl.n	8011b80 <__sflush_r+0x44>
 8011b74:	6863      	ldr	r3, [r4, #4]
 8011b76:	1ad2      	subs	r2, r2, r3
 8011b78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011b7a:	b10b      	cbz	r3, 8011b80 <__sflush_r+0x44>
 8011b7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011b7e:	1ad2      	subs	r2, r2, r3
 8011b80:	2300      	movs	r3, #0
 8011b82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011b84:	6a21      	ldr	r1, [r4, #32]
 8011b86:	4628      	mov	r0, r5
 8011b88:	47b0      	blx	r6
 8011b8a:	1c43      	adds	r3, r0, #1
 8011b8c:	89a3      	ldrh	r3, [r4, #12]
 8011b8e:	d106      	bne.n	8011b9e <__sflush_r+0x62>
 8011b90:	6829      	ldr	r1, [r5, #0]
 8011b92:	291d      	cmp	r1, #29
 8011b94:	d82b      	bhi.n	8011bee <__sflush_r+0xb2>
 8011b96:	4a2a      	ldr	r2, [pc, #168]	@ (8011c40 <__sflush_r+0x104>)
 8011b98:	410a      	asrs	r2, r1
 8011b9a:	07d6      	lsls	r6, r2, #31
 8011b9c:	d427      	bmi.n	8011bee <__sflush_r+0xb2>
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	6062      	str	r2, [r4, #4]
 8011ba2:	04d9      	lsls	r1, r3, #19
 8011ba4:	6922      	ldr	r2, [r4, #16]
 8011ba6:	6022      	str	r2, [r4, #0]
 8011ba8:	d504      	bpl.n	8011bb4 <__sflush_r+0x78>
 8011baa:	1c42      	adds	r2, r0, #1
 8011bac:	d101      	bne.n	8011bb2 <__sflush_r+0x76>
 8011bae:	682b      	ldr	r3, [r5, #0]
 8011bb0:	b903      	cbnz	r3, 8011bb4 <__sflush_r+0x78>
 8011bb2:	6560      	str	r0, [r4, #84]	@ 0x54
 8011bb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011bb6:	602f      	str	r7, [r5, #0]
 8011bb8:	b1b9      	cbz	r1, 8011bea <__sflush_r+0xae>
 8011bba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011bbe:	4299      	cmp	r1, r3
 8011bc0:	d002      	beq.n	8011bc8 <__sflush_r+0x8c>
 8011bc2:	4628      	mov	r0, r5
 8011bc4:	f7ff fbf2 	bl	80113ac <_free_r>
 8011bc8:	2300      	movs	r3, #0
 8011bca:	6363      	str	r3, [r4, #52]	@ 0x34
 8011bcc:	e00d      	b.n	8011bea <__sflush_r+0xae>
 8011bce:	2301      	movs	r3, #1
 8011bd0:	4628      	mov	r0, r5
 8011bd2:	47b0      	blx	r6
 8011bd4:	4602      	mov	r2, r0
 8011bd6:	1c50      	adds	r0, r2, #1
 8011bd8:	d1c9      	bne.n	8011b6e <__sflush_r+0x32>
 8011bda:	682b      	ldr	r3, [r5, #0]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d0c6      	beq.n	8011b6e <__sflush_r+0x32>
 8011be0:	2b1d      	cmp	r3, #29
 8011be2:	d001      	beq.n	8011be8 <__sflush_r+0xac>
 8011be4:	2b16      	cmp	r3, #22
 8011be6:	d11e      	bne.n	8011c26 <__sflush_r+0xea>
 8011be8:	602f      	str	r7, [r5, #0]
 8011bea:	2000      	movs	r0, #0
 8011bec:	e022      	b.n	8011c34 <__sflush_r+0xf8>
 8011bee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011bf2:	b21b      	sxth	r3, r3
 8011bf4:	e01b      	b.n	8011c2e <__sflush_r+0xf2>
 8011bf6:	690f      	ldr	r7, [r1, #16]
 8011bf8:	2f00      	cmp	r7, #0
 8011bfa:	d0f6      	beq.n	8011bea <__sflush_r+0xae>
 8011bfc:	0793      	lsls	r3, r2, #30
 8011bfe:	680e      	ldr	r6, [r1, #0]
 8011c00:	bf08      	it	eq
 8011c02:	694b      	ldreq	r3, [r1, #20]
 8011c04:	600f      	str	r7, [r1, #0]
 8011c06:	bf18      	it	ne
 8011c08:	2300      	movne	r3, #0
 8011c0a:	eba6 0807 	sub.w	r8, r6, r7
 8011c0e:	608b      	str	r3, [r1, #8]
 8011c10:	f1b8 0f00 	cmp.w	r8, #0
 8011c14:	dde9      	ble.n	8011bea <__sflush_r+0xae>
 8011c16:	6a21      	ldr	r1, [r4, #32]
 8011c18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011c1a:	4643      	mov	r3, r8
 8011c1c:	463a      	mov	r2, r7
 8011c1e:	4628      	mov	r0, r5
 8011c20:	47b0      	blx	r6
 8011c22:	2800      	cmp	r0, #0
 8011c24:	dc08      	bgt.n	8011c38 <__sflush_r+0xfc>
 8011c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c2e:	81a3      	strh	r3, [r4, #12]
 8011c30:	f04f 30ff 	mov.w	r0, #4294967295
 8011c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c38:	4407      	add	r7, r0
 8011c3a:	eba8 0800 	sub.w	r8, r8, r0
 8011c3e:	e7e7      	b.n	8011c10 <__sflush_r+0xd4>
 8011c40:	dfbffffe 	.word	0xdfbffffe

08011c44 <_fflush_r>:
 8011c44:	b538      	push	{r3, r4, r5, lr}
 8011c46:	690b      	ldr	r3, [r1, #16]
 8011c48:	4605      	mov	r5, r0
 8011c4a:	460c      	mov	r4, r1
 8011c4c:	b913      	cbnz	r3, 8011c54 <_fflush_r+0x10>
 8011c4e:	2500      	movs	r5, #0
 8011c50:	4628      	mov	r0, r5
 8011c52:	bd38      	pop	{r3, r4, r5, pc}
 8011c54:	b118      	cbz	r0, 8011c5e <_fflush_r+0x1a>
 8011c56:	6a03      	ldr	r3, [r0, #32]
 8011c58:	b90b      	cbnz	r3, 8011c5e <_fflush_r+0x1a>
 8011c5a:	f7ff fa8b 	bl	8011174 <__sinit>
 8011c5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d0f3      	beq.n	8011c4e <_fflush_r+0xa>
 8011c66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011c68:	07d0      	lsls	r0, r2, #31
 8011c6a:	d404      	bmi.n	8011c76 <_fflush_r+0x32>
 8011c6c:	0599      	lsls	r1, r3, #22
 8011c6e:	d402      	bmi.n	8011c76 <_fflush_r+0x32>
 8011c70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011c72:	f7ff fb84 	bl	801137e <__retarget_lock_acquire_recursive>
 8011c76:	4628      	mov	r0, r5
 8011c78:	4621      	mov	r1, r4
 8011c7a:	f7ff ff5f 	bl	8011b3c <__sflush_r>
 8011c7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011c80:	07da      	lsls	r2, r3, #31
 8011c82:	4605      	mov	r5, r0
 8011c84:	d4e4      	bmi.n	8011c50 <_fflush_r+0xc>
 8011c86:	89a3      	ldrh	r3, [r4, #12]
 8011c88:	059b      	lsls	r3, r3, #22
 8011c8a:	d4e1      	bmi.n	8011c50 <_fflush_r+0xc>
 8011c8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011c8e:	f7ff fb77 	bl	8011380 <__retarget_lock_release_recursive>
 8011c92:	e7dd      	b.n	8011c50 <_fflush_r+0xc>

08011c94 <__swbuf_r>:
 8011c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c96:	460e      	mov	r6, r1
 8011c98:	4614      	mov	r4, r2
 8011c9a:	4605      	mov	r5, r0
 8011c9c:	b118      	cbz	r0, 8011ca6 <__swbuf_r+0x12>
 8011c9e:	6a03      	ldr	r3, [r0, #32]
 8011ca0:	b90b      	cbnz	r3, 8011ca6 <__swbuf_r+0x12>
 8011ca2:	f7ff fa67 	bl	8011174 <__sinit>
 8011ca6:	69a3      	ldr	r3, [r4, #24]
 8011ca8:	60a3      	str	r3, [r4, #8]
 8011caa:	89a3      	ldrh	r3, [r4, #12]
 8011cac:	071a      	lsls	r2, r3, #28
 8011cae:	d501      	bpl.n	8011cb4 <__swbuf_r+0x20>
 8011cb0:	6923      	ldr	r3, [r4, #16]
 8011cb2:	b943      	cbnz	r3, 8011cc6 <__swbuf_r+0x32>
 8011cb4:	4621      	mov	r1, r4
 8011cb6:	4628      	mov	r0, r5
 8011cb8:	f000 f82a 	bl	8011d10 <__swsetup_r>
 8011cbc:	b118      	cbz	r0, 8011cc6 <__swbuf_r+0x32>
 8011cbe:	f04f 37ff 	mov.w	r7, #4294967295
 8011cc2:	4638      	mov	r0, r7
 8011cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cc6:	6823      	ldr	r3, [r4, #0]
 8011cc8:	6922      	ldr	r2, [r4, #16]
 8011cca:	1a98      	subs	r0, r3, r2
 8011ccc:	6963      	ldr	r3, [r4, #20]
 8011cce:	b2f6      	uxtb	r6, r6
 8011cd0:	4283      	cmp	r3, r0
 8011cd2:	4637      	mov	r7, r6
 8011cd4:	dc05      	bgt.n	8011ce2 <__swbuf_r+0x4e>
 8011cd6:	4621      	mov	r1, r4
 8011cd8:	4628      	mov	r0, r5
 8011cda:	f7ff ffb3 	bl	8011c44 <_fflush_r>
 8011cde:	2800      	cmp	r0, #0
 8011ce0:	d1ed      	bne.n	8011cbe <__swbuf_r+0x2a>
 8011ce2:	68a3      	ldr	r3, [r4, #8]
 8011ce4:	3b01      	subs	r3, #1
 8011ce6:	60a3      	str	r3, [r4, #8]
 8011ce8:	6823      	ldr	r3, [r4, #0]
 8011cea:	1c5a      	adds	r2, r3, #1
 8011cec:	6022      	str	r2, [r4, #0]
 8011cee:	701e      	strb	r6, [r3, #0]
 8011cf0:	6962      	ldr	r2, [r4, #20]
 8011cf2:	1c43      	adds	r3, r0, #1
 8011cf4:	429a      	cmp	r2, r3
 8011cf6:	d004      	beq.n	8011d02 <__swbuf_r+0x6e>
 8011cf8:	89a3      	ldrh	r3, [r4, #12]
 8011cfa:	07db      	lsls	r3, r3, #31
 8011cfc:	d5e1      	bpl.n	8011cc2 <__swbuf_r+0x2e>
 8011cfe:	2e0a      	cmp	r6, #10
 8011d00:	d1df      	bne.n	8011cc2 <__swbuf_r+0x2e>
 8011d02:	4621      	mov	r1, r4
 8011d04:	4628      	mov	r0, r5
 8011d06:	f7ff ff9d 	bl	8011c44 <_fflush_r>
 8011d0a:	2800      	cmp	r0, #0
 8011d0c:	d0d9      	beq.n	8011cc2 <__swbuf_r+0x2e>
 8011d0e:	e7d6      	b.n	8011cbe <__swbuf_r+0x2a>

08011d10 <__swsetup_r>:
 8011d10:	b538      	push	{r3, r4, r5, lr}
 8011d12:	4b29      	ldr	r3, [pc, #164]	@ (8011db8 <__swsetup_r+0xa8>)
 8011d14:	4605      	mov	r5, r0
 8011d16:	6818      	ldr	r0, [r3, #0]
 8011d18:	460c      	mov	r4, r1
 8011d1a:	b118      	cbz	r0, 8011d24 <__swsetup_r+0x14>
 8011d1c:	6a03      	ldr	r3, [r0, #32]
 8011d1e:	b90b      	cbnz	r3, 8011d24 <__swsetup_r+0x14>
 8011d20:	f7ff fa28 	bl	8011174 <__sinit>
 8011d24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d28:	0719      	lsls	r1, r3, #28
 8011d2a:	d422      	bmi.n	8011d72 <__swsetup_r+0x62>
 8011d2c:	06da      	lsls	r2, r3, #27
 8011d2e:	d407      	bmi.n	8011d40 <__swsetup_r+0x30>
 8011d30:	2209      	movs	r2, #9
 8011d32:	602a      	str	r2, [r5, #0]
 8011d34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d38:	81a3      	strh	r3, [r4, #12]
 8011d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8011d3e:	e033      	b.n	8011da8 <__swsetup_r+0x98>
 8011d40:	0758      	lsls	r0, r3, #29
 8011d42:	d512      	bpl.n	8011d6a <__swsetup_r+0x5a>
 8011d44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011d46:	b141      	cbz	r1, 8011d5a <__swsetup_r+0x4a>
 8011d48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011d4c:	4299      	cmp	r1, r3
 8011d4e:	d002      	beq.n	8011d56 <__swsetup_r+0x46>
 8011d50:	4628      	mov	r0, r5
 8011d52:	f7ff fb2b 	bl	80113ac <_free_r>
 8011d56:	2300      	movs	r3, #0
 8011d58:	6363      	str	r3, [r4, #52]	@ 0x34
 8011d5a:	89a3      	ldrh	r3, [r4, #12]
 8011d5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011d60:	81a3      	strh	r3, [r4, #12]
 8011d62:	2300      	movs	r3, #0
 8011d64:	6063      	str	r3, [r4, #4]
 8011d66:	6923      	ldr	r3, [r4, #16]
 8011d68:	6023      	str	r3, [r4, #0]
 8011d6a:	89a3      	ldrh	r3, [r4, #12]
 8011d6c:	f043 0308 	orr.w	r3, r3, #8
 8011d70:	81a3      	strh	r3, [r4, #12]
 8011d72:	6923      	ldr	r3, [r4, #16]
 8011d74:	b94b      	cbnz	r3, 8011d8a <__swsetup_r+0x7a>
 8011d76:	89a3      	ldrh	r3, [r4, #12]
 8011d78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011d7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011d80:	d003      	beq.n	8011d8a <__swsetup_r+0x7a>
 8011d82:	4621      	mov	r1, r4
 8011d84:	4628      	mov	r0, r5
 8011d86:	f000 f893 	bl	8011eb0 <__smakebuf_r>
 8011d8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d8e:	f013 0201 	ands.w	r2, r3, #1
 8011d92:	d00a      	beq.n	8011daa <__swsetup_r+0x9a>
 8011d94:	2200      	movs	r2, #0
 8011d96:	60a2      	str	r2, [r4, #8]
 8011d98:	6962      	ldr	r2, [r4, #20]
 8011d9a:	4252      	negs	r2, r2
 8011d9c:	61a2      	str	r2, [r4, #24]
 8011d9e:	6922      	ldr	r2, [r4, #16]
 8011da0:	b942      	cbnz	r2, 8011db4 <__swsetup_r+0xa4>
 8011da2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011da6:	d1c5      	bne.n	8011d34 <__swsetup_r+0x24>
 8011da8:	bd38      	pop	{r3, r4, r5, pc}
 8011daa:	0799      	lsls	r1, r3, #30
 8011dac:	bf58      	it	pl
 8011dae:	6962      	ldrpl	r2, [r4, #20]
 8011db0:	60a2      	str	r2, [r4, #8]
 8011db2:	e7f4      	b.n	8011d9e <__swsetup_r+0x8e>
 8011db4:	2000      	movs	r0, #0
 8011db6:	e7f7      	b.n	8011da8 <__swsetup_r+0x98>
 8011db8:	24000098 	.word	0x24000098

08011dbc <_raise_r>:
 8011dbc:	291f      	cmp	r1, #31
 8011dbe:	b538      	push	{r3, r4, r5, lr}
 8011dc0:	4605      	mov	r5, r0
 8011dc2:	460c      	mov	r4, r1
 8011dc4:	d904      	bls.n	8011dd0 <_raise_r+0x14>
 8011dc6:	2316      	movs	r3, #22
 8011dc8:	6003      	str	r3, [r0, #0]
 8011dca:	f04f 30ff 	mov.w	r0, #4294967295
 8011dce:	bd38      	pop	{r3, r4, r5, pc}
 8011dd0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011dd2:	b112      	cbz	r2, 8011dda <_raise_r+0x1e>
 8011dd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011dd8:	b94b      	cbnz	r3, 8011dee <_raise_r+0x32>
 8011dda:	4628      	mov	r0, r5
 8011ddc:	f000 f830 	bl	8011e40 <_getpid_r>
 8011de0:	4622      	mov	r2, r4
 8011de2:	4601      	mov	r1, r0
 8011de4:	4628      	mov	r0, r5
 8011de6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011dea:	f000 b817 	b.w	8011e1c <_kill_r>
 8011dee:	2b01      	cmp	r3, #1
 8011df0:	d00a      	beq.n	8011e08 <_raise_r+0x4c>
 8011df2:	1c59      	adds	r1, r3, #1
 8011df4:	d103      	bne.n	8011dfe <_raise_r+0x42>
 8011df6:	2316      	movs	r3, #22
 8011df8:	6003      	str	r3, [r0, #0]
 8011dfa:	2001      	movs	r0, #1
 8011dfc:	e7e7      	b.n	8011dce <_raise_r+0x12>
 8011dfe:	2100      	movs	r1, #0
 8011e00:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011e04:	4620      	mov	r0, r4
 8011e06:	4798      	blx	r3
 8011e08:	2000      	movs	r0, #0
 8011e0a:	e7e0      	b.n	8011dce <_raise_r+0x12>

08011e0c <raise>:
 8011e0c:	4b02      	ldr	r3, [pc, #8]	@ (8011e18 <raise+0xc>)
 8011e0e:	4601      	mov	r1, r0
 8011e10:	6818      	ldr	r0, [r3, #0]
 8011e12:	f7ff bfd3 	b.w	8011dbc <_raise_r>
 8011e16:	bf00      	nop
 8011e18:	24000098 	.word	0x24000098

08011e1c <_kill_r>:
 8011e1c:	b538      	push	{r3, r4, r5, lr}
 8011e1e:	4d07      	ldr	r5, [pc, #28]	@ (8011e3c <_kill_r+0x20>)
 8011e20:	2300      	movs	r3, #0
 8011e22:	4604      	mov	r4, r0
 8011e24:	4608      	mov	r0, r1
 8011e26:	4611      	mov	r1, r2
 8011e28:	602b      	str	r3, [r5, #0]
 8011e2a:	f7ef fd21 	bl	8001870 <_kill>
 8011e2e:	1c43      	adds	r3, r0, #1
 8011e30:	d102      	bne.n	8011e38 <_kill_r+0x1c>
 8011e32:	682b      	ldr	r3, [r5, #0]
 8011e34:	b103      	cbz	r3, 8011e38 <_kill_r+0x1c>
 8011e36:	6023      	str	r3, [r4, #0]
 8011e38:	bd38      	pop	{r3, r4, r5, pc}
 8011e3a:	bf00      	nop
 8011e3c:	2400185c 	.word	0x2400185c

08011e40 <_getpid_r>:
 8011e40:	f7ef bd0e 	b.w	8001860 <_getpid>

08011e44 <_sbrk_r>:
 8011e44:	b538      	push	{r3, r4, r5, lr}
 8011e46:	4d06      	ldr	r5, [pc, #24]	@ (8011e60 <_sbrk_r+0x1c>)
 8011e48:	2300      	movs	r3, #0
 8011e4a:	4604      	mov	r4, r0
 8011e4c:	4608      	mov	r0, r1
 8011e4e:	602b      	str	r3, [r5, #0]
 8011e50:	f7ef fd96 	bl	8001980 <_sbrk>
 8011e54:	1c43      	adds	r3, r0, #1
 8011e56:	d102      	bne.n	8011e5e <_sbrk_r+0x1a>
 8011e58:	682b      	ldr	r3, [r5, #0]
 8011e5a:	b103      	cbz	r3, 8011e5e <_sbrk_r+0x1a>
 8011e5c:	6023      	str	r3, [r4, #0]
 8011e5e:	bd38      	pop	{r3, r4, r5, pc}
 8011e60:	2400185c 	.word	0x2400185c

08011e64 <__swhatbuf_r>:
 8011e64:	b570      	push	{r4, r5, r6, lr}
 8011e66:	460c      	mov	r4, r1
 8011e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e6c:	2900      	cmp	r1, #0
 8011e6e:	b096      	sub	sp, #88	@ 0x58
 8011e70:	4615      	mov	r5, r2
 8011e72:	461e      	mov	r6, r3
 8011e74:	da0d      	bge.n	8011e92 <__swhatbuf_r+0x2e>
 8011e76:	89a3      	ldrh	r3, [r4, #12]
 8011e78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011e7c:	f04f 0100 	mov.w	r1, #0
 8011e80:	bf14      	ite	ne
 8011e82:	2340      	movne	r3, #64	@ 0x40
 8011e84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011e88:	2000      	movs	r0, #0
 8011e8a:	6031      	str	r1, [r6, #0]
 8011e8c:	602b      	str	r3, [r5, #0]
 8011e8e:	b016      	add	sp, #88	@ 0x58
 8011e90:	bd70      	pop	{r4, r5, r6, pc}
 8011e92:	466a      	mov	r2, sp
 8011e94:	f000 f848 	bl	8011f28 <_fstat_r>
 8011e98:	2800      	cmp	r0, #0
 8011e9a:	dbec      	blt.n	8011e76 <__swhatbuf_r+0x12>
 8011e9c:	9901      	ldr	r1, [sp, #4]
 8011e9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011ea2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011ea6:	4259      	negs	r1, r3
 8011ea8:	4159      	adcs	r1, r3
 8011eaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011eae:	e7eb      	b.n	8011e88 <__swhatbuf_r+0x24>

08011eb0 <__smakebuf_r>:
 8011eb0:	898b      	ldrh	r3, [r1, #12]
 8011eb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011eb4:	079d      	lsls	r5, r3, #30
 8011eb6:	4606      	mov	r6, r0
 8011eb8:	460c      	mov	r4, r1
 8011eba:	d507      	bpl.n	8011ecc <__smakebuf_r+0x1c>
 8011ebc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011ec0:	6023      	str	r3, [r4, #0]
 8011ec2:	6123      	str	r3, [r4, #16]
 8011ec4:	2301      	movs	r3, #1
 8011ec6:	6163      	str	r3, [r4, #20]
 8011ec8:	b003      	add	sp, #12
 8011eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ecc:	ab01      	add	r3, sp, #4
 8011ece:	466a      	mov	r2, sp
 8011ed0:	f7ff ffc8 	bl	8011e64 <__swhatbuf_r>
 8011ed4:	9f00      	ldr	r7, [sp, #0]
 8011ed6:	4605      	mov	r5, r0
 8011ed8:	4639      	mov	r1, r7
 8011eda:	4630      	mov	r0, r6
 8011edc:	f7ff fad2 	bl	8011484 <_malloc_r>
 8011ee0:	b948      	cbnz	r0, 8011ef6 <__smakebuf_r+0x46>
 8011ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ee6:	059a      	lsls	r2, r3, #22
 8011ee8:	d4ee      	bmi.n	8011ec8 <__smakebuf_r+0x18>
 8011eea:	f023 0303 	bic.w	r3, r3, #3
 8011eee:	f043 0302 	orr.w	r3, r3, #2
 8011ef2:	81a3      	strh	r3, [r4, #12]
 8011ef4:	e7e2      	b.n	8011ebc <__smakebuf_r+0xc>
 8011ef6:	89a3      	ldrh	r3, [r4, #12]
 8011ef8:	6020      	str	r0, [r4, #0]
 8011efa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011efe:	81a3      	strh	r3, [r4, #12]
 8011f00:	9b01      	ldr	r3, [sp, #4]
 8011f02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011f06:	b15b      	cbz	r3, 8011f20 <__smakebuf_r+0x70>
 8011f08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f0c:	4630      	mov	r0, r6
 8011f0e:	f000 f81d 	bl	8011f4c <_isatty_r>
 8011f12:	b128      	cbz	r0, 8011f20 <__smakebuf_r+0x70>
 8011f14:	89a3      	ldrh	r3, [r4, #12]
 8011f16:	f023 0303 	bic.w	r3, r3, #3
 8011f1a:	f043 0301 	orr.w	r3, r3, #1
 8011f1e:	81a3      	strh	r3, [r4, #12]
 8011f20:	89a3      	ldrh	r3, [r4, #12]
 8011f22:	431d      	orrs	r5, r3
 8011f24:	81a5      	strh	r5, [r4, #12]
 8011f26:	e7cf      	b.n	8011ec8 <__smakebuf_r+0x18>

08011f28 <_fstat_r>:
 8011f28:	b538      	push	{r3, r4, r5, lr}
 8011f2a:	4d07      	ldr	r5, [pc, #28]	@ (8011f48 <_fstat_r+0x20>)
 8011f2c:	2300      	movs	r3, #0
 8011f2e:	4604      	mov	r4, r0
 8011f30:	4608      	mov	r0, r1
 8011f32:	4611      	mov	r1, r2
 8011f34:	602b      	str	r3, [r5, #0]
 8011f36:	f7ef fcfb 	bl	8001930 <_fstat>
 8011f3a:	1c43      	adds	r3, r0, #1
 8011f3c:	d102      	bne.n	8011f44 <_fstat_r+0x1c>
 8011f3e:	682b      	ldr	r3, [r5, #0]
 8011f40:	b103      	cbz	r3, 8011f44 <_fstat_r+0x1c>
 8011f42:	6023      	str	r3, [r4, #0]
 8011f44:	bd38      	pop	{r3, r4, r5, pc}
 8011f46:	bf00      	nop
 8011f48:	2400185c 	.word	0x2400185c

08011f4c <_isatty_r>:
 8011f4c:	b538      	push	{r3, r4, r5, lr}
 8011f4e:	4d06      	ldr	r5, [pc, #24]	@ (8011f68 <_isatty_r+0x1c>)
 8011f50:	2300      	movs	r3, #0
 8011f52:	4604      	mov	r4, r0
 8011f54:	4608      	mov	r0, r1
 8011f56:	602b      	str	r3, [r5, #0]
 8011f58:	f7ef fcfa 	bl	8001950 <_isatty>
 8011f5c:	1c43      	adds	r3, r0, #1
 8011f5e:	d102      	bne.n	8011f66 <_isatty_r+0x1a>
 8011f60:	682b      	ldr	r3, [r5, #0]
 8011f62:	b103      	cbz	r3, 8011f66 <_isatty_r+0x1a>
 8011f64:	6023      	str	r3, [r4, #0]
 8011f66:	bd38      	pop	{r3, r4, r5, pc}
 8011f68:	2400185c 	.word	0x2400185c

08011f6c <_init>:
 8011f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f6e:	bf00      	nop
 8011f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f72:	bc08      	pop	{r3}
 8011f74:	469e      	mov	lr, r3
 8011f76:	4770      	bx	lr

08011f78 <_fini>:
 8011f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f7a:	bf00      	nop
 8011f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f7e:	bc08      	pop	{r3}
 8011f80:	469e      	mov	lr, r3
 8011f82:	4770      	bx	lr
